{
    "version": "https://jsonfeed.org/version/1",
    "title": "S1m • All posts by \"icoding答案\" tag",
    "description": "博客记录个人学习笔记,处于不断完善中",
    "home_page_url": "https://github.com/YogMas/YogMas.github.io",
    "items": [
        {
            "id": "https://github.com/YogMas/YogMas.github.io/2021/11/18/dian-ke-icoding/",
            "url": "https://github.com/YogMas/YogMas.github.io/2021/11/18/dian-ke-icoding/",
            "title": "电科icoding答案",
            "date_published": "2021-11-17T16:00:00.000Z",
            "content_html": "<h1 id=\"c语言-icoding答案\"><a class=\"markdownIt-Anchor\" href=\"#c语言-icoding答案\">#</a> C 语言 - icoding 答案</h1>\n<h2 id=\"the-article-made-by-yogmas\"><a class=\"markdownIt-Anchor\" href=\"#the-article-made-by-yogmas\">#</a> The article made by YogMas</h2>\n<h3 id=\"实验一\"><a class=\"markdownIt-Anchor\" href=\"#实验一\">#</a> 实验一</h3>\n<h4 id=\"2-4计算税金\"><a class=\"markdownIt-Anchor\" href=\"#2-4计算税金\">#</a> 2-4：计算税金</h4>\n<p>编写⼀个程序，要求⽤户输⼊⼀个美元数量，然后显示出增加 5% 税率后的相应⾦额。</p>\n<p>Enter an amount: 100.00<br>\nwith tax added: $105.00</p>\n<p>输⼊的⾦额为⼤于 0 的两位数浮点数</p>\n<blockquote>\n<pre><code><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">float</span> amount<span class=\"token punctuation\">,</span>final<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter an amount:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%f\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 获取用户的输入的的输入输入输入</span>\n    final <span class=\"token operator\">=</span> amount <span class=\"token operator\">*</span> <span class=\"token number\">1.05</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"get the final money:$%.2f\"</span><span class=\"token punctuation\">,</span>final<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</code></pre>\n</blockquote>\n<h4 id=\"2-7计算账单\"><a class=\"markdownIt-Anchor\" href=\"#2-7计算账单\">#</a> 2-7：计算账单</h4>\n<p>编写⼀个程序，要求⽤户输出⼀个美元数量，然后显示出如何⽤最少 20 美元、10 美元、5 美元和 1 美元来付款。</p>\n<p>Enter a dollar amount: 93<br>\n$20 bills: 4<br>\n$10 bills: 1<br>\n$5 bills: 0<br>\n$1 bills: 3</p>\n<blockquote>\n<pre><code><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> one<span class=\"token punctuation\">,</span>two<span class=\"token punctuation\">,</span>three<span class=\"token punctuation\">,</span>four<span class=\"token punctuation\">,</span>five<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"enter an amount:  \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>one<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ntwo <span class=\"token operator\">=</span> one <span class=\"token operator\">/</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\nthree <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>one <span class=\"token operator\">-</span> two<span class=\"token operator\">*</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\nfour <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>one<span class=\"token operator\">-</span>two<span class=\"token operator\">*</span><span class=\"token number\">20</span><span class=\"token operator\">-</span>three<span class=\"token operator\">*</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\nfive <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>one<span class=\"token operator\">-</span>two<span class=\"token operator\">*</span><span class=\"token number\">20</span><span class=\"token operator\">-</span>three<span class=\"token operator\">*</span><span class=\"token number\">10</span><span class=\"token operator\">-</span>four<span class=\"token operator\">*</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"this is $20 bills:%d,$10 bills:%d,$5bills %d,$1 bills %d\"</span><span class=\"token punctuation\">,</span>two<span class=\"token punctuation\">,</span>three<span class=\"token punctuation\">,</span>four<span class=\"token punctuation\">,</span>five<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</code></pre>\n</blockquote>\n<h4 id=\"2-8还贷计算\"><a class=\"markdownIt-Anchor\" href=\"#2-8还贷计算\">#</a> 2-8：还贷计算</h4>\n<p>编程计算第⼀、第⼆、第三个⽉还贷后剩余的贷款⾦额。</p>\n<p>Enter amout of loan: 20000.00<br>\nEnter interest rate: 6.0<br>\nEnter monthly payment: 386.66</p>\n<p>Balance remaining after first payment: $19713.34<br>\nBalance remaining after second payment: $19425.25<br>\nBalance remaining after third payment: $19135.71</p>\n<p>提示：每个月的贷款余额减去还款金额后，还需要加上贷款余额与月利率的乘积。月利率的计算方法是把用户输入的利率转换成百分数再除以 12。</p>\n<blockquote>\n<pre><code><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">float</span> loan<span class=\"token punctuation\">,</span>rate1<span class=\"token punctuation\">,</span>rate2<span class=\"token punctuation\">,</span>payment<span class=\"token punctuation\">,</span>one<span class=\"token punctuation\">,</span>two<span class=\"token punctuation\">,</span>three<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"please enter ur loan: \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%f\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>loan<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"please enter ur rate: \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%f\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>rate1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"please enter ur monthly payment: \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%f\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>payment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    rate2<span class=\"token operator\">=</span>rate1<span class=\"token operator\">*</span><span class=\"token number\">0.01</span><span class=\"token operator\">/</span><span class=\"token number\">12</span><span class=\"token punctuation\">;</span>\n    one<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>loan<span class=\"token operator\">-</span>payment<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>loan<span class=\"token operator\">*</span>rate2<span class=\"token punctuation\">;</span>\n    two<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>one<span class=\"token operator\">-</span>payment<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>one<span class=\"token operator\">*</span>rate2<span class=\"token punctuation\">;</span>\n    three<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>two<span class=\"token operator\">-</span>payment<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>two<span class=\"token operator\">*</span>rate2<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"this is ur Balance remaining after first payment:%.2f,second:%.2f,third:%.2f\"</span><span class=\"token punctuation\">,</span>one<span class=\"token punctuation\">,</span>two<span class=\"token punctuation\">,</span>three<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</code></pre>\n</blockquote>\n<h4 id=\"3-1日期格式转化\"><a class=\"markdownIt-Anchor\" href=\"#3-1日期格式转化\">#</a> 3-1：⽇期格式转化</h4>\n<p>编写⼀个程序，以⽉ / ⽇ / 年（即 mm/dd/yy）的格式接受⽤户录⼊的⽇期信息，并以年⽉⽇（即 yyyymmdd）的格式将其显示出来。</p>\n<p>Enter a date (mm/dd/yyyy): 2/17/2011<br>\nYou entered the date 20110217</p>\n<blockquote>\n<pre><code><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> year<span class=\"token punctuation\">,</span>month<span class=\"token punctuation\">,</span>day<span class=\"token punctuation\">;</span>    \n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"please enter the date: .\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d/%d/%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>month<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>day<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>year<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"this is the date:%04d%02d%02d\"</span><span class=\"token punctuation\">,</span>year<span class=\"token punctuation\">,</span>month<span class=\"token punctuation\">,</span>day<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</code></pre>\n</blockquote>\n<h4 id=\"3-6分数加法\"><a class=\"markdownIt-Anchor\" href=\"#3-6分数加法\">#</a> 3-6：分数加法</h4>\n<p>修改如下程序（ 3.2 节的 addfrac.c ），使⽤户可以同时输⼊两个分数，中间⽤加号隔开：</p>\n<p>Enter two fractions separated by a plus sign: 5/6+3/4<br>\nThe sum is 38/24</p>\n<blockquote>\n<pre><code><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> fenzi1<span class=\"token punctuation\">,</span>fenzi2<span class=\"token punctuation\">,</span>fenmu1<span class=\"token punctuation\">,</span>fenmu2<span class=\"token punctuation\">,</span>sum1<span class=\"token punctuation\">,</span>sum2<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"please enter the  fractions: \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d/%d+%d/%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>fenzi1<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>fenmu1<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>fenzi2<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>fenmu2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    sum1<span class=\"token operator\">=</span>fenzi1<span class=\"token operator\">*</span>fenmu2<span class=\"token operator\">+</span>fenzi2<span class=\"token operator\">*</span>fenmu1<span class=\"token punctuation\">;</span>\n    sum2<span class=\"token operator\">=</span>fenmu1<span class=\"token operator\">*</span>fenmu2<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"this is the sum:%d/%d\"</span><span class=\"token punctuation\">,</span>sum1<span class=\"token punctuation\">,</span>sum2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</code></pre>\n</blockquote>\n<h3 id=\"实验二\"><a class=\"markdownIt-Anchor\" href=\"#实验二\">#</a> 实验二</h3>\n<h4 id=\"5-2-24小时制-12小时制转换\"><a class=\"markdownIt-Anchor\" href=\"#5-2-24小时制-12小时制转换\">#</a> 5-2： 24 ⼩时制 - 12 ⼩时制转换</h4>\n<p>编写⼀个程序，要求⽤户输⼊ 24 ⼩时制的时间，将其转换为 12 ⼩时制的格式。</p>\n<p>Enter a 24-hour time: 21:11<br>\nEquivalent 12-hour time: 9:11 PM</p>\n<p>Enter a 24-hour time: 0:01<br>\nEquivalent 12-hour time: 12:01 AM</p>\n<p>注意，不要把 12:00 显示为 0:00。</p>\n<blockquote>\n<pre><code><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> enter1<span class=\"token punctuation\">,</span>enter2<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"please enter the time  \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d:%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>enter1<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>enter2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    b<span class=\"token operator\">=</span>enter1<span class=\"token operator\">-</span><span class=\"token number\">12</span><span class=\"token punctuation\">;</span>\n    c<span class=\"token operator\">=</span>enter1<span class=\"token operator\">+</span><span class=\"token number\">12</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token operator\">&lt;</span>enter1<span class=\"token operator\">&amp;&amp;</span>enter1<span class=\"token operator\">&lt;</span><span class=\"token number\">24</span><span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"this is ur time:%d:%d PM\\n\"</span><span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>enter2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token operator\">&lt;</span>enter1<span class=\"token operator\">&amp;&amp;</span>enter1<span class=\"token operator\">&lt;</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"this is ur time: %d:%d AM\\n\"</span><span class=\"token punctuation\">,</span>enter1<span class=\"token punctuation\">,</span>enter2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>enter1<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"this is ur time: %d:%d AM\\n\"</span><span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">,</span>enter2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>enter1<span class=\"token operator\">==</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"this is ur timer :  %d:%d PM\\n\"</span><span class=\"token punctuation\">,</span>enter1<span class=\"token punctuation\">,</span>enter2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span>\n\n\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</code></pre>\n</blockquote>\n<h4 id=\"5-4-速等级与描述\"><a class=\"markdownIt-Anchor\" href=\"#5-4-速等级与描述\">#</a> 5-4： ⻛速等级与描述</h4>\n<p>下⾯是⽤于测量⻛⼒的蒲福⻛⼒等级的简化版，编写⼀个程序，要求⽤户输⼊⻛速（海⾥ / ⼩时），然后显示相应的描述。</p>\n<p>速率（海⾥ / ⼩时）\t描述<br>\n⼩于 1\tCalm（⽆⻛）<br>\n1~3\tLight air（轻⻛）<br>\n4~27\tBreeze（微⻛）<br>\n28~47\tGale（⼤⻛）<br>\n48~63\tStorm（暴⻛）<br>\n⼤于 63\tHurricane（飓⻛）<br>\n输出范例：Enter a wind speed: 1</p>\n<p>Light air</p>\n<p>Enter a wind speed: 27</p>\n<p>Breeze</p>\n<blockquote>\n<pre><code><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> speed<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"please enter ur wind speed \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>speed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>speed<span class=\"token operator\">&lt;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Calm\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>speed<span class=\"token operator\">&gt;=</span><span class=\"token number\">1</span><span class=\"token operator\">&amp;&amp;</span>speed<span class=\"token operator\">&lt;=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Light air\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>speed<span class=\"token operator\">&gt;=</span><span class=\"token number\">4</span><span class=\"token operator\">&amp;&amp;</span>speed<span class=\"token operator\">&lt;=</span><span class=\"token number\">27</span><span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Breeze\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>speed<span class=\"token operator\">&gt;=</span><span class=\"token number\">28</span><span class=\"token operator\">&amp;&amp;</span>speed<span class=\"token operator\">&lt;=</span><span class=\"token number\">47</span><span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Gale\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>speed<span class=\"token operator\">&gt;=</span><span class=\"token number\">48</span><span class=\"token operator\">&amp;&amp;</span>speed<span class=\"token operator\">&lt;=</span><span class=\"token number\">63</span><span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Storm\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>speed<span class=\"token operator\">&gt;</span><span class=\"token number\">63</span><span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hurricane\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</code></pre>\n</blockquote>\n<h4 id=\"5-6通用产品代码\"><a class=\"markdownIt-Anchor\" href=\"#5-6通用产品代码\">#</a> 5-6：通⽤产品代码</h4>\n<p>修改如下（4.1 节的 upc.c）程序，使其可以检测 UPC 的有效性。在⽤户输⼊ UPC 后，程序将输出 VALID 或 NOT VALID 。</p>\n<p>输出范例：</p>\n<p>Enter the first (single) digit: 0<br>\nEnter first group of five digits: 13800<br>\nEnter second group of five digits: 15173<br>\nEnter the last (single) digit: 5<br>\nVALID</p>\n<p>Enter the first (single) digit: 0<br>\nEnter first group of five digits: 51500<br>\nEnter second group of five digits: 24128<br>\nEnter the last (single) digit: 7<br>\nNOT VALID</p>\n<blockquote>\n<pre><code><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> d<span class=\"token punctuation\">,</span> i1<span class=\"token punctuation\">,</span> i2<span class=\"token punctuation\">,</span> i3<span class=\"token punctuation\">,</span> i4<span class=\"token punctuation\">,</span> i5<span class=\"token punctuation\">,</span> j1<span class=\"token punctuation\">,</span> j2<span class=\"token punctuation\">,</span> j3<span class=\"token punctuation\">,</span> j4<span class=\"token punctuation\">,</span> j5<span class=\"token punctuation\">,</span> first_sum<span class=\"token punctuation\">,</span> second_sum<span class=\"token punctuation\">,</span> total<span class=\"token punctuation\">,</span> total2<span class=\"token punctuation\">,</span> g<span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter the first (single) digit: \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%1d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter the first group of five digits: \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%1d%1d%1d%1d%1d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>i1<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>i2<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>i3<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>i4<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>i5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter the second group of five digits: \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%1d%1d%1d%1d%1d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>j1<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>j2<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>j3<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>j4<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>j5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"please Enter the last (single) digit:   \\n \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>g<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nfirst_sum <span class=\"token operator\">=</span> d <span class=\"token operator\">+</span> i2 <span class=\"token operator\">+</span> i4 <span class=\"token operator\">+</span> j1 <span class=\"token operator\">+</span> j3 <span class=\"token operator\">+</span> j5<span class=\"token punctuation\">;</span>\nsecond_sum <span class=\"token operator\">=</span> i1 <span class=\"token operator\">+</span> i3 <span class=\"token operator\">+</span> i5 <span class=\"token operator\">+</span> j2 <span class=\"token operator\">+</span> j4<span class=\"token punctuation\">;</span>\ntotal <span class=\"token operator\">=</span> <span class=\"token number\">3</span> <span class=\"token operator\">*</span> first_sum <span class=\"token operator\">+</span> second_sum<span class=\"token punctuation\">;</span>\ntotal2 <span class=\"token operator\">=</span> <span class=\"token number\">9</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>total <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>g <span class=\"token operator\">==</span> total2<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"VALID \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">else</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"NOT VALID  \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</code></pre>\n</blockquote>\n<h4 id=\"5-10将百分制转换为等级制\"><a class=\"markdownIt-Anchor\" href=\"#5-10将百分制转换为等级制\">#</a> 5-10：将百分制转换为等级制</h4>\n<p>利⽤ switch 语句编写⼀个程序，把⽤数字表示的成绩转化为字⺟表示的等级。</p>\n<p>使⽤下⾯的等级评定规则：A 为 90<sub>100，B 为 80</sub>89，C 为 70<sub>79，D 为 60</sub>69，F 为 0~59。如果成绩⾼于 100 或低于 0 显示出错信息。</p>\n<p>输出范例：<br>\nEnter numerical grade: 84<br>\nLetter grade: B</p>\n<p>Enter numerical grade: -1<br>\nError, grade must be between 0 and 100.</p>\n<p>提示：把成绩拆分成 2 个数字，然后使⽤ switch 语句判定⼗位上的数字。</p>\n<blockquote>\n<pre><code><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> grade1<span class=\"token punctuation\">,</span> grade2<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"please enter ur numerical grade   \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>grade1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    grade2 <span class=\"token operator\">=</span> grade1 <span class=\"token operator\">/</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">10</span> <span class=\"token operator\">&lt;</span> grade1 <span class=\"token operator\">&amp;&amp;</span> grade1 <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error, grade must be between 0 and 100.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span>\n\n​    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">100</span> <span class=\"token operator\">&lt;</span> grade1 <span class=\"token operator\">&amp;&amp;</span> grade1 <span class=\"token operator\">&lt;</span> <span class=\"token number\">110</span><span class=\"token punctuation\">)</span>\n​    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error, grade must be between 0 and 100.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">else</span>\n​    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>grade2<span class=\"token punctuation\">)</span>\n​    <span class=\"token punctuation\">{</span>\n​    <span class=\"token keyword\">case</span> <span class=\"token number\">10</span><span class=\"token operator\">:</span>\n​    <span class=\"token keyword\">case</span> <span class=\"token number\">9</span><span class=\"token operator\">:</span>\n​        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Letter grade: A \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n​        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n​    <span class=\"token keyword\">case</span> <span class=\"token number\">8</span><span class=\"token operator\">:</span>\n​        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Letter grade: B \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n​        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n​    <span class=\"token keyword\">case</span> <span class=\"token number\">7</span><span class=\"token operator\">:</span>\n​        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Letter grade: C \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n​        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n​    <span class=\"token keyword\">case</span> <span class=\"token number\">6</span><span class=\"token operator\">:</span>\n​        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Letter grade: D \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n​        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n​    <span class=\"token keyword\">case</span> <span class=\"token number\">5</span><span class=\"token operator\">:</span>\n​    <span class=\"token keyword\">case</span> <span class=\"token number\">4</span><span class=\"token operator\">:</span>\n​    <span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token operator\">:</span>\n​    <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span>\n​    <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span>\n​    <span class=\"token keyword\">case</span> <span class=\"token number\">0</span><span class=\"token operator\">:</span>\n​        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Letter grade: F \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n​        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n​    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n​        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error, grade must be between 0 and 100.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n​    <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</code></pre>\n</blockquote>\n<h4 id=\"6-2最大公约数\"><a class=\"markdownIt-Anchor\" href=\"#6-2最大公约数\">#</a> 6-2：最⼤公约数</h4>\n<p>编写程序，要求⽤户输⼊两个整数，然后计算这两个整数的最⼤公约数（GCD, Greatest Common Divisor）。</p>\n<p>输出范例：</p>\n<p>Enter two integers: 12 28<br>\nGreatest common divisor: 4</p>\n<p>Enter two integers：1 9<br>\nGreatest common divisor：1</p>\n<p>提示：求最⼤公约数的经典算法 Euclid 算法如下：<br>\n分别让变量 m 和 n 存储两个整数。如果 n 为 0，那么停⽌操作，m 中的值是 GCD ；否则计算 m 除以 n 的余数，把 n 保存到 m 中，并把余数保存到 n 中；重复上述操作，每次都先判断 n 是否为 0 。</p>\n<blockquote>\n<pre><code><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"please Enter two integers:     \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m <span class=\"token operator\">&gt;=</span> n<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            s <span class=\"token operator\">=</span> m <span class=\"token operator\">%</span> n<span class=\"token punctuation\">;</span>\n            m <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n            n <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span>\n        <span class=\"token punctuation\">{</span>\n            l <span class=\"token operator\">=</span> m<span class=\"token punctuation\">;</span>\n            m <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n            n <span class=\"token operator\">=</span> l<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GCD=%d\"</span><span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</code></pre>\n</blockquote>\n<h4 id=\"6-4股经纪人的佣金\"><a class=\"markdownIt-Anchor\" href=\"#6-4股经纪人的佣金\">#</a> 6-4：股经纪⼈的佣⾦</h4>\n<p>在下列程序（ 5.2 节的 broker.c ）中添加循环，以便⽤户可以输⼊多笔交易并且程序可以计算每次的佣⾦。程序在⽤户输⼊的交易额为 0 时终⽌。</p>\n<p>输出范例：</p>\n<p>Enter value of trade: 30000<br>\nCommission：$166.00</p>\n<p>Enter value of trade: 20000<br>\nCommission：$144.00<br>\nEnter value of trade: 0</p>\n<blockquote>\n<pre><code><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">float</span> commission<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter value of trade: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%f\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">&lt;</span> <span class=\"token number\">2500.00f</span><span class=\"token punctuation\">)</span>\n        commission <span class=\"token operator\">=</span> <span class=\"token number\">30.00f</span> <span class=\"token operator\">+</span> <span class=\"token number\">.017f</span> <span class=\"token operator\">*</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">&lt;</span> <span class=\"token number\">6250.00f</span><span class=\"token punctuation\">)</span>\n        commission <span class=\"token operator\">=</span> <span class=\"token number\">56.00f</span> <span class=\"token operator\">+</span> <span class=\"token number\">.0066f</span> <span class=\"token operator\">*</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">&lt;</span> <span class=\"token number\">20000.00f</span><span class=\"token punctuation\">)</span>\n        commission <span class=\"token operator\">=</span> <span class=\"token number\">76.00f</span> <span class=\"token operator\">+</span> <span class=\"token number\">.0034f</span> <span class=\"token operator\">*</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">&lt;</span> <span class=\"token number\">50000.00f</span><span class=\"token punctuation\">)</span>\n        commission <span class=\"token operator\">=</span> <span class=\"token number\">100.00f</span> <span class=\"token operator\">+</span> <span class=\"token number\">.0022f</span> <span class=\"token operator\">*</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">&lt;</span> <span class=\"token number\">500000.00f</span><span class=\"token punctuation\">)</span>\n        commission <span class=\"token operator\">=</span> <span class=\"token number\">155.00f</span> <span class=\"token operator\">+</span> <span class=\"token number\">.0011f</span> <span class=\"token operator\">*</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span>\n        commission <span class=\"token operator\">=</span> <span class=\"token number\">255.00f</span> <span class=\"token operator\">+</span> <span class=\"token number\">.0009f</span> <span class=\"token operator\">*</span> value<span class=\"token punctuation\">;</span>\n\n​    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>commission <span class=\"token operator\">&lt;</span> <span class=\"token number\">39.00f</span><span class=\"token punctuation\">)</span>\n​        commission <span class=\"token operator\">=</span> <span class=\"token number\">39.00f</span><span class=\"token punctuation\">;</span>\n\n​    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Commission: $%.2f\\n\\n\"</span><span class=\"token punctuation\">,</span> commission<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n​    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter value of trade: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n​    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%f\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</code></pre>\n</blockquote>\n<h4 id=\"6-6偶数平方\"><a class=\"markdownIt-Anchor\" href=\"#6-6偶数平方\">#</a> 6-6：偶数平⽅</h4>\n<p>编写程序，提示⽤户输⼊⼀个数 n，然后显示出 1~n 的所有偶数的平⽅值。</p>\n<p>输出范例：<br>\nEnter a number: 100<br>\n4<br>\n16<br>\n36<br>\n64<br>\n100</p>\n<p>Enter a number: 50<br>\n4<br>\n16<br>\n36</p>\n<blockquote>\n<pre><code><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"please enter a number:  \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> a <span class=\"token operator\">*</span> a <span class=\"token operator\">&lt;=</span> i<span class=\"token punctuation\">;</span> a <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        b <span class=\"token operator\">=</span> a <span class=\"token operator\">*</span> a<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \\n\"</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</code></pre>\n</blockquote>\n<h4 id=\"6-8日历\"><a class=\"markdownIt-Anchor\" href=\"#6-8日历\">#</a> 6-8：日历</h4>\n<p>编写程序显示单⽉的⽇历。⽤户指定这个⽉的天数和该⽉起始⽇是星期⼏。</p>\n<p>输出范例：</p>\n<p>Enter number of days in month: 31</p>\n<p>Enter starting day of the week(1=Sun, 7=Sat): 3</p>\n<p>日\t一\t二\t三\t四\t五\t六<br>\n 1\t2\t 3\t 4\t 5<br>\n6\t 7\t 8\t 9\t10\t11\t12<br>\n13\t14\t15\t16\t17\t18\t19<br>\n20\t21\t22\t23\t24\t25\t26<br>\n27\t28\t29\t30\t31</p>\n<blockquote>\n<pre><code><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter number of days in month: \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter starting day of the week(1=Sun, 7=Sat) \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Su Mo Tu We Th Fr Sa \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> c <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">;</span> c<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"   \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> a<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%2d \"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        d <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> b <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>d <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</code></pre>\n</blockquote>\n<h3 id=\"实验三\"><a class=\"markdownIt-Anchor\" href=\"#实验三\">#</a> 实验三</h3>\n<h4 id=\"7-4翻译\"><a class=\"markdownIt-Anchor\" href=\"#7-4翻译\">#</a> 7-4：翻译</h4>\n<p>编写程序可以把字⺟格式的电话号码翻译成数值格式：</p>\n<p>Enter phone number: CALLATT</p>\n<p>2255288</p>\n<p>如果没有电话在身边，参考这⾥给出的字⺟在键盘上的对应关系：（2=ABC，3=DEF，4=GHI，5=JKL，6=MNO，7=PQRS，8=TUV，9=WXYZ）原始电话号码中的⾮字⺟字符（例如数字或标点符号）保持不变：</p>\n<p>Enter phone number: 1-800-COL-LECT1-800-265-5328</p>\n<p>可以假设任何⽤户输⼊的字⺟都是⼤写字⺟。</p>\n<p>输出范例：</p>\n<p>Enter phone number: 1-DCKS-A2D-OLED</p>\n<p>1-3257-223-6533</p>\n<blockquote>\n<pre><code><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter phone number: \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ch <span class=\"token operator\">=</span> <span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ch <span class=\"token operator\">==</span> <span class=\"token string\">'A'</span> <span class=\"token operator\">||</span> ch <span class=\"token operator\">==</span> <span class=\"token string\">'B'</span> <span class=\"token operator\">||</span> ch <span class=\"token operator\">==</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ch <span class=\"token operator\">==</span> <span class=\"token string\">'D'</span> <span class=\"token operator\">||</span> ch <span class=\"token operator\">==</span> <span class=\"token string\">'E'</span> <span class=\"token operator\">||</span> ch <span class=\"token operator\">==</span> <span class=\"token string\">'F'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ch <span class=\"token operator\">==</span> <span class=\"token string\">'G'</span> <span class=\"token operator\">||</span> ch <span class=\"token operator\">==</span> <span class=\"token string\">'H'</span> <span class=\"token operator\">||</span> ch <span class=\"token operator\">==</span> <span class=\"token string\">'I'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"4\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ch <span class=\"token operator\">==</span> <span class=\"token string\">'J'</span> <span class=\"token operator\">||</span> ch <span class=\"token operator\">==</span> <span class=\"token string\">'K'</span> <span class=\"token operator\">||</span> ch <span class=\"token operator\">==</span> <span class=\"token string\">'L'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"5\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ch <span class=\"token operator\">==</span> <span class=\"token string\">'M'</span> <span class=\"token operator\">||</span> ch <span class=\"token operator\">==</span> <span class=\"token string\">'N'</span> <span class=\"token operator\">||</span> ch <span class=\"token operator\">==</span> <span class=\"token string\">'O'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"6\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ch <span class=\"token operator\">==</span> <span class=\"token string\">'P'</span> <span class=\"token operator\">||</span> ch <span class=\"token operator\">==</span> <span class=\"token string\">'Q'</span> <span class=\"token operator\">||</span> ch <span class=\"token operator\">==</span> <span class=\"token string\">'R'</span> <span class=\"token operator\">||</span> ch <span class=\"token operator\">==</span> <span class=\"token string\">'S'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"7\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ch <span class=\"token operator\">==</span> <span class=\"token string\">'T'</span> <span class=\"token operator\">||</span> ch <span class=\"token operator\">==</span> <span class=\"token string\">'U'</span> <span class=\"token operator\">||</span> ch <span class=\"token operator\">==</span> <span class=\"token string\">'V'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ch <span class=\"token operator\">==</span> <span class=\"token string\">'W'</span> <span class=\"token operator\">||</span> ch <span class=\"token operator\">==</span> <span class=\"token string\">'X'</span> <span class=\"token operator\">||</span> ch <span class=\"token operator\">==</span> <span class=\"token string\">'Y'</span> <span class=\"token operator\">||</span> ch <span class=\"token operator\">==</span> <span class=\"token string\">'Z'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"9\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c\"</span><span class=\"token punctuation\">,</span> ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</code></pre>\n</blockquote>\n<h4 id=\"7-12表达式求值\"><a class=\"markdownIt-Anchor\" href=\"#7-12表达式求值\">#</a> 7-12：表达式求值</h4>\n<p>编写程序对表达式求值。</p>\n<p>Enter an expression: 1+2.5*3<br>\nValue of expression: 10.5</p>\n<p>表达式中的操作数是浮点数，运算符是 +、-、* 和 /。表达式从左向右求值（所有运算符的优先级都⼀样）。</p>\n<p>输出范例：</p>\n<p>Enter an expression: 2+3*4-5/2<br>\nValue of expression: 7.5</p>\n<blockquote>\n<pre><code><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">float</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter an expressio: \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%f\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ch <span class=\"token operator\">=</span> <span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%f\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">'+'</span><span class=\"token operator\">:</span>\n            a <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">'-'</span><span class=\"token operator\">:</span>\n            a <span class=\"token operator\">=</span> a <span class=\"token operator\">-</span> b<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">'*'</span><span class=\"token operator\">:</span>\n            a <span class=\"token operator\">=</span> a <span class=\"token operator\">*</span> b<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">'/'</span><span class=\"token operator\">:</span>\n            a <span class=\"token operator\">=</span> a <span class=\"token operator\">/</span> b<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Value of expression: %f\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</code></pre>\n</blockquote>\n<h4 id=\"8-2出现次数\"><a class=\"markdownIt-Anchor\" href=\"#8-2出现次数\">#</a> 8-2：出现次数</h4>\n<p>修改如下程序 (8.1 节的 repdigit.c)，使其打印⼀份列表，显示出每个数字在数中出现的次数。</p>\n<p>输出范例：</p>\n<p>Enter a number: 41271092</p>\n<p>Digit:\t0\t1\t2\t3\t4\t5\t6\t7\t8\t9<br>\nOccurrences:\t1\t2\t2\t0\t1\t0\t0\t1\t0\t1</p>\n<blockquote>\n<pre><code><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> appear<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> a <span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter a number: \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ch <span class=\"token operator\">=</span> <span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n     a <span class=\"token operator\">=</span> ch <span class=\"token operator\">-</span> <span class=\"token number\">48</span><span class=\"token punctuation\">;</span>\n        appear<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Digit:\t    0 1 2 3 4 5 6 7 8 9 \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Occurrences:%d %d %d %d %d %d %d %d %d %d\"</span><span class=\"token punctuation\">,</span> appear<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> appear<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> appear<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> appear<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> appear<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&gt;</span>     appear<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> appear<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> appear<span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> appear<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> appear<span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</code></pre>\n</blockquote>\n<h4 id=\"8-9随机步法\"><a class=\"markdownIt-Anchor\" href=\"#8-9随机步法\">#</a> 8-9 随机步法</h4>\n<p>8-9：随机步法（Random Walk）</p>\n<p>编写程序，⽣成⼀种贯穿 10×10 字符数组（初始时全为字符’.’）的 “随机步法”。程序必须随机地从⼀个元素 “⾛到” 另⼀个元素，每次都向上、向下、向左或向右移动⼀个元素位置。已访问过的元素按访问顺序⽤字⺟ A 到 Z 进⾏标记。</p>\n<p>下⾯是⼀个输出示例：</p>\n<p>A\t.\t.\t.\t.\t.\t.\t.\t.\t.<br>\nB\tC\tD\t.\t.\t.\t.\t.\t.\t.<br>\n.\tF\tE\t.\t.\t.\t.\t.\t.\t.<br>\nH\tG\t.\t.\t.\t.\t.\t.\t.\t.<br>\nI\t.\t.\t.\t.\t.\t.\t.\t.\t.<br>\nJ\t.\t.\t.\t.\t.\t.\t.\tZ\t.<br>\nK\t.\t.\tR\tS\tT\tU\tV\tY\t.<br>\nL\tM\tP\tQ\t.\t.\t.\tW\tX\t.<br>\n.\tN\tO\t.\t.\t.\t.\t.\t.\t.<br>\n 利⽤ srand 函数和 rand 函数（⻅程序 deal.c）产⽣随机数，然后查看次数除以 4 的余数。余数⼀共有 4 种可能的值（0、1、2 和 3），指示下⼀次移动的 4 种可能⽅向。在执⾏移动之前，需要检查两项内容：⼀是不能⾛到数组外⾯，⼆是不能⾛到已有字⺟标记的位置。只要⼀个条件不满⾜，就得尝试换⼀个⽅向移动。如果 4 个⽅向都堵住了，程序就必须终⽌了。下⾯是提前结束的⼀个示例:</p>\n<p>A\tB\tG\tH\tI\t.\t.\t.\t.\t.<br>\n.\tC\tF\tO\tJ\tK\t.\t.\t.\t.<br>\n.\tD\tE\tN\tM\tL\t.\t.\t.\t.<br>\n.\t.\t.\t.\t.\t.\t.\t.\t.\t.<br>\n.\t.\t.\t.\t.\t.\t.\t.\t.\t.<br>\n.\t.\t.\t.\t.\t.\t.\t.\t.\t.<br>\n.\t.\t.\t.\t.\t.\t.\t.\t.\t.<br>\n.\t.\t.\t.\t.\t.\t.\t.\t.\t.<br>\n.\t.\t.\t.\t.\t.\t.\t.\t.\t.<br>\n 因为 Y 的 4 个⽅向都堵住了，所以没有地⽅可以放置下⼀步的 Z 了。</p>\n<blockquote>\n<pre><code><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;time.h&gt;</span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">char</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//声明数组</span>\n        <span class=\"token punctuation\">{</span><span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span><span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span><span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span><span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span><span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span><span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span><span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span><span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span><span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span><span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> row <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> line <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//测试用防止死循环</span>\n    <span class=\"token keyword\">char</span> ch <span class=\"token operator\">=</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">srand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span><span class=\"token punctuation\">)</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ch<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">do</span>\n    <span class=\"token punctuation\">{</span>\n        j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//测试用防止死循环 因为之前出现了死循环</span>\n        <span class=\"token keyword\">int</span> fate <span class=\"token operator\">=</span> <span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//获得0到4的随机数</span>\n        ch<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>                  <span class=\"token comment\">//先增如果不符合后面再减</span>\n        <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>fate<span class=\"token punctuation\">)</span>          <span class=\"token comment\">//根据随机数的大小来确定往哪个方向走</span>\n        <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span> <span class=\"token comment\">//向右</span>\n            row<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> row <span class=\"token operator\">&amp;&amp;</span> row <span class=\"token operator\">&lt;=</span> <span class=\"token number\">9</span> <span class=\"token operator\">&amp;&amp;</span> arr<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>line<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//判别向右右边不是边界并且右边不是已经走过的地点了</span>\n            <span class=\"token punctuation\">{</span>\n                arr<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>line<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ch<span class=\"token punctuation\">;</span> <span class=\"token comment\">//判定成功 走向右边 终止switch循环</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span>\n            <span class=\"token punctuation\">{</span>\n                row<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//判别失败 ch返回原值 row返回原值 退出swtich 等待进行下一次while循环</span>\n                ch<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span> <span class=\"token comment\">//向下</span>\n            line<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> line <span class=\"token operator\">&amp;&amp;</span> line <span class=\"token operator\">&lt;=</span> <span class=\"token number\">9</span> <span class=\"token operator\">&amp;&amp;</span> arr<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>line<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//判别向下不是边界并且下边不是已经走过的地方</span>\n            <span class=\"token punctuation\">{</span>\n                arr<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>line<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ch<span class=\"token punctuation\">;</span> <span class=\"token comment\">//判定成功 走向下边 终止switch循环</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span>\n            <span class=\"token punctuation\">{</span>\n                line<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//判别失败 ch返回原值 line返回原值 退出swtich 等待进行下一次while循环</span>\n                ch<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token operator\">:</span> <span class=\"token comment\">//向左</span>\n            row<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> row <span class=\"token operator\">&amp;&amp;</span> row <span class=\"token operator\">&lt;=</span> <span class=\"token number\">9</span> <span class=\"token operator\">&amp;&amp;</span> arr<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>line<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//判别向左不是边界并且下边不是已经走过的地方</span>\n            <span class=\"token punctuation\">{</span>\n                arr<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>line<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ch<span class=\"token punctuation\">;</span> <span class=\"token comment\">//判定成功 走向左边 终止switch循环</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span>\n            <span class=\"token punctuation\">{</span>\n                row<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//判别失败 ch返回原值 row返回原值 退出swtich 等待进行下一次while循环</span>\n                ch<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n            line<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>                                              <span class=\"token comment\">//向上</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> line <span class=\"token operator\">&amp;&amp;</span> line <span class=\"token operator\">&lt;=</span> <span class=\"token number\">9</span> <span class=\"token operator\">&amp;&amp;</span> arr<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>line<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//判别向上不是边界并且下边不是已经走过的地方</span>\n            <span class=\"token punctuation\">{</span>\n                arr<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>line<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ch<span class=\"token punctuation\">;</span> <span class=\"token comment\">//判定成功 走向上边 终止switch循环</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span>\n            <span class=\"token punctuation\">{</span>\n                line<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//判别失败 ch返回原值 line返回原值 退出swtich 等待进行下一次while循环</span>\n                ch<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">65</span> <span class=\"token operator\">&lt;=</span> ch <span class=\"token operator\">&amp;&amp;</span> ch <span class=\"token operator\">&lt;</span> <span class=\"token number\">90</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>row <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>line<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'.'</span> <span class=\"token operator\">||</span> arr<span class=\"token punctuation\">[</span>row <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>line<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'.'</span> <span class=\"token operator\">||</span> arr<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>line <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span>     <span class=\"token operator\">==</span> <span class=\"token string\">'.'</span> <span class=\"token operator\">||</span> arr<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>line <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//while循环判定 CH在A到Z之内 并且上下左右没有都被堵住</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> k<span class=\"token operator\">+</span><span class=\"token operator\">&gt;</span>     <span class=\"token operator\">+</span><span class=\"token punctuation\">)</span>                                                                                                              <span class=\"token operator\">&gt;</span>                           <span class=\"token comment\">//嵌套for循环打印二维数组</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c\"</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</code></pre>\n</blockquote>\n<h4 id=\"8-15加密\"><a class=\"markdownIt-Anchor\" href=\"#8-15加密\">#</a> 8-15 加密</h4>\n<p>8-15：加密（Encryption）</p>\n<p>已知的最古⽼的⼀种加密技术是凯撒加密（得名于 Julius caesar）。该⽅法把⼀条消息中的每个字⺟⽤字⺟表中固定距离之后的那个字⺟来替代。（如果越过了字⺟ Z，会绕回到字⺟表的起始位置。例如，如果每个字⺟都⽤字⺟表中两个位置之后的字⺟代替，那么 Y 就被替换为 A，Z 就被替换为 B。）</p>\n<p>编写程序⽤凯撒加密⽅法对消息进⾏加密。⽤户输⼊待加密的消息和移位计数（字⺟移动的位置数⽬）：<br>\nEnter message to be encrypted: Go ahead, make my day.<br>\nEnter shift amount (1-25): 3<br>\nEncrypted message: Jr dkhdg, pdnh pb gdb.</p>\n<p>注意，当⽤户输⼊ 26 与移位计数的差值时，程序可以对消息进⾏解密:</p>\n<p>Enter message to be encrypted: Jr dkhdg, pdnh pb gdb.<br>\nEnter shift amount (1-25): 23<br>\nEncrypted message: Go ahead, make my day</p>\n<p>不是字⺟的那些字符不要改动。此外，加密时不要改变字⺟的⼤⼩写。</p>\n<p>输出范例：</p>\n<p>Enter message to be encrypted: Hello, world!<br>\nEnter shift amount (1-25): 3<br>\nEncrypted message: Khoor, zruog!</p>\n<p>Enter message to be encrypted: Khoor, zruog!<br>\nEnter shift amount (1-25): 23<br>\nEncrypted message: Hello, world!</p>\n<blockquote>\n<pre><code><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> basic<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter message to be encrypted: \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ch <span class=\"token operator\">=</span> <span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        basic<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ch<span class=\"token punctuation\">;</span>\n        a<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter shift amount (1-25)\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Encrypted message: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>basic<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>basic<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">64</span> <span class=\"token operator\">&lt;</span> basic<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>basic<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">91</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            basic<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> basic<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> x <span class=\"token operator\">-</span> <span class=\"token number\">26</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>basic<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">64</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                basic<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> basic<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">26</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c\"</span><span class=\"token punctuation\">,</span> basic<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">96</span> <span class=\"token operator\">&lt;</span> basic<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>basic<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">123</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            basic<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> basic<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> x <span class=\"token operator\">-</span> <span class=\"token number\">26</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>basic<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">96</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                basic<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> basic<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">26</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c\"</span><span class=\"token punctuation\">,</span> basic<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>basic<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">48</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c\"</span><span class=\"token punctuation\">,</span> basic<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</code></pre>\n</blockquote>\n<h3 id=\"实验四\"><a class=\"markdownIt-Anchor\" href=\"#实验四\">#</a> 实验四</h3>\n<h4 id=\"10-1栈stack\"><a class=\"markdownIt-Anchor\" href=\"#10-1栈stack\">#</a> 10-1：栈（Stack）</h4>\n<p>修改如下程序（10.2 节的栈示例）使它存储字符而不是整数。</p>\n<p>增加 main 函数，用来要求用户输入一串圆括号或花括号，然后指出它们之间的嵌套是否正确。</p>\n<p>输出范例：</p>\n<p>Enter parentheses and/or braces: ()({})({})<br>\nParentheses/braces are nested properly</p>\n<p>Enter parentheses and/or braces: ((}<br>\nParentheses/braces are NOT nested properly</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdbool.h&gt;</span>   <span class=\"token comment\">/* C99 only */</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h&gt;</span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">STACK_SIZE</span> <span class=\"token expression\"><span class=\"token number\">100</span></span></span>\n\n<span class=\"token comment\">/* external variables */</span>\n<span class=\"token keyword\">char</span> contents<span class=\"token punctuation\">[</span>STACK_SIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> top <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">stack_overflow</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Stack overflow\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>EXIT_FAILURE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">stack_underflow</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Stack underflow\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>EXIT_FAILURE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">make_empty</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  top <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nbool <span class=\"token function\">is_empty</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> top <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nbool <span class=\"token function\">is_full</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> top <span class=\"token operator\">==</span> STACK_SIZE<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">is_full</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">stack_overflow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">else</span>\n    contents<span class=\"token punctuation\">[</span>top<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ch<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">char</span> <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">is_empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">stack_underflow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">else</span>\n    <span class=\"token keyword\">return</span> contents<span class=\"token punctuation\">[</span><span class=\"token operator\">--</span>top<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* prevents compiler warning due to stack_underflow() call */</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> abc<span class=\"token punctuation\">[</span><span class=\"token number\">40</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">;</span>\n    a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    b <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    c <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    d <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter parentheses and/or braces:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%[^\\n]\"</span><span class=\"token punctuation\">,</span>abc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    j <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>abc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    j<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">push</span><span class=\"token punctuation\">(</span>abc<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>top <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        ch <span class=\"token operator\">=</span> contents<span class=\"token punctuation\">[</span><span class=\"token operator\">--</span>top<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">'('</span><span class=\"token operator\">:</span>\n            a<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">')'</span><span class=\"token operator\">:</span>\n            b<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">'{'</span><span class=\"token operator\">:</span>\n            c<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">'}'</span><span class=\"token operator\">:</span>\n            d<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">&gt;</span> a<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>d <span class=\"token operator\">&gt;</span> c<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> b <span class=\"token operator\">&amp;&amp;</span> c <span class=\"token operator\">==</span> d<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Parentheses/braces are nested properly\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Parentheses/braces are NOT nested properly\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>此 answer 来自于林 bei</strong></p>\n<h4 id=\"12-01逆序reversal\"><a class=\"markdownIt-Anchor\" href=\"#12-01逆序reversal\">#</a> 12-01：逆序（Reversal）</h4>\n<p>编写程序读一条消息，然后逆序打印出这条消息。</p>\n<p>输出范例：</p>\n<p>Enter a message: Don’t get mad, get even.<br>\nReversal is: .neve teg ,dam teg t’noD</p>\n<p>Enter a message: Hello, world!<br>\nReversal is: !dlrow ,olleH</p>\n<p>提示：⼀次读取消息中的⼀个字符（⽤ getchar 函数），并且把这些字符存储在数组中，当数组写满或者读到字符 ‘\\n’ 时停⽌读⼊。</p>\n<blockquote>\n<pre><code><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> Reversal<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'%'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        Reversal<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'%'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter a message: \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ch <span class=\"token operator\">=</span> <span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        Reversal<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ch<span class=\"token punctuation\">;</span>\n        i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> <span class=\"token number\">99</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> k<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Reversal<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'%'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c\"</span><span class=\"token punctuation\">,</span> Reversal<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span>\n            <span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</code></pre>\n</blockquote>\n<h4 id=\"13-01最大最小单词简略版the-biggest-and-smallest-words\"><a class=\"markdownIt-Anchor\" href=\"#13-01最大最小单词简略版the-biggest-and-smallest-words\">#</a> 13-01：最大最小单词简略版（The Biggest and Smallest Words）</h4>\n<p>编写程序找出一组单词中 “最小” 单词和 “最大” 单词。</p>\n<p>用户输入单词后，程序根据字典顺序决定排在最前面和最后面的单词。</p>\n<p>当用户输入 4 个字母的单词时，程序停止读入。假设所有单词都不超过 20 个字母。</p>\n<p>输出范例 1：<br>\nEnter word: dog<br>\nEnter word: zebra<br>\nEnter word: rabbit<br>\nEnter word: catfish<br>\nEnter word: walrus<br>\nEnter word: cat<br>\nEnter word: fish</p>\n<p>Smallest word: cat<br>\nLargest word zebra</p>\n<p>输出范例 2：</p>\n<p>Enter word: computer<br>\nEnter word: ink<br>\nEnter word: light<br>\nEnter word: bookrack<br>\nEnter word: book</p>\n<p>Smallest word: book<br>\nLargest word: light</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SIZE</span> <span class=\"token expression\"><span class=\"token number\">50</span></span></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">strorder</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>string<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">char</span> input<span class=\"token punctuation\">[</span>SIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">21</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//存储输入的数组</span>\n    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>words<span class=\"token punctuation\">[</span>SIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//存储指针的数组</span>\n    <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">//输入的字符串个数</span>\n    <span class=\"token keyword\">do</span>\n    <span class=\"token punctuation\">{</span>\n        count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">fputs</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter word:\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">stdout</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">gets</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        words<span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> input<span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">strorder</span><span class=\"token punctuation\">(</span>words<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fputs</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Smallest word:\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">stdout</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span>words<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fputs</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Largest word:\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">stdout</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span>words<span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">strorder</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>string<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span> <span class=\"token comment\">//排序函数</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>temp<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> num <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> string<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                temp <span class=\"token operator\">=</span> string<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                string<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> string<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                string<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n",
            "tags": [
                "icoding答案"
            ]
        }
    ]
}