{
    "version": "https://jsonfeed.org/version/1",
    "title": "S1m • All posts by \"python\" tag",
    "description": "博客记录个人学习笔记,处于不断完善中",
    "home_page_url": "https://github.com/YogMas/YogMas.github.io",
    "items": [
        {
            "id": "https://github.com/YogMas/YogMas.github.io/2022/07/10/python/",
            "url": "https://github.com/YogMas/YogMas.github.io/2022/07/10/python/",
            "title": "python",
            "date_published": "2022-07-09T16:00:00.000Z",
            "content_html": "<h1 id=\"python\"><a class=\"markdownIt-Anchor\" href=\"#python\">#</a> Python</h1>\n<p>The article made by  <code>Yogmas</code>  on 2022/7/08</p>\n<h2 id=\"变量和字符串\"><a class=\"markdownIt-Anchor\" href=\"#变量和字符串\">#</a> 变量和字符串</h2>\n<h3 id=\"变量\"><a class=\"markdownIt-Anchor\" href=\"#变量\">#</a> 变量</h3>\n<ul>\n<li>变量名由字母，数字和下划线组成</li>\n<li>不能以数字开头</li>\n<li>区分大小写</li>\n<li>python3 变量名支持中文字符</li>\n</ul>\n<p>变量值交换:  <code>x,y = y,x</code> (python)</p>\n<p><code>_</code> 单独一个下划线可以用来表示临时变量</p>\n<h3 id=\"字符串\"><a class=\"markdownIt-Anchor\" href=\"#字符串\">#</a> 字符串</h3>\n<ul>\n<li>\n<p>单引号模式</p>\n</li>\n<li>\n<p>双引号模式</p>\n</li>\n<li>\n<p>三引号模式 (三单或三双都可)- 长字符串</p>\n<p>在长字符串中不需要运用换行符进行换行，代码中的换行就相当于换行符</p>\n</li>\n</ul>\n<p>单引号和双引号互相灵活应用，防止冲突</p>\n<p>冲突不可避免的时候可以使用转义字符</p>\n<h4 id=\"转义字符\"><a class=\"markdownIt-Anchor\" href=\"#转义字符\">#</a> 转义字符</h4>\n<p><a href=\"https://imgtu.com/i/j0bPlq\"><img src=\"https://s1.ax1x.com/2022/07/08/j0bPlq.png\" alt=\"转义字符\"></a></p>\n<p>原始字符串：在字符串前面加上一个 <code>r</code>  表示该字符串是原始字符串，这样在此字符串中就不会产生转义字符</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D:\\three\\two\\one\\now\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#\\t \\t \\o \\n 将会被当成转义字符输出</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">r\"D:\\three\\two\\one\\now\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#将会按照原始字符串输出</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><code>\\</code>  不能放在字符串的末尾</p>\n<h4 id=\"字符串的加法和乘法\"><a class=\"markdownIt-Anchor\" href=\"#字符串的加法和乘法\">#</a> 字符串的加法和乘法</h4>\n<p>字符串是<strong>文本</strong></p>\n<ol>\n<li>字符串的加法就是对文本进行拼接</li>\n<li>字符串的乘法就是对文本就行复制粘贴</li>\n</ol>\n<h3 id=\"运算符\"><a class=\"markdownIt-Anchor\" href=\"#运算符\">#</a> 运算符</h3>\n<h4 id=\"比较运算符\"><a class=\"markdownIt-Anchor\" href=\"#比较运算符\">#</a> 比较运算符</h4>\n<p><a href=\"https://imgtu.com/i/j0bHN4\"><img src=\"https://s1.ax1x.com/2022/07/08/j0bHN4.png\" alt=\"比较运算符\"></a></p>\n<h4 id=\"逻辑运算符\"><a class=\"markdownIt-Anchor\" href=\"#逻辑运算符\">#</a> 逻辑运算符</h4>\n<p><a href=\"https://imgtu.com/i/jfd6KO\"><img src=\"https://s1.ax1x.com/2022/07/14/jfd6KO.png\" alt=\"逻辑运算符\"></a></p>\n<p>python 的操作数支持真值运算，如果给到的是两个数，那么最后得到的就不会是 <code>True</code>  和 <code>False</code>  而是一个数</p>\n<h4 id=\"运算符优先级\"><a class=\"markdownIt-Anchor\" href=\"#运算符优先级\">#</a> 运算符优先级</h4>\n<p><a href=\"https://imgtu.com/i/jfwlee\"><img src=\"https://s1.ax1x.com/2022/07/14/jfwlee.png\" alt=\"运算符优先级\"></a></p>\n<h4 id=\"短路逻辑运算\"><a class=\"markdownIt-Anchor\" href=\"#短路逻辑运算\">#</a> 短路逻辑运算</h4>\n<p>从左往右，当第一个操作数的值无法确定逻辑运算的结果时，才对第二个操作数进行求值</p>\n<p>eg: 3 or 4 = 3     3 and 4 = 4          0 and 3 = 0</p>\n<h4 id=\"is运算符同一性运算符\"><a class=\"markdownIt-Anchor\" href=\"#is运算符同一性运算符\">#</a> is 运算符 (同一性运算符)</h4>\n<p>检验两个元素是否指向同一个对象</p>\n<h4 id=\"in运算符\"><a class=\"markdownIt-Anchor\" href=\"#in运算符\">#</a> in 运算符</h4>\n<p>判断某个元素是否包含在序列中</p>\n<h4 id=\"del语句\"><a class=\"markdownIt-Anchor\" href=\"#del语句\">#</a> del 语句</h4>\n<p>用于删除一个或多个指定的对象</p>\n<h2 id=\"python模块\"><a class=\"markdownIt-Anchor\" href=\"#python模块\">#</a> python 模块</h2>\n<h3 id=\"随机数-random\"><a class=\"markdownIt-Anchor\" href=\"#随机数-random\">#</a> 随机数 random</h3>\n<p>import random</p>\n<ul>\n<li>random.randint(x,y)</li>\n<li>random.getstate () 获取随机数种子</li>\n<li>random.setstate (x) 设置随机数种子</li>\n</ul>\n<h3 id=\"十进制-decimal\"><a class=\"markdownIt-Anchor\" href=\"#十进制-decimal\">#</a> 十进制 decimal</h3>\n<p>用于精确计算浮点数的相加</p>\n<ul>\n<li>a = decimal.Decimal(’ 0.1 ')</li>\n</ul>\n<h2 id=\"数字类型\"><a class=\"markdownIt-Anchor\" href=\"#数字类型\">#</a> 数字类型</h2>\n<h3 id=\"整数\"><a class=\"markdownIt-Anchor\" href=\"#整数\">#</a> 整数</h3>\n<p>python 的整数长度不受限制有<strong>无限大的精度</strong></p>\n<p>整数相除会产生浮点数的结果</p>\n<h3 id=\"浮点数\"><a class=\"markdownIt-Anchor\" href=\"#浮点数\">#</a> 浮点数</h3>\n<p>浮点数具有精度上的误差  精确计算查看上文<strong> decimal</strong></p>\n<p>eg. 0.1 + 0.2 != 0.3</p>\n<p>浮点数也可以用可以用科学计数法来表示</p>\n<p>eg 5e-05</p>\n<h3 id=\"复数\"><a class=\"markdownIt-Anchor\" href=\"#复数\">#</a> 复数</h3>\n<p>x + yj</p>\n<p>x 是实部，y 是虚部</p>\n<p>复数的实部和虚部都是以浮点数的形式存储的</p>\n<ul>\n<li>x.real 获取实部数值</li>\n<li>x.imag 获取虚部数值</li>\n</ul>\n<h3 id=\"数字运算\"><a class=\"markdownIt-Anchor\" href=\"#数字运算\">#</a> 数字运算</h3>\n<p><a href=\"https://imgtu.com/i/jgpCct\"><img src=\"https://s1.ax1x.com/2022/07/12/jgpCct.png\" alt=\"数字运算\"></a></p>\n<ul>\n<li><code>//</code> (地板除): 将除法的结果向下取整</li>\n<li><code>divmod</code>  (内置函数): <code>divmod(x,y)</code>  返回 <code>x//y</code> , <code>x%y</code> , 等于求出商和 余数</li>\n<li><code>abs()</code> : 返回绝对值，传入复数，返回<strong>复数的模</strong></li>\n<li><code>pow(x,y,z)</code> : <code>pow(x,y,z)</code> =x**y %z</li>\n</ul>\n<h3 id=\"布尔类型\"><a class=\"markdownIt-Anchor\" href=\"#布尔类型\">#</a> 布尔类型</h3>\n<ul>\n<li>空字符串是 False, 其他全是 True</li>\n<li>0 是 False 其他都是 True</li>\n</ul>\n<p><a href=\"https://imgtu.com/i/jfdmDg\"><img src=\"https://s1.ax1x.com/2022/07/14/jfdmDg.png\" alt=\"布尔\"></a></p>\n<p><code>Fraction(0,1)</code>  表示分子是 0, 分母是 1 的分数</p>\n<p>布尔类型就是特殊的整数类型</p>\n<p>True = 1,False = 0</p>\n<h2 id=\"分支与循环\"><a class=\"markdownIt-Anchor\" href=\"#分支与循环\">#</a> 分支与循环</h2>\n<h3 id=\"分支\"><a class=\"markdownIt-Anchor\" href=\"#分支\">#</a> 分支</h3>\n<h4 id=\"if语句\"><a class=\"markdownIt-Anchor\" href=\"#if语句\">#</a> if 语句</h4>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">if</span> 判断语句<span class=\"token punctuation\">:</span>\n    执行语句\n<span class=\"token keyword\">elif</span> 判断语句<span class=\"token punctuation\">:</span>\n    执行语句\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    执行语句<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"条件表达式\"><a class=\"markdownIt-Anchor\" href=\"#条件表达式\">#</a> 条件表达式</h5>\n<p><code>执行语句 if 判断语句 else 执行语句</code></p>\n<p>可以用小括号将多行的代码括起来表示这是一行代码</p>\n<h3 id=\"循环\"><a class=\"markdownIt-Anchor\" href=\"#循环\">#</a> 循环</h3>\n<h4 id=\"while循环\"><a class=\"markdownIt-Anchor\" href=\"#while循环\">#</a> while 循环</h4>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">while</span> condition<span class=\"token punctuation\">:</span> \n    statement\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n   <span class=\"token comment\">#else可以不用,else在while条件不成立的时候执行,当while是由于break语句跳出的时候不执行,适用于区分任务连续完成和中断的情况</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li><code>break</code>  语句用于跳出循环</li>\n<li><code>continue</code>  用于结束本次循环，继续判断下一次循环的条件，相当于直接跳到本次循环体的最后一句代码的后面</li>\n<li><code>break</code>  和 <code>continue</code>  都只能跳出一层循环体</li>\n</ul>\n<h4 id=\"for循环\"><a class=\"markdownIt-Anchor\" href=\"#for循环\">#</a> for 循环</h4>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">for</span> 变量 <span class=\"token keyword\">in</span> 可迭代对象<span class=\"token punctuation\">:</span>\n    statement<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h5 id=\"range函数\"><a class=\"markdownIt-Anchor\" href=\"#range函数\">#</a>  <code>range</code>  函数</h5>\n<ul>\n<li><code>range(stop)</code>  生成从 **[0,stop)** 的整数序列</li>\n<li><code>range(start,stop)</code>  生成从 **[start,stop)** 的整数数列</li>\n<li><code>range(start,stop,step)</code>  生成从 **[start,stop)<strong> 的整数数列，可以指定</strong> step** 跨度</li>\n</ul>\n<h2 id=\"列表\"><a class=\"markdownIt-Anchor\" href=\"#列表\">#</a> 列表</h2>\n<p>python 的列表可以容纳不同数据类型的数据</p>\n<p>列表是可变的，字符串是不可变的</p>\n<h3 id=\"创建列表\"><a class=\"markdownIt-Anchor\" href=\"#创建列表\">#</a> 创建列表</h3>\n<ul>\n<li><code>[1,2,3,4,5,\"勇敢的sam\"]</code>  使用中括号创建列表</li>\n<li>利用列表推导式:  <code>S = [ [0] * 3 for i in range(3)]</code></li>\n</ul>\n<h3 id=\"访问列表\"><a class=\"markdownIt-Anchor\" href=\"#访问列表\">#</a> 访问列表</h3>\n<p>采用<strong>下标索引</strong>访问列表，</p>\n<ul>\n<li>正向访问:python 的下标索引从<strong> 0</strong> 开始，依次递增</li>\n<li>逆向访问:python 下标索引可以从后往前访问，从 **-1** 开始依次递减</li>\n</ul>\n<h3 id=\"列表切片\"><a class=\"markdownIt-Anchor\" href=\"#列表切片\">#</a> 列表切片</h3>\n<ul>\n<li><code>Name[start:end]</code>  从 <code>Name[start]</code>  到 <code>Name[end-1]</code>  的列表元素</li>\n<li><code>Name[:end]</code>  从头到 <code>Name[end -1]</code></li>\n<li><code>Name[start:]</code>  从 <code>Name[start]</code>  到列表末尾</li>\n<li><code>Name[:]</code>  表示列表中的全部元素</li>\n<li><code>Name[start:end:step]</code>  可以设置 step 跨度值，当 step 为负值的时候，表示从列表最后一个元素开始倒着输出</li>\n<li><code>Name[::-1]</code> : 直接将列表反转</li>\n</ul>\n<h3 id=\"列表的多种方法\"><a class=\"markdownIt-Anchor\" href=\"#列表的多种方法\">#</a> 列表的多种方法</h3>\n<h4 id=\"增加\"><a class=\"markdownIt-Anchor\" href=\"#增加\">#</a> 增加</h4>\n<ul>\n<li><code>Name.append()</code> : 在列表的末尾添加指定元素，但是每次只能添加一个元素</li>\n<li><code>Name.extend()</code> : 在列表的末尾添加一个可迭代对象，与 <code>append</code>  相比可以同时添加多个元素</li>\n<li>通过切片实现:\n<ul>\n<li>实现 <code>append()</code> : Name[len(Name):] = XXX</li>\n<li>实现  <code>extend()</code> :Name[len(Name):] = [x,y,z]</li>\n</ul>\n</li>\n<li><code>Name.insert(x,y)</code> :x 为待插入的位置，y 为待插入的元素</li>\n</ul>\n<h4 id=\"删除\"><a class=\"markdownIt-Anchor\" href=\"#删除\">#</a> 删除</h4>\n<ul>\n<li><code>Name.remove(元素值)</code> : 指定删除一个元素\n<ol>\n<li>如果列表中有多个相同元素 只会删除第一个元素</li>\n<li>如果元素不存在，程序则会报错</li>\n</ol>\n</li>\n<li><code>Name.pop(下标索引值)</code> : 删除下标索引值上的元素</li>\n<li><code>Name.clear()</code> : 直接清空列表中的所有元素</li>\n</ul>\n<h4 id=\"修改\"><a class=\"markdownIt-Anchor\" href=\"#修改\">#</a> 修改</h4>\n<ul>\n<li><code>Name[下标索引值] = X</code></li>\n<li><code>Name.sort()</code> : 将列表从小到大进行排序 在括号中加上 <code>reverse = True</code> , 就可以实现从大到下排序</li>\n<li><code>Name.reverse()</code> : 将列表中的元素顺序进行翻转</li>\n</ul>\n<h4 id=\"查找\"><a class=\"markdownIt-Anchor\" href=\"#查找\">#</a> 查找</h4>\n<ul>\n<li>\n<p><code>Name.count(元素值)</code> : 查找某个元素值在列表中有多少个</p>\n</li>\n<li>\n<p><code>Name.index(元素值,start,end)</code> : 查找 start 到 end 区间某个元素的下标索引值，有多个值时返回第一个</p>\n<p>eg:  <code>Name[Name.index(\"zzz\")] = \"zgg\"</code></p>\n</li>\n<li>\n<p><code>Name.copy()</code> : 对列表进行拷贝</p>\n</li>\n</ul>\n<h4 id=\"计算\"><a class=\"markdownIt-Anchor\" href=\"#计算\">#</a> 计算</h4>\n<p>加法：将两个列表中的元素进行拼接</p>\n<p>乘法：将一个列表中的元素重复若干次</p>\n<h3 id=\"嵌套列表多维列表\"><a class=\"markdownIt-Anchor\" href=\"#嵌套列表多维列表\">#</a> 嵌套列表 (多维列表)</h3>\n<p><code>[[x,y,z],[a,b,c],[e,f,d]]</code></p>\n<p>相同的列表元素，python 也会开辟不同的空间来存储列表元素，因为列表是可变的</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">A  <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token number\">3</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    A<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token number\">3</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"深拷贝与浅拷贝\"><a class=\"markdownIt-Anchor\" href=\"#深拷贝与浅拷贝\">#</a> 深拷贝与浅拷贝</h3>\n<p>变量的赋值 仅仅是将存储内容的地址引用到变量上</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\nb <span class=\"token operator\">=</span> a \na<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\nb <span class=\"token operator\">=</span> ? <span class=\"token comment\">#b会等于[1,1,3] 并不是将数据复制了过去,而是将这一团数据的引用给了b,本质上还是同一个存储数据的地方</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"浅拷贝\"><a class=\"markdownIt-Anchor\" href=\"#浅拷贝\">#</a> 浅拷贝</h4>\n<ul>\n<li><code>Name.copy()</code> : 列表的 copy 方法</li>\n<li>先导入 copy 模块  <code>y = copy.copy(x)</code></li>\n<li>应用列表切片</li>\n</ul>\n<h4 id=\"深拷贝\"><a class=\"markdownIt-Anchor\" href=\"#深拷贝\">#</a> 深拷贝</h4>\n<p>浅拷贝只会拷贝最外层，拷贝内层数据的时候也只会拷贝引用，所以对于嵌套列表等等就需要深拷贝来进行拷贝</p>\n<ul>\n<li>先导入 copy 模块  <code>y = copy.deepcopy(x)</code></li>\n</ul>\n<h3 id=\"列表推导式\"><a class=\"markdownIt-Anchor\" href=\"#列表推导式\">#</a> 列表推导式</h3>\n<p>列表推导式的效率比循环语句一般会快上一倍左右</p>\n<ol>\n<li><code>[expression for target in iterable]</code></li>\n<li><code>[expresssion for target in iterable if condition]</code>  先执行 for 语句，然后进行 if 语句的判断，最后进行插入</li>\n<li>列表推导式的嵌套: <code>[expression for target in iterable1 for target in iterable2 for target in iterable3]</code>  嵌套中放在前面的是外层前套，从前往后依次嵌套</li>\n</ol>\n<p><code>ord()</code> : 内置函数，将字符转化为对应的编码</p>\n<h2 id=\"元组\"><a class=\"markdownIt-Anchor\" href=\"#元组\">#</a> 元组</h2>\n<p>元组拥有列表的性质，且元组不可修改、</p>\n<p>元组中的元素不可变，但是元组的元素如果是可变的列表，我们可以修改列表中的值</p>\n<p><code>a = (1,2,3,4,5)</code></p>\n<p><strong>没有元组推导式的存在</strong></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">x <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">520</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#此时x是int变量</span>\nx <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">520</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#此时x是只有一个元素的元组</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h3 id=\"打包和解包\"><a class=\"markdownIt-Anchor\" href=\"#打包和解包\">#</a> 打包和解包</h3>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">code <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"sam\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"zgg\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#打包</span>\nx<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span>z <span class=\"token operator\">=</span> code <span class=\"token comment\">#解包 左侧变量数量必须等于右侧的元素数量</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h2 id=\"字符串-2\"><a class=\"markdownIt-Anchor\" href=\"#字符串-2\">#</a> 字符串</h2>\n<p>字符串是不可改变的</p>\n<h3 id=\"字符串方法\"><a class=\"markdownIt-Anchor\" href=\"#字符串方法\">#</a> 字符串方法</h3>\n<p>因为字符串不可变，所以下列方法的实质是按照规则生成新的字符串再重新赋值</p>\n<h4 id=\"更改大小写字母\"><a class=\"markdownIt-Anchor\" href=\"#更改大小写字母\">#</a> 更改大小写字母</h4>\n<ul>\n<li><code>x.capitalize()</code> : 首字母变成大写，其他变成小写</li>\n<li><code>x.casefold()</code> : 将所有字符串变成小写，可以处理多语言</li>\n<li><code>x.title()</code> : 字符串中<strong>每个单词</strong>的首字母变成大写，其他的变成小写</li>\n<li><code>x.swapcase()</code> : 进行大小写字母的翻转</li>\n<li><code>x.upper()</code> : 所有字母变成大写</li>\n<li><code>x.lower()</code> : 所有字母变成小写，只能处理英语</li>\n</ul>\n<h4 id=\"左中右对齐\"><a class=\"markdownIt-Anchor\" href=\"#左中右对齐\">#</a> 左中右对齐</h4>\n<p>拥有参数 <code>width</code>  代表填充过后的字符串长度，如果该参数小于原字符串的长度，就会输出原字符串</p>\n<p><code>fillchar</code> : 填充字符</p>\n<ul>\n<li><code>x.center(width,fillchar):</code>  实现居中，默认用空格填充</li>\n<li><code>x.ljust(width,fillchar)</code> : 实现左对齐，默认用空格填充</li>\n<li><code>x.rjust(width,fillchar)</code> : 实现右对齐，默认用空格填充</li>\n<li><code>x.zfill(width,fillchar)</code> : 实现左对齐，默认用 <code>0</code>  填充</li>\n</ul>\n<h4 id=\"查找-2\"><a class=\"markdownIt-Anchor\" href=\"#查找-2\">#</a> 查找</h4>\n<ul>\n<li><code>x.count(sub[],start,end)</code> : 在 x 字符串的 start~end 段查找 sub 字符串出现的次数</li>\n<li><code>x.find(sub[],start,end)</code> : 查找目标字符串在 x 字符串的 start 到 end 段的下标索引值，<strong> 从左到右查找</strong>，找不到目标字符串返回 **-1**</li>\n<li><code>x.rfind(sub[],start,end)</code> : 查找目标字符串在 x 字符串的 start 到 end 段的下标索引值，<strong> 从右到左查找</strong>，找不到目标字符串返回 **-1**</li>\n<li><code>x.index(sub[],start,end)</code> ：与 <code>find</code>  的用法相同，找不到目标字符串报错</li>\n<li><code>x.rindex(sub[],start,end)</code> : 与 <code>rfind</code>  的用法相同，找不到目标字符串报错</li>\n</ul>\n<h4 id=\"替换\"><a class=\"markdownIt-Anchor\" href=\"#替换\">#</a> 替换</h4>\n<ul>\n<li><code>x.expandtabs(X)</code> : 将字符串中的 <code>tab</code>  替换成<strong>空格</strong>，X 为指定的空格数</li>\n<li><code>x.replace(old,new,count = -1)</code> : 将 <code>old</code>  字符串替换成 <code>new</code>  字符串 count 为替换次数 默认为无限次</li>\n<li><code>x.translate(table)</code> : 按照转换表格进行替换</li>\n<li><code>x.str.maketrans(待转换字符串,目标字符串,需要忽略的字符串)</code> : 生成转换表格 <code>table</code></li>\n</ul>\n<h4 id=\"判断\"><a class=\"markdownIt-Anchor\" href=\"#判断\">#</a> 判断</h4>\n<ul>\n<li><code>x.startswith(prefix[],start,end)</code> : 判断 prefix 字符串是否出现在目标字符串 start~end 的起始位置，可以通过<strong>元组</strong>传入多个待匹配字符串，只要有一个成功返回 True</li>\n<li><code>x.endswith(suffix[],start,end)</code> : 判断 prefix 字符串是否出现在目标字符串 start~end 的终止位置，可以通过<strong>元组</strong>传入多个待匹配字符串，只要有一个成功返回 True</li>\n<li><code>x.istitle()</code>  判断字符串中是否每个单词的首字母都大写</li>\n<li><code>x.isupper()</code> : 判断字符串中是否每个字母都大写</li>\n<li><code>x.islower()</code> : 判断字符串中是否每个字母都小写</li>\n<li><code>x.isalpha()</code> : 判断该字符串是否全部由字母构成，<strong> 空格不算字母</strong></li>\n<li><code>x.isspace()</code> : 判断该字符串是否是<strong>空白字符串</strong></li>\n<li><code>x.isprintable()</code> : 判断字符串中是否都是可打印的，<strong> 转义字符是不可打印的</strong></li>\n<li><code>x.isdecimal()</code> ：判断是否为数字，必须是纯数字</li>\n<li><code>x.isdigit()</code> ：判断是否为数字，可以是 2² 这种计算式</li>\n<li><code>x.isnumeric()</code> ：判断是否为数字，支持多种语言的数字</li>\n<li><code>x.isalnum()</code> : <code>x.isalpha()</code> , <code>x.isdecimal()</code> , <code>x.isdigit()</code> , <code>x.isnumeric()</code> , 四者有一个返回 True, 该函数就返回 True</li>\n<li><code>x.isidentifier()</code> : 判断字符串是否为一个合法的 python 标识符</li>\n<li>keyword 模块中的 <code>iskeyword()</code> : 判断该字符串是否为 python 的<strong>保留标志符</strong></li>\n</ul>\n<h4 id=\"截取\"><a class=\"markdownIt-Anchor\" href=\"#截取\">#</a> 截取</h4>\n<ul>\n<li><code>x.lstrip(chars =None)</code> : 去除左侧的字符（默认为空格）, 逐一匹配字符串中的字符</li>\n<li><code>x.rstrip(chars =None)</code> : 去除右侧的字符（默认为空格）, 逐一匹配字符串中的字符</li>\n<li><code>x.strip(chars =None)</code> : 去除左右的字符（默认为空格）, 逐一匹配字符串中的字符</li>\n<li><code>x.removeprefix(prefix)</code> : 指定删除前缀，匹配整个字符串而不是单个字符</li>\n<li><code>x.removesuffix(suffix)</code> : 指定删除后缀，匹配整个字符串而不是单个字符</li>\n</ul>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">x <span class=\"token operator\">=</span> <span class=\"token string\">\"      zylzhuyilong\"</span>\nx<span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token string\">\" z\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#逐一匹配 答案为ylzhuyilong</span>\nx<span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">#默认为空格答案为zylzhuyilong</span>\nx <span class=\"token operator\">=</span> <span class=\"token string\">\"www.wbaidu.com\"</span>\nx<span class=\"token punctuation\">.</span>removeprefix<span class=\"token punctuation\">(</span><span class=\"token string\">\"www.\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#不逐一匹配字符,直接匹配字符串 答案为wbaidu.com</span>\nx<span class=\"token punctuation\">.</span>removesuffix<span class=\"token punctuation\">(</span><span class=\"token string\">\".com\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#同理 答案是www.wbaidu</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"拆分和拼接\"><a class=\"markdownIt-Anchor\" href=\"#拆分和拼接\">#</a> 拆分和拼接</h4>\n<h5 id=\"拆分\"><a class=\"markdownIt-Anchor\" href=\"#拆分\">#</a> 拆分</h5>\n<ul>\n<li><code>x.partition(seq)</code> : 将字符串指定字符为分割切割字符串 返回一个<strong>三元组</strong>，从<strong>左到右</strong>寻找指定字符，以第一个为准</li>\n<li><code>x.rpartition(seq)</code> : 将字符串指定字符为分割切割字符串 返回一个<strong>三元组</strong>，从<strong>右到左</strong>寻找指定字符，以第一个为准</li>\n<li><code>x.split(seq = None,maxsplit = -1)</code> : 以指定字符为分割进行拆分，以列表形式返回</li>\n<li><code>x.rsplit(seq = None,maxsplit = -1)</code> : 与 <code>split</code>  相同，为<strong>从右往左</strong></li>\n<li><code>x.splitlines(keepend = False)</code>  将字符串进行分行，以列表形式返回， <code>keepend</code>  指定结果是否包含换行符</li>\n</ul>\n<h5 id=\"拼接\"><a class=\"markdownIt-Anchor\" href=\"#拼接\">#</a> 拼接</h5>\n<ul>\n<li><code>join(iterable)</code> : 用于字符串拼接， <code>join</code>  方法拼接的效率大于 <code>+</code>  拼接</li>\n</ul>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token string\">\".\"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"F\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"C\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#结果为A.F.C 可以使用列表也可以使用元组</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"格式化字符串\"><a class=\"markdownIt-Anchor\" href=\"#格式化字符串\">#</a> 格式化字符串</h3>\n<p><code>{关键字索引:格式化选项}.format()</code> : 在原字符串中使用 <code>{}</code>  来表示替换部分，使用 <code>format</code>  方法来替换</p>\n<p>格式化选项: <code>[[fill]align][sign][#][0][width][grouping_option][.precision][type]</code></p>\n<ul>\n<li><code>fill</code> : 填充字符</li>\n<li><code>align</code> : 对齐方式</li>\n<li><code>sign</code> : 前面添加的符号</li>\n<li><code>#</code> ：在显示进制时，会在数前面追加一个前缀<strong> 0x</strong> 类似的来提醒这是什么进制的数</li>\n<li><code>0</code> : 以 0 填充</li>\n<li><code>width</code> : 格式化宽度</li>\n<li><code>grouping_option</code> : 使用什么符号来做千位的分隔符 (逗号和下划线两个选项)</li>\n<li><code>.precision</code> : 精度</li>\n<li><code>type</code> : 以什么形式输出值</li>\n</ul>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">age <span class=\"token operator\">=</span> <span class=\"token builtin\">eval</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"你的年龄是\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nname <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"你的名字是\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"你的年龄是{},你的名字是{}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"你的年龄是{1},你的名字是{0}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我叫{name},我爱{people}.format(name = \"</span>wxl<span class=\"token string\">\",people = \"</span><span class=\"token operator\">-</span><span class=\"token punctuation\">.</span><span class=\"token operator\">-</span>\"<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><a href=\"https://imgtu.com/i/jIyhAP\"><img src=\"https://s1.ax1x.com/2022/07/18/jIyhAP.png\" alt=\"align.png\"></a></p>\n<p><a href=\"https://imgtu.com/i/jIy4tf\"><img src=\"https://s1.ax1x.com/2022/07/18/jIy4tf.png\" alt=\"sign.png\"></a></p>\n<p><a href=\"https://imgtu.com/i/jIy5h8\"><img src=\"https://s1.ax1x.com/2022/07/18/jIy5h8.png\" alt=\"精度\"></a></p>\n<p><a href=\"https://imgtu.com/i/jIyT1g\"><img src=\"https://s1.ax1x.com/2022/07/18/jIyT1g.png\" alt=\"type1\"></a></p>\n<p><a href=\"https://imgtu.com/i/jIyqns\"><img src=\"https://s1.ax1x.com/2022/07/18/jIyqns.png\" alt=\"type2.png\"></a></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token string\">\"{:^10}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token number\">250</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#输出为'     250    '</span>\n<span class=\"token string\">\"{left:&gt;10}{right:&lt;10}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>left <span class=\"token operator\">=</span> <span class=\"token number\">250</span><span class=\"token punctuation\">,</span>right <span class=\"token operator\">=</span> <span class=\"token number\">250</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#输出为 '    250250     '</span>\n<span class=\"token string\">\"{:.2f}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token number\">3.1415</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 显示结果为3.14</span>\n<span class=\"token string\">\"{:.2g}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token number\">3.1415</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 显示结果为3.1</span>\n<span class=\"token string\">\"{:b}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token number\">80</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">#结果以二进制输出为1010000</span>\n<span class=\"token string\">\"{:.{prec}f}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token number\">3.1415</span><span class=\"token punctuation\">,</span>prec <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#输出为3.14 更加地灵活</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"f-字符串\"><a class=\"markdownIt-Anchor\" href=\"#f-字符串\">#</a> f - 字符串</h3>\n<p>python3.6 以上可以使用</p>\n<p>进一步简化了格式化字符串</p>\n<p>在字符串前面加上 f 或者 F 将 format 去掉，将 format 的数值放在:<strong> 左侧</strong></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token string\">\"我今天{}岁了\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span>\n<span class=\"token string-interpolation\"><span class=\"token string\">f\"我今天</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>age<span class=\"token punctuation\">}</span></span><span class=\"token string\">岁了\"</span></span>\n<span class=\"token string\">\"{:.2f}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token number\">3.1415</span><span class=\"token punctuation\">)</span>\n<span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token number\">3.1415</span><span class=\"token punctuation\">:</span><span class=\"token format-spec\">.2f</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"序列\"><a class=\"markdownIt-Anchor\" href=\"#序列\">#</a> 序列</h2>\n<p>列表，元组，字符串统称为<strong>序列</strong></p>\n<p>运用在序列中的运算符: <code>+</code> ， <code>*</code></p>\n<h3 id=\"与序列相关的函数\"><a class=\"markdownIt-Anchor\" href=\"#与序列相关的函数\">#</a> 与序列相关的函数</h3>\n<h4 id=\"列表元组字符串相互转换\"><a class=\"markdownIt-Anchor\" href=\"#列表元组字符串相互转换\">#</a> 列表元组字符串相互转换</h4>\n<ul>\n<li><code>list()</code> : 将可迭代对象变为列表</li>\n<li><code>tuple()</code> : 将可迭代对象变为元组</li>\n<li><code>str()</code> : 将可迭代对象变为字符串</li>\n</ul>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sam\"</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">#结果为['s','a','m']</span>\n<span class=\"token builtin\">tuple</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sam\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># ('s','a','m')</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h4 id=\"minmax函数\"><a class=\"markdownIt-Anchor\" href=\"#minmax函数\">#</a> min&amp;max 函数</h4>\n<p>对比传入的参数返回最大最小值</p>\n<ul>\n<li><code>min(可迭代对象,default = \"\")</code> : 当没有参数传入时，返回 default 也可以直接传入参数</li>\n</ul>\n<h4 id=\"len和sum\"><a class=\"markdownIt-Anchor\" href=\"#len和sum\">#</a> len 和 sum</h4>\n<ul>\n<li><code>len()</code> : 检测长度 有最大值限制</li>\n<li><code>sum(，start = )</code> : 求和函数，start 可以传入初始值</li>\n</ul>\n<h4 id=\"sorted-reversed\"><a class=\"markdownIt-Anchor\" href=\"#sorted-reversed\">#</a> sorted() &amp; reversed()</h4>\n<ul>\n<li><code>sorted(x，key,reverse)</code> : 排序，返回的是一个全新的列表，.sort () 返回会改变原列表</li>\n<li><code>reversed()</code> : 返回的是一个迭代器</li>\n</ul>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">t <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'ab'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'abcd'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'ab'</span><span class=\"token punctuation\">]</span>\n<span class=\"token builtin\">sorted</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span>key <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#比较的是len()函数的返回结果</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h4 id=\"all和any\"><a class=\"markdownIt-Anchor\" href=\"#all和any\">#</a> all () 和 any ()</h4>\n<ul>\n<li><code>all()</code> : 判断可迭代对象中是否<u>所有</u>的值都为真</li>\n<li><code>any()</code> : 判断可迭代对象中是否存在<u>某个元素</u>的值为真</li>\n</ul>\n<h4 id=\"enumerate\"><a class=\"markdownIt-Anchor\" href=\"#enumerate\">#</a> enumerate()</h4>\n<p>返回一个枚举对象，将可迭代对象中的每个元素及从 0 开始的序号共同构成一个二元组的列表</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">seasons <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"spring\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"summer\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Fall\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Winter\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>seasons<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#返回的结果为 [(0, 'spring'), (1, 'summer'), (2, 'Fall'), (3, 'Winter')]</span>\n<span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>seasons<span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#返回的结果为[(10, 'spring'), (11, 'summer'), (12, 'Fall'), (13, 'Winter')]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"zip\"><a class=\"markdownIt-Anchor\" href=\"#zip\">#</a> zip()</h4>\n<p>创建一个聚合多个可迭代对象的<strong>迭代器</strong>，它会将作为参数传入的每个可迭代对象的每个元素依次组合成元组，即第 i 个元组包含来自每个参数的第 i 个元素</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">x <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\ny <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span>\n<span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 返回的结果是[(1,4),(2,5),(3,6)]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>当传入的列表长度不一致时，zip 函数以最短的列表长度为准</p>\n<h4 id=\"map\"><a class=\"markdownIt-Anchor\" href=\"#map\">#</a> map()</h4>\n<p>根据提供的函数对指定的可迭代对象的每个元素进行运算，并将返回运算结果的<strong>迭代器</strong></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">ord</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Sam\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token comment\">#会将sam字符串(可迭代对象)中的每个字符运用ord()函数转换成编码值</span>\n<span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">pow</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#结果为[32,9,1000]</span>\n<span class=\"token comment\">#因为pow()函数需要两个参数</span>\n<span class=\"token comment\">#传入的可迭代对象长度不一致时,按最短的为准</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"filter过滤器\"><a class=\"markdownIt-Anchor\" href=\"#filter过滤器\">#</a> filter () 过滤器</h4>\n<p>根据提供的函数对指定的可迭代对象的每个元素进行运算，并将运算结果为真的元素，以<strong>迭代器</strong>的形式返回</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">.</span>islower<span class=\"token punctuation\">,</span><span class=\"token string\">\"Sam\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#islower判断是否为小写字母,返回为真的结果 为['a','m]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"iter\"><a class=\"markdownIt-Anchor\" href=\"#iter\">#</a> iter()</h4>\n<p>将可迭代函数转化成迭代器</p>\n<h4 id=\"nextx\"><a class=\"markdownIt-Anchor\" href=\"#nextx\">#</a> next(x,\"    \")</h4>\n<p>逐渐将迭代器中的元素提取出来，可以传入第二个参数，当迭代器中的元素被提取完了之后将会返回第二个参数字符串</p>\n<h3 id=\"迭代器与可迭代对象\"><a class=\"markdownIt-Anchor\" href=\"#迭代器与可迭代对象\">#</a> 迭代器与可迭代对象</h3>\n<p>迭代器是一次性的，可迭代对象可以重复使用</p>\n<h2 id=\"字典\"><a class=\"markdownIt-Anchor\" href=\"#字典\">#</a> 字典</h2>\n<p>映射类型数据的获取上，字典的数据远远快于列表</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">x <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"吕布\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"口口布\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"关羽\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"关习习\"</span><span class=\"token punctuation\">}</span>\nx<span class=\"token punctuation\">[</span><span class=\"token string\">\"吕布\"</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">#得到\"口口布\"结果</span>\nx<span class=\"token punctuation\">[</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"AA\"</span>  <span class=\"token comment\">#之后x就变成{\"吕布\":\"口口布\",\"关羽\":\"关习习\",\"abc\":\"AA\"}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"创建字典的方法\"><a class=\"markdownIt-Anchor\" href=\"#创建字典的方法\">#</a> 创建字典的方法</h3>\n<ol>\n<li>\n<p>{x:y} 直接创建</p>\n</li>\n<li>\n<p>dict () 函数创建</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">y <span class=\"token operator\">=</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span>吕布<span class=\"token operator\">=</span><span class=\"token string\">\"口口布\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">#需要注意的是 键值对的键不能加引号</span>\ny <span class=\"token operator\">=</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"吕布\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"口口布\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"关羽\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"关习习\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#两者可以混合使用</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>使用 zip () 和 dict () 函数结合</p>\n</li>\n</ol>\n<h3 id=\"增\"><a class=\"markdownIt-Anchor\" href=\"#增\">#</a> 增</h3>\n<p><code>fromkeys(iterable[,values])</code>  : 创建一个所有键的值都相同的字典</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">a <span class=\"token operator\">=</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">.</span>fromkeys<span class=\"token punctuation\">(</span><span class=\"token string\">\"Sam\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">666</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#得到的结果为{'s': 666, 'a': 666, 'm': 666}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"删\"><a class=\"markdownIt-Anchor\" href=\"#删\">#</a> 删</h3>\n<ul>\n<li><code>Name.pop(,default = )</code> : 返回值为键所对应的值</li>\n<li><code>Name.popitem()</code> : 删除最后一个加入字典的键值对</li>\n<li><code>del()</code>  关键字:</li>\n<li><code>Name.clear()</code> : 清除整个字典</li>\n</ul>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">x <span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'s'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">666</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">666</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'m'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">666</span><span class=\"token punctuation\">}</span>\nx<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token string\">'s'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#'s'键被删除并返回's'键的值666</span>\n<span class=\"token comment\">#当没有该键时返回default参数 default没有指定时报错</span>\n<span class=\"token keyword\">del</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">[</span><span class=\"token string\">'s'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#也能删除x中的键's'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"改\"><a class=\"markdownIt-Anchor\" href=\"#改\">#</a> 改</h3>\n<ol>\n<li>直接修改</li>\n<li><code>Name.update()</code> : 同时处理多个函数</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">a <span class=\"token operator\">=</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">.</span>fromkeys<span class=\"token punctuation\">(</span><span class=\"token string\">\"sam\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">666</span><span class=\"token punctuation\">)</span>\na<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>s<span class=\"token operator\">=</span><span class=\"token number\">111</span><span class=\"token punctuation\">,</span>a<span class=\"token operator\">=</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#返回{'s': 111, 'a': 123, 'm': 666}</span>\n<span class=\"token comment\">#同样 键不能加引号</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"查\"><a class=\"markdownIt-Anchor\" href=\"#查\">#</a> 查</h3>\n<p>1. 直接查找</p>\n<p>2. <code>Name.get(,default)</code> : 与第一种方法相比可以给 default 赋值，这样当值不存在时不会报错，会返回 default</p>\n<p>3. <code>Name.setdefault(x,y)</code> : 查找 x 键，当 x 不存在时，将 x 作为键，y 作为值加入字典并且返回 y</p>\n<p>4. <code>items(),keys(),values()</code> : 三个方法，分别获取键值对，键，值的<strong>视图对象</strong> (当字典发生改变时，视图对象也会跟着改变)</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">x <span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'吕布'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'口口布'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'关羽'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'关习习'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'abc'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'AA'</span><span class=\"token punctuation\">}</span>\na <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">#dict_items([('吕布', '口口布'), ('关羽', '关习习'), ('abc', 'AA')])</span>\nb <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>keys<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">#dict_keys(['吕布', '关羽', 'abc'])</span>\nc <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#dict_values(['口口布', '关习习', 'AA'])</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>5. <code>Name.copy()</code> : 浅拷贝</p>\n<h3 id=\"嵌套\"><a class=\"markdownIt-Anchor\" href=\"#嵌套\">#</a> 嵌套</h3>\n<p>与列表的嵌套相似</p>\n<h3 id=\"字典推导式\"><a class=\"markdownIt-Anchor\" href=\"#字典推导式\">#</a> 字典推导式</h3>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">x <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'s'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">666</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'m'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span>\ny <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>v<span class=\"token punctuation\">:</span>k <span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span>v <span class=\"token keyword\">in</span> x<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n<span class=\"token comment\">#输出的y为{666: 's', 1: 'a', 2: 'm'}</span>\ny <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>v<span class=\"token punctuation\">:</span>k <span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span>v <span class=\"token keyword\">in</span> x<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> v<span class=\"token operator\">&gt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">}</span>\n<span class=\"token comment\">#输入的y为{666: 's'}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"集合\"><a class=\"markdownIt-Anchor\" href=\"#集合\">#</a> 集合</h2>\n<h3 id=\"三种方法创建集合\"><a class=\"markdownIt-Anchor\" href=\"#三种方法创建集合\">#</a> 三种方法创建集合</h3>\n<ol>\n<li><code>{}</code>  创建</li>\n<li>集合推导式  <code>{i for i in \"Sam\"}</code></li>\n<li>类型构造器 <code>set()</code></li>\n</ol>\n<p>集合是无序的  无法使用下标索引进行访问 使用 in 来判断是否在集合中</p>\n<p>可以使用集合的唯一性来去重和检测重复值</p>\n<h3 id=\"集合方法\"><a class=\"markdownIt-Anchor\" href=\"#集合方法\">#</a> 集合方法</h3>\n<ul>\n<li><code>Name.copy()</code> : 浅拷贝</li>\n<li><code>Name.isdisjoint(可迭代对象)</code> : 检测集合是否没有交集</li>\n<li><code>a.issubset(b)</code> :a 集合是否是 b 集合的子集</li>\n<li><code>a.issuperset(b)</code> ：b 集合是否是 a 集合的子集</li>\n<li><code>a.union(b)</code> : 返回 a,b 的并集</li>\n<li><code>a.intersection(b)</code> : 返回 a,b 的交集</li>\n<li><code>a.difference(b)</code> : 返回属于 a 集合不属于 b 集合的元素</li>\n</ul>\n<p>上述方法可以多参数，同时也可以使用运算符号来进行比较和计算 (&lt;&lt;=&gt; &gt;= | &amp; -  ^(对称差集))</p>\n<p>方法可以直接传入可迭代对象，而运算符只能进行集合的比较</p>\n<ul>\n<li><code>a.symmetric_difference()</code> : 返回 a,b 的并集减去 a,b 的交集</li>\n<li><code>Name.update(可迭代对象)</code> : 往集合中添加元素</li>\n<li><code>Name.intersection_update()</code> : 先求交集在更新，同理 diffrence_update 等相同</li>\n<li><code>Name.add()</code> : 往集合中传入元素，此时如果传入的是可迭代对象 例如字符串，整个字符串会被看成一个元素</li>\n<li><code>Name.remove() Name.discard()</code> : 从集合中删除元素，如果元素不存在 remove 方法会报错 discard () 方法会<strong>静默处理</strong></li>\n<li><code>Name.pop()</code> : 随机获取集合中的一个元素</li>\n<li><code>Name.clear()</code> : 清楚集合</li>\n</ul>\n<h3 id=\"可变和不可变\"><a class=\"markdownIt-Anchor\" href=\"#可变和不可变\">#</a> 可变和不可变</h3>\n<p>set () 创建可变的集合 frozenset () 创建不可变的集合</p>\n<h3 id=\"可哈希\"><a class=\"markdownIt-Anchor\" href=\"#可哈希\">#</a> 可哈希</h3>\n<p>通过 hash () 获取哈希值</p>\n<p>python 中大多数不可变对象都是可哈希的，可变对象都是不可哈希的</p>\n<p>只有可哈希的对象才能作为字典的键和集合的元素</p>\n<p>所以为了实现集合的嵌套 只能使用 frozenset () 生成的不可变集合 才能实现集合的嵌套</p>\n<h3 id=\"额外\"><a class=\"markdownIt-Anchor\" href=\"#额外\">#</a> 额外</h3>\n<p>实现查找的时候可以将列表转换成集合，会节约大量的时间，但是同时也会消耗掉大量的空间</p>\n<h2 id=\"函数\"><a class=\"markdownIt-Anchor\" href=\"#函数\">#</a> 函数</h2>\n<p>def Name(): / sth</p>\n<ul>\n<li>形式参数：占位置</li>\n<li>实际参数：传递数据</li>\n<li>返回值：通过 <code>return</code>  返回函数的结果 没有 return 语句 返回 None 值</li>\n<li>位置参数：位置固定的参数</li>\n<li>关键字参数：通过关键字传递 参数 = “”  <strong>位 0 置参数只能在关键字参数之前</strong></li>\n</ul>\n<p>python 允许函数在定义时给参数指定默认值，如果没有传递参数，函数将会使用默认值，默认参数需要放在形参的最后</p>\n<p>形参中可以使用 <code>/</code> ， <code>/</code>  左侧的参数不能使用关键字传递， <code>*</code>  的右侧只能使用关键字参数</p>\n<h3 id=\"收集参数\"><a class=\"markdownIt-Anchor\" href=\"#收集参数\">#</a> 收集参数</h3>\n<p>在参数前面加入 <code>*</code> , 表示不确定参数的数量，这种参数叫收集参数</p>\n<p>收集参数，实际是将参数打包成元组传入函数，当返回多个返回值时，返回的也是元组</p>\n<p>函数中除了收集参数，如果还要传入其他参数，应该使用关键字参数</p>\n<p>在参数前面加入 <code>**</code> , 函数会将参数打包成字典传入函数</p>\n<h3 id=\"作用域\"><a class=\"markdownIt-Anchor\" href=\"#作用域\">#</a> 作用域</h3>\n<p>局部作用域与全局作用域，局部变量与全局变量</p>\n<p>全局变量可以在函数内部访问，但是不会改变</p>\n<h4 id=\"global语句\"><a class=\"markdownIt-Anchor\" href=\"#global语句\">#</a> global 语句</h4>\n<p>在函数内部使用 global 定义，表示函数内部的变量就是全部变量</p>\n<h4 id=\"嵌套函数\"><a class=\"markdownIt-Anchor\" href=\"#嵌套函数\">#</a> 嵌套函数</h4>\n<p>外部无法调用嵌套函数，只有在函数内部才能调用嵌套函数</p>\n<h4 id=\"nonlocal语句\"><a class=\"markdownIt-Anchor\" href=\"#nonlocal语句\">#</a> nonlocal 语句</h4>\n<p>使用 nonlocal 语句定义变量，可以在嵌套函数内部，修改外部变量的值</p>\n<h4 id=\"legb规则\"><a class=\"markdownIt-Anchor\" href=\"#legb规则\">#</a> LEGB 规则</h4>\n<ul>\n<li>Local: 局部作用域</li>\n<li>Enclosed: 嵌套函数的外层函数作用域</li>\n<li>Global: 全局作用域</li>\n<li>Building: 内置作用域</li>\n</ul>\n<p>局部作用域与全局作用域发生冲突，python 会优先使用局部作用域</p>\n<p>嵌套函数发生 局部作用域会覆盖外层函数作用域</p>\n<h3 id=\"闭包\"><a class=\"markdownIt-Anchor\" href=\"#闭包\">#</a> 闭包</h3>\n<p>利用嵌套函数的外层作用域会被保存下来，将数据保存在外层函数的参数或者变量中，将内层函数作为返回值返回，就能从外部简介调用内层函数</p>\n<p>将函数作为返回值返回时，只需要给出函数名称即可</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">exp_of</span><span class=\"token punctuation\">(</span>exp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n     <span class=\"token keyword\">def</span> <span class=\"token function\">exp_in</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>number <span class=\"token operator\">**</span> exp<span class=\"token punctuation\">)</span>\n     <span class=\"token keyword\">return</span> exp_in\n<span class=\"token comment\">#&gt;&gt;&gt; move1 = exp_of(2)</span>\n<span class=\"token comment\">#&gt;&gt;&gt; move2 = exp_of(3)</span>\n<span class=\"token comment\">#&gt;&gt;&gt; move1(3)</span>\n<span class=\"token comment\">#9</span>\n<span class=\"token comment\">#&gt;&gt;&gt; move2(3)</span>\n<span class=\"token comment\">#27</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"装饰器\"><a class=\"markdownIt-Anchor\" href=\"#装饰器\">#</a> 装饰器</h3>\n<p>函数可以作为参数传给另外一个函数</p>\n<p>@装饰器 ID  隔行 函数</p>\n<p>表示并不是调用函数 而是将函数作为参数传入装饰器</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"> <span class=\"token keyword\">def</span> <span class=\"token function\">time_master</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">def</span> call_fun<span class=\"token punctuation\">:</span>\n             start <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    \t\tfunc<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    \t\tend <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    \t\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"一共耗费了</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span>end<span class=\"token operator\">-</span>start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token format-spec\">.2f</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">秒\"</span></span><span class=\"token punctuation\">)</span>\n         <span class=\"token keyword\">return</span> call_fun\n    \n <span class=\"token comment\">#装饰器</span>\n<span class=\"token decorator annotation punctuation\">@time_master</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">myfunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"开始调用函数\"</span><span class=\"token punctuation\">)</span>\n    \n<span class=\"token comment\">#装饰器本质 </span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">myfunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"开始调用函数\"</span><span class=\"token punctuation\">)</span>\nmyfunc <span class=\"token operator\">=</span> time_master<span class=\"token punctuation\">(</span>myfunc<span class=\"token punctuation\">)</span>\n\nmyfunc<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>同时使用多个装饰器时，从函数头上距离函数最近的开始运行，依次往上运行</p>\n<h3 id=\"lambda表达式\"><a class=\"markdownIt-Anchor\" href=\"#lambda表达式\">#</a> lambda 表达式</h3>\n<p>lambda arg1,arg2 … argN : expression</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">squareX</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> x <span class=\"token operator\">*</span> x\nsquareY <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> y <span class=\"token punctuation\">:</span> y <span class=\"token operator\">*</span> y<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"生成器\"><a class=\"markdownIt-Anchor\" href=\"#生成器\">#</a> 生成器</h3>\n<p>使用 yield 表达式来代替 return 语句</p>\n<p>生成器即每次在调用时，执行到 yield 时，暂停并保存状态，返回一个值，下一次调用则从下一个语句开始执行</p>\n<p>可以理解为生成器是函数中 field 的所有返回值所组成的一个连续数据，但是只能一个一个查看且无法使用下标索引 (可能不准确)</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">counter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n     i <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n     <span class=\"token keyword\">while</span> i <span class=\"token operator\">&lt;=</span><span class=\"token number\">5</span><span class=\"token punctuation\">:</span>\n             <span class=\"token keyword\">yield</span> i\n             i<span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"生成器表达式\"><a class=\"markdownIt-Anchor\" href=\"#生成器表达式\">#</a> 生成器表达式</h4>\n<p>(i ** 2 for i in range())</p>\n<h3 id=\"递归\"><a class=\"markdownIt-Anchor\" href=\"#递归\">#</a> 递归</h3>\n<p>利用函数自己可以调用自身</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">facRecur</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">if</span> n <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">return</span> n <span class=\"token operator\">*</span> facRecur<span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"永久存储\"><a class=\"markdownIt-Anchor\" href=\"#永久存储\">#</a> 永久存储</h2>\n<h3 id=\"创建文件\"><a class=\"markdownIt-Anchor\" href=\"#创建文件\">#</a> 创建文件</h3>\n<p>f = open (“文件路径和文件名”,“打开的模式”)   返回值为一个文件对象</p>\n<p>f.write (“字符串”): 将字符串写入文件，返回的是写入的数量</p>\n<p>f.writeless (\"\"): 将字符串写入文件，不会自动添加换行符，且不会返回写入的数量</p>\n<p>文件内部具有文件指针，当文件不断被读取时，文件指针不断后移，直到末尾的 EOF</p>\n<p>f.tell (): 返回文件指针的位置</p>\n<p>f.seek (位置)：移动文件指针的位置</p>\n<p>f.read (): 读取文件</p>\n<p>f.flush (): 将缓存区内的数据写入文件</p>\n<p>f.truncate (pos): 将文件对象截取到 pos 位置，如果没有 pos 值则截取到文件指针当前指定的位置</p>\n<h3 id=\"路径处理\"><a class=\"markdownIt-Anchor\" href=\"#路径处理\">#</a> 路径处理</h3>\n<h2 id=\"类和对象\"><a class=\"markdownIt-Anchor\" href=\"#类和对象\">#</a> 类和对象</h2>\n",
            "tags": [
                "python"
            ]
        }
    ]
}