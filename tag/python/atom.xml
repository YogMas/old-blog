<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://github.com/YogMas/YogMas.github.io</id>
    <title>S1m • Posts by &#34;python&#34; tag</title>
    <link href="https://github.com/YogMas/YogMas.github.io" />
    <updated>2022-07-09T16:00:00.000Z</updated>
    <category term="C语言" />
    <category term="Latex" />
    <category term="操作系统" />
    <category term="Css" />
    <category term="vue" />
    <category term="python" />
    <category term="Git" />
    <category term="Html" />
    <category term="java" />
    <category term="机器学习" />
    <category term="Javascript" />
    <category term="icoding答案" />
    <category term="算法啊" />
    <category term="计算机组成原理" />
    <category term="课内课程" />
    <entry>
        <id>https://github.com/YogMas/YogMas.github.io/2022/07/10/python/</id>
        <title>python</title>
        <link rel="alternate" href="https://github.com/YogMas/YogMas.github.io/2022/07/10/python/"/>
        <content type="html">&lt;h1 id=&#34;python&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#python&#34;&gt;#&lt;/a&gt; Python&lt;/h1&gt;
&lt;p&gt;The article made by  &lt;code&gt;Yogmas&lt;/code&gt;  on 2022/7/08&lt;/p&gt;
&lt;h2 id=&#34;变量和字符串&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#变量和字符串&#34;&gt;#&lt;/a&gt; 变量和字符串&lt;/h2&gt;
&lt;h3 id=&#34;变量&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#变量&#34;&gt;#&lt;/a&gt; 变量&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;变量名由字母，数字和下划线组成&lt;/li&gt;
&lt;li&gt;不能以数字开头&lt;/li&gt;
&lt;li&gt;区分大小写&lt;/li&gt;
&lt;li&gt;python3 变量名支持中文字符&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;变量值交换:  &lt;code&gt;x,y = y,x&lt;/code&gt; (python)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;_&lt;/code&gt; 单独一个下划线可以用来表示临时变量&lt;/p&gt;
&lt;h3 id=&#34;字符串&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#字符串&#34;&gt;#&lt;/a&gt; 字符串&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;单引号模式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;双引号模式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;三引号模式 (三单或三双都可)- 长字符串&lt;/p&gt;
&lt;p&gt;在长字符串中不需要运用换行符进行换行，代码中的换行就相当于换行符&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;单引号和双引号互相灵活应用，防止冲突&lt;/p&gt;
&lt;p&gt;冲突不可避免的时候可以使用转义字符&lt;/p&gt;
&lt;h4 id=&#34;转义字符&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#转义字符&#34;&gt;#&lt;/a&gt; 转义字符&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/j0bPlq&#34;&gt;&lt;img src=&#34;https://s1.ax1x.com/2022/07/08/j0bPlq.png&#34; alt=&#34;转义字符&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;原始字符串：在字符串前面加上一个 &lt;code&gt;r&lt;/code&gt;  表示该字符串是原始字符串，这样在此字符串中就不会产生转义字符&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;D:\three\two\one\now&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#\t \t \o \n 将会被当成转义字符输出&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;r&#34;D:\three\two\one\now&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#将会按照原始字符串输出&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;\&lt;/code&gt;  不能放在字符串的末尾&lt;/p&gt;
&lt;h4 id=&#34;字符串的加法和乘法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#字符串的加法和乘法&#34;&gt;#&lt;/a&gt; 字符串的加法和乘法&lt;/h4&gt;
&lt;p&gt;字符串是&lt;strong&gt;文本&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;字符串的加法就是对文本进行拼接&lt;/li&gt;
&lt;li&gt;字符串的乘法就是对文本就行复制粘贴&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;运算符&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#运算符&#34;&gt;#&lt;/a&gt; 运算符&lt;/h3&gt;
&lt;h4 id=&#34;比较运算符&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#比较运算符&#34;&gt;#&lt;/a&gt; 比较运算符&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/j0bHN4&#34;&gt;&lt;img src=&#34;https://s1.ax1x.com/2022/07/08/j0bHN4.png&#34; alt=&#34;比较运算符&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;逻辑运算符&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#逻辑运算符&#34;&gt;#&lt;/a&gt; 逻辑运算符&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/jfd6KO&#34;&gt;&lt;img src=&#34;https://s1.ax1x.com/2022/07/14/jfd6KO.png&#34; alt=&#34;逻辑运算符&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;python 的操作数支持真值运算，如果给到的是两个数，那么最后得到的就不会是 &lt;code&gt;True&lt;/code&gt;  和 &lt;code&gt;False&lt;/code&gt;  而是一个数&lt;/p&gt;
&lt;h4 id=&#34;运算符优先级&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#运算符优先级&#34;&gt;#&lt;/a&gt; 运算符优先级&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/jfwlee&#34;&gt;&lt;img src=&#34;https://s1.ax1x.com/2022/07/14/jfwlee.png&#34; alt=&#34;运算符优先级&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;短路逻辑运算&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#短路逻辑运算&#34;&gt;#&lt;/a&gt; 短路逻辑运算&lt;/h4&gt;
&lt;p&gt;从左往右，当第一个操作数的值无法确定逻辑运算的结果时，才对第二个操作数进行求值&lt;/p&gt;
&lt;p&gt;eg: 3 or 4 = 3     3 and 4 = 4          0 and 3 = 0&lt;/p&gt;
&lt;h4 id=&#34;is运算符同一性运算符&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#is运算符同一性运算符&#34;&gt;#&lt;/a&gt; is 运算符 (同一性运算符)&lt;/h4&gt;
&lt;p&gt;检验两个元素是否指向同一个对象&lt;/p&gt;
&lt;h4 id=&#34;in运算符&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#in运算符&#34;&gt;#&lt;/a&gt; in 运算符&lt;/h4&gt;
&lt;p&gt;判断某个元素是否包含在序列中&lt;/p&gt;
&lt;h4 id=&#34;del语句&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#del语句&#34;&gt;#&lt;/a&gt; del 语句&lt;/h4&gt;
&lt;p&gt;用于删除一个或多个指定的对象&lt;/p&gt;
&lt;h2 id=&#34;python模块&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#python模块&#34;&gt;#&lt;/a&gt; python 模块&lt;/h2&gt;
&lt;h3 id=&#34;随机数-random&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#随机数-random&#34;&gt;#&lt;/a&gt; 随机数 random&lt;/h3&gt;
&lt;p&gt;import random&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;random.randint(x,y)&lt;/li&gt;
&lt;li&gt;random.getstate () 获取随机数种子&lt;/li&gt;
&lt;li&gt;random.setstate (x) 设置随机数种子&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;十进制-decimal&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#十进制-decimal&#34;&gt;#&lt;/a&gt; 十进制 decimal&lt;/h3&gt;
&lt;p&gt;用于精确计算浮点数的相加&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a = decimal.Decimal(’ 0.1 &#39;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;数字类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数字类型&#34;&gt;#&lt;/a&gt; 数字类型&lt;/h2&gt;
&lt;h3 id=&#34;整数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#整数&#34;&gt;#&lt;/a&gt; 整数&lt;/h3&gt;
&lt;p&gt;python 的整数长度不受限制有&lt;strong&gt;无限大的精度&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;整数相除会产生浮点数的结果&lt;/p&gt;
&lt;h3 id=&#34;浮点数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#浮点数&#34;&gt;#&lt;/a&gt; 浮点数&lt;/h3&gt;
&lt;p&gt;浮点数具有精度上的误差  精确计算查看上文&lt;strong&gt; decimal&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;eg. 0.1 + 0.2 != 0.3&lt;/p&gt;
&lt;p&gt;浮点数也可以用可以用科学计数法来表示&lt;/p&gt;
&lt;p&gt;eg 5e-05&lt;/p&gt;
&lt;h3 id=&#34;复数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#复数&#34;&gt;#&lt;/a&gt; 复数&lt;/h3&gt;
&lt;p&gt;x + yj&lt;/p&gt;
&lt;p&gt;x 是实部，y 是虚部&lt;/p&gt;
&lt;p&gt;复数的实部和虚部都是以浮点数的形式存储的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;x.real 获取实部数值&lt;/li&gt;
&lt;li&gt;x.imag 获取虚部数值&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;数字运算&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数字运算&#34;&gt;#&lt;/a&gt; 数字运算&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/jgpCct&#34;&gt;&lt;img src=&#34;https://s1.ax1x.com/2022/07/12/jgpCct.png&#34; alt=&#34;数字运算&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;//&lt;/code&gt; (地板除): 将除法的结果向下取整&lt;/li&gt;
&lt;li&gt;&lt;code&gt;divmod&lt;/code&gt;  (内置函数): &lt;code&gt;divmod(x,y)&lt;/code&gt;  返回 &lt;code&gt;x//y&lt;/code&gt; , &lt;code&gt;x%y&lt;/code&gt; , 等于求出商和 余数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;abs()&lt;/code&gt; : 返回绝对值，传入复数，返回&lt;strong&gt;复数的模&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pow(x,y,z)&lt;/code&gt; : &lt;code&gt;pow(x,y,z)&lt;/code&gt; =x**y %z&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;布尔类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#布尔类型&#34;&gt;#&lt;/a&gt; 布尔类型&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;空字符串是 False, 其他全是 True&lt;/li&gt;
&lt;li&gt;0 是 False 其他都是 True&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/jfdmDg&#34;&gt;&lt;img src=&#34;https://s1.ax1x.com/2022/07/14/jfdmDg.png&#34; alt=&#34;布尔&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Fraction(0,1)&lt;/code&gt;  表示分子是 0, 分母是 1 的分数&lt;/p&gt;
&lt;p&gt;布尔类型就是特殊的整数类型&lt;/p&gt;
&lt;p&gt;True = 1,False = 0&lt;/p&gt;
&lt;h2 id=&#34;分支与循环&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#分支与循环&#34;&gt;#&lt;/a&gt; 分支与循环&lt;/h2&gt;
&lt;h3 id=&#34;分支&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#分支&#34;&gt;#&lt;/a&gt; 分支&lt;/h3&gt;
&lt;h4 id=&#34;if语句&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#if语句&#34;&gt;#&lt;/a&gt; if 语句&lt;/h4&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; 判断语句&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    执行语句
&lt;span class=&#34;token keyword&#34;&gt;elif&lt;/span&gt; 判断语句&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    执行语句
&lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    执行语句&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;条件表达式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#条件表达式&#34;&gt;#&lt;/a&gt; 条件表达式&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;执行语句 if 判断语句 else 执行语句&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;可以用小括号将多行的代码括起来表示这是一行代码&lt;/p&gt;
&lt;h3 id=&#34;循环&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#循环&#34;&gt;#&lt;/a&gt; 循环&lt;/h3&gt;
&lt;h4 id=&#34;while循环&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#while循环&#34;&gt;#&lt;/a&gt; while 循环&lt;/h4&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt; condition&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 
    statement
&lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
   &lt;span class=&#34;token comment&#34;&gt;#else可以不用,else在while条件不成立的时候执行,当while是由于break语句跳出的时候不执行,适用于区分任务连续完成和中断的情况&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;break&lt;/code&gt;  语句用于跳出循环&lt;/li&gt;
&lt;li&gt;&lt;code&gt;continue&lt;/code&gt;  用于结束本次循环，继续判断下一次循环的条件，相当于直接跳到本次循环体的最后一句代码的后面&lt;/li&gt;
&lt;li&gt;&lt;code&gt;break&lt;/code&gt;  和 &lt;code&gt;continue&lt;/code&gt;  都只能跳出一层循环体&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;for循环&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#for循环&#34;&gt;#&lt;/a&gt; for 循环&lt;/h4&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; 变量 &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; 可迭代对象&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    statement&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;s&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;range函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#range函数&#34;&gt;#&lt;/a&gt;  &lt;code&gt;range&lt;/code&gt;  函数&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;range(stop)&lt;/code&gt;  生成从 **[0,stop)** 的整数序列&lt;/li&gt;
&lt;li&gt;&lt;code&gt;range(start,stop)&lt;/code&gt;  生成从 **[start,stop)** 的整数数列&lt;/li&gt;
&lt;li&gt;&lt;code&gt;range(start,stop,step)&lt;/code&gt;  生成从 **[start,stop)&lt;strong&gt; 的整数数列，可以指定&lt;/strong&gt; step** 跨度&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;列表&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#列表&#34;&gt;#&lt;/a&gt; 列表&lt;/h2&gt;
&lt;p&gt;python 的列表可以容纳不同数据类型的数据&lt;/p&gt;
&lt;p&gt;列表是可变的，字符串是不可变的&lt;/p&gt;
&lt;h3 id=&#34;创建列表&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#创建列表&#34;&gt;#&lt;/a&gt; 创建列表&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[1,2,3,4,5,&#34;勇敢的sam&#34;]&lt;/code&gt;  使用中括号创建列表&lt;/li&gt;
&lt;li&gt;利用列表推导式:  &lt;code&gt;S = [ [0] * 3 for i in range(3)]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;访问列表&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#访问列表&#34;&gt;#&lt;/a&gt; 访问列表&lt;/h3&gt;
&lt;p&gt;采用&lt;strong&gt;下标索引&lt;/strong&gt;访问列表，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;正向访问:python 的下标索引从&lt;strong&gt; 0&lt;/strong&gt; 开始，依次递增&lt;/li&gt;
&lt;li&gt;逆向访问:python 下标索引可以从后往前访问，从 **-1** 开始依次递减&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;列表切片&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#列表切片&#34;&gt;#&lt;/a&gt; 列表切片&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Name[start:end]&lt;/code&gt;  从 &lt;code&gt;Name[start]&lt;/code&gt;  到 &lt;code&gt;Name[end-1]&lt;/code&gt;  的列表元素&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Name[:end]&lt;/code&gt;  从头到 &lt;code&gt;Name[end -1]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Name[start:]&lt;/code&gt;  从 &lt;code&gt;Name[start]&lt;/code&gt;  到列表末尾&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Name[:]&lt;/code&gt;  表示列表中的全部元素&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Name[start:end:step]&lt;/code&gt;  可以设置 step 跨度值，当 step 为负值的时候，表示从列表最后一个元素开始倒着输出&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Name[::-1]&lt;/code&gt; : 直接将列表反转&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;列表的多种方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#列表的多种方法&#34;&gt;#&lt;/a&gt; 列表的多种方法&lt;/h3&gt;
&lt;h4 id=&#34;增加&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#增加&#34;&gt;#&lt;/a&gt; 增加&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Name.append()&lt;/code&gt; : 在列表的末尾添加指定元素，但是每次只能添加一个元素&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Name.extend()&lt;/code&gt; : 在列表的末尾添加一个可迭代对象，与 &lt;code&gt;append&lt;/code&gt;  相比可以同时添加多个元素&lt;/li&gt;
&lt;li&gt;通过切片实现:
&lt;ul&gt;
&lt;li&gt;实现 &lt;code&gt;append()&lt;/code&gt; : Name[len(Name):] = XXX&lt;/li&gt;
&lt;li&gt;实现  &lt;code&gt;extend()&lt;/code&gt; :Name[len(Name):] = [x,y,z]&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Name.insert(x,y)&lt;/code&gt; :x 为待插入的位置，y 为待插入的元素&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;删除&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#删除&#34;&gt;#&lt;/a&gt; 删除&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Name.remove(元素值)&lt;/code&gt; : 指定删除一个元素
&lt;ol&gt;
&lt;li&gt;如果列表中有多个相同元素 只会删除第一个元素&lt;/li&gt;
&lt;li&gt;如果元素不存在，程序则会报错&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Name.pop(下标索引值)&lt;/code&gt; : 删除下标索引值上的元素&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Name.clear()&lt;/code&gt; : 直接清空列表中的所有元素&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;修改&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#修改&#34;&gt;#&lt;/a&gt; 修改&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Name[下标索引值] = X&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Name.sort()&lt;/code&gt; : 将列表从小到大进行排序 在括号中加上 &lt;code&gt;reverse = True&lt;/code&gt; , 就可以实现从大到下排序&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Name.reverse()&lt;/code&gt; : 将列表中的元素顺序进行翻转&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;查找&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#查找&#34;&gt;#&lt;/a&gt; 查找&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Name.count(元素值)&lt;/code&gt; : 查找某个元素值在列表中有多少个&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Name.index(元素值,start,end)&lt;/code&gt; : 查找 start 到 end 区间某个元素的下标索引值，有多个值时返回第一个&lt;/p&gt;
&lt;p&gt;eg:  &lt;code&gt;Name[Name.index(&#34;zzz&#34;)] = &#34;zgg&#34;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Name.copy()&lt;/code&gt; : 对列表进行拷贝&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;计算&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#计算&#34;&gt;#&lt;/a&gt; 计算&lt;/h4&gt;
&lt;p&gt;加法：将两个列表中的元素进行拼接&lt;/p&gt;
&lt;p&gt;乘法：将一个列表中的元素重复若干次&lt;/p&gt;
&lt;h3 id=&#34;嵌套列表多维列表&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#嵌套列表多维列表&#34;&gt;#&lt;/a&gt; 嵌套列表 (多维列表)&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;[[x,y,z],[a,b,c],[e,f,d]]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;相同的列表元素，python 也会开辟不同的空间来存储列表元素，因为列表是可变的&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;A  &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    A&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;深拷贝与浅拷贝&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#深拷贝与浅拷贝&#34;&gt;#&lt;/a&gt; 深拷贝与浅拷贝&lt;/h3&gt;
&lt;p&gt;变量的赋值 仅仅是将存储内容的地址引用到变量上&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;a &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
b &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; a 
a&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;
b &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; ? &lt;span class=&#34;token comment&#34;&gt;#b会等于[1,1,3] 并不是将数据复制了过去,而是将这一团数据的引用给了b,本质上还是同一个存储数据的地方&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;浅拷贝&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#浅拷贝&#34;&gt;#&lt;/a&gt; 浅拷贝&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Name.copy()&lt;/code&gt; : 列表的 copy 方法&lt;/li&gt;
&lt;li&gt;先导入 copy 模块  &lt;code&gt;y = copy.copy(x)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;应用列表切片&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;深拷贝&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#深拷贝&#34;&gt;#&lt;/a&gt; 深拷贝&lt;/h4&gt;
&lt;p&gt;浅拷贝只会拷贝最外层，拷贝内层数据的时候也只会拷贝引用，所以对于嵌套列表等等就需要深拷贝来进行拷贝&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;先导入 copy 模块  &lt;code&gt;y = copy.deepcopy(x)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;列表推导式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#列表推导式&#34;&gt;#&lt;/a&gt; 列表推导式&lt;/h3&gt;
&lt;p&gt;列表推导式的效率比循环语句一般会快上一倍左右&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;[expression for target in iterable]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[expresssion for target in iterable if condition]&lt;/code&gt;  先执行 for 语句，然后进行 if 语句的判断，最后进行插入&lt;/li&gt;
&lt;li&gt;列表推导式的嵌套: &lt;code&gt;[expression for target in iterable1 for target in iterable2 for target in iterable3]&lt;/code&gt;  嵌套中放在前面的是外层前套，从前往后依次嵌套&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;ord()&lt;/code&gt; : 内置函数，将字符转化为对应的编码&lt;/p&gt;
&lt;h2 id=&#34;元组&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#元组&#34;&gt;#&lt;/a&gt; 元组&lt;/h2&gt;
&lt;p&gt;元组拥有列表的性质，且元组不可修改、&lt;/p&gt;
&lt;p&gt;元组中的元素不可变，但是元组的元素如果是可变的列表，我们可以修改列表中的值&lt;/p&gt;
&lt;p&gt;&lt;code&gt;a = (1,2,3,4,5)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;没有元组推导式的存在&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;520&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#此时x是int变量&lt;/span&gt;
x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;520&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#此时x是只有一个元素的元组&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;打包和解包&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#打包和解包&#34;&gt;#&lt;/a&gt; 打包和解包&lt;/h3&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;code &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;sam&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;zgg&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#打包&lt;/span&gt;
x&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;y&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;z &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; code &lt;span class=&#34;token comment&#34;&gt;#解包 左侧变量数量必须等于右侧的元素数量&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;字符串-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#字符串-2&#34;&gt;#&lt;/a&gt; 字符串&lt;/h2&gt;
&lt;p&gt;字符串是不可改变的&lt;/p&gt;
&lt;h3 id=&#34;字符串方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#字符串方法&#34;&gt;#&lt;/a&gt; 字符串方法&lt;/h3&gt;
&lt;p&gt;因为字符串不可变，所以下列方法的实质是按照规则生成新的字符串再重新赋值&lt;/p&gt;
&lt;h4 id=&#34;更改大小写字母&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#更改大小写字母&#34;&gt;#&lt;/a&gt; 更改大小写字母&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;x.capitalize()&lt;/code&gt; : 首字母变成大写，其他变成小写&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x.casefold()&lt;/code&gt; : 将所有字符串变成小写，可以处理多语言&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x.title()&lt;/code&gt; : 字符串中&lt;strong&gt;每个单词&lt;/strong&gt;的首字母变成大写，其他的变成小写&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x.swapcase()&lt;/code&gt; : 进行大小写字母的翻转&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x.upper()&lt;/code&gt; : 所有字母变成大写&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x.lower()&lt;/code&gt; : 所有字母变成小写，只能处理英语&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;左中右对齐&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#左中右对齐&#34;&gt;#&lt;/a&gt; 左中右对齐&lt;/h4&gt;
&lt;p&gt;拥有参数 &lt;code&gt;width&lt;/code&gt;  代表填充过后的字符串长度，如果该参数小于原字符串的长度，就会输出原字符串&lt;/p&gt;
&lt;p&gt;&lt;code&gt;fillchar&lt;/code&gt; : 填充字符&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;x.center(width,fillchar):&lt;/code&gt;  实现居中，默认用空格填充&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x.ljust(width,fillchar)&lt;/code&gt; : 实现左对齐，默认用空格填充&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x.rjust(width,fillchar)&lt;/code&gt; : 实现右对齐，默认用空格填充&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x.zfill(width,fillchar)&lt;/code&gt; : 实现左对齐，默认用 &lt;code&gt;0&lt;/code&gt;  填充&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;查找-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#查找-2&#34;&gt;#&lt;/a&gt; 查找&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;x.count(sub[],start,end)&lt;/code&gt; : 在 x 字符串的 start~end 段查找 sub 字符串出现的次数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x.find(sub[],start,end)&lt;/code&gt; : 查找目标字符串在 x 字符串的 start 到 end 段的下标索引值，&lt;strong&gt; 从左到右查找&lt;/strong&gt;，找不到目标字符串返回 **-1**&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x.rfind(sub[],start,end)&lt;/code&gt; : 查找目标字符串在 x 字符串的 start 到 end 段的下标索引值，&lt;strong&gt; 从右到左查找&lt;/strong&gt;，找不到目标字符串返回 **-1**&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x.index(sub[],start,end)&lt;/code&gt; ：与 &lt;code&gt;find&lt;/code&gt;  的用法相同，找不到目标字符串报错&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x.rindex(sub[],start,end)&lt;/code&gt; : 与 &lt;code&gt;rfind&lt;/code&gt;  的用法相同，找不到目标字符串报错&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;替换&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#替换&#34;&gt;#&lt;/a&gt; 替换&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;x.expandtabs(X)&lt;/code&gt; : 将字符串中的 &lt;code&gt;tab&lt;/code&gt;  替换成&lt;strong&gt;空格&lt;/strong&gt;，X 为指定的空格数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x.replace(old,new,count = -1)&lt;/code&gt; : 将 &lt;code&gt;old&lt;/code&gt;  字符串替换成 &lt;code&gt;new&lt;/code&gt;  字符串 count 为替换次数 默认为无限次&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x.translate(table)&lt;/code&gt; : 按照转换表格进行替换&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x.str.maketrans(待转换字符串,目标字符串,需要忽略的字符串)&lt;/code&gt; : 生成转换表格 &lt;code&gt;table&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;判断&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#判断&#34;&gt;#&lt;/a&gt; 判断&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;x.startswith(prefix[],start,end)&lt;/code&gt; : 判断 prefix 字符串是否出现在目标字符串 start~end 的起始位置，可以通过&lt;strong&gt;元组&lt;/strong&gt;传入多个待匹配字符串，只要有一个成功返回 True&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x.endswith(suffix[],start,end)&lt;/code&gt; : 判断 prefix 字符串是否出现在目标字符串 start~end 的终止位置，可以通过&lt;strong&gt;元组&lt;/strong&gt;传入多个待匹配字符串，只要有一个成功返回 True&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x.istitle()&lt;/code&gt;  判断字符串中是否每个单词的首字母都大写&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x.isupper()&lt;/code&gt; : 判断字符串中是否每个字母都大写&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x.islower()&lt;/code&gt; : 判断字符串中是否每个字母都小写&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x.isalpha()&lt;/code&gt; : 判断该字符串是否全部由字母构成，&lt;strong&gt; 空格不算字母&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x.isspace()&lt;/code&gt; : 判断该字符串是否是&lt;strong&gt;空白字符串&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x.isprintable()&lt;/code&gt; : 判断字符串中是否都是可打印的，&lt;strong&gt; 转义字符是不可打印的&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x.isdecimal()&lt;/code&gt; ：判断是否为数字，必须是纯数字&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x.isdigit()&lt;/code&gt; ：判断是否为数字，可以是 2² 这种计算式&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x.isnumeric()&lt;/code&gt; ：判断是否为数字，支持多种语言的数字&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x.isalnum()&lt;/code&gt; : &lt;code&gt;x.isalpha()&lt;/code&gt; , &lt;code&gt;x.isdecimal()&lt;/code&gt; , &lt;code&gt;x.isdigit()&lt;/code&gt; , &lt;code&gt;x.isnumeric()&lt;/code&gt; , 四者有一个返回 True, 该函数就返回 True&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x.isidentifier()&lt;/code&gt; : 判断字符串是否为一个合法的 python 标识符&lt;/li&gt;
&lt;li&gt;keyword 模块中的 &lt;code&gt;iskeyword()&lt;/code&gt; : 判断该字符串是否为 python 的&lt;strong&gt;保留标志符&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;截取&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#截取&#34;&gt;#&lt;/a&gt; 截取&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;x.lstrip(chars =None)&lt;/code&gt; : 去除左侧的字符（默认为空格）, 逐一匹配字符串中的字符&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x.rstrip(chars =None)&lt;/code&gt; : 去除右侧的字符（默认为空格）, 逐一匹配字符串中的字符&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x.strip(chars =None)&lt;/code&gt; : 去除左右的字符（默认为空格）, 逐一匹配字符串中的字符&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x.removeprefix(prefix)&lt;/code&gt; : 指定删除前缀，匹配整个字符串而不是单个字符&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x.removesuffix(suffix)&lt;/code&gt; : 指定删除后缀，匹配整个字符串而不是单个字符&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;      zylzhuyilong&#34;&lt;/span&gt;
x&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;strip&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34; z&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#逐一匹配 答案为ylzhuyilong&lt;/span&gt;
x&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;strip&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;#默认为空格答案为zylzhuyilong&lt;/span&gt;
x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;www.wbaidu.com&#34;&lt;/span&gt;
x&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;removeprefix&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;www.&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#不逐一匹配字符,直接匹配字符串 答案为wbaidu.com&lt;/span&gt;
x&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;removesuffix&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;.com&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#同理 答案是www.wbaidu&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;拆分和拼接&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#拆分和拼接&#34;&gt;#&lt;/a&gt; 拆分和拼接&lt;/h4&gt;
&lt;h5 id=&#34;拆分&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#拆分&#34;&gt;#&lt;/a&gt; 拆分&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;x.partition(seq)&lt;/code&gt; : 将字符串指定字符为分割切割字符串 返回一个&lt;strong&gt;三元组&lt;/strong&gt;，从&lt;strong&gt;左到右&lt;/strong&gt;寻找指定字符，以第一个为准&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x.rpartition(seq)&lt;/code&gt; : 将字符串指定字符为分割切割字符串 返回一个&lt;strong&gt;三元组&lt;/strong&gt;，从&lt;strong&gt;右到左&lt;/strong&gt;寻找指定字符，以第一个为准&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x.split(seq = None,maxsplit = -1)&lt;/code&gt; : 以指定字符为分割进行拆分，以列表形式返回&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x.rsplit(seq = None,maxsplit = -1)&lt;/code&gt; : 与 &lt;code&gt;split&lt;/code&gt;  相同，为&lt;strong&gt;从右往左&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x.splitlines(keepend = False)&lt;/code&gt;  将字符串进行分行，以列表形式返回， &lt;code&gt;keepend&lt;/code&gt;  指定结果是否包含换行符&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;拼接&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#拼接&#34;&gt;#&lt;/a&gt; 拼接&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;join(iterable)&lt;/code&gt; : 用于字符串拼接， &lt;code&gt;join&lt;/code&gt;  方法拼接的效率大于 &lt;code&gt;+&lt;/code&gt;  拼接&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token string&#34;&gt;&#34;.&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;join&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;A&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;F&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;C&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#结果为A.F.C 可以使用列表也可以使用元组&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;格式化字符串&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#格式化字符串&#34;&gt;#&lt;/a&gt; 格式化字符串&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;{关键字索引:格式化选项}.format()&lt;/code&gt; : 在原字符串中使用 &lt;code&gt;{}&lt;/code&gt;  来表示替换部分，使用 &lt;code&gt;format&lt;/code&gt;  方法来替换&lt;/p&gt;
&lt;p&gt;格式化选项: &lt;code&gt;[[fill]align][sign][#][0][width][grouping_option][.precision][type]&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fill&lt;/code&gt; : 填充字符&lt;/li&gt;
&lt;li&gt;&lt;code&gt;align&lt;/code&gt; : 对齐方式&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sign&lt;/code&gt; : 前面添加的符号&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#&lt;/code&gt; ：在显示进制时，会在数前面追加一个前缀&lt;strong&gt; 0x&lt;/strong&gt; 类似的来提醒这是什么进制的数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0&lt;/code&gt; : 以 0 填充&lt;/li&gt;
&lt;li&gt;&lt;code&gt;width&lt;/code&gt; : 格式化宽度&lt;/li&gt;
&lt;li&gt;&lt;code&gt;grouping_option&lt;/code&gt; : 使用什么符号来做千位的分隔符 (逗号和下划线两个选项)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.precision&lt;/code&gt; : 精度&lt;/li&gt;
&lt;li&gt;&lt;code&gt;type&lt;/code&gt; : 以什么形式输出值&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;age &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;eval&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;你的年龄是&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
name &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;你的名字是&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;你的年龄是{},你的名字是{}&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;age&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;name&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;你的年龄是{1},你的名字是{0}&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;name&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;age&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;我叫{name},我爱{people}.format(name = &#34;&lt;/span&gt;wxl&lt;span class=&#34;token string&#34;&gt;&#34;,people = &#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&#34;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/jIyhAP&#34;&gt;&lt;img src=&#34;https://s1.ax1x.com/2022/07/18/jIyhAP.png&#34; alt=&#34;align.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/jIy4tf&#34;&gt;&lt;img src=&#34;https://s1.ax1x.com/2022/07/18/jIy4tf.png&#34; alt=&#34;sign.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/jIy5h8&#34;&gt;&lt;img src=&#34;https://s1.ax1x.com/2022/07/18/jIy5h8.png&#34; alt=&#34;精度&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/jIyT1g&#34;&gt;&lt;img src=&#34;https://s1.ax1x.com/2022/07/18/jIyT1g.png&#34; alt=&#34;type1&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/jIyqns&#34;&gt;&lt;img src=&#34;https://s1.ax1x.com/2022/07/18/jIyqns.png&#34; alt=&#34;type2.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token string&#34;&gt;&#34;{:^10}&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;250&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#输出为&#39;     250    &#39;&lt;/span&gt;
&lt;span class=&#34;token string&#34;&gt;&#34;{left:&amp;gt;10}{right:&amp;lt;10}&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;left &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;250&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;right &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;250&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#输出为 &#39;    250250     &#39;&lt;/span&gt;
&lt;span class=&#34;token string&#34;&gt;&#34;{:.2f}&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3.1415&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 显示结果为3.14&lt;/span&gt;
&lt;span class=&#34;token string&#34;&gt;&#34;{:.2g}&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3.1415&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 显示结果为3.1&lt;/span&gt;
&lt;span class=&#34;token string&#34;&gt;&#34;{:b}&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;80&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;   &lt;span class=&#34;token comment&#34;&gt;#结果以二进制输出为1010000&lt;/span&gt;
&lt;span class=&#34;token string&#34;&gt;&#34;{:.{prec}f}&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3.1415&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;prec &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#输出为3.14 更加地灵活&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;f-字符串&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#f-字符串&#34;&gt;#&lt;/a&gt; f - 字符串&lt;/h3&gt;
&lt;p&gt;python3.6 以上可以使用&lt;/p&gt;
&lt;p&gt;进一步简化了格式化字符串&lt;/p&gt;
&lt;p&gt;在字符串前面加上 f 或者 F 将 format 去掉，将 format 的数值放在:&lt;strong&gt; 左侧&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token string&#34;&gt;&#34;我今天{}岁了&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;age&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token string-interpolation&#34;&gt;&lt;span class=&#34;token string&#34;&gt;f&#34;我今天&lt;/span&gt;&lt;span class=&#34;token interpolation&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;age&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;岁了&#34;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token string&#34;&gt;&#34;{:.2f}&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3.1415&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token string-interpolation&#34;&gt;&lt;span class=&#34;token string&#34;&gt;f&#34;&lt;/span&gt;&lt;span class=&#34;token interpolation&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3.1415&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token format-spec&#34;&gt;.2f&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;序列&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#序列&#34;&gt;#&lt;/a&gt; 序列&lt;/h2&gt;
&lt;p&gt;列表，元组，字符串统称为&lt;strong&gt;序列&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;运用在序列中的运算符: &lt;code&gt;+&lt;/code&gt; ， &lt;code&gt;*&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;与序列相关的函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#与序列相关的函数&#34;&gt;#&lt;/a&gt; 与序列相关的函数&lt;/h3&gt;
&lt;h4 id=&#34;列表元组字符串相互转换&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#列表元组字符串相互转换&#34;&gt;#&lt;/a&gt; 列表元组字符串相互转换&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;list()&lt;/code&gt; : 将可迭代对象变为列表&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tuple()&lt;/code&gt; : 将可迭代对象变为元组&lt;/li&gt;
&lt;li&gt;&lt;code&gt;str()&lt;/code&gt; : 将可迭代对象变为字符串&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token builtin&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;sam&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;   &lt;span class=&#34;token comment&#34;&gt;#结果为[&#39;s&#39;,&#39;a&#39;,&#39;m&#39;]&lt;/span&gt;
&lt;span class=&#34;token builtin&#34;&gt;tuple&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;sam&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# (&#39;s&#39;,&#39;a&#39;,&#39;m&#39;)&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;minmax函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#minmax函数&#34;&gt;#&lt;/a&gt; min&amp;amp;max 函数&lt;/h4&gt;
&lt;p&gt;对比传入的参数返回最大最小值&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;min(可迭代对象,default = &#34;&#34;)&lt;/code&gt; : 当没有参数传入时，返回 default 也可以直接传入参数&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;len和sum&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#len和sum&#34;&gt;#&lt;/a&gt; len 和 sum&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;len()&lt;/code&gt; : 检测长度 有最大值限制&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sum(，start = )&lt;/code&gt; : 求和函数，start 可以传入初始值&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;sorted-reversed&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#sorted-reversed&#34;&gt;#&lt;/a&gt; sorted() &amp;amp; reversed()&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sorted(x，key,reverse)&lt;/code&gt; : 排序，返回的是一个全新的列表，.sort () 返回会改变原列表&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reversed()&lt;/code&gt; : 返回的是一个迭代器&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;t &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;a&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;ab&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;abcd&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;ab&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;token builtin&#34;&gt;sorted&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;t&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;key &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#比较的是len()函数的返回结果&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;all和any&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#all和any&#34;&gt;#&lt;/a&gt; all () 和 any ()&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;all()&lt;/code&gt; : 判断可迭代对象中是否&lt;u&gt;所有&lt;/u&gt;的值都为真&lt;/li&gt;
&lt;li&gt;&lt;code&gt;any()&lt;/code&gt; : 判断可迭代对象中是否存在&lt;u&gt;某个元素&lt;/u&gt;的值为真&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;enumerate&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#enumerate&#34;&gt;#&lt;/a&gt; enumerate()&lt;/h4&gt;
&lt;p&gt;返回一个枚举对象，将可迭代对象中的每个元素及从 0 开始的序号共同构成一个二元组的列表&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;seasons &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;spring&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;summer&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Fall&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Winter&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;token builtin&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;enumerate&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;seasons&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#返回的结果为 [(0, &#39;spring&#39;), (1, &#39;summer&#39;), (2, &#39;Fall&#39;), (3, &#39;Winter&#39;)]&lt;/span&gt;
&lt;span class=&#34;token builtin&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;enumerate&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;seasons&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#返回的结果为[(10, &#39;spring&#39;), (11, &#39;summer&#39;), (12, &#39;Fall&#39;), (13, &#39;Winter&#39;)]&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;zip&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#zip&#34;&gt;#&lt;/a&gt; zip()&lt;/h4&gt;
&lt;p&gt;创建一个聚合多个可迭代对象的&lt;strong&gt;迭代器&lt;/strong&gt;，它会将作为参数传入的每个可迭代对象的每个元素依次组合成元组，即第 i 个元组包含来自每个参数的第 i 个元素&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
y &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;token builtin&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;zip&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;y&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# 返回的结果是[(1,4),(2,5),(3,6)]&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;当传入的列表长度不一致时，zip 函数以最短的列表长度为准&lt;/p&gt;
&lt;h4 id=&#34;map&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#map&#34;&gt;#&lt;/a&gt; map()&lt;/h4&gt;
&lt;p&gt;根据提供的函数对指定的可迭代对象的每个元素进行运算，并将返回运算结果的&lt;strong&gt;迭代器&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token builtin&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;ord&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Sam&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;#会将sam字符串(可迭代对象)中的每个字符运用ord()函数转换成编码值&lt;/span&gt;
&lt;span class=&#34;token builtin&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;pow&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#结果为[32,9,1000]&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;#因为pow()函数需要两个参数&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;#传入的可迭代对象长度不一致时,按最短的为准&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;filter过滤器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#filter过滤器&#34;&gt;#&lt;/a&gt; filter () 过滤器&lt;/h4&gt;
&lt;p&gt;根据提供的函数对指定的可迭代对象的每个元素进行运算，并将运算结果为真的元素，以&lt;strong&gt;迭代器&lt;/strong&gt;的形式返回&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token builtin&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;islower&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Sam&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#islower判断是否为小写字母,返回为真的结果 为[&#39;a&#39;,&#39;m]&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;iter&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#iter&#34;&gt;#&lt;/a&gt; iter()&lt;/h4&gt;
&lt;p&gt;将可迭代函数转化成迭代器&lt;/p&gt;
&lt;h4 id=&#34;nextx&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#nextx&#34;&gt;#&lt;/a&gt; next(x,&#34;    &#34;)&lt;/h4&gt;
&lt;p&gt;逐渐将迭代器中的元素提取出来，可以传入第二个参数，当迭代器中的元素被提取完了之后将会返回第二个参数字符串&lt;/p&gt;
&lt;h3 id=&#34;迭代器与可迭代对象&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#迭代器与可迭代对象&#34;&gt;#&lt;/a&gt; 迭代器与可迭代对象&lt;/h3&gt;
&lt;p&gt;迭代器是一次性的，可迭代对象可以重复使用&lt;/p&gt;
&lt;h2 id=&#34;字典&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#字典&#34;&gt;#&lt;/a&gt; 字典&lt;/h2&gt;
&lt;p&gt;映射类型数据的获取上，字典的数据远远快于列表&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;吕布&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;口口布&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;关羽&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;关习习&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
x&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;吕布&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#得到&#34;口口布&#34;结果&lt;/span&gt;
x&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;abc&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;AA&#34;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;#之后x就变成{&#34;吕布&#34;:&#34;口口布&#34;,&#34;关羽&#34;:&#34;关习习&#34;,&#34;abc&#34;:&#34;AA&#34;}&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;创建字典的方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#创建字典的方法&#34;&gt;#&lt;/a&gt; 创建字典的方法&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;{x:y} 直接创建&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;dict () 函数创建&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;y &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;dict&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;吕布&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;口口布&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;#需要注意的是 键值对的键不能加引号&lt;/span&gt;
y &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;dict&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;吕布&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;口口布&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;关羽&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;关习习&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#两者可以混合使用&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用 zip () 和 dict () 函数结合&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;增&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#增&#34;&gt;#&lt;/a&gt; 增&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;fromkeys(iterable[,values])&lt;/code&gt;  : 创建一个所有键的值都相同的字典&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;a &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;dict&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;fromkeys&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Sam&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;666&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#得到的结果为{&#39;s&#39;: 666, &#39;a&#39;: 666, &#39;m&#39;: 666}&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;删&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#删&#34;&gt;#&lt;/a&gt; 删&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Name.pop(,default = )&lt;/code&gt; : 返回值为键所对应的值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Name.popitem()&lt;/code&gt; : 删除最后一个加入字典的键值对&lt;/li&gt;
&lt;li&gt;&lt;code&gt;del()&lt;/code&gt;  关键字:&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Name.clear()&lt;/code&gt; : 清除整个字典&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;s&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;666&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;a&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;666&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;m&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;666&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
x&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;pop&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;s&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#&#39;s&#39;键被删除并返回&#39;s&#39;键的值666&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;#当没有该键时返回default参数 default没有指定时报错&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;del&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;s&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#也能删除x中的键&#39;s&#39;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;改&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#改&#34;&gt;#&lt;/a&gt; 改&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;直接修改&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Name.update()&lt;/code&gt; : 同时处理多个函数&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;a &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;dict&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;fromkeys&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;sam&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;666&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
a&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;update&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;s&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;111&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;a&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#返回{&#39;s&#39;: 111, &#39;a&#39;: 123, &#39;m&#39;: 666}&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;#同样 键不能加引号&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;查&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#查&#34;&gt;#&lt;/a&gt; 查&lt;/h3&gt;
&lt;p&gt;1. 直接查找&lt;/p&gt;
&lt;p&gt;2. &lt;code&gt;Name.get(,default)&lt;/code&gt; : 与第一种方法相比可以给 default 赋值，这样当值不存在时不会报错，会返回 default&lt;/p&gt;
&lt;p&gt;3. &lt;code&gt;Name.setdefault(x,y)&lt;/code&gt; : 查找 x 键，当 x 不存在时，将 x 作为键，y 作为值加入字典并且返回 y&lt;/p&gt;
&lt;p&gt;4. &lt;code&gt;items(),keys(),values()&lt;/code&gt; : 三个方法，分别获取键值对，键，值的&lt;strong&gt;视图对象&lt;/strong&gt; (当字典发生改变时，视图对象也会跟着改变)&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;吕布&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;口口布&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;关羽&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;关习习&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;abc&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;AA&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
a &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; x&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;items&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;#dict_items([(&#39;吕布&#39;, &#39;口口布&#39;), (&#39;关羽&#39;, &#39;关习习&#39;), (&#39;abc&#39;, &#39;AA&#39;)])&lt;/span&gt;
b &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; x&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;keys&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;#dict_keys([&#39;吕布&#39;, &#39;关羽&#39;, &#39;abc&#39;])&lt;/span&gt;
c &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; x&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;values&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#dict_values([&#39;口口布&#39;, &#39;关习习&#39;, &#39;AA&#39;])&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;5. &lt;code&gt;Name.copy()&lt;/code&gt; : 浅拷贝&lt;/p&gt;
&lt;h3 id=&#34;嵌套&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#嵌套&#34;&gt;#&lt;/a&gt; 嵌套&lt;/h3&gt;
&lt;p&gt;与列表的嵌套相似&lt;/p&gt;
&lt;h3 id=&#34;字典推导式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#字典推导式&#34;&gt;#&lt;/a&gt; 字典推导式&lt;/h3&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;s&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;666&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;a&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;m&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
y &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;v&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;k &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; k&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;v &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; x&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;items&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;#输出的y为{666: &#39;s&#39;, 1: &#39;a&#39;, 2: &#39;m&#39;}&lt;/span&gt;
y &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;v&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;k &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; k&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;v &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; x&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;items&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; v&lt;span class=&#34;token operator&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;#输入的y为{666: &#39;s&#39;}&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;集合&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#集合&#34;&gt;#&lt;/a&gt; 集合&lt;/h2&gt;
&lt;h3 id=&#34;三种方法创建集合&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#三种方法创建集合&#34;&gt;#&lt;/a&gt; 三种方法创建集合&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;{}&lt;/code&gt;  创建&lt;/li&gt;
&lt;li&gt;集合推导式  &lt;code&gt;{i for i in &#34;Sam&#34;}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;类型构造器 &lt;code&gt;set()&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;集合是无序的  无法使用下标索引进行访问 使用 in 来判断是否在集合中&lt;/p&gt;
&lt;p&gt;可以使用集合的唯一性来去重和检测重复值&lt;/p&gt;
&lt;h3 id=&#34;集合方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#集合方法&#34;&gt;#&lt;/a&gt; 集合方法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Name.copy()&lt;/code&gt; : 浅拷贝&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Name.isdisjoint(可迭代对象)&lt;/code&gt; : 检测集合是否没有交集&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a.issubset(b)&lt;/code&gt; :a 集合是否是 b 集合的子集&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a.issuperset(b)&lt;/code&gt; ：b 集合是否是 a 集合的子集&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a.union(b)&lt;/code&gt; : 返回 a,b 的并集&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a.intersection(b)&lt;/code&gt; : 返回 a,b 的交集&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a.difference(b)&lt;/code&gt; : 返回属于 a 集合不属于 b 集合的元素&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上述方法可以多参数，同时也可以使用运算符号来进行比较和计算 (&amp;lt;&amp;lt;=&amp;gt; &amp;gt;= | &amp;amp; -  ^(对称差集))&lt;/p&gt;
&lt;p&gt;方法可以直接传入可迭代对象，而运算符只能进行集合的比较&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;a.symmetric_difference()&lt;/code&gt; : 返回 a,b 的并集减去 a,b 的交集&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Name.update(可迭代对象)&lt;/code&gt; : 往集合中添加元素&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Name.intersection_update()&lt;/code&gt; : 先求交集在更新，同理 diffrence_update 等相同&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Name.add()&lt;/code&gt; : 往集合中传入元素，此时如果传入的是可迭代对象 例如字符串，整个字符串会被看成一个元素&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Name.remove() Name.discard()&lt;/code&gt; : 从集合中删除元素，如果元素不存在 remove 方法会报错 discard () 方法会&lt;strong&gt;静默处理&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Name.pop()&lt;/code&gt; : 随机获取集合中的一个元素&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Name.clear()&lt;/code&gt; : 清楚集合&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;可变和不可变&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#可变和不可变&#34;&gt;#&lt;/a&gt; 可变和不可变&lt;/h3&gt;
&lt;p&gt;set () 创建可变的集合 frozenset () 创建不可变的集合&lt;/p&gt;
&lt;h3 id=&#34;可哈希&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#可哈希&#34;&gt;#&lt;/a&gt; 可哈希&lt;/h3&gt;
&lt;p&gt;通过 hash () 获取哈希值&lt;/p&gt;
&lt;p&gt;python 中大多数不可变对象都是可哈希的，可变对象都是不可哈希的&lt;/p&gt;
&lt;p&gt;只有可哈希的对象才能作为字典的键和集合的元素&lt;/p&gt;
&lt;p&gt;所以为了实现集合的嵌套 只能使用 frozenset () 生成的不可变集合 才能实现集合的嵌套&lt;/p&gt;
&lt;h3 id=&#34;额外&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#额外&#34;&gt;#&lt;/a&gt; 额外&lt;/h3&gt;
&lt;p&gt;实现查找的时候可以将列表转换成集合，会节约大量的时间，但是同时也会消耗掉大量的空间&lt;/p&gt;
&lt;h2 id=&#34;函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#函数&#34;&gt;#&lt;/a&gt; 函数&lt;/h2&gt;
&lt;p&gt;def Name(): / sth&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;形式参数：占位置&lt;/li&gt;
&lt;li&gt;实际参数：传递数据&lt;/li&gt;
&lt;li&gt;返回值：通过 &lt;code&gt;return&lt;/code&gt;  返回函数的结果 没有 return 语句 返回 None 值&lt;/li&gt;
&lt;li&gt;位置参数：位置固定的参数&lt;/li&gt;
&lt;li&gt;关键字参数：通过关键字传递 参数 = “”  &lt;strong&gt;位 0 置参数只能在关键字参数之前&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;python 允许函数在定义时给参数指定默认值，如果没有传递参数，函数将会使用默认值，默认参数需要放在形参的最后&lt;/p&gt;
&lt;p&gt;形参中可以使用 &lt;code&gt;/&lt;/code&gt; ， &lt;code&gt;/&lt;/code&gt;  左侧的参数不能使用关键字传递， &lt;code&gt;*&lt;/code&gt;  的右侧只能使用关键字参数&lt;/p&gt;
&lt;h3 id=&#34;收集参数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#收集参数&#34;&gt;#&lt;/a&gt; 收集参数&lt;/h3&gt;
&lt;p&gt;在参数前面加入 &lt;code&gt;*&lt;/code&gt; , 表示不确定参数的数量，这种参数叫收集参数&lt;/p&gt;
&lt;p&gt;收集参数，实际是将参数打包成元组传入函数，当返回多个返回值时，返回的也是元组&lt;/p&gt;
&lt;p&gt;函数中除了收集参数，如果还要传入其他参数，应该使用关键字参数&lt;/p&gt;
&lt;p&gt;在参数前面加入 &lt;code&gt;**&lt;/code&gt; , 函数会将参数打包成字典传入函数&lt;/p&gt;
&lt;h3 id=&#34;作用域&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#作用域&#34;&gt;#&lt;/a&gt; 作用域&lt;/h3&gt;
&lt;p&gt;局部作用域与全局作用域，局部变量与全局变量&lt;/p&gt;
&lt;p&gt;全局变量可以在函数内部访问，但是不会改变&lt;/p&gt;
&lt;h4 id=&#34;global语句&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#global语句&#34;&gt;#&lt;/a&gt; global 语句&lt;/h4&gt;
&lt;p&gt;在函数内部使用 global 定义，表示函数内部的变量就是全部变量&lt;/p&gt;
&lt;h4 id=&#34;嵌套函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#嵌套函数&#34;&gt;#&lt;/a&gt; 嵌套函数&lt;/h4&gt;
&lt;p&gt;外部无法调用嵌套函数，只有在函数内部才能调用嵌套函数&lt;/p&gt;
&lt;h4 id=&#34;nonlocal语句&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#nonlocal语句&#34;&gt;#&lt;/a&gt; nonlocal 语句&lt;/h4&gt;
&lt;p&gt;使用 nonlocal 语句定义变量，可以在嵌套函数内部，修改外部变量的值&lt;/p&gt;
&lt;h4 id=&#34;legb规则&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#legb规则&#34;&gt;#&lt;/a&gt; LEGB 规则&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Local: 局部作用域&lt;/li&gt;
&lt;li&gt;Enclosed: 嵌套函数的外层函数作用域&lt;/li&gt;
&lt;li&gt;Global: 全局作用域&lt;/li&gt;
&lt;li&gt;Building: 内置作用域&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;局部作用域与全局作用域发生冲突，python 会优先使用局部作用域&lt;/p&gt;
&lt;p&gt;嵌套函数发生 局部作用域会覆盖外层函数作用域&lt;/p&gt;
&lt;h3 id=&#34;闭包&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#闭包&#34;&gt;#&lt;/a&gt; 闭包&lt;/h3&gt;
&lt;p&gt;利用嵌套函数的外层作用域会被保存下来，将数据保存在外层函数的参数或者变量中，将内层函数作为返回值返回，就能从外部简介调用内层函数&lt;/p&gt;
&lt;p&gt;将函数作为返回值返回时，只需要给出函数名称即可&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;exp_of&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;exp&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
     &lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;exp_in&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;number&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;number &lt;span class=&#34;token operator&#34;&gt;**&lt;/span&gt; exp&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
     &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; exp_in
&lt;span class=&#34;token comment&#34;&gt;#&amp;gt;&amp;gt;&amp;gt; move1 = exp_of(2)&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;#&amp;gt;&amp;gt;&amp;gt; move2 = exp_of(3)&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;#&amp;gt;&amp;gt;&amp;gt; move1(3)&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;#9&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;#&amp;gt;&amp;gt;&amp;gt; move2(3)&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;#27&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;装饰器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#装饰器&#34;&gt;#&lt;/a&gt; 装饰器&lt;/h3&gt;
&lt;p&gt;函数可以作为参数传给另外一个函数&lt;/p&gt;
&lt;p&gt;@装饰器 ID  隔行 函数&lt;/p&gt;
&lt;p&gt;表示并不是调用函数 而是将函数作为参数传入装饰器&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt; &lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;time_master&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;func&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; call_fun&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
             start &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; time&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;time&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
    		func&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
    		end &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; time&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;time&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
    		&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string-interpolation&#34;&gt;&lt;span class=&#34;token string&#34;&gt;f&#34;一共耗费了&lt;/span&gt;&lt;span class=&#34;token interpolation&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;end&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;start&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token format-spec&#34;&gt;.2f&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;秒&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
         &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; call_fun
    
 &lt;span class=&#34;token comment&#34;&gt;#装饰器&lt;/span&gt;
&lt;span class=&#34;token decorator annotation punctuation&#34;&gt;@time_master&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;myfunc&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;开始调用函数&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
    
&lt;span class=&#34;token comment&#34;&gt;#装饰器本质 &lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;myfunc&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;开始调用函数&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
myfunc &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; time_master&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;myfunc&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

myfunc&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;同时使用多个装饰器时，从函数头上距离函数最近的开始运行，依次往上运行&lt;/p&gt;
&lt;h3 id=&#34;lambda表达式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#lambda表达式&#34;&gt;#&lt;/a&gt; lambda 表达式&lt;/h3&gt;
&lt;p&gt;lambda arg1,arg2 … argN : expression&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;squareX&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; x &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; x
squareY &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;lambda&lt;/span&gt; y &lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; y &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; y&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;生成器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#生成器&#34;&gt;#&lt;/a&gt; 生成器&lt;/h3&gt;
&lt;p&gt;使用 yield 表达式来代替 return 语句&lt;/p&gt;
&lt;p&gt;生成器即每次在调用时，执行到 yield 时，暂停并保存状态，返回一个值，下一次调用则从下一个语句开始执行&lt;/p&gt;
&lt;p&gt;可以理解为生成器是函数中 field 的所有返回值所组成的一个连续数据，但是只能一个一个查看且无法使用下标索引 (可能不准确)&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;counter&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
     i &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;
     &lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
             &lt;span class=&#34;token keyword&#34;&gt;yield&lt;/span&gt; i
             i&lt;span class=&#34;token operator&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;生成器表达式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#生成器表达式&#34;&gt;#&lt;/a&gt; 生成器表达式&lt;/h4&gt;
&lt;p&gt;(i ** 2 for i in range())&lt;/p&gt;
&lt;h3 id=&#34;递归&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#递归&#34;&gt;#&lt;/a&gt; 递归&lt;/h3&gt;
&lt;p&gt;利用函数自己可以调用自身&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;facRecur&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;n&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
	&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; n &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
		&lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;
	&lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
		&lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; n &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; facRecur&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;n&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;永久存储&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#永久存储&#34;&gt;#&lt;/a&gt; 永久存储&lt;/h2&gt;
&lt;h3 id=&#34;创建文件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#创建文件&#34;&gt;#&lt;/a&gt; 创建文件&lt;/h3&gt;
&lt;p&gt;f = open (“文件路径和文件名”,“打开的模式”)   返回值为一个文件对象&lt;/p&gt;
&lt;p&gt;f.write (“字符串”): 将字符串写入文件，返回的是写入的数量&lt;/p&gt;
&lt;p&gt;f.writeless (&#34;&#34;): 将字符串写入文件，不会自动添加换行符，且不会返回写入的数量&lt;/p&gt;
&lt;p&gt;文件内部具有文件指针，当文件不断被读取时，文件指针不断后移，直到末尾的 EOF&lt;/p&gt;
&lt;p&gt;f.tell (): 返回文件指针的位置&lt;/p&gt;
&lt;p&gt;f.seek (位置)：移动文件指针的位置&lt;/p&gt;
&lt;p&gt;f.read (): 读取文件&lt;/p&gt;
&lt;p&gt;f.flush (): 将缓存区内的数据写入文件&lt;/p&gt;
&lt;p&gt;f.truncate (pos): 将文件对象截取到 pos 位置，如果没有 pos 值则截取到文件指针当前指定的位置&lt;/p&gt;
&lt;h3 id=&#34;路径处理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#路径处理&#34;&gt;#&lt;/a&gt; 路径处理&lt;/h3&gt;
&lt;h2 id=&#34;类和对象&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#类和对象&#34;&gt;#&lt;/a&gt; 类和对象&lt;/h2&gt;
</content>
        <category term="python" />
        <updated>2022-07-09T16:00:00.000Z</updated>
    </entry>
</feed>
