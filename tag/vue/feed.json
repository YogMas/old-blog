{
    "version": "https://jsonfeed.org/version/1",
    "title": "S1m • All posts by \"vue\" tag",
    "description": "博客记录个人学习笔记,处于不断完善中",
    "home_page_url": "https://github.com/YogMas/YogMas.github.io",
    "items": [
        {
            "id": "https://github.com/YogMas/YogMas.github.io/2022/09/10/vue/",
            "url": "https://github.com/YogMas/YogMas.github.io/2022/09/10/vue/",
            "title": "vue",
            "date_published": "2022-09-09T16:00:00.000Z",
            "content_html": "<h1 id=\"vue\"><a class=\"markdownIt-Anchor\" href=\"#vue\">#</a> Vue</h1>\n<h2 id=\"vue2\"><a class=\"markdownIt-Anchor\" href=\"#vue2\">#</a> Vue2</h2>\n<h3 id=\"vue核心\"><a class=\"markdownIt-Anchor\" href=\"#vue核心\">#</a> Vue 核心</h3>\n<h4 id=\"初识vue\"><a class=\"markdownIt-Anchor\" href=\"#初识vue\">#</a> 初识 Vue</h4>\n<p>Vue 通过创造一个<strong> Vue 实例</strong>来进行工作，其中需要传入一个<strong>配置对象</strong></p>\n<ul>\n<li><code>el</code> : 表示 Vue 实例为哪一个<strong>容器</strong>服务</li>\n<li><code>data</code> : 存储数据供 el 中的容器使用</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>     <span class=\"token comment\">//创建一个Vue实例  传入配置对象</span>\n    el<span class=\"token operator\">:</span> <span class=\"token string\">'#root'</span><span class=\"token punctuation\">,</span>    <span class=\"token comment\">//Vue为哪个容器服务  这里为ID为root的容器服务</span>\n    data<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        name<span class=\"token operator\">:</span> <span class=\"token string\">'s1m'</span><span class=\"token punctuation\">,</span>    <span class=\"token comment\">//存储的数据</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>容器中的代码仍然符合 html 规范，只不过引入了一些特殊的 Vue 语法</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span> <span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span> <span class=\"token punctuation\">\"</span>root<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n           \t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span>\n                hello {{name}}  <span class=\"token comment\">&lt;!-- 此时就去调用了Vue中name数据--&gt;</span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">&gt;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li><code>{{}}`内的内容并不是只能写Vue实例中存在的数据,可以写**js表达式**(表达式:一个表达式会产生一个值,可以放在任何一个需要值的地方)\n- 一个容器只能由一个实例接管  必须**一对一**,真实开发中只有一个Vue实例,配合着Vue中的组件进行使用\n\n#### 模板语法\n\n##### 插值语法\n\n`{{}}</code> : 用在<strong>标签体</strong>中，也就是放在标签内，用于读取 data 中的内容，会将其内的内容转化成<strong> js 表达式</strong></li>\n</ul>\n<h5 id=\"指令语法\"><a class=\"markdownIt-Anchor\" href=\"#指令语法\">#</a> 指令语法</h5>\n<p>用于解析<strong>标签</strong> 属性 内容 绑定事件等等</p>\n<p>Vue 中的指令语法 一般都是 <code>v-xxx:</code></p>\n<h4 id=\"数据绑定\"><a class=\"markdownIt-Anchor\" href=\"#数据绑定\">#</a> 数据绑定</h4>\n<ul>\n<li>单向数据绑定:  <code>v-bind:</code> Vue 实例中的数据发生改变，页面中的数据也发生改变，但是发过来不改变</li>\n<li>双向数据绑定: <code>v-model:</code>  页面中的数据和 Vue 实例中的数据双向绑定，一个改变另一个就发生改变</li>\n</ul>\n<p><u><strong>并不是所有支持单向数据绑定的就能双向绑定</strong></u></p>\n<p><code>v-model</code>  只能应用在<strong>表单类</strong>元素上面，即有 <code>value</code>  属性，</p>\n<p>显然 <code>v-model</code>  是用来与用户产生交互的，不是表单类元素，无法捕获到用户的输入，根本没有必要进行双向绑定</p>\n<h5 id=\"简写\"><a class=\"markdownIt-Anchor\" href=\"#简写\">#</a> 简写</h5>\n<p><code>v-bind:</code>  可以<strong>简写</strong>为 <code>:</code></p>\n<p><code>v-model:value</code>  可以<strong>简写</strong>为 <code>v-model</code>  因为 <code>v-model</code>  本来就是对 <code>value</code>  属性进行捕获</p>\n<h4 id=\"el和data的两种写法\"><a class=\"markdownIt-Anchor\" href=\"#el和data的两种写法\">#</a> el 和 data 的两种写法</h4>\n<h5 id=\"el的写法\"><a class=\"markdownIt-Anchor\" href=\"#el的写法\">#</a> el 的写法</h5>\n<ol>\n<li>在初始化 Vue 实例中传入配置化对象，配置化对象中包含 <code>el:''</code>  来指定挂载对象</li>\n<li>通过对 Vue 实例进行挂载</li>\n</ol>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//第一种写法</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    el<span class=\"token operator\">:</span><span class=\"token string\">\"#root\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> \n\n<span class=\"token comment\">//第二种写法</span>\n<span class=\"token keyword\">const</span> v <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv<span class=\"token punctuation\">.</span><span class=\"token function\">$mount</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#root'</span><span class=\"token punctuation\">)</span>进行挂载<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"data的写法\"><a class=\"markdownIt-Anchor\" href=\"#data的写法\">#</a> data 的写法</h5>\n<ol>\n<li>对象式：通过 <code>data:{}</code></li>\n<li>函数式: <code>data:function() {return {}}</code>  通过函数的返回值返回数据</li>\n</ol>\n<p>写项目组件时，必须得使用函数式</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//第一种写法 对象式</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//对象式</span>\n    data<span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token punctuation\">}</span>\n    \n    \n    <span class=\"token comment\">//函数式</span>\n    <span class=\"token function-variable function\">data</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//此处的this是Vue对象</span>\n    <span class=\"token comment\">//此处的函数不能使用箭头函数 因为箭头函数没有自己的this 他会往外找 然后找到window全局对象   所以此处只能写成普通函数</span>\n    \t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token comment\">//数据  </span>\n        <span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">//在对象里面写函数 一般会写成这种简写形式</span>\n\t<span class=\"token function\">data</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        \n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><u><strong>由 Vue 所管理的函数，一定不要写成箭头函数，一旦写成箭头函数，this 就不再是 Vue 实例了，就变成 window 全局对象了</strong></u></p>\n<h4 id=\"mvvm模型\"><a class=\"markdownIt-Anchor\" href=\"#mvvm模型\">#</a> MVVM 模型</h4>\n<p><strong>Vue 设计受 MVVM 模型的启发</strong></p>\n<ol>\n<li>M: 模型 (Model): 对应 data 中的数据</li>\n<li>V: 视图 (View): 模板</li>\n<li>VM: 视图模型 (ViewModel): Vue 实例对象</li>\n</ol>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/C0DE41AAD7ED441C2C288D4E7A7AA07E.png\" alt=\"img\"></p>\n<p>将 Dom 结构和数据进行链接</p>\n<p>Vue 中通常使用<strong> vm</strong> 来作为 Vue 实例的名称</p>\n<p>插值语法可以获取到所有<strong> VM 中的数据</strong> (data 数据也在 VM 中)</p>\n<h4 id=\"数据代理\"><a class=\"markdownIt-Anchor\" href=\"#数据代理\">#</a> 数据代理</h4>\n<h5 id=\"defineproperty-方法\"><a class=\"markdownIt-Anchor\" href=\"#defineproperty-方法\">#</a> defineproperty 方法</h5>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//js代码</span>\n<span class=\"token keyword\">let</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    name： <span class=\"token string\">\"s1m\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineproperty</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">,</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span>\n    value<span class=\"token operator\">:</span><span class=\"token number\">18</span><span class=\"token punctuation\">,</span>\n    enumerable<span class=\"token operator\">:</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//属性是否可以被枚举 默认为false</span>\n    writable<span class=\"token operator\">:</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//属性是否可以被修改 默认为false</span>\n    configurable<span class=\"token operator\">:</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//属性是否可以被修改 默认为false</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//传入三个参数 第一个为修改对象,第二个为添加的key值 第三个为参数</span>\n\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineproperty</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">,</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">get</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//当有人获取 age的值的时候进行调用 且返回值为age的value</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">set</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    \t<span class=\"token comment\">//当有人 修改 age的值的时候调用</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"什么是数据代理\"><a class=\"markdownIt-Anchor\" href=\"#什么是数据代理\">#</a> 什么是数据代理</h5>\n<p>数据代理：通过一个对象代理对另一个对象中属性的操作 (读 / 写)</p>\n<p>通过修改一个对象的属性可以对另一个对象的属性同样进行修改</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">        <span class=\"token keyword\">let</span> obj1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>x<span class=\"token operator\">:</span><span class=\"token number\">100</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> obj2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>y<span class=\"token operator\">:</span><span class=\"token number\">200</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>obj2<span class=\"token punctuation\">,</span><span class=\"token string\">'x'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span>\n            <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> obj1<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>   <span class=\"token comment\">//当访问obj2的x的属性时候 返回的是obj1的属性</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token function\">set</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                obj1<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span> <span class=\"token comment\">//当对obj2的x改的时候,修改的obj1的x</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> \n<span class=\"token comment\">//当对obj2的x值更改的时候 更改的是obj1的x值</span>\n<span class=\"token comment\">//获取obj2的x值的时候,获取的是obj1的值</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"vue中的数据代理\"><a class=\"markdownIt-Anchor\" href=\"#vue中的数据代理\">#</a> Vue 中的数据代理</h5>\n<p><strong>data 中的数据都代理在 vm 中</strong></p>\n<p>通过 vm 对象来代理 data 中属性的操作</p>\n<ul>\n<li>当获取 vm 中的数据时，vm 触发 getter, 返回 data 中的数据</li>\n<li>当修改 vm 中的数据时，vm 触发 setter, 修改 data 中的数据</li>\n</ul>\n<p>data 中的数据存储在了 vm 中的_data 中</p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/ED11289633F8ED8EA2D312E86600F0F9.png\" alt=\"img\"></p>\n<p>没有数据代理的话 每次访问数据就得写_data.xxx 更加地麻烦</p>\n<h4 id=\"事件处理\"><a class=\"markdownIt-Anchor\" href=\"#事件处理\">#</a> 事件处理</h4>\n<h5 id=\"事件的基本使用\"><a class=\"markdownIt-Anchor\" href=\"#事件的基本使用\">#</a> 事件的基本使用</h5>\n<p><strong><u>所有被 Vue 管理的函数都写成普通函数</u></strong>, 为了保证 this</p>\n<p>事件的基本使用</p>\n<ul>\n<li>使用 <code>v-on:xxx</code>  或者 <code>@xxx</code>  绑定事件</li>\n<li>事件的回调配置在 methods 对象中，最终会在 vm 上</li>\n<li>methods 中配置的函数，不要用箭头函数，否则 this 将发生改变</li>\n<li><code>@click=\"demo\"</code>  和 <code>@click=\"demo($event)\"</code>  效果一致，但是后者可以传参</li>\n<li><code>@click=\"xxx\"</code>  xxx 可以写一些简单的 js 语句，当语句过多时，还是建议写到 methods 方法中去</li>\n</ul>\n<h5 id=\"事件修饰符\"><a class=\"markdownIt-Anchor\" href=\"#事件修饰符\">#</a> 事件修饰符</h5>\n<ol>\n<li><code>prevent</code> : 阻止默认事件</li>\n<li><code>stop</code> : 阻止时间冒泡</li>\n<li><code>once</code> : 事件只触发一次</li>\n<li><code>capture</code> : 使用事件的捕获方式</li>\n<li><code>self</code> : 只有 event.target 是当前操作的元素时才触发事件</li>\n<li><code>passive</code> : 事件的默认行为立即执行，无需等待时间回调执行完毕</li>\n</ol>\n<p>eg:  <code>@click.prevent = \"showInfo\"</code></p>\n<h5 id=\"键盘事件\"><a class=\"markdownIt-Anchor\" href=\"#键盘事件\">#</a> 键盘事件</h5>\n<ol>\n<li>Vue 常用的按键别名\n<ul>\n<li>回车:enter</li>\n<li>删除:delete</li>\n<li>退出:esc</li>\n<li>空格:space</li>\n<li>换行:tab (特殊，必须配合 keydown 使用)</li>\n<li>上:up</li>\n<li>下:down</li>\n<li>左:left</li>\n<li>右:right</li>\n</ul>\n</li>\n<li>原始 key 值绑定，<strong> 由多个单词组成的 key 值需要将多个单词用 <code>-</code>  连接</strong></li>\n<li>系统修饰键:ctrl,alt,shift,meta (特殊用法)\n<ul>\n<li>配合 <code>keyup</code>  使用：按下修饰键的同时，再按下其他键，随后释放其他键，时间才被触发  要实现同时按下修饰符和普通符 可以 <code>@keyup.修饰符.普通键</code></li>\n<li>配合 <code>keydown</code>  使用：正常触发事件</li>\n</ul>\n</li>\n<li>也可以使用 keyCode 去指定具体的按键 (<u>不推荐</u>), 因为不同的键盘编码可能不统一</li>\n<li><code>Vue.config.keyCodes.自定义键名 = 键码</code>  可以定制按键别名</li>\n</ol>\n<h4 id=\"计算属性\"><a class=\"markdownIt-Anchor\" href=\"#计算属性\">#</a> 计算属性</h4>\n<p>Vue 中只要模板中的数据发生改变，Vue 就会重新解析一遍模板，然后将更改的部分渲染到页面上</p>\n<p>Vue 认为 data 里面的数据是<strong>属性</strong></p>\n<p><strong>计算属性</strong>：对已有的属性进行加工计算，从而得到一个全新的属性</p>\n<ul>\n<li>定义：要用的属性不存在，要通过<strong>已有属性</strong><u>计算</u>得来</li>\n<li>原理：底层借助 <code>Object.defineproperty</code>  方法提供的 getter 和 setter</li>\n<li>get 函数的调用时机:\n<ol>\n<li>初次读取时</li>\n<li>当依赖的数据发生改变的时候</li>\n</ol>\n</li>\n<li>优势：与 methods 相比，内部有缓存机制，效率更高</li>\n<li>计算属性最终会出现在 vm 上，直接读取使用就可以，如果计算属性会被修改，就要写 set 函数</li>\n</ul>\n<h5 id=\"计算属性的简写\"><a class=\"markdownIt-Anchor\" href=\"#计算属性的简写\">#</a> 计算属性的简写</h5>\n<p>一般情况下计算属性用不到 set, 只需要用 get</p>\n<p><strong>不考虑修改的情况下才可以简写</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//完整情况</span>\ncomputed<span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>\n    fullName<span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> lastName <span class=\"token operator\">+</span> firstName<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">set</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            \n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//简写</span>\ncomputed<span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fullName</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> lastName <span class=\"token operator\">+</span> firstName\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"监视属性\"><a class=\"markdownIt-Anchor\" href=\"#监视属性\">#</a> 监视属性</h4>\n<ol>\n<li><strong>当被监视的属性发生变化</strong>的时候，回调函数自动调用</li>\n<li>监视的属性必须<strong>存在</strong>，才能进行监视</li>\n<li>监视的两种写法:\n<ol>\n<li>.new Vue 的时候传入 watch 配置</li>\n<li>通过 vm.$watch 监视</li>\n</ol>\n</li>\n</ol>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token comment\">//第一种监视写法</span>\n<span class=\"token number\">0</span>const vm <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\twatch<span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>\n        isHot<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">//监视属性 isHot</span>\n             immediate<span class=\"token operator\">:</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//可以不写 默认为false 为true表示,初始化的时候也调用handler</span>\n        \t<span class=\"token function\">handler</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">newValue<span class=\"token punctuation\">,</span>oldValue</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">//表示当isHot属性的值发生改变的时候,会调用handler函数,并传入新的值和旧的值</span>\n            <span class=\"token comment\">//计算出来的属性也可以监视</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\">//第二种监视的写法</span>\n<span class=\"token keyword\">const</span> vm <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nvm<span class=\"token punctuation\">.</span><span class=\"token function\">$watch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'isHot'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//和上面相同</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"深度监视\"><a class=\"markdownIt-Anchor\" href=\"#深度监视\">#</a> 深度监视</h5>\n<ul>\n<li>Vue 中的<strong> watch</strong> 默认不监测对象内部值的改变 (一层)       (Vue 是可以监视的 但是 Watch 不行)</li>\n<li>配置 <code>deep:true</code>  可以检测到对象内部值的改变 (多层次)</li>\n</ul>\n<h5 id=\"监视的简写形式\"><a class=\"markdownIt-Anchor\" href=\"#监视的简写形式\">#</a> 监视的简写形式</h5>\n<p><strong><u>不需要 immediate 和 deep 的时候，才可以简写</u></strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">watch <span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//正常写法</span>\n    isHot<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">handler</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">newValue<span class=\"token punctuation\">,</span>oldValue</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"正常写法\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>  \n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">//简写形式</span>\n    <span class=\"token function\">isHot</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">newValue<span class=\"token punctuation\">,</span>oldValue</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"简写写法\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"watch对比computed\"><a class=\"markdownIt-Anchor\" href=\"#watch对比computed\">#</a> Watch 对比 Computed</h4>\n<ol>\n<li>Computed 可以完成的，watch 能完成的</li>\n<li>Watch 能完成，computed 不一定能完成</li>\n<li>Computed 不支持异步操作，Watch 支持</li>\n<li>在都可以实现的时候，哪个容易写哪个</li>\n</ol>\n<h4 id=\"两个重要小原则\"><a class=\"markdownIt-Anchor\" href=\"#两个重要小原则\">#</a> 两个重要小原则</h4>\n<ol>\n<li>被 Vue 管理的函数，都写成普通函数，这样 this 指定的才是 vue</li>\n<li>所有不被 Vue 所管理的函数 (定时器，ajax) 最好写成箭头函数，这样 this 的指向才是 vue</li>\n</ol>\n<h4 id=\"class与style绑定\"><a class=\"markdownIt-Anchor\" href=\"#class与style绑定\">#</a> Class 与 style 绑定</h4>\n<h5 id=\"绑定class样式\"><a class=\"markdownIt-Anchor\" href=\"#绑定class样式\">#</a> 绑定 class 样式</h5>\n<ul>\n<li><strong>字符串写法</strong>：适用于样式的类名不确定，需要动态指定</li>\n<li>** 数组写法:** 适用于样式的个数和名字都不确定</li>\n<li><strong>对象写法</strong>：适用于要绑定的样式用不用不确定</li>\n</ul>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token style\"><span class=\"token language-css\">\n //省略\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>root<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n\t// 字符串写法\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">:class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Mode<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>changeMode<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    \n    //数组写法\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">:class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ModeArr<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    \n    //对象写法\n    \n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">:class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ModeObj<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\">\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        el<span class=\"token operator\">:</span><span class=\"token string\">\"#root\"</span><span class=\"token punctuation\">,</span>\n        data<span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>\n            Mode<span class=\"token operator\">:</span><span class=\"token string\">'happy'</span><span class=\"token punctuation\">,</span>\n            ModeArr<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token string\">'happy'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'normal'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'bad'</span><span class=\"token punctuation\">]</span>\n            ModeObj<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            \thappy<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n            \tbad<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        methods<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">changeMode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>Mode <span class=\"token operator\">=</span> <span class=\"token string\">'normal'</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"绑定style\"><a class=\"markdownIt-Anchor\" href=\"#绑定style\">#</a> 绑定 style</h5>\n<ol>\n<li><code>:style=\"{fontSize: xxx}\"</code>   其中 xxx 是动态值</li>\n<li>也可以像下面代码中一样 (常用)</li>\n<li>注意必须写成 <strong><u>驼峰命名</u></strong></li>\n</ol>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>root<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">:style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>styleObj<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n\t\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\">\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            el<span class=\"token operator\">:</span><span class=\"token string\">\"#root\"</span><span class=\"token punctuation\">,</span>\n            data<span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>\n                styleObj<span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>\n                \tfontSize<span class=\"token operator\">:</span> <span class=\"token string\">'40px'</span><span class=\"token punctuation\">,</span>      <span class=\"token comment\">//要切换成驼峰命名</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            methods<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"条件渲染\"><a class=\"markdownIt-Anchor\" href=\"#条件渲染\">#</a> 条件渲染</h4>\n<ol>\n<li><code>v-show</code>  做条件渲染，只是使用 display 将其隐藏了，但是本身还存在在 DOM 树里面</li>\n<li><code>v-if</code>  做条件渲染，直接在 DOM 树里面增添或者删除这个结点</li>\n</ol>\n<p>如果频繁切换，推荐用 <code>v-show</code></p>\n<h5 id=\"v-if与v-if-else于v-else\"><a class=\"markdownIt-Anchor\" href=\"#v-if与v-if-else于v-else\">#</a> v-if 与 v-if-else 于 v-else</h5>\n<p>使用与 <code>if      else if      else</code>  一样，但是进行判断的标签必须紧紧相连</p>\n<p>如果要对一堆元素进行管理，可以在最外层加上一个 <code>&lt;template v-if=\"true\"&gt;</code> , 这样不影响结构</p>\n<p>另外 templace 只能和 <code>v-if</code>  配合使用，不能和 <code>v-show</code>  配合使用</p>\n<h4 id=\"列表渲染important\"><a class=\"markdownIt-Anchor\" href=\"#列表渲染important\">#</a> 列表渲染 (important)</h4>\n<p><code>v-for</code>  指令用于展示列表数据</p>\n<ol>\n<li>语法:  <code>v-for=\"(item,index) in xxx\" :key=\"yyy\"</code></li>\n<li>可以遍历：数组，对象，字符串 (用得少), 指定次数 (用得少)</li>\n</ol>\n<h5 id=\"key作用与原理\"><a class=\"markdownIt-Anchor\" href=\"#key作用与原理\">#</a> key 作用与原理</h5>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/C9F8A6E7AC902688BD253CBFCB33AE47.png\" alt=\"index作为key\"></p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/ACF36FEC23900F414FD48E7CC5EFF9DE.png\" alt=\"id作为key\"></p>\n<ol>\n<li>\n<p>虚拟 DOM 中 key 的作用</p>\n<p>key 是虚拟 DOM 对象的标识，当数据发生变化的时候，Vue 会根据<strong>新数据</strong>，生成新的虚拟 DOM，随后 Vue 进行新虚拟 DOM 与旧虚拟 DOM 的差异比较，比较规则如下</p>\n</li>\n<li>\n<p>对比规则:</p>\n<ol>\n<li>旧虚拟 DOM 找到了与新虚拟 DOM 相同的 key\n<ol>\n<li>若虚拟 DOM 中内容没变，直接使用旧的真实 DOM</li>\n<li>若虚拟 DOM 的内容变了，则生成新的真实 DOM, 并替换掉页面中之前的真实 DOM</li>\n</ol>\n</li>\n<li>旧虚拟 DOM 没找到与新虚拟 DOM 相同的 key\n<ol>\n<li>创建新的真实 DOM, 随后渲染到页面</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>用 index 作为 key 可能会引发的问题</p>\n<ol>\n<li>若对数据进行逆序添加，逆序删除等破坏顺序的操作，会产生没有必要的真实 DOM 更新，使<strong>效率降低</strong></li>\n<li>如果结构中还包括输入类的 DOM, 会产生错误的 DOM 更新，<strong> 使界面有问题</strong></li>\n</ol>\n</li>\n<li>\n<p>最好选择唯一标识作为 key 值</p>\n</li>\n</ol>\n<h5 id=\"列表过滤\"><a class=\"markdownIt-Anchor\" href=\"#列表过滤\">#</a> 列表过滤</h5>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> vm <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n          <span class=\"token function\">data</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token keyword\">return</span><span class=\"token punctuation\">{</span>\n                  keyWord<span class=\"token operator\">:</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n                  persons<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n                      id<span class=\"token operator\">:</span><span class=\"token number\">001</span><span class=\"token punctuation\">,</span>\n                      name<span class=\"token operator\">:</span><span class=\"token string\">\"张三东\"</span><span class=\"token punctuation\">,</span>\n                      sex<span class=\"token operator\">:</span><span class=\"token string\">'男'</span><span class=\"token punctuation\">,</span>\n                      age<span class=\"token operator\">:</span><span class=\"token number\">19</span><span class=\"token punctuation\">,</span>\n                  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span>\n                      id<span class=\"token operator\">:</span><span class=\"token number\">002</span><span class=\"token punctuation\">,</span>\n                      name<span class=\"token operator\">:</span><span class=\"token string\">\"李四东伦\"</span><span class=\"token punctuation\">,</span>\n                      sex<span class=\"token operator\">:</span><span class=\"token string\">'女'</span><span class=\"token punctuation\">,</span>\n                      age<span class=\"token operator\">:</span><span class=\"token number\">18</span><span class=\"token punctuation\">,</span>\n                  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span>\n                      id<span class=\"token operator\">:</span><span class=\"token number\">003</span><span class=\"token punctuation\">,</span>\n                      name<span class=\"token operator\">:</span><span class=\"token string\">\"王伦五\"</span><span class=\"token punctuation\">,</span>\n                      sex<span class=\"token operator\">:</span><span class=\"token string\">'男'</span><span class=\"token punctuation\">,</span>\n                      age<span class=\"token operator\">:</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span>\n                  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n              <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n              computed<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                  <span class=\"token function\">filpersons</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>persons<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">person</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n                          <span class=\"token keyword\">return</span> person<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>keyWord<span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n                      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n                  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n              <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          methods<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n              \n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      vm<span class=\"token punctuation\">.</span><span class=\"token function\">$mount</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#root'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"列表排序\"><a class=\"markdownIt-Anchor\" href=\"#列表排序\">#</a> 列表排序</h5>\n<p>在 data 中使用一个变量来存储此时排序的状态</p>\n<p>通过对状态的检测 来进行排序，当点击按钮的时，状态更改，重新进行渲染</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">computed<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">filpersons</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span>  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>persons<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">person</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n                            <span class=\"token keyword\">return</span> person<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>keyWord<span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n                        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token comment\">//不需要排序 直接返回</span>\n                        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sortType<span class=\"token punctuation\">)</span>\n                        <span class=\"token comment\">//进行排序</span>\n                            arr<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n                                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sortType <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n                                <span class=\"token keyword\">return</span> b<span class=\"token punctuation\">.</span>age <span class=\"token operator\">-</span> a<span class=\"token punctuation\">.</span>age\n                                <span class=\"token keyword\">else</span> \n                                <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">.</span>age <span class=\"token operator\">-</span> b<span class=\"token punctuation\">.</span>age\n                            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"vue监测数据改变的原理\"><a class=\"markdownIt-Anchor\" href=\"#vue监测数据改变的原理\">#</a> Vue 监测数据改变的原理</h4>\n<h5 id=\"监测对象的改变\"><a class=\"markdownIt-Anchor\" href=\"#监测对象的改变\">#</a> 监测对象的改变</h5>\n<p>通过 setter 和 getter 进行监测，只要一改变，就进行重新渲染</p>\n<p>且底层使用递归，如果有多个对象叠对象，Vue 会找到最底层的数据进行监测</p>\n<h5 id=\"监测数组的改变\"><a class=\"markdownIt-Anchor\" href=\"#监测数组的改变\">#</a> 监测数组的改变</h5>\n<p>调用包裹数组更新元素的方法实现，本质就是做了两件事</p>\n<ul>\n<li>调用原生对应的方法对数组进行更新</li>\n<li>重新解析模板，进而更新页面</li>\n</ul>\n<h5 id=\"vueset的使用\"><a class=\"markdownIt-Anchor\" href=\"#vueset的使用\">#</a> Vue.set () 的使用</h5>\n<p>vue 对象中追加的数据，不做响应式处理，必须使用 vue.set () 方法</p>\n<p><code>Vue.set(target,key,value)</code> : 往 target 身上添加 key:value 的<strong>响应式数据</strong></p>\n<p><code>this.$set()</code>  和 <code>vue.set()</code>  相同</p>\n<p>否则后期添加的键值对不会是响应式的</p>\n<h5 id=\"vue修改数组中某个元素\"><a class=\"markdownIt-Anchor\" href=\"#vue修改数组中某个元素\">#</a> vue 修改数组中某个元素</h5>\n<p>直接对数组进行更新，vue 不会监测到，只有通过以下方法，vue 才会监测到</p>\n<p>使用如下方法</p>\n<ul>\n<li><code>push()</code> , <code>pop()</code> , <code>shift()</code> , <code>unshift()</code> , <code>splice()</code> , <code>sort()</code> , <code>reverse()</code></li>\n</ul>\n<h4 id=\"收集表单数据\"><a class=\"markdownIt-Anchor\" href=\"#收集表单数据\">#</a> 收集表单数据</h4>\n<ul>\n<li><code>&lt;input type=\"text\"&gt;</code> :v-model 双向绑定，<strong> 用户输入的就是 value 值</strong></li>\n<li><code>&lt;input type=\"radio\"&gt;</code> :v-model 双向绑定，收集到的是 value 值，需要<strong>手动配置 value 值</strong></li>\n<li><code>&lt;input type=\"checkbox\"&gt;</code>\n<ul>\n<li>没有配置 input 的 value 属性，收集到的是 checked 的<strong>布尔值</strong></li>\n<li>配置了 value 属性，如果是非数组收集到的也是布尔值，<strong>是数组收集到的就是选中的 value 组成的数组</strong></li>\n</ul>\n</li>\n</ul>\n<h5 id=\"v-model的三个修饰符\"><a class=\"markdownIt-Anchor\" href=\"#v-model的三个修饰符\">#</a> v-model 的三个修饰符</h5>\n<ul>\n<li>lazy: 失去焦点再收集数据</li>\n<li>number: 输入字符串转为有效数字</li>\n<li>trim: 输入首尾空格过滤</li>\n</ul>\n<h4 id=\"过滤器\"><a class=\"markdownIt-Anchor\" href=\"#过滤器\">#</a> 过滤器</h4>\n<p>对要显示的数据进行特定格式化后再显示 (使用于一些简单逻辑的处理)</p>\n<ol>\n<li>语法\n<ul>\n<li>注册过滤器: <code>Vue.filter(name,callback)</code>  或者  <code>new Vue(filters:{})</code></li>\n<li>使用过滤器: <code>{{xxx|过滤器名}}</code>  或者  <code>v-bind:属性 =\"xxx|过滤器名\"</code></li>\n</ul>\n</li>\n<li>备注\n<ul>\n<li>过滤器也可以接受额外参数</li>\n<li>多个过滤器可以串联</li>\n<li>过滤器并<strong>没有改变原本的数据</strong>，只是产生了新的数据</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"内置指令\"><a class=\"markdownIt-Anchor\" href=\"#内置指令\">#</a> 内置指令</h4>\n<h5 id=\"常用\"><a class=\"markdownIt-Anchor\" href=\"#常用\">#</a> 常用</h5>\n<ul>\n<li><code>v-bind</code> : 单向绑定解析表达式</li>\n<li><code>v-model</code> : 双向数据绑定</li>\n<li><code>v-for</code> : 遍历数组 / 对象 / 字符串</li>\n<li><code>v-on</code> : 绑定事件监听，可简写为 @</li>\n<li><code>v-if</code> : 条件渲染 (动态控制节点是否存在)</li>\n<li><code>v-else</code> : 条件渲染 (动态控制节点是否存在)</li>\n<li><code>v-show</code> : 条件渲染 (动态控制节点是否展示)</li>\n</ul>\n<h5 id=\"其他\"><a class=\"markdownIt-Anchor\" href=\"#其他\">#</a> 其他</h5>\n<ol>\n<li>\n<p><code>v-text</code></p>\n<ul>\n<li>作用：向其所在的节点中渲染文本内容</li>\n<li>与插值语法的区别:v-text 会替换掉节点中的<strong>全部内容</strong>，插值语法不会</li>\n</ul>\n</li>\n<li>\n<p><code>v-html</code></p>\n<ul>\n<li>作用：向指定节点中渲染包含 html 结构的内容</li>\n<li>与插值语法的区别\n<ol>\n<li>可以识别 html 结构</li>\n<li>会替换掉节点中的全部内容</li>\n</ol>\n</li>\n<li>注意！\n<ol>\n<li>在网站上动态渲染 html 非常危险，容易导致 XSS 攻击</li>\n<li>一定要在可信的内容上使用 v-html, 不要再用户提交的内容上</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>\n<p><code>v-cloak</code></p>\n<ol>\n<li>本质是一个特殊属性，Vue 实例创建完毕并接管容器后，会删掉 v-cloak 属性</li>\n<li>使用 css 配合 v-cloak 可以解决网速慢时直接将模板展示在浏览器中的问题</li>\n</ol>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token style\"><span class=\"token language-css\">\n    <span class=\"token selector\">[v-cloak]</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span> <span class=\"token attr-name\">v-cloak</span><span class=\"token punctuation\">&gt;</span></span>\n        你好\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p><code>v-once</code></p>\n<ol>\n<li><code>v-once</code>  所在节点在初始动态渲染后，就视为静态内容了</li>\n<li>以后数据的改变不会引起 <code>v-once</code>  所在结构的更新，可以用于优化性能</li>\n</ol>\n</li>\n<li>\n<p><code>v-pre</code></p>\n<ol>\n<li>跳过其所在节点的编译过程</li>\n<li>可利用他跳过：没有使用指令语法，没有使用插值语法的节点，可以加快编译</li>\n</ol>\n</li>\n</ol>\n<h5 id=\"自定义指令\"><a class=\"markdownIt-Anchor\" href=\"#自定义指令\">#</a> 自定义指令</h5>\n<h6 id=\"函数式\"><a class=\"markdownIt-Anchor\" href=\"#函数式\">#</a> 函数式</h6>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">http-equiv</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>X-UA-Compatible<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>IE=edge<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span> <span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>../js/vue.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">&gt;</span></span>Document<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>root<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">&gt;</span></span>当前的n值是<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">v-text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>n<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">&gt;</span></span>放大十倍后的n值是<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">v-big</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>n<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>n++<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>点我n加1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\">\n        <span class=\"token comment\">//定义一个v-big指令,和v-text类似 会把绑定的数值放大10倍</span>\n        <span class=\"token keyword\">const</span> vm <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            <span class=\"token function\">data</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span><span class=\"token punctuation\">{</span>\n                    n<span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            methods<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                \n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            directives<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">//big函数什么时候会被调用</span>\n                <span class=\"token comment\">// 1.指令和元素成功绑定时(初次)</span>\n                <span class=\"token comment\">// 2.指令所在的模板 被重新解析的时候</span>\n                <span class=\"token function\">big</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">element<span class=\"token punctuation\">,</span>binding</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    element<span class=\"token punctuation\">.</span>innerText <span class=\"token operator\">=</span> binding<span class=\"token punctuation\">.</span>value <span class=\"token operator\">*</span> <span class=\"token number\">10</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        vm<span class=\"token punctuation\">.</span><span class=\"token function\">$mount</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#root'</span><span class=\"token punctuation\">)</span>\n    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">&gt;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h6 id=\"对象式\"><a class=\"markdownIt-Anchor\" href=\"#对象式\">#</a> 对象式</h6>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">directives: {\n                XXX:{\n                    //当指令与元素成功绑定时调用\n                    bind() {},\n                    //指令所在元素被插入页面时调用\n                    inserted() {},\n                    //指令所在模板被重新解析时调用\n                    update(){},\n                }\n            },<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>函数式就是只用了 <code>bind</code>  和 <code>update</code>  没用 <code>insert</code></p>\n<h6 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\">#</a> 总结</h6>\n<ol>\n<li>\n<p>定义语法:</p>\n<ol>\n<li>\n<p>局部指令</p>\n<p><code>new Vue({directives:{指令名:配置对象}})</code></p>\n</li>\n<li>\n<p>全局指令</p>\n<p><code>Vue.directive(指令名,配置对象)</code></p>\n</li>\n</ol>\n</li>\n<li>\n<p>配置对象中常用的三个回调</p>\n<ol>\n<li><code>bind</code> : 指令与元素<strong>成功绑定</strong>时调用</li>\n<li><code>inserted</code> : 指令所在元素被<strong>插入页面</strong>时调用</li>\n<li><code>update</code> : 指令所在模板被<strong>重新解析</strong>时调用</li>\n</ol>\n</li>\n<li>\n<p>备注</p>\n<ol>\n<li>指令定义时不加 v-, 但使用时要加</li>\n<li>指令名如果是多个单词，要使用<strong> kebab-case 命名</strong>，不要用 camelCase 命名</li>\n</ol>\n</li>\n</ol>\n<h4 id=\"生命周期\"><a class=\"markdownIt-Anchor\" href=\"#生命周期\">#</a> 生命周期</h4>\n<ol>\n<li>生命周期函数是 Vue 在关键时刻帮我们调用的一些特殊名称的函数</li>\n<li>生命周期函数的名字不可更改，但函数的具体内容是程序员根据需求编写的</li>\n<li>生命周期函数中的 this 指向是 vm 或组件实例对象</li>\n</ol>\n<p>常用的周期钩子</p>\n<ol>\n<li><code>mounted</code> : 发送 ajax 请求，启动定时器，绑定自定义事件，订阅消息等<strong>初始化操作</strong></li>\n<li><code>beforeDestroy</code> : 清除定时器，解绑自定义时间，取消订阅消息等<strong>收尾工作</strong></li>\n</ol>\n<p>关于销毁 Vue 实例</p>\n<ol>\n<li>销毁后借助 Vue 开发者工具看不到任何信息</li>\n<li>销毁后自定义事件会失效，但<strong>原生 DOM 事件仍然有效</strong></li>\n<li>一般不会用 beforeDestroy 操作数据，因为即使操作数据，也<strong>不会再触发更新流程</strong>了</li>\n</ol>\n<h3 id=\"vue组件化编程\"><a class=\"markdownIt-Anchor\" href=\"#vue组件化编程\">#</a> Vue 组件化编程</h3>\n<p>组件：实现应用中局部功能代码和资源的集合</p>\n<h4 id=\"非单文件组件\"><a class=\"markdownIt-Anchor\" href=\"#非单文件组件\">#</a> 非单文件组件</h4>\n<p>一个文件中包含有 n 个组件</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">http-equiv</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>X-UA-Compatible<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>IE=edge<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span> <span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>../js/vue.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">&gt;</span></span>Document<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>root<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>school</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>school</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>hr</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>student</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>student</span><span class=\"token punctuation\">&gt;</span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\">\n        <span class=\"token comment\">//第一步创建组件</span>\n\n        <span class=\"token comment\">//创建school组件</span>\n        <span class=\"token comment\">//不要写el配置项,一定不要写el配置项</span>\n        <span class=\"token keyword\">const</span> school <span class=\"token operator\">=</span> Vue<span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            template<span class=\"token operator\">:</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;div&gt;\n                &lt;h2&gt;学校名称:{{schoolName}}&lt;/h2&gt;\n        &lt;h2&gt;学校地址:{{schoolAddress}}&lt;/h2&gt;\n                &lt;/div&gt;</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n            <span class=\"token function\">data</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span><span class=\"token punctuation\">{</span>\n                    schoolName<span class=\"token operator\">:</span><span class=\"token string\">'UESTC'</span><span class=\"token punctuation\">,</span>\n                    schoolAddress<span class=\"token operator\">:</span><span class=\"token string\">'沙河'</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            methods<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                \n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">//创建student组件</span>\n        <span class=\"token keyword\">const</span> student <span class=\"token operator\">=</span> Vue<span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            template<span class=\"token operator\">:</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;div&gt;\n                &lt;h2&gt;学生名称:{{studentName}}&lt;/h2&gt;\n        &lt;h2&gt;学校年龄:{{studentAge}}&lt;/h2&gt;\n                &lt;/div&gt;</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n            <span class=\"token function\">data</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span><span class=\"token punctuation\">{</span>\n                    studentName<span class=\"token operator\">:</span><span class=\"token string\">'s1m'</span><span class=\"token punctuation\">,</span>\n                    studentAge<span class=\"token operator\">:</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            methods<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                \n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    \n        \n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>       \n            el<span class=\"token operator\">:</span><span class=\"token string\">'#root'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token comment\">//第二步 局部注册组件</span>\n            components<span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>school<span class=\"token punctuation\">,</span>student<span class=\"token punctuation\">,</span><span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n\n\n        <span class=\"token comment\">// const vm = new Vue({</span>\n        <span class=\"token comment\">//     data () {</span>\n        <span class=\"token comment\">//         return{</span>\n        <span class=\"token comment\">//             schoolName:'UESTC',</span>\n        <span class=\"token comment\">//             schoolAddress:'沙河',</span>\n        <span class=\"token comment\">//             studentName:'s1m',</span>\n        <span class=\"token comment\">//             studentAge:20,</span>\n        <span class=\"token comment\">//         }},</span>\n        <span class=\"token comment\">//     methods: {</span>\n                \n        <span class=\"token comment\">//     }</span>\n        <span class=\"token comment\">// })</span>\n        <span class=\"token comment\">// vm.$mount('#root')</span>\n    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">&gt;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>Vue 中使用组件的三大步骤</p>\n<ol>\n<li>定义组件 (创建组件)</li>\n<li>注册组件</li>\n<li>使用组件 (写组件标签)</li>\n</ol>\n<h5 id=\"如何定义一个组件\"><a class=\"markdownIt-Anchor\" href=\"#如何定义一个组件\">#</a> 如何定义一个组件</h5>\n<p>使用 Vue.extend (options) 创建，其中 options 和 new Vue (options) 时传入的那个 options 几乎一样，区别如下:</p>\n<ol>\n<li>el 不要写</li>\n<li>data 必须写成函数 (<strong>避免组件被复用时的引用问题</strong>)</li>\n</ol>\n<p>备注：使用 <code>template</code>  可以配置组件结构</p>\n<h5 id=\"如何注册组件\"><a class=\"markdownIt-Anchor\" href=\"#如何注册组件\">#</a> 如何注册组件</h5>\n<ol>\n<li>局部注册：靠 new Vue 的时候传入 components 选项</li>\n<li>全局注册：靠 Vue.component (‘组件名’, 组件)</li>\n</ol>\n<h5 id=\"编写组件标签\"><a class=\"markdownIt-Anchor\" href=\"#编写组件标签\">#</a> 编写组件标签</h5>\n<p>eg: <code>&lt;school&gt;&lt;/school&gt;</code></p>\n<h5 id=\"几个注意点\"><a class=\"markdownIt-Anchor\" href=\"#几个注意点\">#</a> 几个注意点</h5>\n<ol>\n<li>\n<p>组件名</p>\n<ol>\n<li>一个单词组成：首字母大小写都可以</li>\n<li>多个单词组成\n<ul>\n<li>第一种：(kebab-case 命名) my-school</li>\n<li>第二种：(CamelCase 命名) MySchool (<strong>需要 Vue 脚手架支持</strong>)</li>\n</ul>\n</li>\n<li>备注\n<ul>\n<li>组件名尽可能回避 HTML 中已存的元素名称</li>\n<li>可以使用 name 配置项指定组件在开发者工具中呈现的名字</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>\n<p>关于组件标签</p>\n<ul>\n<li>第一种写法: <code>&lt;school&gt;&lt;/school&gt;</code></li>\n<li>第二种写法: <code>&lt;school/&gt;</code></li>\n<li>备注：不使用脚手架时， <code>&lt;school/&gt;</code>  会导致后续组件不能渲染</li>\n</ul>\n</li>\n<li>\n<p>一个简写方式</p>\n<p><code>const school = Vue.extend(options)</code>  可以写成  <code>const school = options</code></p>\n</li>\n</ol>\n<h5 id=\"组件的嵌套\"><a class=\"markdownIt-Anchor\" href=\"#组件的嵌套\">#</a> 组件的嵌套</h5>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> student <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n       template<span class=\"token operator\">:</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;div&gt;\n           &lt;h2&gt;学生姓名:{{studentName}}&lt;/h2&gt;\n   &lt;h2&gt;学生年龄:{{studentAge}}&lt;/h2&gt;\n           &lt;/div&gt;</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n       <span class=\"token function\">data</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n           <span class=\"token keyword\">return</span><span class=\"token punctuation\">{</span>\n               studentName<span class=\"token operator\">:</span><span class=\"token string\">'s1mm'</span><span class=\"token punctuation\">,</span>\n               studentAge<span class=\"token operator\">:</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span>\n           <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n       methods<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n           \n       <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">const</span> school <span class=\"token operator\">=</span> Vue<span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n       template<span class=\"token operator\">:</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;div&gt;\n           &lt;h2&gt;学校名称:{{schoolName}}&lt;/h2&gt;\n   &lt;h2&gt;学校地址:{{schoolAddress}}&lt;/h2&gt;\n   &lt;hr&gt;\n   &lt;student&gt;&lt;/student&gt;\n           &lt;/div&gt;</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n           components<span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>student<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n       <span class=\"token function\">data</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n           <span class=\"token keyword\">return</span><span class=\"token punctuation\">{</span>\n               schoolName<span class=\"token operator\">:</span><span class=\"token string\">'UESTC'</span><span class=\"token punctuation\">,</span>\n               schoolAddress<span class=\"token operator\">:</span><span class=\"token string\">'沙河'</span><span class=\"token punctuation\">,</span>\n           <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n       methods<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n           \n       <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n   <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>       \n       el<span class=\"token operator\">:</span><span class=\"token string\">'#root'</span><span class=\"token punctuation\">,</span>\n       <span class=\"token comment\">//第二步 局部注册组件</span>\n       components<span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>school<span class=\"token punctuation\">,</span><span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"vuecomponent\"><a class=\"markdownIt-Anchor\" href=\"#vuecomponent\">#</a> VueComponent</h5>\n<ol>\n<li>\n<p>组件本质是一个名为 VueComponnent 的构造函数，不是程序员定义的，是 Vue.extend () 生成的</p>\n</li>\n<li>\n<p>我们只需要写 <code>&lt;school/&gt;</code> ,Vue 解析时会帮我们创建 school 组件的实例对象，即 Vue 帮我们执行的:new VueComponent (options)</p>\n</li>\n<li>\n<p>特别注意：每次调用 Vue.extend, 返回的都是一个全新的 VueComponent</p>\n</li>\n<li>\n<p>关于 this 指向:</p>\n<ol>\n<li>\n<p>组件配置中:</p>\n<p>data 函数，methods 函数，watch 中的函数，computed 中的函数，他们的 sthis 都是<strong> VueComponent 实例对象</strong></p>\n</li>\n<li>\n<p>new Vue (options) 中</p>\n<p>data 函数，methods 函数，watch 中的函数，computed 中的函数，他们的 sthis 都是<strong> Vue 实例对象</strong></p>\n</li>\n</ol>\n</li>\n</ol>\n<h4 id=\"单文件组件\"><a class=\"markdownIt-Anchor\" href=\"#单文件组件\">#</a> 单文件组件</h4>\n<p>通过 VM 组件管理 APP 组件，再通过 APP 组件管理一堆组件</p>\n<pre class=\"line-numbers language-Vue\" data-language=\"Vue\"><code class=\"language-Vue\">&lt;template&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\n&lt;/script&gt;\n\n&lt;style&gt;\nnpm in&lt;/style&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"vue脚手架\"><a class=\"markdownIt-Anchor\" href=\"#vue脚手架\">#</a> Vue 脚手架</h3>\n<h4 id=\"创建vue脚手架\"><a class=\"markdownIt-Anchor\" href=\"#创建vue脚手架\">#</a> 创建 Vue 脚手架</h4>\n<ol>\n<li><code>npm install -g @vue/cli</code> , 全局安装 vue/cli</li>\n<li><code>vue create xxx</code>  创建项目</li>\n<li><code>npm run serve</code>  启动项目</li>\n</ol>\n<h4 id=\"分析脚手架\"><a class=\"markdownIt-Anchor\" href=\"#分析脚手架\">#</a> 分析脚手架</h4>\n<h5 id=\"render函数\"><a class=\"markdownIt-Anchor\" href=\"#render函数\">#</a> render 函数</h5>\n<ol>\n<li>vue.js 是完整版的 vue, 包含核心功能 + 模板解析器</li>\n<li>vue.runtime.xxx.js 是运行版的 vue, 只包含核心功能，没有模板解析器</li>\n<li>因为 <code>vue.runtime.xxx.js</code>  没有模板解析器，所以不能使用 template 配置项，需要使用<strong> render 函数</strong>接收到的<strong> createElement 函数去指定具体内容</strong></li>\n</ol>\n<h5 id=\"修改默认配置\"><a class=\"markdownIt-Anchor\" href=\"#修改默认配置\">#</a> 修改默认配置</h5>\n<p>可以在 <code>vue.config.js</code>  中添加个性化配置，vue 会将个性化配置和 webpack 中的默认配置对比，并且进行替换</p>\n<h4 id=\"ref属性\"><a class=\"markdownIt-Anchor\" href=\"#ref属性\">#</a> ref 属性</h4>\n<ol>\n<li>被用来给元素或<strong>子组件</strong>注册引用信息 (id 的替代者)</li>\n<li>应用在 html 标签上获取的是真实 DOM 元素，应用在组件标签上是组件实例对象（vc）</li>\n<li>使用方式\n<ul>\n<li>打标识  <code>&lt;h1 ref=\"xxx\"&gt; ... &lt;h1&gt;</code>  或  <code>&lt;School ref = \"xxx\"&gt;&lt;/School&gt;</code></li>\n<li>获取: <code>this.$refs.xxx</code></li>\n</ul>\n</li>\n</ol>\n<h4 id=\"props配置\"><a class=\"markdownIt-Anchor\" href=\"#props配置\">#</a> props 配置</h4>\n<p>功能：让组件接收外部传过来的数据</p>\n<ol>\n<li>\n<p>传递数据</p>\n<p><code>&lt;Demo name=\"xxx\" /&gt;</code></p>\n</li>\n<li>\n<p>接收数据 如下三种方式</p>\n</li>\n</ol>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//最简单写法</span>\nprops<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'sex'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'age'</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">//第二种写法 - 限制数据类型</span>\nprops<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>                        <span class=\"token comment\">//限制数据类型</span>\n         name<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n         age<span class=\"token operator\">:</span> Number<span class=\"token punctuation\">,</span>\n         sex<span class=\"token operator\">:</span> Number<span class=\"token punctuation\">,</span>\n     <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//完整写法  可以限制数据类型 + 必需性 + 默认值</span>\nprops<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        name<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            type<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>    <span class=\"token comment\">//类型</span>\n            required<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//名字是必须传的</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        age<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            type<span class=\"token operator\">:</span> Number<span class=\"token punctuation\">,</span>    <span class=\"token comment\">//类型</span>\n            <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token number\">31</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//默认值</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>备注:props 是<strong>只读</strong>的，Vue 底层会监测 props 的修改，如果进行了修改，就会发出警告，<u>如果业务需求需要修改，那么请复制 props 的内容到 data 中一份，然后去修改 data 中的数据</u></p>\n<h4 id=\"mixin混入\"><a class=\"markdownIt-Anchor\" href=\"#mixin混入\">#</a> mixin 混入</h4>\n<p>功能：可以把多个组件共用的配置提取成一个混入对象</p>\n<p>使用方式:</p>\n<ol>\n<li>\n<p>定义混合：在外部创建 js 文件并且引入 比如:</p>\n<p>const hunhe = {</p>\n<p>​\tdata(){}</p>\n<p>}</p>\n</li>\n<li>\n<p>第二部使用混入，例如</p>\n<ol>\n<li>全局混入：Vue.mixin (xxx)</li>\n<li>局部混入:mixins:[‘xxx’]</li>\n</ol>\n</li>\n</ol>\n<h4 id=\"插件\"><a class=\"markdownIt-Anchor\" href=\"#插件\">#</a> 插件</h4>\n<p>功能：增强 Vue</p>\n<p>本质：包含 install 方法的一个对象，install 方法的第一个参数是 Vue，第二个以后的参数是插件使用者传递的数据</p>\n<p>定义插件:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> plugins <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">install</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    \t<span class=\"token comment\">//添加全局过滤器</span>\n      \t<span class=\"token comment\">//添加全局指令</span>\n      <span class=\"token comment\">//配置全局混入</span>\n      <span class=\"token comment\">//添加实例方法</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> plugins<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>使用插件: Vue.use (‘xxx’)</p>\n<h4 id=\"scoped样式\"><a class=\"markdownIt-Anchor\" href=\"#scoped样式\">#</a> scoped 样式</h4>\n<p>作用：让样式在局部生效，防止冲突</p>\n<p>写法:  <code>&lt;style scoped&gt; &lt;/style&gt;</code></p>\n<h4 id=\"数据之间的基础传输\"><a class=\"markdownIt-Anchor\" href=\"#数据之间的基础传输\">#</a> 数据之间的<strong>基础</strong>传输</h4>\n<p>传递给下级组件：通过 props 接受数据，</p>\n<p>传递给上级组件：通过父组件定义函数，传入子组件，子组件通过 props 得到传入的函数，通过调用函数返回值</p>\n<h4 id=\"组件化编码流程\"><a class=\"markdownIt-Anchor\" href=\"#组件化编码流程\">#</a> 组件化编码流程</h4>\n<ol>\n<li>拆分静态组件：组件要按照功能点拆分，命名不要和 html 元素冲突</li>\n<li>实现动态组件：考虑好数据的存放位置，数据是一个组件在用，还是一些组件在用\n<ol>\n<li>一个组件在用：放在组件自身</li>\n<li>一些组件在用：放在共同的父组件身上</li>\n</ol>\n</li>\n</ol>\n<h4 id=\"props使用于\"><a class=\"markdownIt-Anchor\" href=\"#props使用于\">#</a> props 使用于</h4>\n<ol>\n<li>父组件到子组件通信</li>\n<li>子组件到父组件通信 (通过父组件向子组件传递函数)</li>\n</ol>\n<p>v-model 不能绑定 props 传送过来的值，因为 props 不可以修改</p>\n<h4 id=\"浏览器本地存储\"><a class=\"markdownIt-Anchor\" href=\"#浏览器本地存储\">#</a> 浏览器本地存储</h4>\n<h5 id=\"localstorage\"><a class=\"markdownIt-Anchor\" href=\"#localstorage\">#</a> localstorage</h5>\n<ul>\n<li><code>localstorage.setItem(key,value)</code> : 保存数据，且数据为键值对形式，key 和 value 都必须是字符串</li>\n<li><code>localstorage.getItem(key)</code> : 读取数据</li>\n<li><code>localstorage.removeItem(key,value)</code> : 删除数据</li>\n<li><code>localstorage.clear()</code> : 清空所有数据</li>\n</ul>\n<h6 id=\"json对象和字符串相互转换\"><a class=\"markdownIt-Anchor\" href=\"#json对象和字符串相互转换\">#</a> JSON 对象和字符串相互转换</h6>\n<ul>\n<li><code>JSON.parse(String)</code> :json 字符串转对象</li>\n<li><code>JSON.stringify(Object)</code> :json 对象转字符串</li>\n</ul>\n<h5 id=\"sessionstorage\"><a class=\"markdownIt-Anchor\" href=\"#sessionstorage\">#</a> sessionstorage</h5>\n<p>跟 localstorage 的 Api 相同</p>\n<h5 id=\"不同点\"><a class=\"markdownIt-Anchor\" href=\"#不同点\">#</a> 不同点</h5>\n<p>localStorage 一直存储在浏览器</p>\n<p>sessionstorage 关闭浏览器数据就消失</p>\n<h4 id=\"组件自定义事件\"><a class=\"markdownIt-Anchor\" href=\"#组件自定义事件\">#</a> 组件自定义事件</h4>\n<ol>\n<li>\n<p>一种组件间的通信方式，适用于 <strong>子组件 ===&gt; 父组件</strong></p>\n</li>\n<li>\n<p>第二种方式，在父组件中：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;Demo ref=\"xxx\"/&gt;\n.......\nmounted () {\n\tthis.$ref.xxx.$on('自定义事件',this.test)\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>如果想让自定义时间只能触发一次，可以使用 <code>once</code>  修饰符，或者 <code>$once</code>  方法</p>\n</li>\n<li>\n<p>触发自定义事件: <code>this.$emit('自定义事件',数据)</code></p>\n</li>\n<li>\n<p>解绑自定义事件: <code>this.$off('自定义事件')</code></p>\n</li>\n<li>\n<p>组件上也可以绑定原生 DOM 事件，需要使用 <code>native</code>  修饰符</p>\n</li>\n<li>\n<p>注意：通过 this.<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi><mi>e</mi><mi>f</mi><mi>s</mi><mi mathvariant=\"normal\">.</mi><mi>x</mi><mi>x</mi><mi>x</mi><mi mathvariant=\"normal\">.</mi></mrow><annotation encoding=\"application/x-tex\">refs.xxx.</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">s</span><span class=\"mord\">.</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">x</span><span class=\"mord\">.</span></span></span></span>on (‘自定义事件’, 回调函数) 绑定自定义事件时，回调<strong>要么配置在 methods 中，要么用箭头函数</strong>，否则 this 指向会出问题！</p>\n</li>\n</ol>\n<h4 id=\"全局事件总线globaleventbus\"><a class=\"markdownIt-Anchor\" href=\"#全局事件总线globaleventbus\">#</a> 全局事件总线 (GlobalEventBus)</h4>\n<ol>\n<li>\n<p>可以实现任意<strong>组件之间的通信</strong></p>\n</li>\n<li>\n<p>安装全局事件总线:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token operator\">...</span><span class=\"token operator\">...</span>\n\t<span class=\"token function\">beforecreate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">Vue</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>$bus <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span> \n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token operator\">...</span><span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>使用全局事件总线:</p>\n<ol>\n<li>\n<p>接受数据：A 组件想接受数据，则在 A 组件中给 $bus 绑定自定义事件，事件的<strong>回调在 A 组件自身，</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">methods() {\n\tdemo(data){......}\n}\n......\nmounted() {\n\tthis.$bus.$on('xxx',this.demo)\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>提供数据:this.<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi><mi>u</mi><mi>s</mi><mi mathvariant=\"normal\">.</mi></mrow><annotation encoding=\"application/x-tex\">bus.</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">s</span><span class=\"mord\">.</span></span></span></span>emit (‘xxx’, 数据)</p>\n</li>\n</ol>\n</li>\n<li>\n<p>最好在 beforeDestroy 钩子中，用 $off 解绑<strong>当前组件所用到的</strong>事件</p>\n</li>\n</ol>\n<h4 id=\"消息订阅与发布_pubsub\"><a class=\"markdownIt-Anchor\" href=\"#消息订阅与发布_pubsub\">#</a> 消息订阅与发布_pubsub</h4>\n<ol>\n<li>\n<p>一种组件间通信的方式，适用于<strong>任意组件间通信</strong></p>\n</li>\n<li>\n<p>使用步骤:</p>\n<ol>\n<li>\n<p>安装 pubsub: <code>npm i pubsub-js</code></p>\n</li>\n<li>\n<p>引入:  <code>import pubsub from 'pubsub-js'</code></p>\n</li>\n<li>\n<p>接受数据: A 组件想接收数据，则在 A 组件中订阅消息，订阅的<strong>回调在 A 组件自身</strong></p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token function\">methods</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">demo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">msgName<span class=\"token punctuation\">,</span>data</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">...</span><span class=\"token operator\">...</span>\n<span class=\"token function\">mounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pubId <span class=\"token operator\">=</span> pubsub<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'xxx'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">)</span> <span class=\"token comment\">//订阅消息</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>提供数据:  <code>pubsub.public('xxx',数据)</code></p>\n</li>\n<li>\n<p>最好在 beforeDestroy 钩子中，用 Pubsub.unsubscibe (pubId) 取消订阅</p>\n</li>\n</ol>\n</li>\n</ol>\n<h4 id=\"nexttick\"><a class=\"markdownIt-Anchor\" href=\"#nexttick\">#</a> nextTick</h4>\n<ol>\n<li>语法:  <code>this.$nextTick(function () { 代码})</code></li>\n<li>作用：在下一次 DOM 更新结束后执行其指定的回调函数</li>\n<li>什么时候用：当改变数据后，要基于更新后的新 DOM 进行某些操作时，要在 nextTick 所指定的回调函数中执行</li>\n</ol>\n<h4 id=\"过渡与动画\"><a class=\"markdownIt-Anchor\" href=\"#过渡与动画\">#</a> 过渡与动画</h4>\n<p>暂放</p>\n<h3 id=\"vue中的ajax\"><a class=\"markdownIt-Anchor\" href=\"#vue中的ajax\">#</a> Vue 中的 ajax</h3>\n<h4 id=\"vue脚手架配置代理\"><a class=\"markdownIt-Anchor\" href=\"#vue脚手架配置代理\">#</a> Vue 脚手架配置代理</h4>\n<h5 id=\"方法一\"><a class=\"markdownIt-Anchor\" href=\"#方法一\">#</a> 方法一</h5>\n<p>​\t在 Vue.config.js 中添加如下配置:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">devServer<span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>\n\tproxy<span class=\"token operator\">:</span><span class=\"token string\">\"http://localhost:5000\"</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>说明:</p>\n<pre><code>1. 优点:配置简单,请求资源时直接发给前端(8080)即可\n1. 缺点:不能配置多个代理,不能灵活的控制请求是否走代理.\n1. 工作方式:若按照上述配置代理,当请求了前端不存在的资源时,那么该请求会转发给服务器(优先匹配前端资源)\n</code></pre>\n<h5 id=\"方法二\"><a class=\"markdownIt-Anchor\" href=\"#方法二\">#</a> 方法二</h5>\n<p>编写 Vue.config.js 配置具体代理规则:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">moduel<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\tdevServer<span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>\n\t\tproxy<span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token string\">'/api1'</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{</span><span class=\"token comment\">//匹配所有以'/api1/开头的请求路径</span>\n\t\t\t\ttarget<span class=\"token operator\">:</span><span class=\"token string\">'http://localhost:5000'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//代理目标的基础路径</span>\n                changeOrigin<span class=\"token operator\">:</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n                pathRewrite<span class=\"token operator\">:</span><span class=\"token punctuation\">{</span><span class=\"token string\">'^api1'</span><span class=\"token operator\">:</span><span class=\"token string\">''</span><span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'/api2'</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{</span><span class=\"token comment\">//匹配所有以'/api2/开头的请求路径</span>\n\t\t\t\ttarget<span class=\"token operator\">:</span><span class=\"token string\">'http://localhost:5000'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//代理目标的基础路径</span>\n                changeOrigin<span class=\"token operator\">:</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n                pathRewrite<span class=\"token operator\">:</span><span class=\"token punctuation\">{</span><span class=\"token string\">'^api2'</span><span class=\"token operator\">:</span><span class=\"token string\">''</span><span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>说明:</p>\n<pre><code>1. 优点：可以配置多个代理，且可以灵活的控制请求是否走代理。\n1. 缺点：配置略微繁琐，请求资源时必须加前缀\n</code></pre>\n<h4 id=\"vue项目中常用的ajax库\"><a class=\"markdownIt-Anchor\" href=\"#vue项目中常用的ajax库\">#</a> vue 项目中常用的 ajax 库</h4>\n<h5 id=\"axios库使用\"><a class=\"markdownIt-Anchor\" href=\"#axios库使用\">#</a> axios 库使用</h5>\n<p>安装  <code>npm i axios</code></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//先引入</span>\n<span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span>\n<span class=\"token comment\">//使用</span>\n  axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">api</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>\n                <span class=\"token parameter\">response</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n                    \n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                <span class=\"token parameter\">error</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n                    \n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"vue-resource\"><a class=\"markdownIt-Anchor\" href=\"#vue-resource\">#</a> vue-resource</h5>\n<p>vue 自身的插件库，也封装了 ajax, 现在不常用 推荐还是使用 axios</p>\n<p><code>this.$http.get(' ').then( Response =&gt; { }, error =&gt; {})</code></p>\n<h4 id=\"slot插槽\"><a class=\"markdownIt-Anchor\" href=\"#slot插槽\">#</a> Slot 插槽</h4>\n<h5 id=\"默认插槽\"><a class=\"markdownIt-Anchor\" href=\"#默认插槽\">#</a> 默认插槽</h5>\n<p>slot 标签中包含的就是父组件中传入子组件标签中的内容</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">//父组件中\n&lt;Category&gt;\n\t&lt;h1&gt; 你好 &lt;h1&gt;\n&lt;/Category&gt;\n\n//Category标签中\n&lt;slot&gt;&lt;/slot&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"具名插槽\"><a class=\"markdownIt-Anchor\" href=\"#具名插槽\">#</a> 具名插槽</h5>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">//父组件中\n&lt;Category&gt;\n\t&lt;h1 slot=\"demo\"&gt; 你好 &lt;h1&gt;\n\t&lt;h1 slot=\"demo2\"&gt; 你好啊 &lt;h1&gt;\n&lt;/Category&gt;\n\n//Category标签中\n&lt;slot name=\"demo\"&gt;&lt;/slot&gt;\n&lt;slot name=\"demo2\"&gt;&lt;/slot&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><code>slot</code>  与 <code>name</code>  相<strong>对应</strong></p>\n<p>template 标签中用 v-slot</p>\n<h5 id=\"作用域插槽\"><a class=\"markdownIt-Anchor\" href=\"#作用域插槽\">#</a> 作用域插槽</h5>\n<p>数据在组件自身，但根据数据生成的机构需要组件的使用者来决定</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;Category&gt;\n&lt;template scope=\"nihao\"&gt;\n\t&lt;h1&gt; {{nihao.xxx}} &lt;h1&gt;  //相当于 games.xxx\n\t&lt;h1&gt; 你好啊 &lt;h1&gt;\n&lt;/template&gt;\n\n&lt;/Category&gt;\n\n//Category标签中\n&lt;slot :game=\"games\"&gt;&lt;/slot&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"vuex\"><a class=\"markdownIt-Anchor\" href=\"#vuex\">#</a> Vuex</h3>\n<p>在 Vue 中实现集中式数据管理的一个 Vue<strong> 插件</strong>，对 Vue 应用中多个组件的共享状态进行集中式的管理 (读 / 写), 也是一种组件间通信的方式，且使用于<strong>任何组件间</strong>通信</p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/vuex.png\" alt=\"vuex\"></p>\n<h4 id=\"搭建vuex环境\"><a class=\"markdownIt-Anchor\" href=\"#搭建vuex环境\">#</a> 搭建 Vuex 环境</h4>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">//在main.js中 传入store\n\nimport Vue from \"vue\";\nimport App from \"./App.vue\";\nimport store from \"./store/index\";\n\nnew Vue({\n  render: (h) =&gt; h(App),\n  store,\n  beforeCreate() {\n    Vue.prototype.$bus = this;\n  },\n}).$mount(\"#app\");\n\n//在store文件夹中store.js中\n\nimport Vue from \"vue\";\nimport Vuex from \"vuex\";\n\nVue.use(Vuex);\n//准备 actions 用于响应组件中的动作\n\nconst actions = {} //响应组件中的数据\nconst mutations = {} //用于操作数据\nconst state = {} //存储数据\n\nconst store = new Vuex.Store({actions,mutations,state}) //创建store\n\nexport default store<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"基本使用\"><a class=\"markdownIt-Anchor\" href=\"#基本使用\">#</a> 基本使用</h4>\n<ol>\n<li>组件读取 Vuex 中的数据:  <code>$store.state.sum</code></li>\n<li>组件修改 vuex 中的数据:  <code>$store.dispatch('action中的方法名',数据)</code>  或者 <code>$store.commit('mutations中的方法名',数据)</code></li>\n</ol>\n<h4 id=\"getters配置项\"><a class=\"markdownIt-Anchor\" href=\"#getters配置项\">#</a> getters 配置项</h4>\n<p>用于对 state 中的数据进行加工，相当于 vuex 中的计算属性</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> getters <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">bigSum</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> state<span class=\"token punctuation\">.</span>sum <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"mapstate与mapgetters\"><a class=\"markdownIt-Anchor\" href=\"#mapstate与mapgetters\">#</a> mapState 与 mapGetters</h4>\n<ol>\n<li>\n<p><strong>mapState</strong> 方法：帮助映射 state 中的数据成为计算属性</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">computed: {\n\t//对象写法\n\t...mapState({sum:'sum'})\n\t//数组写法\n\t...mapState(['sum'])\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>mapGetters 方法：帮助我们映射 getters 中的数据成为计算属性</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">computed: {\n\t//对象写法\n\t...mapGetters({bigSum:'bigSum'})\n\t//数组写法\n\t...mapGetters(['bigSum'])\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<h4 id=\"mapactions和mapmutations\"><a class=\"markdownIt-Anchor\" href=\"#mapactions和mapmutations\">#</a> mapActions 和 mapMutations</h4>\n<ol>\n<li>\n<p><code>mapActions</code> : 帮助我们生成与 <code>actions</code>  对话的方法，即：包含 <code>$store.dispatch(xxx)</code>  的函数</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">methods: {\n\t//对象\n\tmapActions({increment:\"jia\"})\n\t//数组\n\tmapActions(['jia'])\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p><code>mapMutations</code> : 帮助生成与 <code>mutations</code>  对话的方法</p>\n<p>类似 略</p>\n<p><strong>注意</strong>，现在参数通过在标签中事件触发传递 <code>@click=\"increment(n)\"</code></p>\n</li>\n</ol>\n<h4 id=\"vue模块化\"><a class=\"markdownIt-Anchor\" href=\"#vue模块化\">#</a> Vue 模块化</h4>\n<ol>\n<li>\n<p>目的：让代码更好维护，让多种数据分类更加准确</p>\n</li>\n<li>\n<p>修改 store.js</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">const countAbout = {\n\tnamespaced:true,\n\tstate:{}.\n\tactions:{},\n\tmutations:{},\n\tgetters:{\n\t\n\t}\n}\n\nconst store = new Vuex.Store({moduels:{countAbout}})<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>开启命名空间后，组件中读取 state 数据</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">//方式1 自己读取\nthis.$store.state.personAbout.list\n//方式二：借助mapState读取\n...mapState('personAbout',['sum','school','subject'])<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>开启命名空间后读取 getters 中的数据</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">//方式1 自己读取\nthis.$store.getters['personAbout/firstPersonName']\n//方式二：借助mapGetters\n...mapGetters('countAbout',['bigSum'])<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>开启命名空间后，组件中调用 dispatch</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">//方式1 自己直接dispatch\nthis.$store.dispatch('personAbout/addPerson',person)\n//方式二：借助mapActions读取\n...mapActions('countAbout',['jia'])<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>开启命名空间后，组件中调用 commit\\</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">//方式1 自己直接commit\nthis.$store.commit('personAbout/ADD_PERSON',person)\n//方式二：借助mapActions读取\n...mapMutations('mapMutations',['JIA'])<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<h3 id=\"vue-router路由\"><a class=\"markdownIt-Anchor\" href=\"#vue-router路由\">#</a> Vue-Router 路由</h3>\n<p>Vue 的一个插件库，实现 Single Page Application</p>\n<h4 id=\"1基本使用\"><a class=\"markdownIt-Anchor\" href=\"#1基本使用\">#</a> 1. 基本使用</h4>\n<ol>\n<li>\n<p>安装 <code>vue-router</code> , 命令:  <code>npm i vue-router</code></p>\n</li>\n<li>\n<p>应用插件  <code>Vue.use(VueRouter)</code></p>\n</li>\n<li>\n<p>编写 router 配置项</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//创建整个应用的路由</span>\n<span class=\"token keyword\">import</span> VueRouter <span class=\"token keyword\">from</span> <span class=\"token string\">\"vue-router\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> AboutView <span class=\"token keyword\">from</span> <span class=\"token string\">\"../components/AboutView\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> HomeView <span class=\"token keyword\">from</span> <span class=\"token string\">\"../components/HomeView\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//创建一个路由器</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">VueRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  routes<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      path<span class=\"token operator\">:</span> <span class=\"token string\">\"/about\"</span><span class=\"token punctuation\">,</span>\n      component<span class=\"token operator\">:</span> AboutView<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      path<span class=\"token operator\">:</span> <span class=\"token string\">\"/home\"</span><span class=\"token punctuation\">,</span>\n      component<span class=\"token operator\">:</span> HomeView<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>实现切换</p>\n<p><code>&lt;router-link class=\"list-group-item\" active-class=\"active\" to=\"/about\"&gt;About&lt;/router-link&gt;</code></p>\n</li>\n<li>\n<p>指定展示位置</p>\n<p><code>&lt;router-view&gt;</code></p>\n</li>\n</ol>\n<h4 id=\"2几个注意点\"><a class=\"markdownIt-Anchor\" href=\"#2几个注意点\">#</a> 2. 几个注意点</h4>\n<ol>\n<li>路由组件通常放在 pages 文件夹，一般组件通常存放在 components 文件夹</li>\n<li>通过切换，隐藏了的路由组件，默认是被销毁了</li>\n<li>每个组件都有自己的 $route 属性，里面存储着自己的路由信息</li>\n<li>整个应用只有一个 router, 可以通过组件的 $router 属性获取</li>\n</ol>\n<h4 id=\"3嵌套路由\"><a class=\"markdownIt-Anchor\" href=\"#3嵌套路由\">#</a> 3. 嵌套路由</h4>\n<ol>\n<li>\n<p>配置路由规则，使用<strong> children</strong> 配置项</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">routes:[\n\t{\n\t\tpath:'/home'\n\t\tcomponent:AboutView,\n\t\tchildren:[\n\t\t\t{\n\t\t\t\tpath:'news',\n\t\t\t\tcomponent:NewsView\n\t\t\t}\n\t\t]\n\t}\n]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>跳转 (要写<strong>完整路径</strong>)</p>\n<p><code>&lt;router-link to=\"/home/news\"&gt; &lt;router-link&gt;</code></p>\n</li>\n</ol>\n<h4 id=\"4路由传参\"><a class=\"markdownIt-Anchor\" href=\"#4路由传参\">#</a> 4. 路由传参</h4>\n<h5 id=\"41-query参数\"><a class=\"markdownIt-Anchor\" href=\"#41-query参数\">#</a> 4.1 query 参数</h5>\n<ol>\n<li>\n<p>传递参数</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">跳转并携带query参数,to的字符串写法\n&lt;router-link :to=\"/home/message/detail?id=666&amp;title=你好\"&gt;跳转 &lt;router-link&gt;\n\nto的对象写法\n&lt;router-link :to=\"{\n\tpath:'/home/message/detail',\n\tquery:{\n\t\tid:666,\n\t\ttitle:'你好',\n\t}\n}\"&gt;跳转 &lt;router-link&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>接收参数</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">$route.query.id\n$route.query.title<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<p><strong>不打扰路由器的配置</strong></p>\n<h5 id=\"42-命名路由\"><a class=\"markdownIt-Anchor\" href=\"#42-命名路由\">#</a> 4.2 命名路由</h5>\n<ol>\n<li>作用：简化路由的跳转</li>\n<li>如何使用:\n<ol>\n<li>给路由加上 <code>name:xxx</code>  属性，给路由命名</li>\n<li>在跳转的 to 的对象写法中 不写 path 直接写 <code>name:xxx</code>  即可实现跳转</li>\n</ol>\n</li>\n</ol>\n<h5 id=\"43-params参数\"><a class=\"markdownIt-Anchor\" href=\"#43-params参数\">#</a> 4.3 params 参数</h5>\n<ol>\n<li>\n<p>配置路由，声明接受 params 参数</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">routes:[\n\t{\n\t\tpath:'/home'\n\t\tcomponent:AboutView,\n\t\tchildren:[\n\t\t\t{\n\t\t\t\tpath:'news/:id/:title',\n\t\t\t\tcomponent:NewsView\n\t\t\t}\n\t\t]\n\t}\n]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>传递参数</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">跳转并携带query参数,to的字符串写法\n&lt;router-link :to=\"/home/message/detail/666/你好\"&gt;跳转 &lt;router-link&gt;\n\nto的对象写法\n&lt;router-link :to=\"{\n\tname:xxx      \n\tparams:{\n\t\tid:666,\n\t\ttitle:'你好',\n\t}\n}\"&gt;跳转 &lt;router-link&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong><u>使用 params 传递参数 不能使用 path 直接使用 name</u></strong></p>\n</li>\n<li>\n<p>接受参数</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">$route.params.id\n$route.params.title<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<h5 id=\"44-路由的props配置\"><a class=\"markdownIt-Anchor\" href=\"#44-路由的props配置\">#</a> 4.4 路由的 props 配置</h5>\n<p>让路由组件更加方便地收到参数</p>\n<ol>\n<li>\n<p>props 的第一种写法 (对象)</p>\n<p>该写法中的所有 key-value 都会以 props 的形式传给 Detail 组件</p>\n<p>死数据 不常用</p>\n</li>\n<li>\n<p>props 的第二种写法，值为布尔值</p>\n<p>若布尔值为真，就会把该路由组件收到的所有 params 组件以 props 的形式传给组件</p>\n</li>\n<li>\n<p>props 的第三种写法，值为函数</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">props($route) {\n\treturn {id:$route.query.id,title:$route.query.title}\n}\n\nprops({query:{id,title}})\n{\n return {id,title}\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<h4 id=\"5router-link的replace属性\"><a class=\"markdownIt-Anchor\" href=\"#5router-link的replace属性\">#</a> 5.router-link 的 replace 属性</h4>\n<ol>\n<li>作用：控制路由跳转时操作浏览器历史记录的模式</li>\n<li>浏览器历史记录有 2 种模式  <code>push</code>  追加和 <code>replace</code>  替换 默认为 <code>push</code></li>\n<li>在 <code>&lt;router-link&gt;&lt;/router-link&gt;</code>  标签加上 replace 则可以更改为 replace 模式</li>\n</ol>\n<h4 id=\"6-编程式路由导航\"><a class=\"markdownIt-Anchor\" href=\"#6-编程式路由导航\">#</a> 6. 编程式路由导航</h4>\n<ol>\n<li>\n<p>作用：不借助 <code>&lt;router-link&gt;</code>  进行路由跳转，让路由跳转更灵活</p>\n</li>\n<li>\n<p>编码:</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$router<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\tname<span class=\"token operator\">:</span><span class=\"token string\">'xxx'</span><span class=\"token punctuation\">,</span>\n    params<span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>\n        \n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$router<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    name<span class=\"token operator\">:</span><span class=\"token string\">'xxx'</span><span class=\"token punctuation\">,</span>\n    params<span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>\n        \n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$router<span class=\"token punctuation\">.</span><span class=\"token function\">forward</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$router<span class=\"token punctuation\">.</span><span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$router<span class=\"token punctuation\">.</span><span class=\"token function\">go</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<h4 id=\"7-缓存路由组件\"><a class=\"markdownIt-Anchor\" href=\"#7-缓存路由组件\">#</a> 7. 缓存路由组件</h4>\n<p>让不展示的组件保持挂载，以保留其中的数据</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>keep-alive</span> <span class=\"token attr-name\">include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>组件名<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">:include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>[<span class=\"token punctuation\">'</span>xxx<span class=\"token punctuation\">'</span>,<span class=\"token punctuation\">'</span>yyy<span class=\"token punctuation\">'</span>]<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>router-link</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>router-link</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>keep-alive</span><span class=\"token punctuation\">&gt;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"8-两个新的生命周期钩子\"><a class=\"markdownIt-Anchor\" href=\"#8-两个新的生命周期钩子\">#</a> 8. 两个新的生命周期钩子</h4>\n<p><strong>路由组件独有</strong></p>\n<p><code>activated(){}</code> : 组件被激活时调用</p>\n<p><code>deactivated() {}</code> : 组件失活时调用</p>\n<h4 id=\"9路由守卫\"><a class=\"markdownIt-Anchor\" href=\"#9路由守卫\">#</a> 9. 路由守卫</h4>\n<h5 id=\"91-全局前置\"><a class=\"markdownIt-Anchor\" href=\"#91-全局前置\">#</a> 9.1 全局前置</h5>\n<p><strong>初始化的时候</strong>调用</p>\n<p>每次<strong>切换路由前</strong>调用</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">router<span class=\"token punctuation\">.</span><span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">to<span class=\"token punctuation\">,</span>from<span class=\"token punctuation\">,</span>next</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// to 去哪个路由 to.path to.name</span>\n    <span class=\"token comment\">// from 来自哪个路由 </span>\n    <span class=\"token comment\">// next() 允许通行</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><code>meta:{isAuth:true}</code> : 在路由器中 meta 中添加数据，表示是否需要鉴权</p>\n<h5 id=\"92-全局后置\"><a class=\"markdownIt-Anchor\" href=\"#92-全局后置\">#</a> 9.2 全局后置</h5>\n<p><strong>初始化的时候</strong>调用</p>\n<p>每次<strong>切换路由后</strong>调用</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">router<span class=\"token punctuation\">.</span><span class=\"token function\">afterEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">to<span class=\"token punctuation\">,</span><span class=\"token keyword\">from</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// to 去哪个路由 to.path to.name</span>\n    <span class=\"token comment\">// from 来自哪个路由 </span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"93-独享路由守卫\"><a class=\"markdownIt-Anchor\" href=\"#93-独享路由守卫\">#</a> 9.3 独享路由守卫</h5>\n<p><code>beforeEneter: (to,from,next) =&gt; {}</code></p>\n<h5 id=\"94-组件内路由守卫\"><a class=\"markdownIt-Anchor\" href=\"#94-组件内路由守卫\">#</a> 9.4 组件内路由守卫</h5>\n<p><code>beforeRouteEnter(to,from,next)</code> : 进入该组件时被调用</p>\n<p><code>beforeRouteLeave(to,from,next)</code> : 离开该组件时被调用</p>\n<h4 id=\"10-history和hash模式\"><a class=\"markdownIt-Anchor\" href=\"#10-history和hash模式\">#</a> 10. History 和 Hash 模式</h4>\n<p><code>mode:history</code></p>\n<p>默认为 hash 模式 会带#</p>\n<h3 id=\"基础模板作者学习时候用来构建最基本html文件的\"><a class=\"markdownIt-Anchor\" href=\"#基础模板作者学习时候用来构建最基本html文件的\">#</a> 基础模板 (作者学习时候用来构建最基本 html 文件的)</h3>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">http-equiv</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>X-UA-Compatible<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>IE=edge<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span> <span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>../js/vue.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">&gt;</span></span>Document<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>root<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\">\n        <span class=\"token keyword\">const</span> vm <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            <span class=\"token function\">data</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span><span class=\"token punctuation\">{</span>\n                    \n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            methods<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                \n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        vm<span class=\"token punctuation\">.</span><span class=\"token function\">$mount</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#root'</span><span class=\"token punctuation\">)</span>\n    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">&gt;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n",
            "tags": [
                "vue"
            ]
        }
    ]
}