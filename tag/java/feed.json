{
    "version": "https://jsonfeed.org/version/1",
    "title": "S1m • All posts by \"java\" tag",
    "description": "博客记录个人学习笔记,处于不断完善中",
    "home_page_url": "https://github.com/YogMas/YogMas.github.io",
    "items": [
        {
            "id": "https://github.com/YogMas/YogMas.github.io/2022/09/13/java/",
            "url": "https://github.com/YogMas/YogMas.github.io/2022/09/13/java/",
            "title": "java",
            "date_published": "2022-09-12T16:00:00.000Z",
            "content_html": "<h1 id=\"java\"><a class=\"markdownIt-Anchor\" href=\"#java\">#</a> Java</h1>\n<p>软件工程课程中 java 学习的记录</p>\n<h2 id=\"java开发\"><a class=\"markdownIt-Anchor\" href=\"#java开发\">#</a> Java 开发</h2>\n<p>java 是面向对象语言</p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/javajava%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86.png\" alt=\"java编译原理\"></p>\n<p>java 语言具有两种机制:</p>\n<ul>\n<li>虚拟机机制 (JVM): 保证 java 程序的跨平台特性</li>\n<li>垃圾回收机制：保证 java 更安全，更高效</li>\n</ul>\n<h3 id=\"java虚拟机\"><a class=\"markdownIt-Anchor\" href=\"#java虚拟机\">#</a> java 虚拟机</h3>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/javajava%E8%99%9A%E6%8B%9F%E6%9C%BA.png\" alt=\"java虚拟机\"></p>\n<ul>\n<li>java(<strong>j</strong>ava <strong>v</strong>isual <strong>M</strong>achine) 虚拟机是可运行 java 字节码的虚拟计算机系统</li>\n<li>使用 java 语言编写的程序，实际上是运行在 JVM 之上</li>\n<li>JVM 有一个解释器组件，可以实现 Java 字节码和操作系统的通信</li>\n</ul>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/javajava%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%BF%90%E8%A1%8C%E8%BF%87%E7%A8%8B.png\" alt=\"java虚拟机运行过程\"></p>\n<h3 id=\"运行环境\"><a class=\"markdownIt-Anchor\" href=\"#运行环境\">#</a> 运行环境</h3>\n<ul>\n<li>下载 JDK 包，并配置系统环境</li>\n<li>Eclipse 开发环境</li>\n</ul>\n<h2 id=\"java程序基本结构\"><a class=\"markdownIt-Anchor\" href=\"#java程序基本结构\">#</a> Java 程序基本结构</h2>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">database</span>   <span class=\"token comment\">//包声明语句</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>applet<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">App</span> <span class=\"token comment\">//任意数量的引入语句</span>\n    \n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloWorld</span>    <span class=\"token comment\">//一个源文件至多有一个public的class声明 且public类名要与文件名相同</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HelloWorld\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"包声明package\"><a class=\"markdownIt-Anchor\" href=\"#包声明package\">#</a> 包声明:package</h3>\n<ul>\n<li>包是类和接口的集合，即为类库</li>\n<li>在一个源程序中，只能有一个包声明语句，且是程序的第一条语句</li>\n</ul>\n<h3 id=\"引入语句import\"><a class=\"markdownIt-Anchor\" href=\"#引入语句import\">#</a> 引入语句:import</h3>\n<ul>\n<li>程序编译时，会将需要的在引入语句中的类引入到程序中</li>\n<li>import 的两种形式\n<ol>\n<li>import 包名。类名</li>\n<li>import 包名.*    * 表示全部</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"类和接口声明\"><a class=\"markdownIt-Anchor\" href=\"#类和接口声明\">#</a> 类和接口声明</h3>\n<ul>\n<li>类和接口是程序的基本组成单元</li>\n<li>类是由成员变量和成员方法组成，表示了对象的基本属性和行为</li>\n<li>接口表现了对象所具有的行为规范</li>\n<li>源程序中至少有一个类或接口创建</li>\n</ul>\n<h3 id=\"注释\"><a class=\"markdownIt-Anchor\" href=\"#注释\">#</a> 注释</h3>\n<ul>\n<li><code>//</code> ：由 <code>//</code>  开始到行末为注释内容</li>\n<li><code>/*  */</code> ：两者之间为注释内容，可以多行注释</li>\n<li><code>/**    */</code> ：文档注释</li>\n</ul>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/java%E6%96%87%E6%A1%A3%E6%B3%A8%E9%87%8A.png\" alt=\"文档注释\"></p>\n<h2 id=\"java基础语法\"><a class=\"markdownIt-Anchor\" href=\"#java基础语法\">#</a> Java 基础语法</h2>\n<h3 id=\"数据类型\"><a class=\"markdownIt-Anchor\" href=\"#数据类型\">#</a> 数据类型</h3>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/java%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B1.png\" alt=\"数据类型1\"></p>\n<h4 id=\"简单数据类型\"><a class=\"markdownIt-Anchor\" href=\"#简单数据类型\">#</a> 简单数据类型</h4>\n<h4 id=\"简单数据类型-2\"><a class=\"markdownIt-Anchor\" href=\"#简单数据类型-2\">#</a> <img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/java%E7%AE%80%E5%8D%95%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.png\" alt=\"简单数据类型\"></h4>\n<p>Java 中的数值类型都是有符号的，使用最高位来表示数据的正负号</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">boolean</span> b <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//基本数据类型声明</span>\n<span class=\"token keyword\">short</span> si <span class=\"token operator\">=</span> <span class=\"token number\">128</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">,</span>k <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">99</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">long</span> l <span class=\"token operator\">=</span> <span class=\"token number\">123456789</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> ch <span class=\"token operator\">=</span> <span class=\"token string\">'J'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> chc <span class=\"token operator\">=</span> <span class=\"token string\">'中'</span> <span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> f <span class=\"token operator\">=</span> <span class=\"token number\">3.1415926f</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">double</span> d <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1.04E-5</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> “信息工程”<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"整数数据类型\"><a class=\"markdownIt-Anchor\" href=\"#整数数据类型\">#</a> 整数数据类型</h5>\n<ul>\n<li>int 是经常使用的，碰见较大的数用 long</li>\n<li>byte,shrot 主要用于特定的场合，如占用大量存储空间的大数组或者底层的 文件处理等</li>\n<li>java 中有三种进制表示整数:\n<ol>\n<li>十进制:  x = 678</li>\n<li>八进制:   x = <strong>0</strong>456   前面加<strong> 0</strong> 表示为八进制</li>\n<li>十六进制: x = <strong>0x</strong>a9b1   前面加<strong> 0x</strong> 表示为十六进制</li>\n</ol>\n</li>\n</ul>\n<h5 id=\"浮点数据类型\"><a class=\"markdownIt-Anchor\" href=\"#浮点数据类型\">#</a> 浮点数据类型</h5>\n<p>浮点型表示有小数部分的数值，包括 float 型和 double 型。这两种数据类型全部为有符号数</p>\n<ul>\n<li>浮点型默认为 double 型</li>\n<li>使用 float 型，必须添加后缀 F 或者 f</li>\n<li>double 型，可以添加后缀 D 或者 d, 也可以不添加</li>\n<li>没有后缀时，默认为 double 型</li>\n</ul>\n<h5 id=\"char型数据类型\"><a class=\"markdownIt-Anchor\" href=\"#char型数据类型\">#</a> char 型数据类型</h5>\n<ul>\n<li>char 型用来表示字符。每个 char 型变量占两个字节。在 Java 中，字符的编码是采用 Unicode 编码。</li>\n<li>Unicode 编码字符是用 16 位无符号整数表示，有 216 个可能值，即 0～65 535。可以表示世界上的大部分文字语言中的字符。</li>\n<li>char 类型数据被表示为用一对单引号包含的单个字符 例:  <code>char ch = 'a'</code></li>\n</ul>\n<h5 id=\"boolean型数据类型\"><a class=\"markdownIt-Anchor\" href=\"#boolean型数据类型\">#</a> boolean 型数据类型</h5>\n<ul>\n<li>boolean 只有两个取值 true 和 false 即 真和假</li>\n<li>在 C++ 中用数值或指针可以代替 boolean 值，0 相当于 false，非 0 相当于 true。</li>\n<li>在 Java 中没有这样的规定，<strong>boolean 型的值不能与任何其他基本类型的值进行转换代替</strong>。</li>\n</ul>\n<h4 id=\"引用数据类型\"><a class=\"markdownIt-Anchor\" href=\"#引用数据类型\">#</a> 引用数据类型</h4>\n<ul>\n<li>引用数据类型声明变量时，不会为变量分配存储空间，因为他们声明的是数据的引用，不是数据本身，需要用<strong> new 运算符</strong>来为引用类型的变量分配存储空间</li>\n<li>引用：类似与 C++ 中的指针，又不同与指针</li>\n</ul>\n<h4 id=\"基本数据类型值间的转换\"><a class=\"markdownIt-Anchor\" href=\"#基本数据类型值间的转换\">#</a> 基本数据类型值间的转换</h4>\n<ul>\n<li>自动转换</li>\n<li>强制类型转换</li>\n</ul>\n<h5 id=\"自动转换\"><a class=\"markdownIt-Anchor\" href=\"#自动转换\">#</a> 自动转换</h5>\n<ul>\n<li>从低到高的顺序转换</li>\n<li>优先关系为:byte,short,char-&gt; int -&gt; long -&gt; float -&gt; double</li>\n<li>不同数据类型先转换成同一数据类型，再进行运算</li>\n</ul>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/java%E8%87%AA%E5%8A%A8%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2.png\" alt=\"自动类型转换\"></p>\n<h5 id=\"强制类型转换\"><a class=\"markdownIt-Anchor\" href=\"#强制类型转换\">#</a> 强制类型转换</h5>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">double</span> y<span class=\"token punctuation\">;</span>\n\tx <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token number\">34.56</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token number\">11.2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 丢失精度</span>\n\ty <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span>x <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span><span class=\"token number\">10</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 提高精度</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x=\"</span> <span class=\"token operator\">+</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"y=\"</span> <span class=\"token operator\">+</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"变量类型\"><a class=\"markdownIt-Anchor\" href=\"#变量类型\">#</a> 变量类型</h3>\n<ul>\n<li>局部变量</li>\n<li>实例变量 (全局变量)</li>\n<li>类变量 (静态变量):  <code>static</code>  关键字声明</li>\n<li>实例变量和类变量统称为成员变量</li>\n</ul>\n<p>与 C++ 变量类似 略</p>\n<h3 id=\"运算符\"><a class=\"markdownIt-Anchor\" href=\"#运算符\">#</a> 运算符</h3>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/javajava%E8%BF%90%E7%AE%97%E7%AC%A6.png\" alt=\"java运算符\"></p>\n<h4 id=\"位运算符\"><a class=\"markdownIt-Anchor\" href=\"#位运算符\">#</a> 位运算符</h4>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/javajava%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6.png\" alt=\"java位运算符\"></p>\n<h5 id=\"右移位\"><a class=\"markdownIt-Anchor\" href=\"#右移位\">#</a> 右移位</h5>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/java%E5%8F%B3%E7%A7%BB%E4%BD%8D.png\" alt=\"右移位\"></p>\n<h5 id=\"左移位\"><a class=\"markdownIt-Anchor\" href=\"#左移位\">#</a> 左移位</h5>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/java%E5%B7%A6%E7%A7%BB%E4%BD%8D.png\" alt=\"左移位\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">60</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 60 = 0011 1100 */</span> \n<span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">13</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 13 = 0000 1101 */</span>\n<span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\nc <span class=\"token operator\">=</span> a <span class=\"token operator\">&amp;</span> b<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 12 = 0000 1100 */</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a &amp; b = \"</span> <span class=\"token operator\">+</span> c <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nc <span class=\"token operator\">=</span> a <span class=\"token operator\">|</span> b<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 61 = 0011 1101 */</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a | b = \"</span> <span class=\"token operator\">+</span> c <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nc <span class=\"token operator\">=</span> a <span class=\"token operator\">^</span> b<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 49 = 0011 0001 */</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a ^ b = \"</span> <span class=\"token operator\">+</span> c <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nc <span class=\"token operator\">=</span> <span class=\"token operator\">~</span>a<span class=\"token punctuation\">;</span> <span class=\"token comment\">/*-61 = 1100 0011 */</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"~a = \"</span> <span class=\"token operator\">+</span> c <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nc <span class=\"token operator\">=</span> a <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 240 = 1111 0000 */</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a &lt;&lt; 2 = \"</span> <span class=\"token operator\">+</span> c <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nc <span class=\"token operator\">=</span> a <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 15 = 1111 */</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a &gt;&gt; 2 = \"</span> <span class=\"token operator\">+</span> c <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nc <span class=\"token operator\">=</span> a <span class=\"token operator\">&gt;&gt;&gt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 15 = 0000 1111 */</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a &gt;&gt;&gt; 2 = \"</span> <span class=\"token operator\">+</span> c <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/*\n编译结果\na &amp; b = 12\na | b = 61\na ^ b = 49\n~a = -61\na &lt;&lt; 2 = 240\na &gt;&gt; 15\na &gt;&gt;&gt; 15\n*/</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"条件运算符\"><a class=\"markdownIt-Anchor\" href=\"#条件运算符\">#</a> 条件运算符</h4>\n<p><code>variable x = (expression) ? value if true : value if false</code></p>\n<h3 id=\"流程控制语句\"><a class=\"markdownIt-Anchor\" href=\"#流程控制语句\">#</a> 流程控制语句</h3>\n<p><code>if switch while for do while</code>  与 C++ 类似 略</p>\n<h3 id=\"数组\"><a class=\"markdownIt-Anchor\" href=\"#数组\">#</a> 数组</h3>\n<p>原理与 C++ 类似，声明方法不同</p>\n<ol>\n<li>声明数组  <code>int[] a;</code></li>\n<li>分配空间   <code>a = new int[5];</code></li>\n<li>赋值:  <code>a[0] = 3;</code></li>\n<li>处理数据:  <code>a[0] = a[0] * 10;</code></li>\n</ol>\n<p>1，2 步可以合并为  <code>数据类型[ ] 数组名 = new 数据类型[大小] ;</code></p>\n<h4 id=\"赋值\"><a class=\"markdownIt-Anchor\" href=\"#赋值\">#</a> 赋值</h4>\n<ul>\n<li>\n<p>边声明边赋值 (静态初始化)</p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/java%E6%95%B0%E7%BB%84%E9%9D%99%E6%80%81%E8%B5%8B%E5%80%BC.png\" alt=\"数组静态赋值\"></p>\n</li>\n<li>\n<p>动态从键盘边录入边赋值</p>\n</li>\n</ul>\n<h4 id=\"数组边界\"><a class=\"markdownIt-Anchor\" href=\"#数组边界\">#</a> 数组边界</h4>\n<ul>\n<li>数组类中有唯一的成员变量：length，用来表示数组的长度，即数组元素的个数。</li>\n<li>与 C、C++ 中不同，Java 对数组元素要进行越界检查，若发生越界访问，则会抛出一个异常</li>\n<li>使用 new 创建数组对象时，自动给 length 赋值，数组一旦创建完毕，length 就确定下来， 除非重新使用 new 创建新的数组对象。</li>\n</ul>\n<h4 id=\"二维数组\"><a class=\"markdownIt-Anchor\" href=\"#二维数组\">#</a> 二维数组</h4>\n<p><code>类型名[][] 数组名=new 类型名[][]；</code></p>\n<p>二维数组的每一维大小允许不同</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> intArray<span class=\"token punctuation\">[</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span> <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span> <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\na<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\na<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>数组变量是引用变量，简单的用 = 复制数组，只是将引用进行了复制，并没有对数组的元素进行复制</p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/java%E6%95%B0%E7%BB%84%E5%BC%95%E7%94%A8%E6%8B%B7%E8%B4%9D.png\" alt=\"数组引用拷贝\"></p>\n<p>使用 clone () 方法进行深拷贝</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//使用clone方法</span>\n<span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span> <span class=\"token punctuation\">]</span> group1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span><span class=\"token number\">170</span><span class=\"token punctuation\">,</span><span class=\"token number\">60</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> group2<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> group1<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n…<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>对于二位数组 clone 方法也无法深拷贝，只有对二维数组中的每一个元素使用 clone 才能进行深拷贝</p>\n<h3 id=\"字符串\"><a class=\"markdownIt-Anchor\" href=\"#字符串\">#</a> 字符串</h3>\n<p>JAVA 字符串分为两类</p>\n<ul>\n<li>String: 在程序中不会被改变长度的不变字符串</li>\n<li>StringBuffer: 是在程序中会被 改变长度的可变字符串</li>\n</ul>\n<h4 id=\"创建字符串\"><a class=\"markdownIt-Anchor\" href=\"#创建字符串\">#</a> 创建字符串</h4>\n<ul>\n<li><code>String str=new（\"This is a String\");</code></li>\n<li><code>String str=\"This is a String\";</code></li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">StringDemo</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token class-name\">String</span> site <span class=\"token operator\">=</span> <span class=\"token string\">\"www.uestc.edu.cn\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> site<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"电子科大域名长度 : \"</span> <span class=\"token operator\">+</span> len <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"创建格式化字符串\"><a class=\"markdownIt-Anchor\" href=\"#创建格式化字符串\">#</a> 创建格式化字符串</h5>\n<p>采用 <code>printf()</code>  和  <code>format()</code>  方法</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"浮点型变量的值为 \"</span> <span class=\"token operator\">+</span><span class=\"token string\">\"%f, 整型变量的值为 \"</span> <span class=\"token operator\">+</span>\n<span class=\"token string\">\" %d, 字符串变量的值为 \"</span> <span class=\"token operator\">+</span><span class=\"token string\">\"is %s\"</span><span class=\"token punctuation\">,</span> floatVar<span class=\"token punctuation\">,</span> intVar<span class=\"token punctuation\">,</span> stringVar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> fs <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"浮点型变量的值为 \"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"%f, 整型变量的值为 \"</span> <span class=\"token operator\">+</span> \n<span class=\"token string\">\" %d, 字符串变量的值为 \"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" %s\"</span><span class=\"token punctuation\">,</span> floatVar<span class=\"token punctuation\">,</span> intVar<span class=\"token punctuation\">,</span> stringVar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>静态方法 <code>format()</code>  返回一个 String 对象而不是 PrintStream 对象。</p>\n<p>所以 <code>format()</code>  能用来创建可复用的格式化字符串，而不仅仅是用于 一次打印输出。</p>\n<h4 id=\"字符串的连接\"><a class=\"markdownIt-Anchor\" href=\"#字符串的连接\">#</a> 字符串的连接</h4>\n<p>字符串可以通过 “+” 连接，基本数据类型与字符串进行 “+” 操作，一般也会自动转换为字符串。</p>\n<h4 id=\"函数\"><a class=\"markdownIt-Anchor\" href=\"#函数\">#</a> 函数</h4>\n<ul>\n<li><code>str.length()</code> : 得到 string 的长度</li>\n<li><code>str.indexof(subString,startIndex)</code> : 确定字符串中指定字符或子字符串在给定字符串的位置，substring 为子字符串，从下标 startIndex 开始查找，返回 substring 首字母的在 str 中的下标</li>\n<li><code>lastIndexOf(subString)</code> : 从后往前查找</li>\n<li><code>str.equals(String)</code> : 判断两个字符串是否相等</li>\n<li><code>str.charAt(索引值)</code> : 得到指定位置的字符</li>\n<li><code>str.getChars(int a,int b,char s[],startindex)</code> : 得到字符串的一部字符串，下标 [a,b) 中的字符串复制到 s 数组中，从 s 数组中的 startindex 开始记录</li>\n<li><code>str.substring(start,end)</code> : 截取下标索引为 [start,end) 内的子字符串</li>\n<li><code>str.replace(a,b)</code> : 将字符串中的 a 用 b 来代替</li>\n<li><code>str.concat(string)</code> : 将两个字符串合并</li>\n<li><code>str.toUpperCase()</code> : 字符串全部转换成大写</li>\n<li><code>str.toLowerCase()</code> : 字符串全部转换成小写</li>\n<li><code>str.trim()</code> : 将开头和结尾处的空格去掉</li>\n<li><code>String.valueOf(x)</code> : 将任何类型的数据对象 x 转换成字符串</li>\n<li><code>String strArr[] = str.split(\"_\");</code> : 将字符串进行分隔，分隔结果储存在数组中</li>\n</ul>\n<h4 id=\"可变字符串\"><a class=\"markdownIt-Anchor\" href=\"#可变字符串\">#</a> 可变字符串</h4>\n<p>修改可变字符串的方法</p>\n<ul>\n<li>在字符串后面追加：用 append () 方法将各种对象加入到字符串中。</li>\n<li>在字符串中间插入：用 insert () 方法。</li>\n<li>改变某个位置所在的字符，用 setCharAt () 方法。</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">StringBuffer</span> str<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuffer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Thisis a String\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"test \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//输出： Thisis a test String</span>\n<span class=\"token class-name\">StringBuffer</span> sb <span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuffer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"aaaaaa\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsb<span class=\"token punctuation\">.</span><span class=\"token function\">setCharAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>‘b’<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// sb 的值 aabaaa</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>sb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"日期和时间\"><a class=\"markdownIt-Anchor\" href=\"#日期和时间\">#</a> 日期和时间</h3>\n<p>java.util 包提供了 Date 类来封装当前的日期和时间。 Date 类提供两个构造函数 来实例化 Date 对象。</p>\n<ul>\n<li>第一个构造函数使用当前日期和时间来初始化对象。 <code>Date()</code></li>\n<li>第二个构造函数接收一个参数，该参数是从 1970 年 1 月 1 日起的毫秒数。 <code>Date(long millisec)</code></li>\n</ul>\n<h4 id=\"获取当前时间\"><a class=\"markdownIt-Anchor\" href=\"#获取当前时间\">#</a> 获取当前时间</h4>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Date</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DateDemo</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// 初始化 Date 对象</span>\n\t<span class=\"token class-name\">Date</span> date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 使用 toString() 函数显示日期时间</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"格式化日期\"><a class=\"markdownIt-Anchor\" href=\"#格式化日期\">#</a> 格式化日期</h4>\n<ol>\n<li>使用 SimpleDateFormat 格式化日期</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span> \n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DateDemo</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">Date</span> dNow <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">SimpleDateFormat</span> ft <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleDateFormat</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"E yyyy.MM.dd 'at' hh:mm:ss a zzz\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Current Date: \"</span> <span class=\"token operator\">+</span> ft<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span>dNow<span class=\"token punctuation\">)</span> \t\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//yyyy 是公元年，MM 是月份，dd 是日期，HH:mm:ss 是时、分、秒。</span>\n        <span class=\"token comment\">//SimpleDateFormat 允许选择任何自定义日期时间格式.</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol start=\"2\">\n<li>\n<p>使用 printf 格式化日期<br>\n printf 方法可以很轻松地格式化时间和日期。使用两个字母格式，它以 % t 开头并且 以下面表格中的一个字母结尾</p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/javaprintf%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%97%A5%E6%9C%9F.png\" alt=\"printf格式化日期\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Date</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DateDemo</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token class-name\">Date</span> date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 初始化 Date 对象</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"全部日期和时间信息: %tc%n\"</span><span class=\"token punctuation\">,</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//c的使用</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"年-月-日格式: %tF%n\"</span><span class=\"token punctuation\">,</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//f的使用</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"月/日/年格式: %tD%n\"</span><span class=\"token punctuation\">,</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//d的使用</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HH:MM:SS PM格式(12时制):%tr%n\"</span><span class=\"token punctuation\">,</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//r的使用</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HH:MM:SS格式(24时制): %tT%n\"</span><span class=\"token punctuation\">,</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//t的使用</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HH:MM格式(24时制): %tR\"</span><span class=\"token punctuation\">,</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//R的使用</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/javaprintf%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%97%A5%E6%9C%9F%E7%BB%93%E6%9E%9C.png\" alt=\"printf格式化日期结果\"></p>\n</li>\n</ol>\n<h2 id=\"面向对象设计\"><a class=\"markdownIt-Anchor\" href=\"#面向对象设计\">#</a> 面向对象设计</h2>\n<h3 id=\"类的创建\"><a class=\"markdownIt-Anchor\" href=\"#类的创建\">#</a> 类的创建</h3>\n<p>三个特征:</p>\n<ul>\n<li>封装性</li>\n<li>多态性</li>\n<li>继承性</li>\n</ul>\n<p>类的体包含</p>\n<ul>\n<li>成员变量</li>\n<li>成员方法</li>\n<li>类的构造器</li>\n</ul>\n<p>类的创建</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// [public] class &lt;className&gt; extends &lt;superClass&gt; implements &lt;interface&gt;</span>\n<span class=\"token comment\">//[public]为可选项 可以有public abstract final等等 表示类的种类</span>\n<span class=\"token comment\">//extends表示继承 继承父类</span>\n<span class=\"token comment\">// implements 表示接口 </span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"成员变量\"><a class=\"markdownIt-Anchor\" href=\"#成员变量\">#</a> 成员变量</h4>\n<p>在类中创建的变量，表示类的属性</p>\n<p>作用域是全局的，能被类中所有方法所访问</p>\n<p>创建时具有初始化值</p>\n<ul>\n<li>访问修饰符:public,protected,private 等等</li>\n<li>使用限制的修饰符:final,abstract,static,synchronized,transient,volatile 等</li>\n</ul>\n<ol>\n<li>初始化\n<ul>\n<li>创建变量时初始化：不进行赋值就会自动初始化一个 java 里默认的数值</li>\n<li>创建时赋初值</li>\n<li>构造器中对成员变量赋初值</li>\n</ul>\n</li>\n<li>常量\n<ul>\n<li>使用 final 修饰的变量，因为不能更改，就可以像常量一样使用</li>\n<li>常量符号数据只能读取，不能改变，全用大写字母，单词间用 \"_\" 分隔 eg:MAX_MONTH</li>\n</ul>\n</li>\n</ol>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/java%E5%88%9D%E5%A7%8B%E5%80%BC.png\" alt=\"成员变量初始化值\"></p>\n<h4 id=\"成员方法与c的函数类似\"><a class=\"markdownIt-Anchor\" href=\"#成员方法与c的函数类似\">#</a> 成员方法 (与 C 的函数类似)</h4>\n<p>方法的创建分为 方法声明和方法体</p>\n<p><code>[修饰符l] 返回类型 方法名称(形式参数) {方法体}</code></p>\n<p>方法体中包含</p>\n<ul>\n<li>局部变量</li>\n<li>流程控制语句</li>\n<li>语句块</li>\n<li>return 语句</li>\n</ul>\n<p>有返回类型，必须有 return 语句和返回值，为 void 无返回类型 可以有 return 语句 但是不能带表达式</p>\n<h5 id=\"参数传递\"><a class=\"markdownIt-Anchor\" href=\"#参数传递\">#</a> 参数传递</h5>\n<ul>\n<li>简单数据类型：将数据赋值给形式参数，由形式参数传入方法内部</li>\n<li>引用类型：传入的是引用，所有方法内部对于引用中变量值的改变会影响到实际参数引用中变量的值，当在方法内部改变了引用，其值不受影响</li>\n</ul>\n<h4 id=\"方法过载\"><a class=\"markdownIt-Anchor\" href=\"#方法过载\">#</a> 方法过载</h4>\n<p>同一个类中创建具有相同方法名，但是参数不同（数量，对应类型）不同的方法</p>\n<p>方法重载中方法由调用时的形参决定调用的方法是哪个</p>\n<h4 id=\"类的构造器\"><a class=\"markdownIt-Anchor\" href=\"#类的构造器\">#</a> 类的构造器</h4>\n<ul>\n<li>以类名作为构造方法名</li>\n<li>没有返回类型，具有参数和预聚体</li>\n<li>不是类的成员方法，所以不能用对象调用他</li>\n<li>由 new 运算符调用构造方法</li>\n<li>构造方法可以运用方法过载从而实现多个构造方法</li>\n<li>构造方法返回的是这个类的实例引用</li>\n<li>构造方法中的语句实现对成员变量的初始化</li>\n<li><strong>构造方法之间通过 this () 相互调用</strong></li>\n</ul>\n<p>类的构造器分为默认构造方法和非默认构造方法</p>\n<ul>\n<li>默认构造方法：不带参数的构造方法</li>\n<li>非构造方法：带参数的构造方法</li>\n</ul>\n<p>类创建时，如果没有创建构造器，编译器会自动添加一个默认构造器</p>\n<h3 id=\"类成员和实例成员\"><a class=\"markdownIt-Anchor\" href=\"#类成员和实例成员\">#</a> 类成员和实例成员</h3>\n<h4 id=\"实例成员\"><a class=\"markdownIt-Anchor\" href=\"#实例成员\">#</a> 实例成员</h4>\n<p>创建实例才能访问和使用的成员，通过创建实例对象，由对象访问 (不能由类名直接访问)</p>\n<p>无 static 修饰的成员为实例成员</p>\n<h4 id=\"static关键字\"><a class=\"markdownIt-Anchor\" href=\"#static关键字\">#</a> static 关键字</h4>\n<p>一旦将成员设为 static, 数据或者方法就不会同类的任何实例对象联系在一起</p>\n<p>即使从未创建那个类的一个对象，仍然能调用一个 static 方法，或访问一些 static 数据</p>\n<h5 id=\"类成员静态成员\"><a class=\"markdownIt-Anchor\" href=\"#类成员静态成员\">#</a> 类成员（静态成员）</h5>\n<p>类成员提供了事实上的<strong>全局变量和全局方法</strong></p>\n<ul>\n<li>类成员：可以由类名直接访问</li>\n<li>类成员也可以通过对象名访问，但是该类所有对象都共享类成员变量</li>\n</ul>\n<h5 id=\"static方法和static块\"><a class=\"markdownIt-Anchor\" href=\"#static方法和static块\">#</a> static 方法和 static 块</h5>\n<p>声明为 static 的方法的限制</p>\n<ul>\n<li>仅能调用其他的 static 方法</li>\n<li>只能访问 static 数据</li>\n<li>不能以任何方式引用 this 或 super</li>\n</ul>\n<p>static 块:</p>\n<ul>\n<li>如果你需要通过计算来初始化你的 static 变量，你可以声明一个 static 块</li>\n<li>static 块仅在该类被加载时执行一次</li>\n<li>static 块是最早执行的代码块</li>\n</ul>\n<h4 id=\"对象创建和使用\"><a class=\"markdownIt-Anchor\" href=\"#对象创建和使用\">#</a> 对象创建和使用</h4>\n<p>对象，实例，引用之间的关系：</p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/java%E5%AF%B9%E8%B1%A1,%E5%AE%9E%E4%BE%8B,%E5%BC%95%E7%94%A8.png\" alt=\"对象,实例,引用\"></p>\n<p>创建属于某类的对象：</p>\n<ol>\n<li>声明指向 \"由类所创建的对象\" 的变量</li>\n<li>利用 new 创建新的对象，并指派给先前所创建的变量</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">person p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//声明person对象p并实例化此对象</span>\n<span class=\"token comment\">//对象只有实例化之后才能被使用，而实例化对象的关键字就是new</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/java%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E5%9C%A8%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%86%85%E7%9A%84%E9%80%94%E5%BE%84.png\" alt=\"创建对象在计算机内的途径\"></p>\n<p>对象的生命周期分为<strong>创建，使用和销毁</strong></p>\n<ul>\n<li>通过声明，实例化进行创建</li>\n<li>通过垃圾回收进行实例开销的回收 由 JVM 自动完成</li>\n</ul>\n<p>java 程序运行时，系统通过垃圾收集，周期性地释放不再被对象引用所占用的内存，完成对象的清除</p>\n<h4 id=\"封装\"><a class=\"markdownIt-Anchor\" href=\"#封装\">#</a> 封装</h4>\n<p>OOP (面向对象设计) 的好处之一是对数据和操作该数据的代码的封装，通过类来封装不用担心类的实现细节和在内部数据实际上是如何管理的，我们只需要通过类的方法使用它</p>\n<h3 id=\"超类子类和继承性\"><a class=\"markdownIt-Anchor\" href=\"#超类子类和继承性\">#</a> 超类，子类和继承性</h3>\n<h4 id=\"类的继承性\"><a class=\"markdownIt-Anchor\" href=\"#类的继承性\">#</a> 类的继承性</h4>\n<p>类继承一个类，这个类除了创建自己的成员外，还能够继承或扩展另外一个类的成员</p>\n<ul>\n<li>超类：被继承的类</li>\n<li>子类：继承超类的类</li>\n</ul>\n<p>继承的特性</p>\n<ul>\n<li>单一继承性：子类只能有一个超类，超类可以有多个子类</li>\n<li>子类继承超类的所有成员，子类可以创建自己的成员.</li>\n<li>子类不能继承超类的构造器，子类的构造器要首先调用超类的构造器</li>\n<li>多态性之一：子类的成员隐藏和覆盖超类中相同的成员</li>\n<li>多态性之二：超类的对象可以对子类的实例引用</li>\n<li>由 abstract 修饰的类只能被继承</li>\n<li>由 final 修饰的类不能被继承</li>\n</ul>\n<p><code>[abstract|final] class Subclass extends Superclass {SubClassBody}</code></p>\n<ul>\n<li>abstract 修饰的是抽象类，其对象引用的必须是子类实例</li>\n<li>final 修饰的是终结类，其类不能被继承，不能有子类</li>\n<li>extends 为继承关键字，指示两个类存在的继承关系 <strong>子类 exteds 超类</strong></li>\n</ul>\n<p>创建类时，如缺省 extends, 该类就会 ovject 类的直接子类</p>\n<p>子类继承了超类的所有成员，但是无法访问某些受限的成员 (但是可以使用超类 public 访问对超类受限的成员进行访问)</p>\n<p>超类中，由 <code>private</code>  修饰的访问权限的成员变量和方法，虽然被子类继承，但是子类不能访问</p>\n<p>子类中可以访问从超类继承下来的三种访问权限设定的成员</p>\n<ul>\n<li>public</li>\n<li>protected</li>\n<li>缺省</li>\n</ul>\n<h4 id=\"成员变量的隐藏和方法覆盖\"><a class=\"markdownIt-Anchor\" href=\"#成员变量的隐藏和方法覆盖\">#</a> 成员变量的隐藏和方法覆盖</h4>\n<p>在子类的创建中，如果出现了与超类中相同的成员变量，则超类中的成员变量被子类中的成员变量所<strong>隐藏</strong></p>\n<p>如果出现了与超类中有相同名，同参数以及同返回类型的成员方法，则超类中的成员方法被子类中的成员方法所<strong>覆盖</strong></p>\n<h5 id=\"方法覆盖\"><a class=\"markdownIt-Anchor\" href=\"#方法覆盖\">#</a> 方法覆盖</h5>\n<ul>\n<li>子类的创建中，具有与超类相同的方法名，相同的参数以及相同的返回类型</li>\n<li>具有比超类中覆盖方法更大的可访问性</li>\n<li>不同于方法过载，方法过载是在一个类中具有相同方法名的方法</li>\n</ul>\n<p>方法覆盖的条件</p>\n<ul>\n<li>有<strong>继承关系</strong></li>\n<li>重写的方法和之前的方法具有与超类相同的方法名，相同的参数以及相同的返回类型</li>\n<li>重写的方法的访问权限不能比之前的方法权限更低</li>\n<li>重写方法的抛出异常数不能比之前放的抛出异常数更多</li>\n</ul>\n<p>注意事项:</p>\n<ul>\n<li>父类的私有方法无法覆盖</li>\n<li>覆盖只是针对方法，与成员变量无关</li>\n<li>构造方法不能被继承也不能被覆盖</li>\n<li>方法覆盖只是针对实例方法，静态方法覆盖没有意义</li>\n</ul>\n<h4 id=\"nullthis和super\"><a class=\"markdownIt-Anchor\" href=\"#nullthis和super\">#</a> null,this 和 super</h4>\n<ul>\n<li><code>null</code> : 表示空，用于表示对象或数组还没有相应的实例引用，注意大小写，null 是任何引用类型的默认值</li>\n<li><code>this</code> : 表示对类的实例访问，在类中可以指向成员变量与非成员变量区分，构造器中使用 this () 对另一个构造器的调用，类的创建中需要表示对自身实例的访问时，用 this 表示</li>\n<li><code>super</code> : 在子类中用于访问被隐藏的超类变量，被覆盖的超类方法</li>\n<li>super () 必须是子类构造函数的第一个执行语句，如果 super () 没有被用到，每个超类的默认的或五参数的构造函数将执行</li>\n</ul>\n<h4 id=\"运行时的多态\"><a class=\"markdownIt-Anchor\" href=\"#运行时的多态\">#</a> 运行时的多态</h4>\n<ul>\n<li>超类的对象可以引用子类的实例</li>\n<li>该对象仍然只能够调用超类中定义的方法和变量</li>\n<li>对于覆盖或继承的方法，java 运行时系统根据调用该方法的实参的类型来决定选择哪个方法调用</li>\n<li>对子类的一个实例，如果覆盖了超类的方法，则运行时系统调用子类的方法</li>\n<li>如果子类继承了超类的方法，则运行时系统调用超类的 l 方法</li>\n<li>当超类的对象对子类实例引用时，这个对象所访问的成员必须是超类中所具有的</li>\n<li>这个对象不能访问子类自己创建的成员</li>\n<li>当这个对象访问的是<strong>被覆盖的方法</strong>，则调用的是子类中覆盖方法</li>\n<li>只有当这个对象被强制转换成子类类型时，这个子类的所有成员才有可能被访问</li>\n</ul>\n<h4 id=\"final和abstract\"><a class=\"markdownIt-Anchor\" href=\"#final和abstract\">#</a> final 和 abstract</h4>\n<h5 id=\"final关键字\"><a class=\"markdownIt-Anchor\" href=\"#final关键字\">#</a> final 关键字</h5>\n<ul>\n<li>final 修饰的类不能被继承</li>\n<li>final 修饰的方法不能被子类重写</li>\n<li>final 修饰的变量是常量，初始化后不能再修改</li>\n</ul>\n<p>在编译时，如果 final 变量是<strong>基本类型或 String 类型</strong>，则编译器会把它当成<strong>编译器常量</strong>，其他类型会成为<strong>运行时常量</strong></p>\n<p>空白 final</p>\n<h2 id=\"输入输出流\"><a class=\"markdownIt-Anchor\" href=\"#输入输出流\">#</a> 输入输出流</h2>\n<h3 id=\"file类\"><a class=\"markdownIt-Anchor\" href=\"#file类\">#</a> File 类</h3>\n<p>具有查询文件属性、状态和文件名等功能，但不能 访问文件内容</p>\n<ul>\n<li><code>boolean createNewFile()</code>  不存在返回 true 存在返回 false</li>\n<li><code>boolean mkdir()</code>  创建目录</li>\n<li><code>boolean mkdirs()</code>  创建多级目录</li>\n<li><code>boolean delete()</code>  用于删除文件或删除空目录</li>\n<li><code>boolean deleteOnExit()</code>  文件使用完成后删除</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">File</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FileDemo2</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token class-name\">File</span> f <span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"d:\\\\1.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span><span class=\"token function\">createNewFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//当文件存在时返回false</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//当文件不存在时返回false</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// TODO Auto-generated catch block</span>\n\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"查询文件状态和属性\"><a class=\"markdownIt-Anchor\" href=\"#查询文件状态和属性\">#</a> 查询文件状态和属性</h5>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/java%E6%9F%A5%E8%AF%A2%E6%96%87%E4%BB%B6%E5%B1%9E%E6%80%A7.png\" alt=\"查询文件属性\"></p>\n<h5 id=\"查询文件目录管理\"><a class=\"markdownIt-Anchor\" href=\"#查询文件目录管理\">#</a> 查询文件目录管理</h5>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/java%E6%9F%A5%E8%AF%A2%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95%E7%AE%A1%E7%90%86.png\" alt=\"查询文件目录管理\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//列出磁盘下文件或文件夹的例子</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">File</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FileDemo3</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token class-name\">File</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> files <span class=\"token operator\">=</span><span class=\"token class-name\">File</span><span class=\"token punctuation\">.</span><span class=\"token function\">listRoots</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//列出的磁盘盘符</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">File</span> file<span class=\"token operator\">:</span>files<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&gt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> filenames <span class=\"token operator\">=</span>file<span class=\"token punctuation\">.</span><span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//列出磁盘文件</span>\n\t\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> filename<span class=\"token operator\">:</span>filenames<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"randomaccessfile类\"><a class=\"markdownIt-Anchor\" href=\"#randomaccessfile类\">#</a> RandomAccessFile 类</h3>\n<p>在 java.io 包中 RandomAccessFile 类和输入输出流类具有<strong>读写文件</strong>的功能</p>\n<p>提供了两个构造函数</p>\n<ul>\n<li>public RandomAccessFile(String name, String <strong>mode</strong>) throws IOException;</li>\n<li>public RandomAccessFile(File file, String <strong>mode</strong>) throws IOException;</li>\n</ul>\n<p>name 表示文件名，file 为 File 类对象，mode 为读写方式 w (write),r (read)</p>\n<p>当以读写方式生成 randomAccessFile 对象时</p>\n<ul>\n<li>文件不存在，就创建该文件，进行读写</li>\n<li>如果文件存在，就对文件进行覆盖 (有文件指针从文件头开始，当写入一个文件指针往后指，直接写入操作结果)</li>\n</ul>\n<p>RandomAccessFile 对象生成的时候，文件就相当于被打开了，文件指针位于开头</p>\n<h4 id=\"randomaccessfile的成员方法\"><a class=\"markdownIt-Anchor\" href=\"#randomaccessfile的成员方法\">#</a> RandomAccessFile 的成员方法</h4>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/javaRandomAccessFile%E7%B1%BB%E6%88%90%E5%91%98%E6%96%B9%E6%B3%95.png\" alt=\"RandomAccessFile类成员方法\"></p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/javaRandomAccessFile%E7%B1%BB%E6%88%90%E5%91%98%E6%96%B9%E6%B3%95(1).png\" alt=\"RandomAccessFile类成员方法(1)\"></p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/javaRandomAccessFile%E7%B1%BB%E6%88%90%E5%91%98%E6%96%B9%E6%B3%95%20(2).png\" alt=\"RandomAccessFile类成员方法 (2)\"></p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/javaRandomAccessFile%E7%B1%BB%E6%88%90%E5%91%98%E6%96%B9%E6%B3%95%20(3).png\" alt=\"RandomAccessFile类成员方法 (3)\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// RandomAccessFile 写出文件</span>\n<span class=\"token keyword\">package</span> <span class=\"token namespace\">stream</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RandomAccessFile</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">File</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestStream</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">File</span> f <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"F:\\\\javatest\\\\1.text\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">RandomAccessFile</span> rf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RandomAccessFile</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span><span class=\"token string\">\"rw\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> age <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\tname <span class=\"token operator\">=</span> <span class=\"token string\">\"zhangsan\"</span><span class=\"token punctuation\">;</span> age <span class=\"token operator\">=</span> <span class=\"token number\">18</span><span class=\"token punctuation\">;</span>\n\t\trf<span class=\"token punctuation\">.</span><span class=\"token function\">writeBytes</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\trf<span class=\"token punctuation\">.</span><span class=\"token function\">writeInt</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tname <span class=\"token operator\">=</span> <span class=\"token string\">\"lisi    \"</span><span class=\"token punctuation\">;</span> age <span class=\"token operator\">=</span> <span class=\"token number\">31</span><span class=\"token punctuation\">;</span>\n\t\trf<span class=\"token punctuation\">.</span><span class=\"token function\">writeBytes</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\trf<span class=\"token punctuation\">.</span><span class=\"token function\">writeInt</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\trf<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//RandomAccessFile 读出文件中的内容</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">File</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RandomAccessFile</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RandomAccessFileDemo02</span><span class=\"token punctuation\">{</span> <span class=\"token comment\">// 所有的异常直接抛出，程序中不再进行处理</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">File</span> f <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"d:\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">.</span>separator <span class=\"token operator\">+</span> <span class=\"token string\">\"test.dat\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// 指定要操作的文件</span>\n\t\t<span class=\"token class-name\">RandomAccessFile</span> rdf <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// 声明RandomAccessFile类的对象</span>\n\t\trdf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RandomAccessFile</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span><span class=\"token string\">\"r\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// 以只读的方式打开文件</span>\n\t\t<span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">;</span> <span class=\"token keyword\">int</span> age <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">byte</span> b<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// 开辟byte数组</span>\n\t\t<span class=\"token comment\">/* 读取第二个人的信息，意味着要空出第一个人的信息*/</span>\n\t\trdf<span class=\"token punctuation\">.</span><span class=\"token function\">skipBytes</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// 跳过第一个人的信息</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>b<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tb<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> rdf<span class=\"token punctuation\">.</span><span class=\"token function\">readByte</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// 读取一个字节</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tname <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将读取出来的byte数组变为字符串</span>\n\t\tage <span class=\"token operator\">=</span> rdf<span class=\"token punctuation\">.</span><span class=\"token function\">readInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// 读取数字</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"第二个人的信息 --&gt; 姓名：\"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token string\">\"；年龄：\"</span> <span class=\"token operator\">+</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n\t\trdf<span class=\"token punctuation\">.</span><span class=\"token function\">seek</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// 指针回到文件的开头，读取第一个人的信息</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>b<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tb<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> rdf<span class=\"token punctuation\">.</span><span class=\"token function\">readByte</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// 读取一个字节</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tname <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将读取出来的byte数组变为字符串</span>\n\t\tage <span class=\"token operator\">=</span> rdf<span class=\"token punctuation\">.</span><span class=\"token function\">readInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// 读取数字</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"第一个人的信息 --&gt; 姓名：\"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token string\">\"；年龄：\"</span> <span class=\"token operator\">+</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n\t\trdf<span class=\"token punctuation\">.</span><span class=\"token function\">skipBytes</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// 空出第二个人的信息</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>b<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tb<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> rdf<span class=\"token punctuation\">.</span><span class=\"token function\">readByte</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// 读取一个字节</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tname <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将读取出来的byte数组变为字符串</span>\n\t\tage <span class=\"token operator\">=</span> rdf<span class=\"token punctuation\">.</span><span class=\"token function\">readInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// 读取数字</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"第三个人的信息 --&gt; 姓名：\"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token string\">\"；年龄：\"</span> <span class=\"token operator\">+</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n\t\trdf<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// 关闭</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"字节流\"><a class=\"markdownIt-Anchor\" href=\"#字节流\">#</a> 字节流</h3>\n<h5 id=\"inputstream-和-outputstream\"><a class=\"markdownIt-Anchor\" href=\"#inputstream-和-outputstream\">#</a> <strong>InputStream</strong> 和 <strong>OutputStream</strong></h5>\n<p>字节流由两个类层次结构定义，在顶层有两个抽象类： <strong>InputStream</strong> 和 <strong>OutputStream</strong></p>\n<p>每个抽象楼都有多个具体的子类，这些子类对不同的外设进行处理</p>\n<ul>\n<li>抽象类 InputStream 和 OutputStream 定义了实现其他流类的关键方法。</li>\n<li>最重要的两种方法是<strong> read ()<strong> 和</strong> write ()</strong>，它们分别对数据以字节为单位进行读写。</li>\n<li>两种方法都在 InputStream 和 OutputStream 中被定义为<strong>抽象方法</strong>，它们被派生的流类<strong>重载</strong>。</li>\n</ul>\n<ol>\n<li>InputSteam 类有关读入数据的方法</li>\n</ol>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/javainput%E7%B1%BB%E8%AF%BB%E5%85%A5%E6%95%B0%E6%8D%AE%E7%9A%84%E6%96%B9%E6%B3%95.png\" alt=\"input类读入数据的方法\"></p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/javainputstream%E7%B1%BB%E7%9A%84%E5%85%B6%E4%BB%96%E6%96%B9%E6%B3%95.png\" alt=\"inputstream类的其他方法\"></p>\n<p>所有 InputStream 的子类都是针对不同的输入数据源，其类名的 前缀清楚地表示出输入数据源，FileInputStream 类的数据源是文 件，PipedInputStream 类的数据源是管道等等</p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/javaInputStream%E8%AF%BB%E5%85%A5%E7%B1%BB%E5%B1%82%E6%AC%A1.png\" alt=\"InputStream读入类层次\"></p>\n<ol start=\"2\">\n<li>\n<p>output 类</p>\n<ul>\n<li><code>int write (int)</code>  向流的末尾写入一个字节的数据。</li>\n<li><code>int write (byte[])</code>  将数组 b 中的数据依次写入当前的流对象中</li>\n<li><code>int write (byte[],int,int)</code>  将数组中从开始下标 (包含)，后续长度的数据依次写入到流对象中</li>\n<li><code>void close()</code>  关闭当前流对象，并释放该流对象占用的资源</li>\n<li><code>void flush()</code>  将当前流对象中的缓冲数据强制输出出去。使用该方法可以实现立 即输出</li>\n</ul>\n<p>所有 OutputStream 的子类与 InputStream 的子类相似，针对不同 的输出数据源，其类名的前缀清楚地表示出输出数据源</p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/javaoutput%E8%BE%93%E5%87%BA%E7%B1%BB%E5%B1%82%E6%AC%A1.png\" alt=\"output输出类层次\"></p>\n</li>\n</ol>\n<h5 id=\"fileinputstream和outinputstream\"><a class=\"markdownIt-Anchor\" href=\"#fileinputstream和outinputstream\">#</a> <strong>FileInputStream</strong> 和<strong> OutInputStream</strong></h5>\n<p>这两个类属于节点流，分别完成对文件的输入输出（读写）操作</p>\n<ol>\n<li>\n<p>FileInputStream</p>\n<p>构造器：</p>\n<ul>\n<li>FileInputStream (String) 参数 String 对象表示文件名</li>\n<li>FileInputStream (File) 参数 File 对象表示文件名</li>\n<li>FileInputStream (FileDescriptor) 参数 FileDescriptor 定义一个本地文件系统对象表示的文件名。</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//FileInputStream类显示文件内容的程序的示例</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">File</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FileInputStreamDemo01</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">File</span> file <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"d:/javaFileIO.java\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">FileInputStream</span> fis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Total file size to read (in bytes) : \"</span><span class=\"token operator\">+</span> fis<span class=\"token punctuation\">.</span><span class=\"token function\">available</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">int</span> content<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>content <span class=\"token operator\">=</span> fis<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span> content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// convert to char and display it</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>FileOutputStream</p>\n<p>构造器:</p>\n<ul>\n<li>FileOutputStream(String)</li>\n<li>FileOutputStream(String,boolean)</li>\n<li>FileOutputStream(File)</li>\n<li>FileOutputStream(FileDescriptor)</li>\n</ul>\n<p>生成 FileOutputStream 对象时，如果文件不存在，则创建该文件供 程序输出数据</p>\n<p>如果文件已经存在，则有改写和附加两种输出数据的方式：</p>\n<ol>\n<li>改写的含义是先把原文件长度截为零，原文件数据被丢弃， 然后再输出数据。(第二个构造器的 boolean 参数为 false 值和其 它构造器的对象)</li>\n<li>附加的含义是在原文件末尾追加输出数据，原文件数据仍然 存在。(第二个构造器的 boolean 参数为 true)</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">import java.io.FileOutputStream;\nimport java.io.IOException;\npublic class FileOutputStreamDemo2 {\n\tpublic static void main(String[] args) throws IOException { //创建字节输出流对象\n\t\tFileOutputStream fos = new FileOutputStream(\"d:\\\\testfout.txt\");\n\t\t//如果没有testfout.txt文件则会自动创建这个文件\n\t\tfos.write(97); //调用write()方法\n\t\tfos.write(57); //调用write()方法\n\t\tfos.write(55); //调用write()方法\n\t\tbyte[] bys = {97,98,99,100,101};\n\t\tfos.write(bys); //public void write(byte[] b):写一个字节数组\n\t\tfos.write(bys,1,3); //public void write(byte[] b,int off,int len)\n\t\tfos.close(); //释放资源\n}\n}\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<h5 id=\"dateinputstream和dataoutstream\"><a class=\"markdownIt-Anchor\" href=\"#dateinputstream和dataoutstream\">#</a> DateInputStream 和 DataOutStream</h5>\n<ul>\n<li>\n<p>这两个类创建对象分别被称为数据输入流和数据输出流。</p>\n</li>\n<li>\n<p>它们分别实现了 DataInput 接口和 DataOutput 接口。</p>\n</li>\n<li>\n<p>它们允许程序按与机器无关的风格读写 Java 数据。</p>\n</li>\n<li>\n<p>这两个流也是过滤器流，常以其它流如 InputStream 或 OutputStream 作为它们的输入或输出。</p>\n</li>\n<li>\n<p>它们输入和输出几乎是对应的，每种基本数据类型的读写方法可以从 其后缀名字识别。</p>\n<p>例如：</p>\n<p><code>readInt() writeInt() readBoolean() writeBoolean() readChar() writeChar() readDouble() writeDouble()</code></p>\n</li>\n</ul>\n<h3 id=\"字符流\"><a class=\"markdownIt-Anchor\" href=\"#字符流\">#</a> 字符流</h3>\n<p>字符流主要是用来<strong>处理字符</strong>的。它们在读写流内数据时是<strong>以字符为单位</strong>。</p>\n<p>字符流类由两个类层次结构定义。顶层有两个<strong>抽象</strong>类：<strong>Reader 和 Writer</strong>。 这些抽象类处理统一编码的字符流。</p>\n<ul>\n<li>抽象类 Reader 和 Writer 定义了实现其他流类的关键方法。其中两 个最重要的是 read () 和 write ()，它们分别进行字符数据的读和写。 <strong>这些方法被派生流类重载</strong>。</li>\n<li><strong>Reader 及 Writer 类</strong>和它们子类的方法，与<strong> InputStream 及 OutputStream 类</strong>及它们子类的使用方法非常类似。</li>\n</ul>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/javaReader%E7%9A%84%E7%B1%BB%E5%B1%82%E6%AC%A1.png\" alt=\"Reader的类层次\"></p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/javaWrite%E7%9A%84%E7%B1%BB%E5%B1%82%E6%AC%A1.png\" alt=\"Write的类层次\"></p>\n<ul>\n<li>\n<p><strong>InputStreamReader</strong> 类和<strong> OutputStreamWriter</strong> 类</p>\n<p>在构造这两个类对应的流时，它们会自动进行转换，将平台缺 省的编码集编码的字节转换为 Unicode 字符。对英语环境，其缺 省的编码集一般为 ISO8859-1。</p>\n</li>\n<li>\n<p><strong>BufferedReader</strong> 类和<strong> BufferedWriter</strong> 类</p>\n<p>这两个类对应的流使用了缓冲，能大大提高输入输出效率。这 两个也是过滤器流，常用来对 InputStreamReader 和 OutputStreamWriter 进行处理。</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//字节流和字符流示例</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FileNotFoundException</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BufferedReaderDemo01</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">String</span> fileName <span class=\"token operator\">=</span> <span class=\"token string\">\"d:\\\\javaFileIO.java\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">BufferedReader</span> fromFile <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token class-name\">FileReader</span> fr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tfromFile <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">(</span>fr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The file \"</span> <span class=\"token operator\">+</span> fileName<span class=\"token operator\">+</span> <span class=\"token string\">\" contains the following lines:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token class-name\">String</span> line <span class=\"token operator\">=</span> fromFile<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>line <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> line <span class=\"token operator\">=</span> fromFile<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// throw IOException</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">FileNotFoundException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error opening the file \"</span> <span class=\"token operator\">+</span> fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error reading the file \"</span> <span class=\"token operator\">+</span> fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fromFile <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> fromFile<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// throw IOException</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error closing the file \"</span> <span class=\"token operator\">+</span> fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"pipedinputstream和pipedoutputstream管道输入输出流类\"><a class=\"markdownIt-Anchor\" href=\"#pipedinputstream和pipedoutputstream管道输入输出流类\">#</a> PipedInputStream 和 PipedOutputStream 管道输入输出流类</h5>\n<ul>\n<li>\n<p>管道是 UNIX 的发明，它大大增强了流的概念。</p>\n</li>\n<li>\n<p>管道 (pipe) 提供一种线程之间的通信方法，可用于 IPC (进程间通信) 或是 ITC (线程间通信)。</p>\n</li>\n<li>\n<p>输入管道是用来接收输出管道所写出的数据。</p>\n</li>\n<li>\n<p>这两个类必须同时使用，所以它们除了不带参数的构造器外，互为构 造器中的参数</p>\n</li>\n<li>\n<p>PipedInputStream(PipedOutputStream)</p>\n</li>\n<li>\n<p>PipedOutputStream(PipedInputStream)</p>\n</li>\n</ul>\n<h4 id=\"io流链接及处理流\"><a class=\"markdownIt-Anchor\" href=\"#io流链接及处理流\">#</a> I/O 流链接及处理流</h4>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/java%E5%A4%84%E7%90%86%E6%B5%81.png\" alt=\"处理流\"></p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/java%E5%AD%97%E7%AC%A6%E6%B5%81%E5%92%8C%E5%AD%97%E8%8A%82%E6%B5%81%E5%A4%84%E7%90%86%E5%AF%B9%E5%BA%94%E8%A1%A8.png\" alt=\"字符流和字节流处理对应表\"></p>\n<h3 id=\"对象序列化处理\"><a class=\"markdownIt-Anchor\" href=\"#对象序列化处理\">#</a> 对象序列化处理</h3>\n<p>“对象序列化”（Object Serialization）是 Java 一种特性。类实现 <strong>Serializable 接口</strong>。</p>\n<p>实现了 Serializable 接口的对象，可将它们转换成<strong>一系列字节</strong>，并可在以后完全恢复回原来的样子。</p>\n<p>网络传输时进行序列化，能自动弥补操作系统间的差异。</p>\n<p>可以实现 “有限持久化” ，意味着对象的 “生存时间” 取决于程序的每一次调用之间。</p>\n<p>首先要创建某些 OutputStream 对象，然后将其封装到 ObjectOutputStream 对象内。</p>\n<p>再需调用 writeObject () 即可完成对象的序列化，并将其发送给 OutputStream。</p>\n<p>相反将一个 InputStream 封装到 ObjectInputStream 内，然后调用 readObject ()。</p>\n<p>最后获得的是一个 Object 对象的引用，以便能够直接设置。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//对象序列化例子</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Serializable</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Serializable</span>\n\t<span class=\"token punctuation\">{</span> \t\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">char</span> sex<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> year<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">double</span> gpa<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span> sex<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> year<span class=\"token punctuation\">,</span><span class=\"token keyword\">double</span> gpa<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sex <span class=\"token operator\">=</span> sex<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>year <span class=\"token operator\">=</span> year<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>gpa <span class=\"token operator\">=</span> gpa<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setSex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> sex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sex <span class=\"token operator\">=</span> sex<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setYear</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> year<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>year <span class=\"token operator\">=</span> year<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setGpa</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> gpa<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>gpa <span class=\"token operator\">=</span> gpa<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    \t<span class=\"token keyword\">public</span> <span class=\"token keyword\">char</span> <span class=\"token function\">getSex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sex<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>year<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">getGpa</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>gpa<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UseStudent</span>\n\t<span class=\"token punctuation\">{</span> \t\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{</span> <span class=\"token class-name\">Student</span> st <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Tom\"</span>\n\t\t<span class=\"token punctuation\">,</span>\n\t\t<span class=\"token string\">'M'</span>\n\t\t<span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">File</span> file <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"d:\\\\student.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">createNewFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">//Student对象序列化过程</span>\n\t\t<span class=\"token class-name\">FileOutputStream</span> fos <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">ObjectOutputStream</span> oos <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectOutputStream</span><span class=\"token punctuation\">(</span>fos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\toos<span class=\"token punctuation\">.</span><span class=\"token function\">writeObject</span><span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\toos<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\toos<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tfos<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//Student对象反序列化过程</span>\n\t\t<span class=\"token class-name\">FileInputStream</span> fis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">ObjectInputStream</span> ois <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectInputStream</span><span class=\"token punctuation\">(</span>fis<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">Student</span> st1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">)</span> ois<span class=\"token punctuation\">.</span><span class=\"token function\">readObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name = \"</span> <span class=\"token operator\">+</span> st1<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sex = \"</span> <span class=\"token operator\">+</span> st1<span class=\"token punctuation\">.</span><span class=\"token function\">getSex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"year = \"</span> <span class=\"token operator\">+</span> st1<span class=\"token punctuation\">.</span><span class=\"token function\">getYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"gpa = \"</span> <span class=\"token operator\">+</span> st1<span class=\"token punctuation\">.</span><span class=\"token function\">getGpa</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tois<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tfis<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ClassNotFoundException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n",
            "tags": [
                "java"
            ]
        }
    ]
}