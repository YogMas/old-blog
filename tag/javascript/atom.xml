<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://github.com/YogMas/YogMas.github.io</id>
    <title>S1m • Posts by &#34;javascript&#34; tag</title>
    <link href="https://github.com/YogMas/YogMas.github.io" />
    <updated>2021-11-05T16:00:00.000Z</updated>
    <category term="C语言" />
    <category term="Latex" />
    <category term="操作系统" />
    <category term="Css" />
    <category term="vue" />
    <category term="python" />
    <category term="Git" />
    <category term="Html" />
    <category term="java" />
    <category term="机器学习" />
    <category term="Javascript" />
    <category term="icoding答案" />
    <category term="算法啊" />
    <category term="计算机组成原理" />
    <category term="课内课程" />
    <entry>
        <id>https://github.com/YogMas/YogMas.github.io/2021/11/06/javascript-ji-chu-ban/</id>
        <title>Javascript基础(未完待续)</title>
        <link rel="alternate" href="https://github.com/YogMas/YogMas.github.io/2021/11/06/javascript-ji-chu-ban/"/>
        <content type="html">&lt;h1 id=&#34;javascript&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#javascript&#34;&gt;#&lt;/a&gt; javascript&lt;/h1&gt;
&lt;h2 id=&#34;article-by-yogmas&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#article-by-yogmas&#34;&gt;#&lt;/a&gt; Article By Yogmas&lt;/h2&gt;
&lt;h3 id=&#34;js的组成&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#js的组成&#34;&gt;#&lt;/a&gt; js 的组成&lt;/h3&gt;
&lt;p&gt;1.ECNscript:JS 语法&lt;br&gt;
 2.DOM: 页面文档模型&lt;br&gt;
 3.BOM: 浏览器对象模型&lt;/p&gt;
&lt;h4 id=&#34;js初体验&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#js初体验&#34;&gt;#&lt;/a&gt; js 初体验&lt;/h4&gt;
&lt;p&gt;1. 行内式 js: 直接写到元素的内部&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGFyQJ&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGFyQJ.png&#34; alt=&#34;IGFyQJ.png&#34;&gt;&lt;/a&gt;&lt;br&gt;
2. 内嵌式的 js:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;head&amp;gt;&amp;lt;script&amp;gt; &amp;lt;/script&amp;gt;&amp;lt;/head&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;3. 外部式 js: 创建 XXX.js 文件在通过标签引出到 html 文件中&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGF2e1&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGF2e1.png&#34; alt=&#34;IGF2e1.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;js注释&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#js注释&#34;&gt;#&lt;/a&gt; js 注释&lt;/h4&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;1.单行注释    //    ctrl + /
2.多行注释     /*    */    shift + alt + a
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;js输入输出语句&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#js输入输出语句&#34;&gt;#&lt;/a&gt; js 输入输出语句&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGFWo6&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGFWo6.png&#34; alt=&#34;IGFWo6.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;prompt(&#39;&#39;) 输入框 
alert(&#39;&#39;)警示框  展示给用户的
console 控制台打印的信息 给程序员看的
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;变量概述&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#变量概述&#34;&gt;#&lt;/a&gt; 变量概述&lt;/h3&gt;
&lt;h4 id=&#34;什么是变量&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#什么是变量&#34;&gt;#&lt;/a&gt; 什么是变量&lt;/h4&gt;
&lt;p&gt;变量是用来存放数据的容器，简而言之就是一个装东西的盒子&lt;br&gt;
变量是内存中申请的一部分用来存放数据的空间&lt;/p&gt;
&lt;h3 id=&#34;变量的使用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#变量的使用&#34;&gt;#&lt;/a&gt; 变量的使用&lt;/h3&gt;
&lt;h4 id=&#34;声明变量&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#声明变量&#34;&gt;#&lt;/a&gt; 声明变量&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;var age;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;var 是一个 js 关键字用来声明变量&lt;br&gt;
 age 是程序员取的名字&lt;/p&gt;
&lt;h4 id=&#34;赋值&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#赋值&#34;&gt;#&lt;/a&gt; 赋值&lt;/h4&gt;
&lt;p&gt;赋值就是把值存入变量中&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;age=10&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这里的 = 是赋值的意思 在变量中存储一个数据&lt;/p&gt;
&lt;h4 id=&#34;变量的初始化&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#变量的初始化&#34;&gt;#&lt;/a&gt; 变量的初始化&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;var age=18;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在声明变量的同时赋值给 18  使程序变得更加简便&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;var myname = prompt(&#39;请输入你的名字&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;这样在弹出的对话框里面输入的名字 可以储存到变量 myname 中去&lt;/p&gt;
&lt;h4 id=&#34;变量语法扩展&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#变量语法扩展&#34;&gt;#&lt;/a&gt; 变量语法扩展&lt;/h4&gt;
&lt;h5 id=&#34;更新变量&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#更新变量&#34;&gt;#&lt;/a&gt; 更新变量&lt;/h5&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt; var myname = &#39;pink&#39;;
 console.log(myname);
  myname = &#39;迪丽热巴&#39;;
  console.log(myname);
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;这样从上到下 第一次输出的 pink 第二次输出的是迪丽热巴  变量在不断更新&lt;/p&gt;
&lt;h5 id=&#34;声明多个变量&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#声明多个变量&#34;&gt;#&lt;/a&gt; 声明多个变量&lt;/h5&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;eg:var age=18,address=&#39;火影村&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;这里声明了 age 和 address 多个变量，变量与变量之间通过英文的逗号隔开&lt;/p&gt;
&lt;h5 id=&#34;声明变量的特殊情况&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#声明变量的特殊情况&#34;&gt;#&lt;/a&gt; 声明变量的特殊情况&lt;/h5&gt;
&lt;p&gt;1. 只声明不赋值 这时候输出的结果是 undefined (未定义的)&lt;br&gt;
 2. 不声明不赋值 直接使用 浏览器会进行报错&lt;br&gt;
 3. 不声明直接赋值使用 在 js 之中只可以使用的&lt;/p&gt;
&lt;p&gt;注意:js 是从上到下处理的，如果中间有错误的代码，那么错误代码下面的代码将不再被 js 处理&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IG0QRf&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IG0QRf.png&#34; alt=&#34;IG0QRf.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&#34;变量命名规范&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#变量命名规范&#34;&gt;#&lt;/a&gt; 变量命名规范&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGieEV&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGieEV.png&#34; alt=&#34;IGieEV.png&#34;&gt;&lt;/a&gt;&lt;br&gt;
 尽量不要直接使用 name 作为变量名，name 在大部分浏览器中有变量含义&lt;/p&gt;
&lt;h4 id=&#34;小结&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#小结&#34;&gt;#&lt;/a&gt; 小结&lt;/h4&gt;
&lt;p&gt;自我问答环节&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGin4U&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGin4U.png&#34; alt=&#34;IGin4U.png&#34;&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGiM34&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGiM34.png&#34; alt=&#34;IGiM34.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;数据类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数据类型&#34;&gt;#&lt;/a&gt; 数据类型&lt;/h3&gt;
&lt;h4 id=&#34;简介&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#简介&#34;&gt;#&lt;/a&gt; 简介&lt;/h4&gt;
&lt;p&gt;不同的数据占用的存储空间不同，为了充分利用存储空间，于是定义了不同的数据类型.&lt;/p&gt;
&lt;h4 id=&#34;变量的数据类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#变量的数据类型&#34;&gt;#&lt;/a&gt; 变量的数据类型&lt;/h4&gt;
&lt;p&gt;js 是一种弱类型或者说动态语言，这意味着不用提前声明变量的类型，在程序运行的过程中，类型会自动确定.&lt;/p&gt;
&lt;p&gt;js 的变量数据类型是只有程序在运行过程中，根据等号右边的值来确定的.&lt;/p&gt;
&lt;p&gt;js 是动态语言，变量的数据类型是可以变化的&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;var x = 10;x 是数字型&lt;br&gt;
 var x = ‘yogmas’; x 是字符串型&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;简单数据类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#简单数据类型&#34;&gt;#&lt;/a&gt; 简单数据类型&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGFTQH&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGFTQH.png&#34; alt=&#34;IGFTQH.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h6 id=&#34;数字型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数字型&#34;&gt;#&lt;/a&gt; 数字型&lt;/h6&gt;
&lt;p&gt;1. 在我们程序里面数字前面加 0 表示 8 进制&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;eg:var num = 010 转化为10进制就是8
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;2. 十六进制 0~9 a~f&lt;br&gt;
 在数字前面加 0x 表示 16 进制&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;eg:var num = 0xa 转外为10进制就是10
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;3. 数字型的最大值&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;console.log(Number.MAX_VALUE)  1.7976e+308
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;4. 数字型的最小值&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;console.log(Number.MIN_VALUE)  5e-324
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;数字型的三个特殊数值&lt;br&gt;
 alert (infinity) 无穷大&lt;br&gt;
 alert (-infinity) 无穷小&lt;br&gt;
这两个数都可以通过将前面的最大数或者最小数通过加减乘除扩大或缩小得到&lt;br&gt;
 alert (NAN) 非数值&lt;/p&gt;
&lt;p&gt;可以通过 isNAN 用来判断非数字 并且返回一个值， 如果是数值返回的是 false 如果不是数字 返回的是 true&lt;br&gt;
console.log(isNaN(XX));&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGFOTP&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGFOTP.png&#34; alt=&#34;IGFOTP.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&#34;字符串型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#字符串型&#34;&gt;#&lt;/a&gt; 字符串型&lt;/h5&gt;
&lt;p&gt;字符串数据类型用单引号圈出 (字符串必须加引号，不然会提示错误)&lt;/p&gt;
&lt;p&gt;注意引号内不能内嵌引号，如果要引号内嵌，使用不同的引号 (&lt;strong&gt;引号判定是就近一致原则&lt;/strong&gt;)&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;例如:var str = &#34;我是一个&#39;高富帅&#39;程序员&#34;;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h6 id=&#34;字符串长度&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#字符串长度&#34;&gt;#&lt;/a&gt; 字符串长度&lt;/h6&gt;
&lt;p&gt;检测获取字符串的长度 用 length&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;        var str = &#39;my name is andy &#39;;
        console.log(str.length)
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h6 id=&#34;字符转义符&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#字符转义符&#34;&gt;#&lt;/a&gt; 字符转义符&lt;/h6&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGkmpF&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGkmpF.png&#34; alt=&#34;IGkmpF.png&#34;&gt;&lt;/a&gt;&lt;br&gt;
 都是以 \ 开头 ，但是这些转义字符要写到引号里面&lt;/p&gt;
&lt;h6 id=&#34;字符串的拼接&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#字符串的拼接&#34;&gt;#&lt;/a&gt; 字符串的拼接&lt;/h6&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;console.log (&#39;&#39; + &#39;&#39; + &#39;&#39;)字符串之间通过加号连接
eg:console.log (&#39;沙漠&#39;+&#39;骆驼 &#39;) = &#39;沙漠骆驼&#39;
console.log (&#39;12&#39; + 12) 最后为1212  这是字符串的相加   
console.log (12 + 12) 最后为24   这是数字型的相加
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;只要有一个是字符串 其他全部都会以字符串相连&lt;br&gt;
&lt;strong&gt;数字相加，字符相连&lt;/strong&gt;&lt;/p&gt;
&lt;h6 id=&#34;字符串拼接加强&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#字符串拼接加强&#34;&gt;#&lt;/a&gt; 字符串拼接加强&lt;/h6&gt;
&lt;p&gt;通过改变变量中的值 来改变显示中的值&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;eg:var age = 18;
   console.log(&#39;pink老师&#39;+age+&#39;岁&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;需要注意的时，&lt;strong&gt;变量不要写到字符串里面，是通过和字符串相连的方式实现的&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  console.log (&#39;pink老师age岁&#39;)
  console.log (&#39;pink老师&#39;+&#39;age&#39;+&#39;岁&#39;)
  console.log (&#39;pink老师&#39;+&#39;age岁&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;如上这些等等做法，都是不能实现的.&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGku6J&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGku6J.png&#34; alt=&#34;IGku6J.png&#34;&gt;&lt;/a&gt;&lt;br&gt;
 交互编程：&lt;/p&gt;
&lt;p&gt;用户输入 → 处理 → 输出&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;eg         var age = prompt(&#39;请输入您的年龄&#39;);
           var str = &#39;你今年已经&#39; + age + &#39;岁了&#39;;
           alert(str);
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;布尔型boolean&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#布尔型boolean&#34;&gt;#&lt;/a&gt; 布尔型 Boolean&lt;/h5&gt;
&lt;p&gt;布尔型中有两个值 true 和 false&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;eg         var flag = true; 布尔型
           var flag1 = false; 布尔型
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;需要注意的是参与加法运算时布尔型 true 就是 1，false 就是 0.&lt;/p&gt;
&lt;h5 id=&#34;undefined-和null&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#undefined-和null&#34;&gt;#&lt;/a&gt; Undefined 和 Null&lt;/h5&gt;
&lt;p&gt;如果一个变量声明未赋值 就是 undefined 未定义数据类型&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;   eg: var str;
       console.log(var);
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;未定义和字符串相加，最终的结果是 undefined+ 字符串的内容&lt;/p&gt;
&lt;p&gt;undefined 和数字相加 最后得到的结果是 NaN: not a number&lt;/p&gt;
&lt;p&gt;null : 空值&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;var space = null
console.log(space + &#39;yogmas&#39;)  输出的结果是 spaceyogmas
console.log(space + 1) 输出的结果是1  (和undefined区别)
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;获取变量数据类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#获取变量数据类型&#34;&gt;#&lt;/a&gt; 获取变量数据类型&lt;/h4&gt;
&lt;h5 id=&#34;使用typeof来检测&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#使用typeof来检测&#34;&gt;#&lt;/a&gt; 使用 typeof 来检测&lt;/h5&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;   eg:   var num = 10;
         console.log(typeof num);
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;比较特殊的是 在这里对 null 进行数据类型检测 输出来的是 object (对象)&lt;/p&gt;
&lt;p&gt;经过检测发现 我们 prompt 取过来的值是字符型的&lt;/p&gt;
&lt;h5 id=&#34;观察控制台中的数据颜色&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#观察控制台中的数据颜色&#34;&gt;#&lt;/a&gt; 观察控制台中的数据颜色&lt;/h5&gt;
&lt;p&gt;数字型 浅蓝色&lt;br&gt;
字符型 黑色&lt;br&gt;
布尔型 深蓝色&lt;br&gt;
 undefined 和 null 灰色&lt;/p&gt;
&lt;h4 id=&#34;字面量&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#字面量&#34;&gt;#&lt;/a&gt; 字面量&lt;/h4&gt;
&lt;p&gt;字面量是在源代码中一个固定值得表示法，通俗来说，就是字面量表示如何表达这个值&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGkQmR&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGkQmR.png&#34; alt=&#34;IGkQmR.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;数据类型转换&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数据类型转换&#34;&gt;#&lt;/a&gt; 数据类型转换&lt;/h4&gt;
&lt;p&gt;通常会实现 3 中方式的转换&lt;br&gt;
 1. 转换为字符串类型&lt;br&gt;
 2. 转换为数字型&lt;br&gt;
 3. 转换为布尔型&lt;/p&gt;
&lt;h5 id=&#34;转换成字符串型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#转换成字符串型&#34;&gt;#&lt;/a&gt; 转换成字符串型&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGkGtK&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGkGtK.png&#34; alt=&#34;IGkGtK.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;var num = 18;
console.log(num.toString())
console.log(String(num))
console.log(num + &#39;&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;注意:toString () 和 String () 的使用方法不同&lt;br&gt;
三种方法中 其中拼接转换字符串最为实用&lt;/p&gt;
&lt;h5 id=&#34;转换为数字型重点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#转换为数字型重点&#34;&gt;#&lt;/a&gt; 转换为数字型 (重点)&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGkN1e&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGkN1e.png&#34; alt=&#34;IGkN1e.png&#34;&gt;&lt;/a&gt;&lt;br&gt;
 其中前两个较为实用&lt;br&gt;
 1.parseInt (变量) 可以把字符型的转换为数字型 但是得到的是整数 并且约分不会四舍五入，会直接去掉小数点后面的数字 如果数字后面有单位，也会去掉单位，如果以字母开头那么输出的为 NaN&lt;br&gt;
2.paseFloat (变量) 可以把字符型的转化为数字型，得到的是浮点数也就是小数，但同样也会把后面的单位去掉&lt;br&gt;
 3.Number (变量)&lt;br&gt;
 4. 利用了算数运算 - * / 隐式转换&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGk2cQ&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGk2cQ.png&#34; alt=&#34;IGk2cQ.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;   console.log(parseInt(&#39;123&#39;));
   console.log(parseFloat(&#39;123&#39;));
   console.log(Number(&#39;123&#39;));
   console.log(&#39;12&#39; - 0);
   console.log(&#39;123&#39; - &#39;123&#39;);
   console.log(&#39;123&#39; * 1);
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;转化为布尔型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#转化为布尔型&#34;&gt;#&lt;/a&gt; 转化为布尔型&lt;/h5&gt;
&lt;p&gt;代表&lt;strong&gt;空，否定&lt;/strong&gt;的值会被转化为 false，如’’,0,NaN,null,undefined. 其他的值都会被转化成 true&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGkjBR&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGkjBR.png&#34; alt=&#34;IGkjBR.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;eg: console.log(Boolean(&#39;&#39;));      这是false
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;解释型语言和编译型语言&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#解释型语言和编译型语言&#34;&gt;#&lt;/a&gt; 解释型语言和编译型语言&lt;/h4&gt;
&lt;p&gt;编译型语言：全部编译成功后再执行代码.(做好菜 再吃饭)&lt;br&gt;
 解释型语言：解释一行代码后就执行一行代码.(吃火锅：边吃边涮)&lt;/p&gt;
&lt;h4 id=&#34;标识符关键字保留字&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#标识符关键字保留字&#34;&gt;#&lt;/a&gt; 标识符，关键字，保留字&lt;/h4&gt;
&lt;p&gt;标识符：开发人员为变量，属性，函数，参数取的名字&lt;br&gt;
&lt;strong&gt;标识符不能是关键字和保留字&lt;/strong&gt;&lt;br&gt;
关键字：是指 js 本身已经使用了子，不能充当变量名和方法名&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGBhAs&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGBhAs.png&#34; alt=&#34;IGBhAs.png&#34;&gt;&lt;/a&gt;&lt;br&gt;
 保留字：预留的关键字，未来可能会成为关键字&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGBHjU&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGBHjU.png&#34; alt=&#34;IGBHjU.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;运算符&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#运算符&#34;&gt;#&lt;/a&gt; 运算符&lt;/h3&gt;
&lt;h4 id=&#34;算数运算符&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#算数运算符&#34;&gt;#&lt;/a&gt; 算数运算符&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGAQgg&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGAQgg.png&#34; alt=&#34;IGAQgg.png&#34;&gt;&lt;/a&gt;&lt;br&gt;
 需要注意的是浮点数在算数运算里面会有问题 (会有一定的误差)&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;eg:console.log(0.07*100); 最终的结果是7.000000000000001
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGAaCT&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGAaCT.png&#34; alt=&#34;IGAaCT.png&#34;&gt;&lt;/a&gt;&lt;br&gt;
 我们不能拿着浮点数来进行相比较是否相等&lt;/p&gt;
&lt;h5 id=&#34;表达式返回值&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#表达式返回值&#34;&gt;#&lt;/a&gt; 表达式，返回值&lt;/h5&gt;
&lt;p&gt;由数字，运算符，变量等组成的式子&lt;/p&gt;
&lt;p&gt;在程序中的计算是把右边表达式计算完毕把返回值给左边&lt;/p&gt;
&lt;p&gt;式子通过计算得到的结果 称为返回值&lt;/p&gt;
&lt;h4 id=&#34;自增和自减运算符&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#自增和自减运算符&#34;&gt;#&lt;/a&gt; 自增和自减运算符&lt;/h4&gt;
&lt;p&gt;反复用给数字变量添加或者减去 1，可以用 ++ 或者–来实现&lt;br&gt;
在 js 中，自增自减运算符既可以放在变量前面又可以放在变量后面，称为前置或者后置.&lt;br&gt;
 需要注意的是 这个运算符必须和变量配合才能使用&lt;br&gt;
前置和后置有区别的是，前置表示先自增或自减再返回，后置表示先返回再自增或自减&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGYJ4U&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGYJ4U.png&#34; alt=&#34;IGYJ4U.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;比较运算符关系运算符&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#比较运算符关系运算符&#34;&gt;#&lt;/a&gt; 比较运算符 &amp;amp; 关系运算符&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGYwuR&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGYwuR.png&#34; alt=&#34;IGYwuR.png&#34;&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGYy4O&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGYy4O.png&#34; alt=&#34;IGYy4O.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;逻辑运算符&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#逻辑运算符&#34;&gt;#&lt;/a&gt; 逻辑运算符&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGYhDI&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGYhDI.png&#34; alt=&#34;IGYhDI.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&#34;短路运算逻辑中断&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#短路运算逻辑中断&#34;&gt;#&lt;/a&gt; 短路运算 (逻辑中断)&lt;/h5&gt;
&lt;p&gt;原理：左边表达式的值可以确定结果时，就不再继续运算右边的值&lt;/p&gt;
&lt;p&gt;逻辑与：如果表达式 1 结果为真，则返回表达式 2. 如果表达式 1 结果为假，则返回表达式 1&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGYIVP&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGYIVP.png&#34; alt=&#34;IGYIVP.png&#34;&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGYoUf&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGYoUf.png&#34; alt=&#34;IGYoUf.png&#34;&gt;&lt;/a&gt;&lt;br&gt;
 逻辑或：如果表达式 1 结果为真，则返回表达式 1. 如果表达式 1 结果为假，则返回表达式 2.&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGYT58&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGYT58.png&#34; alt=&#34;IGYT58.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&#34;赋值运算符&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#赋值运算符&#34;&gt;#&lt;/a&gt; 赋值运算符&lt;/h5&gt;
&lt;p&gt;把右边的数据赋给左边的变量&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGYLvj&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGYLvj.png&#34; alt=&#34;IGYLvj.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&#34;运算符优先级&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#运算符优先级&#34;&gt;#&lt;/a&gt; 运算符优先级&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGtSaV&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGtSaV.png&#34; alt=&#34;IGtSaV.png&#34;&gt;&lt;/a&gt;&lt;br&gt;
 注意逻辑与的权重大于逻辑或的权重&lt;/p&gt;
&lt;h3 id=&#34;流程控制-分支&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#流程控制-分支&#34;&gt;#&lt;/a&gt; 流程控制 - 分支&lt;/h3&gt;
&lt;h4 id=&#34;流程控制&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#流程控制&#34;&gt;#&lt;/a&gt; 流程控制&lt;/h4&gt;
&lt;p&gt;控制代码按照什么结构顺序来执行&lt;/p&gt;
&lt;p&gt;流程控制有三种结构，分别是顺序结构，分支结构和循环结构&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGti24&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGti24.png&#34; alt=&#34;IGti24.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&#34;顺序流程控制&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#顺序流程控制&#34;&gt;#&lt;/a&gt; 顺序流程控制&lt;/h5&gt;
&lt;p&gt;按照写的代码的顺序从上到下执行，我们现在的代码大多数都是按照顺序流程控制来写的&lt;/p&gt;
&lt;h5 id=&#34;分支流程控制&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#分支流程控制&#34;&gt;#&lt;/a&gt; 分支流程控制&lt;/h5&gt;
&lt;p&gt;从上到下执行代码的过程中，根据不同的条件，执行不同的路径代码，从而得到不同的结果&lt;/p&gt;
&lt;h4 id=&#34;if分支语句&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#if分支语句&#34;&gt;#&lt;/a&gt; if 分支语句&lt;/h4&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;if (条件表达式) {执行语句}
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果条件表达式结果为真就执行大括号里面的执行语句&lt;br&gt;
如果条件表达式结果为假就执行 if 语句后面的代码&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGBOHJ&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGBOHJ.png&#34; alt=&#34;IGBOHJ.png&#34;&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGBx41&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGBx41.png&#34; alt=&#34;IGBx41.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&#34;if-else-双分支语句&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#if-else-双分支语句&#34;&gt;#&lt;/a&gt; if else 双分支语句&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGDp36&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGDp36.png&#34; alt=&#34;IGDp36.png&#34;&gt;&lt;/a&gt;&lt;br&gt;
 如果表达式结果为真，那么执行语句 1 否则执行语句 2&lt;br&gt;
 语句 1 和语句 2 只能二选一执行&lt;br&gt;
 else 后面直接加大括号而不是小括号&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGDVUA&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGDVUA.png&#34; alt=&#34;IGDVUA.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&#34;if-else-多分支语句&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#if-else-多分支语句&#34;&gt;#&lt;/a&gt; if else 多分支语句&lt;/h5&gt;
&lt;p&gt;利用多个条件来选择不同的语句执行，得到不同的结果，是多选 1 的过程&lt;/p&gt;
&lt;p&gt;语法规范:&lt;br&gt;
if (条件表达式 1) {&lt;/p&gt;
&lt;p&gt;} else if (条件表达式 2) {&lt;/p&gt;
&lt;p&gt;} else if …{&lt;/p&gt;
&lt;p&gt;} else {&lt;br&gt;
最后的语句&lt;br&gt;
}&lt;br&gt;
 如果条件表达式 1 满足就执行语句 1，执行完毕后退出整个 if 分支语句&lt;br&gt;
如果条件 1 不满足就判断表达式 2 以此类推&lt;br&gt;
如果全都不成立，则执行最后的 else 里面的语句&lt;br&gt;
注意&lt;br&gt;
 1. 多分支语句还是多选 1 最后只有 1 个语句能执行&lt;br&gt;
 2.else if 里面的条件理论上是可以任意多个的&lt;br&gt;
 3.else if 中间有个空格&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGD9gK&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGD9gK.png&#34; alt=&#34;IGD9gK.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;三元表达式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#三元表达式&#34;&gt;#&lt;/a&gt; 三元表达式&lt;/h4&gt;
&lt;p&gt;有三元运算符组成的式子我们称为三元表达式&lt;/p&gt;
&lt;p&gt;条件表达式 1? 表达式 1: 表达式 2&lt;/p&gt;
&lt;p&gt;如果条件表达式结果为真，则返回表达式 1 的值，如果条件表达式的结果为假，则返回表达式 2 的值&lt;/p&gt;
&lt;h4 id=&#34;switch语句&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#switch语句&#34;&gt;#&lt;/a&gt; switch 语句&lt;/h4&gt;
&lt;p&gt;也是多分支语句可以实现多选 1 的效果&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGDn8P&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGDn8P.png&#34; alt=&#34;IGDn8P.png&#34;&gt;&lt;/a&gt;&lt;br&gt;
 语法结构:&lt;br&gt;
switch (表达式) {&lt;br&gt;
case value1:&lt;br&gt;
 执行语句 1;&lt;br&gt;
break;&lt;br&gt;
case value2:&lt;br&gt;
 执行语句 2;&lt;br&gt;
break;&lt;br&gt;
…………&lt;br&gt;
default :&lt;br&gt;
 执行最后的语句；&lt;br&gt;
}&lt;br&gt;
 利用表达式的值和 case 里面的选项匹配如果匹配上就执行相应的 case 里面的值，如果都没有匹配上就执行 default 里面的语句&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGDKv8&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGDKv8.png&#34; alt=&#34;IGDKv8.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;switch语句和-if-else-if语句的区别&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#switch语句和-if-else-if语句的区别&#34;&gt;#&lt;/a&gt; switch 语句和 if else if 语句的区别&lt;/h4&gt;
&lt;p&gt;一般情况下，他们两个语句可以相互替换&lt;br&gt;
 switch…case 语句 一般在 case 为比较固定值得情况下而 if…else 语句一般来判断范围&lt;br&gt;
 switch 判断时直接跳到判断语句上而 if 语句从上往下一次判断，这样 switch 语句的效率更高一点，但是如果分支少的话 if else if 的效率会更高一点，分支多的时候 switch 语句的效率更高&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGDQKS&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGDQKS.png&#34; alt=&#34;IGDQKS.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;流程控制-循环&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#流程控制-循环&#34;&gt;#&lt;/a&gt; 流程控制 - 循环&lt;/h3&gt;
&lt;p&gt;可以反复不断地循环执行某些代码&lt;/p&gt;
&lt;h4 id=&#34;for循环&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#for循环&#34;&gt;#&lt;/a&gt; for 循环&lt;/h4&gt;
&lt;p&gt;for 循环重复执行某些代码，通常和计数有关&lt;br&gt;
被重复的语句称为循环体，是否重复执行取决于循环的终止条件，由循环体及循环的终止条件&lt;br&gt;
初始化变量 就是用 var 声明的一个普通变量，通常用于作为计数器使用&lt;br&gt;
条件表达式 就是用来决定每一次循环是否继续执行 就是终止的条件&lt;br&gt;
操作表达式 是每次循环最后执行的代码，经常用来对我们的计数器进行更新 (递增或者递减)&lt;/p&gt;
&lt;h5 id=&#34;断点调试&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#断点调试&#34;&gt;#&lt;/a&gt; 断点调试&lt;/h5&gt;
&lt;p&gt;自己在程序的某一行设置一个断点，调试时，程序运行到这一行就会停住，然后你可以一步一步往下调试，调试过程中可以看着各个变量当前的值，出错的话，调试到出错的代码行及硻错误，停下.&lt;/p&gt;
&lt;p&gt;在浏览器调试中的 source 中可以进行断点调试&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGtai8&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGtai8.png&#34; alt=&#34;IGtai8.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&#34;for循环重复相同的代码&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#for循环重复相同的代码&#34;&gt;#&lt;/a&gt; for 循环重复相同的代码&lt;/h5&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;   var num = prompt(&#39;请输入重复的次数&#39;);
   for (i = 1; i &amp;lt;= num; i++) {
   console.log(&#39;你是大傻逼&#39;);
   }
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;for循环重复不同的代码&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#for循环重复不同的代码&#34;&gt;#&lt;/a&gt; for 循环重复不同的代码&lt;/h5&gt;
&lt;p&gt;循环可以重复执行不同的代码，因为计数器变量 i 的存在 i 每次循环值都会变化&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;   for (var i = 1; i &amp;lt;= 100; i++) {
   console.log(&#39;这个人今年&#39; + i + &#39;岁了&#39;);
   }
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;for循环重复相同的操作&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#for循环重复相同的操作&#34;&gt;#&lt;/a&gt; for 循环重复相同的操作&lt;/h5&gt;
&lt;p&gt;例如:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;   var sum = 0, aver = 0;
   for (var i = 1; i &amp;lt;= 100; i++) {
   sum += i
   }
   aver = sum / i
   console.log(aver);
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;双重for循环&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#双重for循环&#34;&gt;#&lt;/a&gt; 双重 for 循环&lt;/h5&gt;
&lt;p&gt;也就是 for 循环嵌套，在一个循环语句中 再定义一个循环语句.&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;for (外层的初始化变量;外层的条件表达式;外层的操作表达式) {
     for (初始化变量;条件表达式;操作表达式){
     }
     }
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;里层的循环可以看成是外层循环的语句&lt;/p&gt;
&lt;h5 id=&#34;for循环小结&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#for循环小结&#34;&gt;#&lt;/a&gt; for 循环小结&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGD1bQ&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGD1bQ.png&#34; alt=&#34;IGD1bQ.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;while循环&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#while循环&#34;&gt;#&lt;/a&gt; while 循环&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGD8Ej&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGD8Ej.png&#34; alt=&#34;IGD8Ej.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;条件表达式结果为 true 则执行循环体 否则 退出循环&lt;/p&gt;
&lt;p&gt;while 循环中应该也有计数器初始化变量，也该有操作表达式完成计数器的更新防止死循环&lt;/p&gt;
&lt;h4 id=&#34;do-while-循环&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#do-while-循环&#34;&gt;#&lt;/a&gt; do while 循环&lt;/h4&gt;
&lt;p&gt;语法结构&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;do {循环体} while (条件表达式)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;执行思路不同的地方跟 while 在于 do whild 先执行一遍循环体再判断条件&lt;br&gt;
 do while 语句至少执行一次循环体&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGDwKU&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGDwKU.png&#34; alt=&#34;IGDwKU.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;循环小结&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#循环小结&#34;&gt;#&lt;/a&gt; 循环小结&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGtwRg&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGtwRg.png&#34; alt=&#34;IGtwRg.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;continue关键字&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#continue关键字&#34;&gt;#&lt;/a&gt; continue 关键字&lt;/h3&gt;
&lt;p&gt;用于立即跳出本次循环，继续下一次循环.&lt;/p&gt;
&lt;h3 id=&#34;break关键字&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#break关键字&#34;&gt;#&lt;/a&gt; break 关键字&lt;/h3&gt;
&lt;p&gt;break 退出整个循环，使循环立马结束&lt;/p&gt;
&lt;h3 id=&#34;命名规范&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#命名规范&#34;&gt;#&lt;/a&gt; 命名规范&lt;/h3&gt;
&lt;h4 id=&#34;标志符命名规范&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#标志符命名规范&#34;&gt;#&lt;/a&gt; 标志符命名规范&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGtrss&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGtrss.png&#34; alt=&#34;IGtrss.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;操作符规范&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#操作符规范&#34;&gt;#&lt;/a&gt; 操作符规范&lt;/h4&gt;
&lt;p&gt;操作符左右两侧各保留一个空格&lt;br&gt;
单行注释在 // 后面敲个空格&lt;/p&gt;
&lt;h4 id=&#34;循环作业&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#循环作业&#34;&gt;#&lt;/a&gt; 循环作业&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGtgoV&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGtgoV.png&#34; alt=&#34;IGtgoV.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;javascript数组&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#javascript数组&#34;&gt;#&lt;/a&gt; javascript 数组&lt;/h3&gt;
&lt;h4 id=&#34;数组的概念&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数组的概念&#34;&gt;#&lt;/a&gt; 数组的概念&lt;/h4&gt;
&lt;p&gt;数组是一组数据的集合，其中每个数据都被称为元素，在数组中可以存放任何类型的元素，数组是可以将数据存储在单个变量下的优雅方式&lt;/p&gt;
&lt;h4 id=&#34;创建数组&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#创建数组&#34;&gt;#&lt;/a&gt; 创建数组&lt;/h4&gt;
&lt;p&gt;1.new 创建数组&lt;br&gt;
 2. 利用数组关键字创造数组&lt;/p&gt;
&lt;h5 id=&#34;利用new创建数组&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#利用new创建数组&#34;&gt;#&lt;/a&gt; 利用 new 创建数组&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGrSaj&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGrSaj.png&#34; alt=&#34;IGrSaj.png&#34;&gt;&lt;/a&gt;&lt;br&gt;
 注意 Array 的 A 要大写&lt;/p&gt;
&lt;h5 id=&#34;利用数组字面量创建数组&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#利用数组字面量创建数组&#34;&gt;#&lt;/a&gt; 利用数组字面量创建数组&lt;/h5&gt;
&lt;p&gt;[] 是数组的的字面量&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;var arr = [];&lt;br&gt;
 这样便创建了一个空的数组&lt;br&gt;
 var arr = [1,1,2,3,‘pink’,true]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在数组内可以放任何的数据类型，但是每一个数据之间必须用逗号分隔.&lt;/p&gt;
&lt;h4 id=&#34;获取数组元素&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#获取数组元素&#34;&gt;#&lt;/a&gt; 获取数组元素&lt;/h4&gt;
&lt;h5 id=&#34;数组的索引&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数组的索引&#34;&gt;#&lt;/a&gt; 数组的索引&lt;/h5&gt;
&lt;p&gt;索引又被称为下标：用来访问数组元素的序号 (数组下标从 0 开始)&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGNAfS&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGNAfS.png&#34; alt=&#34;IGNAfS.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt; 数组名[索引号]
 console.log(arr[1])
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;索引号从 0 开始&lt;/strong&gt;&lt;br&gt;
如果没有该数组元素 就会输出 undefined&lt;/p&gt;
&lt;h4 id=&#34;遍历数组&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#遍历数组&#34;&gt;#&lt;/a&gt; 遍历数组&lt;/h4&gt;
&lt;p&gt;遍历：就是把数组中的每个元素从头到尾访问一次&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;eg:var arr = [1, 2, 3, 4, 5, &#39;pink&#39;];
   for (i = 0; i &amp;lt; 6; i++) {
   console.log(arr[i]);
   }
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;输出的时候计数器当索引号来用&lt;/p&gt;
&lt;h5 id=&#34;数组长度&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数组长度&#34;&gt;#&lt;/a&gt; 数组长度&lt;/h5&gt;
&lt;p&gt;数组名.length  可以访问数组中的数组元素的数量&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;console.log(arr.length);
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;同时 数组名.length 可以动态检测数组元素的个数&lt;/p&gt;
&lt;h4 id=&#34;数组中新增元素&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数组中新增元素&#34;&gt;#&lt;/a&gt; 数组中新增元素&lt;/h4&gt;
&lt;h5 id=&#34;通过修改length长度新增数组长度&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#通过修改length长度新增数组长度&#34;&gt;#&lt;/a&gt; 通过修改 length 长度新增数组长度&lt;/h5&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;   var arr = [&#39;pink&#39;, &#39;red&#39;, &#39;blue&#39;];
   arr.length = 5
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果扩容的数组元素中没有给值，其中的元素是 undefined&lt;/p&gt;
&lt;h5 id=&#34;修改索引号-增加数组元素&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#修改索引号-增加数组元素&#34;&gt;#&lt;/a&gt; 修改索引号 增加数组元素&lt;/h5&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;var arr = [&#39;pink&#39;, &#39;red&#39;, &#39;blue&#39;];
arr[3] = &#39;pink&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果这个索引号原先已经被占用，就会替换原来的数组元素&lt;br&gt;
&lt;strong&gt;不要直接给数组名赋值，否则会覆盖掉以前的数据，导致数据一个都没有了&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;筛选数组的方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#筛选数组的方法&#34;&gt;#&lt;/a&gt; 筛选数组的方法&lt;/h4&gt;
&lt;h5 id=&#34;方法1&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#方法1&#34;&gt;#&lt;/a&gt; 方法 1&lt;/h5&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;   var arr = [1, 2, 3, 4, 5, 6, 8, 11, 45, 13, 48, 46, 13];
   var newArr = [];
   var j = 0;
   for (var i = 0; i &amp;lt; arr.length; i++) {
       if (arr[i] &amp;gt; 10) {
           newArr[j] = arr[i]
           j++
       }
   }
   console.log(newArr);
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;这里通过声明一个变量 j 来使新数组从 0 开始&lt;/p&gt;
&lt;h5 id=&#34;方法2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#方法2&#34;&gt;#&lt;/a&gt; 方法 2&lt;/h5&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;   var arr = [1, 2, 3, 4, 5, 6, 8, 11, 45, 13, 48, 46, 13];
   var newArr = [];
   for (var i = 0; i &amp;lt; arr.length; i++) {
       if (arr[i] &amp;gt; 10) {
           newArr[newArr.length] = arr[i]
       }
   }
   console.log(newArr);
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;将 j 替换成 newArr, 最开始当新数组里面没有元素时是 0，当有元素时 newArr.length 开始不断增多&lt;/p&gt;
&lt;h4 id=&#34;翻转数组&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#翻转数组&#34;&gt;#&lt;/a&gt; 翻转数组&lt;/h4&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;   var arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];
   var newArr = [];
   for (i = arr.length - 1; i &amp;gt;= 0; i--) {
       newArr[newArr.length] = arr[i]
   }
   console.log(newArr);
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;这里需要注意的是：元素的索引号的最大值等于数组长度 - 1&lt;/p&gt;
&lt;h4 id=&#34;冒泡排序&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#冒泡排序&#34;&gt;#&lt;/a&gt; 冒泡排序&lt;/h4&gt;
&lt;p&gt;是一种算法，把一系列数组按照一定的顺序进行排列显示 (从小到大或者从大到小)&lt;br&gt;
 算法：观察执行过程，从而找到其中的规律，并且找到代码&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;   var arr = [1, 5, 4, 3, 2];
   for (var i = 0; i &amp;lt; arr.length - 1; i++) { // 外层循环次数
       for (var j = 0; j &amp;lt; arr.length - i - 1; j++) { // 内层循环次数
           if (arr[j] &amp;gt; arr[j + 1]) {
               var temp = arr[j]
               arr[j] = arr[j + 1]
               arr[j + 1] = temp
           }
       }
   }
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;javascript函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#javascript函数&#34;&gt;#&lt;/a&gt; javascript 函数&lt;/h3&gt;
&lt;h4 id=&#34;函数的概念&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#函数的概念&#34;&gt;#&lt;/a&gt; 函数的概念&lt;/h4&gt;
&lt;p&gt;js 中经常会定义相同的代码，这些代码可能会大量使用&lt;br&gt;
函数：就是封装了一段可被重复调用执行的代码块，通过调用代码块可以实现大量代码的重复使用.&lt;/p&gt;
&lt;h4 id=&#34;函数的使用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#函数的使用&#34;&gt;#&lt;/a&gt; 函数的使用&lt;/h4&gt;
&lt;p&gt;步骤：1. 声明函数 2. 调用函数&lt;/p&gt;
&lt;h5 id=&#34;声明函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#声明函数&#34;&gt;#&lt;/a&gt; 声明函数&lt;/h5&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;function 函数名() {函数体}
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;注意事项：1.function 声明函数的关键字 全部小写 2. 函数是做某件事情，函数名一般是动词 3. 函数不调用自己不会执行&lt;/p&gt;
&lt;h5 id=&#34;调用函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#调用函数&#34;&gt;#&lt;/a&gt; 调用函数&lt;/h5&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;函数名();
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;调用函数时，千万不要忘了加小括号.&lt;/p&gt;
&lt;h5 id=&#34;函数的参数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#函数的参数&#34;&gt;#&lt;/a&gt; 函数的参数&lt;/h5&gt;
&lt;p&gt;我们可以利用函数的参数实现函数重复不同的代码&lt;br&gt;
参数: 1. 形参 2. 实参&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGrNod&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGrNod.png&#34; alt=&#34;IGrNod.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;function (形参1,形参2,....) {  在声明函数的小括号里面是形参
 }
函数名(实参1,实参2...)     在函数调用的小括号里面是实参
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;形参类似于一个变量来接受实参的&lt;br&gt;
函数的参数可以有也可以没有，个数不限&lt;br&gt;
多个参数之间用逗号隔开&lt;/p&gt;
&lt;h6 id=&#34;函数形参实参个数匹配&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#函数形参实参个数匹配&#34;&gt;#&lt;/a&gt; 函数形参实参个数匹配&lt;/h6&gt;
&lt;p&gt;1. 如果实参的个数和形参的个数一直，则正常输出结果&lt;br&gt;
 2. 如果实参的个数多于形参的个数，会取到形参的个数，实参中多的自动忽略&lt;br&gt;
 3. 如果实参的个数小于形参的个数，num2 可以看做一个变量但是没有接收值，所以最终的结果就是 undefined&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGN3fU&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGN3fU.png&#34; alt=&#34;IGN3fU.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h6 id=&#34;函数参数小结&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#函数参数小结&#34;&gt;#&lt;/a&gt; 函数参数小结&lt;/h6&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGrBSP&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGrBSP.png&#34; alt=&#34;IGrBSP.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&#34;函数的返回值&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#函数的返回值&#34;&gt;#&lt;/a&gt; 函数的返回值&lt;/h5&gt;
&lt;h6 id=&#34;return语句&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#return语句&#34;&gt;#&lt;/a&gt; return 语句&lt;/h6&gt;
&lt;p&gt;函数只是实现某种功能，最终的结果需要返回给函数的调用者函数名 () 通过 return 实现&lt;br&gt;
只要函数遇到 return 就把后面的结果返回给函数的调用者 函数名 ()=return 后面的结果&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt; function 函数名() {
       return 需要返回的结果;
 }
 函数名();
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;代码验证&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;   function getSum(num1, num2) {
       return num1 + num2;
   }
   console.log(getSum(1, 3));
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;这样输出的结果就是 4 (来自于 1+3)&lt;/p&gt;
&lt;p&gt;return 终止函数：函数遇到 return 就终止函数&lt;br&gt;
 return 的返回值:return 只能返回一个值，如果有多个值，return 只返回最后一个值&lt;br&gt;
如果想要返回多个数值时，我们可以将数值放在一个数组里面，一个数组代表一个结果&lt;br&gt;
函数如果 return 则返回的是 return 后面的值，如果函数没有 return 就返回 undefined&lt;br&gt;
break,continue,return 的区别:&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGrDQf&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGrDQf.png&#34; alt=&#34;IGrDQf.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;函数的理解&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#函数的理解&#34;&gt;#&lt;/a&gt; 函数的理解&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGNJl4&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGNJl4.png&#34; alt=&#34;IGNJl4.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;函数的作业&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#函数的作业&#34;&gt;#&lt;/a&gt; 函数的作业&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGrWYn&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGrWYn.png&#34; alt=&#34;IGrWYn.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;arguments的作用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#arguments的作用&#34;&gt;#&lt;/a&gt; arguments 的作用&lt;/h4&gt;
&lt;p&gt;当我们不确定有多少个参数传递时，可以用 argument 在获取，他实际上是当前函数的一个内置对象，arguements 存储了传递过来的所有实参&lt;/p&gt;
&lt;p&gt;arguments 实际上是伪数组.&lt;br&gt;
 伪数组:&lt;br&gt;
1. 具有数组的 length 属性.&lt;br&gt;
2. 按照索引的方式进行存储.&lt;br&gt;
3. 没有真正数组的一些方法:pop () 等&lt;/p&gt;
&lt;h4 id=&#34;函数可以调用另外一个函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#函数可以调用另外一个函数&#34;&gt;#&lt;/a&gt; 函数可以调用另外一个函数&lt;/h4&gt;
&lt;h4 id=&#34;函数的两种声明方式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#函数的两种声明方式&#34;&gt;#&lt;/a&gt; 函数的两种声明方式&lt;/h4&gt;
&lt;p&gt;1. 利用函数关键字自定义函数&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;function fn() {
}
fn()
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;也被称为命名函数&lt;/p&gt;
&lt;p&gt;2. 函数表达式&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;var 变量名 = function() {}
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;又被叫做匿名函数&lt;br&gt;
这是变量名不是函数名&lt;br&gt;
函数表达式声明方式跟声明变量差不多，只不过变量里面存的是值，而函数表达式里面存的是函数。&lt;/p&gt;
&lt;h3 id=&#34;作用域&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#作用域&#34;&gt;#&lt;/a&gt; 作用域&lt;/h3&gt;
&lt;h4 id=&#34;作用域概述&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#作用域概述&#34;&gt;#&lt;/a&gt; 作用域概述&lt;/h4&gt;
&lt;p&gt;1.js 的作用域就是代码名字在某个范围内起作用和效果 目的是为了提高程序的可靠性，重要的是减少命名冲突&lt;br&gt;
 2.js 的作用域 (es6) 之前：全局作用域 和 局部作用域&lt;br&gt;
 3. 全局作用域：整个 script 标签 或者是一个单独的 js 文件&lt;br&gt;
 4. 局部作用域：在函数内部就是局部作用域，这个代码的名字只在函数内部起作用和效果 又叫做函数作用域&lt;/p&gt;
&lt;h4 id=&#34;变量的作用域&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#变量的作用域&#34;&gt;#&lt;/a&gt; 变量的作用域&lt;/h4&gt;
&lt;p&gt;根据作用域的不同我们变量分为全局变量和局部变量&lt;br&gt;
 1. 全局变量：在全局作用域下的变量 在全局下都可以使用 (当然包括函数内部)&lt;br&gt;
 2. 局部变量：在局部作用域下的变量 在函数内部的变量就是局部变量 只能在函数内部使用&lt;br&gt;
 3. 特殊情况：如果在函数内部没有声明直接赋值的变量也称为全局变量，函数的形参也可以看成局部变量&lt;/p&gt;
&lt;p&gt;从执行效率来看全局变量和局部变量&lt;br&gt;
 1. 全局变量只有浏览器关闭的时候才会销毁，比较占内存资源&lt;br&gt;
 2. 局部变量 当我们程序执行完毕就会销毁，比较节约内存支援&lt;br&gt;
&lt;strong&gt;现阶段 js 没有块级作用域&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;作用域链&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#作用域链&#34;&gt;#&lt;/a&gt; 作用域链&lt;/h4&gt;
&lt;p&gt;内部函数访问外部函数的电量，采取的是链式查找的方式来决定取哪种值，这种结构我们称为作用域链&lt;br&gt;
内部函数是可以访问外部函数的变量的&lt;/p&gt;
&lt;h3 id=&#34;javascript预解析&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#javascript预解析&#34;&gt;#&lt;/a&gt; javascript 预解析&lt;/h3&gt;
&lt;p&gt;1.js 解析器在运行 js 代码的时候分为两部分：先进行预解析，再进行代码执行&lt;br&gt;
 (2). 预解析:js 引擎会把 js 里面所有的 var 还有 function 提升到当前作用域的最前面&lt;br&gt;
 (3). 代码执行：按照代码书写的顺序从上往下执行.&lt;br&gt;
2. 预解析分为变量预解析 (变量提升) 和函数预解析 (函数执行)&lt;br&gt;
(1). 变量提升：就是把所有的变量声明提升到当前的作用域最前面 不提升赋值&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;console.log(num);
var num= 10;
在预解析的时候执行顺序是这样的
var num;
console.log(num);
num=10
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;(2). 函数声明：就是先把函数声明提升到当前作用域的最前面，不执行函数.&lt;/p&gt;
&lt;h3 id=&#34;js对象&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#js对象&#34;&gt;#&lt;/a&gt; js 对象&lt;/h3&gt;
&lt;h4 id=&#34;对象概念&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#对象概念&#34;&gt;#&lt;/a&gt; 对象概念&lt;/h4&gt;
&lt;p&gt;对象是一个具体的事物 (不是泛指)&lt;br&gt;
 比如 明星不是对象 但刘德华是对象&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGNspD&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGNspD.png&#34; alt=&#34;IGNspD.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;对象的使用方向&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#对象的使用方向&#34;&gt;#&lt;/a&gt; 对象的使用方向&lt;/h4&gt;
&lt;p&gt;保存一个值可以使用变量，保存多个值可以使用数组，但如果保存一个人的完整信就需要用到对象了&lt;/p&gt;
&lt;h4 id=&#34;创建对象的三种方式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#创建对象的三种方式&#34;&gt;#&lt;/a&gt; 创建对象的三种方式&lt;/h4&gt;
&lt;p&gt;1. 利用字面量创建对象&lt;br&gt;
 2. 利用 new Object 创建对象&lt;br&gt;
 3. 利用构造函数创建对象&lt;/p&gt;
&lt;h4 id=&#34;对象字面量&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#对象字面量&#34;&gt;#&lt;/a&gt; 对象字面量&lt;/h4&gt;
&lt;p&gt;{} 是对象的字面量&lt;br&gt;
 1. 里面的属性或者方法我们采取键值对的形式 键 属性名：值 属性值&lt;br&gt;
 2. 多个属性或者方法中间用逗号隔开，函数后面加；而不加逗号&lt;br&gt;
 3. 方法冒号后面跟的是一个匿名函数&lt;/p&gt;
&lt;h4 id=&#34;使用对象&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#使用对象&#34;&gt;#&lt;/a&gt; 使用对象&lt;/h4&gt;
&lt;p&gt;调用对象的属性 我们采取 对象名。属性名&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;console.log(obj.uname)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;其中这个。我们可以理解为的 比如说对象的属性&lt;br&gt;
调用属性还有一种方法 对象名 [‘属性名’]&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;console.log(abj[‘age’])&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;需要注意的是 后面这种方法需要’&#39; 而前面一种方法不需要&lt;br&gt;
调用对象中的函数时，千万不要忘记添加小括号&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGN66H&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGN66H.png&#34; alt=&#34;IGN66H.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;变量-属性-函数-方法的区别&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#变量-属性-函数-方法的区别&#34;&gt;#&lt;/a&gt; 变量 属性 函数 方法的区别&lt;/h4&gt;
&lt;p&gt;相同点：都是用来存储数据的&lt;br&gt;
不同点：1. 变量 单独声明并赋值 使用的时候直接写变量名 单独存在&lt;br&gt;
 2. 属性 在对象里面的不需要声明的 使用的时候必须是 对象。属性&lt;/p&gt;
&lt;p&gt;函数和方法&lt;br&gt;
相同点：都是实现某种功能 做某件事&lt;br&gt;
不同点：函数时单独声明 并且调用的 是单独存在的&lt;br&gt;
方法 在对象里面&lt;/p&gt;
&lt;h4 id=&#34;利用new-object来创建对象&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#利用new-object来创建对象&#34;&gt;#&lt;/a&gt; 利用 new Object 来创建对象&lt;/h4&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;var obj = new Object();   创建了一个空的对象
obj.uname = &#39;张三丰&#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;利用 等号 = 赋值的方法 添加对象的属性和方法&lt;br&gt;
每个属性和方法之间用分号结束&lt;/p&gt;
&lt;h4 id=&#34;利用构造函数创建对象&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#利用构造函数创建对象&#34;&gt;#&lt;/a&gt; 利用构造函数创建对象&lt;/h4&gt;
&lt;p&gt;构造函数 就是把我们对象里面一些相同的属性和方法抽象出来封装到函数里面&lt;br&gt;
语法格式:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;function 构造函数名() {
    this.属性 = 值;
    this.方法 = function() {}
 }
使用: new 构造函数名();
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;1. 构造函数名的首字母要大写&lt;br&gt;
 2. 构造函数 不需要 return 就可以返回结果&lt;br&gt;
 3. 我们调用构造函数必须使用 new&lt;br&gt;
4. 属性和方法前面必须添加 this&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGroOU&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGroOU.png&#34; alt=&#34;IGroOU.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;for-in遍历我们的对象&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#for-in遍历我们的对象&#34;&gt;#&lt;/a&gt; for in 遍历我们的对象&lt;/h4&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;for (变量 in 对象) {
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;javascript内置对象&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#javascript内置对象&#34;&gt;#&lt;/a&gt; javascript 内置对象&lt;/h3&gt;
&lt;p&gt;1. 自定义对象&lt;br&gt;
 2. 内置对象&lt;br&gt;
 3. 浏览器对象 (js 特有)&lt;/p&gt;
&lt;p&gt;内置对象是 js 语言自带的一些对象，这些对象供开发者使用，并提供了一些常用的或者是最基本的属性和方法&lt;br&gt;
 Math Date Array String&lt;/p&gt;
&lt;h4 id=&#34;查阅文档&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#查阅文档&#34;&gt;#&lt;/a&gt; 查阅文档&lt;/h4&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;https://developer.mozilla.org/zh-CN
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGNW7t&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGNW7t.png&#34; alt=&#34;IGNW7t.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;math对象&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#math对象&#34;&gt;#&lt;/a&gt; Math 对象&lt;/h4&gt;
&lt;p&gt;不是一个构造函数，不用 new 来调用，直接使用即可&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGr7mF&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGr7mF.png&#34; alt=&#34;IGr7mF.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Math.round 四舍五入中.5 是特殊数字 他往大了去  比如 - 1.5 的结果是 - 1&lt;/p&gt;
&lt;h5 id=&#34;math随机数法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#math随机数法&#34;&gt;#&lt;/a&gt; Math 随机数法&lt;/h5&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;console.log(Math.random());
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;date日期数法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#date日期数法&#34;&gt;#&lt;/a&gt; Date 日期数法&lt;/h4&gt;
&lt;p&gt;是一个构造函数 必须使用 new 来调用创建我们的日期对象&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;   var day = new Date();
   console.log(day);
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;使用 date 如果没有参数 返回当前系统的当前时间&lt;br&gt;
参数常用的写法 数字型 2019,10,01 或者是字符串型’2019-10-01’&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGrbTJ&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGrbTJ.png&#34; alt=&#34;IGrbTJ.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&#34;日期格式化date&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#日期格式化date&#34;&gt;#&lt;/a&gt; 日期格式化 Date&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGNo9S&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGNo9S.png&#34; alt=&#34;IGNo9S.png&#34;&gt;&lt;/a&gt;&lt;br&gt;
 返回的月份小一个月 记得月份 +1&lt;/p&gt;
&lt;h5 id=&#34;获取日期的总的毫秒形式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#获取日期的总的毫秒形式&#34;&gt;#&lt;/a&gt; 获取日期的总的毫秒形式&lt;/h5&gt;
&lt;p&gt;Date 对象是基于 1970 年 1 月 1 日 (世界标准时间) 起的毫秒数&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;1.valueOf()    getTime()
2.var date1= +new Date();
3.H5新增 console(Date.now());
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;数组对象array&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数组对象array&#34;&gt;#&lt;/a&gt; 数组对象 Array&lt;/h4&gt;
&lt;p&gt;1. 数组字面量创建&lt;br&gt;
 2. 利用 new Array () 创建&lt;/p&gt;
&lt;p&gt;检测是非为数组&lt;br&gt;
 1.instanceof Array&lt;br&gt;
2.Array.isArray (参数)&lt;/p&gt;
&lt;h5 id=&#34;添加删除数组元素的方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#添加删除数组元素的方法&#34;&gt;#&lt;/a&gt; 添加删除数组元素的方法&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGN7cQ&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGN7cQ.png&#34; alt=&#34;IGN7cQ.png&#34;&gt;&lt;/a&gt;&lt;br&gt;
 添加:arr.push ();arr.unshift ();&lt;br&gt;
 删除:arr.pop ();arr.shift;&lt;/p&gt;
&lt;h5 id=&#34;数组排序&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数组排序&#34;&gt;#&lt;/a&gt; 数组排序&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGNqns&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGNqns.png&#34; alt=&#34;IGNqns.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;       arr1.sort(function (a, b) {
       return a - b //升序的顺序排列
       //return b - a 是降序的顺序排列
        });
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;数组索引方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数组索引方法&#34;&gt;#&lt;/a&gt; 数组索引方法&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGNO7q&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGNO7q.png&#34; alt=&#34;IGNO7q.png&#34;&gt;&lt;/a&gt;&lt;br&gt;
 注意，如果有两个重复 只范湖第一个满足条件的索引号。如果里面没有相对元素返回的结果是 - 1;&lt;/p&gt;
&lt;h5 id=&#34;数组转化成字符串&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数组转化成字符串&#34;&gt;#&lt;/a&gt; 数组转化成字符串&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGUiu9&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGUiu9.png&#34; alt=&#34;IGUiu9.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;字符串对象&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#字符串对象&#34;&gt;#&lt;/a&gt; 字符串对象&lt;/h4&gt;
&lt;p&gt;基本包装类型：就是把简单数据类型 包装称为了 复杂数据类型&lt;br&gt;
 (1) 把简单数据类型包装称为复杂数据类型&lt;br&gt;
 var temp = new String (‘Andy’)&lt;br&gt;
(2) 把临时变量的值给 str&lt;br&gt;
str=temp&lt;br&gt;
 (3) 销毁这个临时变量&lt;br&gt;
 temp = null&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGrOYR&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGrOYR.png&#34; alt=&#34;IGrOYR.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&#34;字符串的不可变型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#字符串的不可变型&#34;&gt;#&lt;/a&gt; 字符串的不可变型&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGU1HI&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGU1HI.png&#34; alt=&#34;IGU1HI.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;   var str = &#39;改革吹风吹满地&#39;
   console.log(str.indexOf(&#39;吹&#39;,3));
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;根据位置返回字符&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#根据位置返回字符&#34;&gt;#&lt;/a&gt; 根据位置返回字符&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGUUgg&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGUUgg.png&#34; alt=&#34;IGUUgg.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&#34;字符串操作方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#字符串操作方法&#34;&gt;#&lt;/a&gt; 字符串操作方法&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGUavQ&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGUavQ.png&#34; alt=&#34;IGUavQ.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;   var str = &#39;改革春风吹满地&#39;
   console.log(str.substr(2, 2));  //第一个2是索引号的2  第二个2是取几个字符
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;替换字符串&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#替换字符串&#34;&gt;#&lt;/a&gt; 替换字符串&lt;/h5&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;replace(&#39;被替换的字符&#39;,&#39;替换为的字符&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果有相同的两个字符 只会替换前面一个字符&lt;/p&gt;
&lt;h5 id=&#34;把字符串转化成数组&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#把字符串转化成数组&#34;&gt;#&lt;/a&gt; 把字符串转化成数组&lt;/h5&gt;
&lt;p&gt;split (‘分隔符’) 把字符转换成数组&lt;br&gt;
 join (‘分隔符’) 把数组转换成字符串&lt;/p&gt;
&lt;p&gt;split 中的分隔符取决于原字符串中的分隔符是什么&lt;/p&gt;
&lt;h3 id=&#34;web-apis&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#web-apis&#34;&gt;#&lt;/a&gt; Web APIs&lt;/h3&gt;
&lt;p&gt;浏览器提供的一套操作浏览器功能和页面元素的 API&lt;/p&gt;
&lt;h4 id=&#34;dom&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#dom&#34;&gt;#&lt;/a&gt; DOM&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGrvSx&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGrvSx.png&#34; alt=&#34;IGrvSx.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;获取页面元素&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#获取页面元素&#34;&gt;#&lt;/a&gt; 获取页面元素&lt;/h4&gt;
&lt;h5 id=&#34;id获取&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#id获取&#34;&gt;#&lt;/a&gt; ID 获取&lt;/h5&gt;
&lt;p&gt;getElementByld()&lt;br&gt;
 console.dir (); 打印我们返回的元素对象 更好地查看里面的属性和方法&lt;/p&gt;
&lt;h5 id=&#34;根据标签名来获取&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#根据标签名来获取&#34;&gt;#&lt;/a&gt; 根据标签名来获取&lt;/h5&gt;
&lt;p&gt;element.getElementsByTagName (‘标签名’)&lt;br&gt;
 1. 获取过来元素对象的集合 以伪数组的形式储存&lt;br&gt;
 2. 如果页面中只有一个元素 返回的还是伪数组的形式&lt;br&gt;
 3. 如果页面中没有这个元素 返回的是空的伪数组&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;   var lis = document.getElementsByTagName(&#39;ul&#39;)
   var li = lis[0].getElementsByTagName(&#39;li&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;根据类型来获取新增html5属性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#根据类型来获取新增html5属性&#34;&gt;#&lt;/a&gt; 根据类型来获取 (新增 Html5 属性)&lt;/h5&gt;
&lt;p&gt;document.getElementsByClassName (‘类名’)&lt;br&gt;
 document.querySelector (‘选择器’) 根据选择器返回第一个元素对象&lt;br&gt;
 document.querySelectorAll (‘选择器’) 根据选择器返回所有的集合&lt;/p&gt;
&lt;h5 id=&#34;获取特殊元素&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#获取特殊元素&#34;&gt;#&lt;/a&gt; 获取特殊元素&lt;/h5&gt;
&lt;p&gt;1. 获取 body 元素&lt;br&gt;
 document.body&lt;br&gt;
2. 获取 html 元素&lt;br&gt;
 document.documentElement&lt;/p&gt;
&lt;h4 id=&#34;事件基础&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#事件基础&#34;&gt;#&lt;/a&gt; 事件基础&lt;/h4&gt;
&lt;p&gt;js 让我们有能力创建动态页面，而时间是可以被 js 侦测到的行为&lt;br&gt;
在网页中每个元素都可以产生某些触发 js 的事件&lt;/p&gt;
&lt;p&gt;事件的组成部分&lt;br&gt;
 1. 事件源：事件被触发的对象&lt;br&gt;
 2. 事件类型：如何触发 什么事件 比如 鼠标点击 (onclick) 触发  还是鼠标经过触发&lt;br&gt;
 3. 事件处理程序：通过函数赋值的方式完成&lt;/p&gt;
&lt;h5 id=&#34;执行事件的步骤&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#执行事件的步骤&#34;&gt;#&lt;/a&gt; 执行事件的步骤&lt;/h5&gt;
&lt;p&gt;1. 获取事件源&lt;br&gt;
 2. 绑定事件&lt;br&gt;
 3. 添加事件处理程序 (采取函数赋值的形式)&lt;/p&gt;
&lt;h4 id=&#34;操作元素&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#操作元素&#34;&gt;#&lt;/a&gt; 操作元素&lt;/h4&gt;
&lt;h5 id=&#34;改变元素内容&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#改变元素内容&#34;&gt;#&lt;/a&gt; 改变元素内容&lt;/h5&gt;
&lt;p&gt;element.innerText&lt;br&gt;
element.innerHTML&lt;br&gt;
 这两个属性是可读写的 可以获取元素里面的内容&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGUy5V&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGUy5V.png&#34; alt=&#34;IGUy5V.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&#34;改变元素属性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#改变元素属性&#34;&gt;#&lt;/a&gt; 改变元素属性&lt;/h5&gt;
&lt;h5 id=&#34;表单元素属性设置&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#表单元素属性设置&#34;&gt;#&lt;/a&gt; 表单元素属性设置&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGURv4&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGURv4.png&#34; alt=&#34;IGURv4.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&#34;修改样式属性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#修改样式属性&#34;&gt;#&lt;/a&gt; 修改样式属性&lt;/h5&gt;
&lt;p&gt;element.style 行内样式操作&lt;br&gt;
 element.className 类名样式操作&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGaMGT&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGaMGT.png&#34; alt=&#34;IGaMGT.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;onfocus 获得焦点事件&lt;br&gt;
 onblur 失去焦点事件&lt;/p&gt;
&lt;h5 id=&#34;操作元素总结&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#操作元素总结&#34;&gt;#&lt;/a&gt; 操作元素总结&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGaNIx&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGaNIx.png&#34; alt=&#34;IGaNIx.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&#34;排他思想&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#排他思想&#34;&gt;#&lt;/a&gt; 排他思想&lt;/h5&gt;
&lt;p&gt;先清除样式，再给当前元素设置样式&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;   var btn = document.getElementsByTagName(&#39;button&#39;)
   for (i = 0; i &amp;lt; btn.length; i++) {
       btn[i].onclick = function () {
           for (i = 0; i &amp;lt; btn.length; i++) {
               btn[i].style.backgroundColor = &#39;white&#39;
           }
           this.style.backgroundColor = &#39;pink&#39;
       }
   }
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;鼠标经过 onmouseover&lt;br&gt;
 鼠标离开 onmouseout&lt;/p&gt;
&lt;h5 id=&#34;自定义属性值的操作&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#自定义属性值的操作&#34;&gt;#&lt;/a&gt; 自定义属性值的操作&lt;/h5&gt;
&lt;h6 id=&#34;获取属性值&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#获取属性值&#34;&gt;#&lt;/a&gt; 获取属性值&lt;/h6&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGa0zD&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGa0zD.png&#34; alt=&#34;IGa0zD.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h6 id=&#34;设置属性值&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#设置属性值&#34;&gt;#&lt;/a&gt; 设置属性值&lt;/h6&gt;
&lt;p&gt;element. 属性 = ‘值’&lt;br&gt;
element.setAttribute (‘属性’,‘值’)&lt;/p&gt;
&lt;p&gt;setAttribute 主要用于设置自定义属性&lt;/p&gt;
&lt;p&gt;removeAttribute 移除属性&lt;/p&gt;
&lt;h6 id=&#34;h5自定义属性值&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#h5自定义属性值&#34;&gt;#&lt;/a&gt; H5 自定义属性值&lt;/h6&gt;
&lt;p&gt;H5 新规范：自定义属性都用 data- 开头&lt;br&gt;
 H5 新增的获取自定义属性的方法 &lt;a href=&#34;http://element.dataset.XXX&#34;&gt;element.dataset.XXX&lt;/a&gt;&lt;br&gt;
dataset 是一个集合 里面存放了所有以 data 开头的自定义属性&lt;br&gt;
如果自定义属性里面有多个 - 链接的单词，我们获取的时候采取驼峰命名法&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGrz6K&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGrz6K.png&#34; alt=&#34;IGrz6K.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;节点操作&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#节点操作&#34;&gt;#&lt;/a&gt; 节点操作&lt;/h4&gt;
&lt;p&gt;为什么要学节点操作&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGaRFP&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGaRFP.png&#34; alt=&#34;IGaRFP.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&#34;节点概述&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#节点概述&#34;&gt;#&lt;/a&gt; 节点概述&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGa4SS&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGa4SS.png&#34; alt=&#34;IGa4SS.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&#34;节点层级&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#节点层级&#34;&gt;#&lt;/a&gt; 节点层级&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGaIyQ&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGaIyQ.png&#34; alt=&#34;IGaIyQ.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&#34;父节点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#父节点&#34;&gt;#&lt;/a&gt; 父节点&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGaHwn&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGaHwn.png&#34; alt=&#34;IGaHwn.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&#34;子节点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#子节点&#34;&gt;#&lt;/a&gt; 子节点&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGaLF0&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGaLF0.png&#34; alt=&#34;IGaLF0.png&#34;&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGaboq&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGaboq.png&#34; alt=&#34;IGaboq.png&#34;&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGdSOJ&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGdSOJ.png&#34; alt=&#34;IGdSOJ.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&#34;兄弟节点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#兄弟节点&#34;&gt;#&lt;/a&gt; 兄弟节点&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGdCwR&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGdCwR.png&#34; alt=&#34;IGdCwR.png&#34;&gt;&lt;/a&gt;&lt;br&gt;
 解决兄弟节点的兼容性问题:&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGdumd&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGdumd.png&#34; alt=&#34;IGdumd.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&#34;创建和删除节点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#创建和删除节点&#34;&gt;#&lt;/a&gt; 创建和删除节点&lt;/h5&gt;
&lt;h6 id=&#34;创建节点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#创建节点&#34;&gt;#&lt;/a&gt; 创建节点&lt;/h6&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGsC0e&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGsC0e.png&#34; alt=&#34;IGsC0e.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h6 id=&#34;添加节点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#添加节点&#34;&gt;#&lt;/a&gt; 添加节点&lt;/h6&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGdGp8&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGdGp8.png&#34; alt=&#34;IGdGp8.png&#34;&gt;&lt;/a&gt;&lt;br&gt;
node.appendChild(child)&lt;br&gt;
 node.insertbefore (child, 指定元素);&lt;/p&gt;
&lt;h6 id=&#34;删除节点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#删除节点&#34;&gt;#&lt;/a&gt; 删除节点&lt;/h6&gt;
&lt;p&gt;code.removeChild (节点)&lt;br&gt;
eg:ul.removeChild(ul.children[0])&lt;/p&gt;
&lt;h6 id=&#34;复制节点克隆节点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#复制节点克隆节点&#34;&gt;#&lt;/a&gt; 复制节点 (克隆节点)&lt;/h6&gt;
&lt;p&gt;node.cloneNode()&lt;br&gt;
 如果括号为空，则只复制标签 不复制里面的内容&lt;br&gt;
括号里面为 true 则里面的内容也跟着赋值&lt;/p&gt;
&lt;h6 id=&#34;三种动态创建元素区别&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#三种动态创建元素区别&#34;&gt;#&lt;/a&gt; 三种动态创建元素区别&lt;/h6&gt;
&lt;p&gt;document.write () 如果页面加载完毕 再执行这个指令 会导致页面全部重绘&lt;br&gt;
 innerHTML&lt;br&gt;
document.createElement(’’)&lt;br&gt;
 最后两个大致上没有区别 但是如果需要创造很多个元素 最后一个的效率会大大提高，因为最后一个不是拼接字符串 而是在电脑中重新开辟一个新的空间&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGdDhV&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGdDhV.png&#34; alt=&#34;IGdDhV.png&#34;&gt;&lt;/a&gt;&lt;br&gt;
 改进方法:innerHTML 不采用拼接字符串的方式，而是采用数组形式拼接，现在数组中拼接字符串，然后将数组引入到 innerHTML 中&lt;/p&gt;
&lt;h4 id=&#34;dom重点核心&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#dom重点核心&#34;&gt;#&lt;/a&gt; DOM 重点核心&lt;/h4&gt;
&lt;p&gt;(一) 创建&lt;br&gt;
 1.document.write&lt;br&gt;
2.innerHTML&lt;br&gt;
3.createElement&lt;br&gt;
 (二) 增&lt;br&gt;
 1.appendChild&lt;br&gt;
2.innerBefore&lt;br&gt;
 (三) 删&lt;br&gt;
 1.removeChild&lt;br&gt;
 (四) 改&lt;br&gt;
 1. 修改元素属性:src,href,title&lt;br&gt;
2. 修改普通元素内容:innerHTML,innerText&lt;br&gt;
3. 修改表单元素:value,type,disabled&lt;br&gt;
4. 修改元素样式:style,className&lt;br&gt;
 (五) 查&lt;br&gt;
 1.DOM 提供的 API 方法:getElementById,getElementsByTagName  (&lt;strong&gt;古老用法不推荐&lt;/strong&gt;)&lt;br&gt;
 2.H5 提供的新方法:querySelector,querySelectorAll 提倡&lt;br&gt;
 3. 利用节点获取元素：父 (parentNode), 子 (children), 兄 (previousElementSibing,nextElementSibing) 提倡&lt;br&gt;
 (六) 属性操作&lt;br&gt;
 1.setAttribute: 设置 dom 的属性值&lt;br&gt;
 2.getAttribute: 得到 dom 的属性值&lt;br&gt;
 3.removeAttribute: 移除属性&lt;br&gt;
 (七) 事件操作&lt;br&gt;
 onclick: 鼠标点击左键触发&lt;br&gt;
 onmouseover: 鼠标经过触发&lt;br&gt;
 onmouseout: 鼠标离开触发&lt;br&gt;
 onfocus: 获得鼠标焦点触发&lt;br&gt;
 onblur: 失去鼠标焦点触发&lt;br&gt;
 onmousemove: 鼠标移动触发&lt;br&gt;
 onmouseup: 鼠标弹起触发&lt;br&gt;
 onmousedown: 鼠标按下触发&lt;/p&gt;
&lt;h4 id=&#34;事件高级导读&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#事件高级导读&#34;&gt;#&lt;/a&gt; 事件高级导读&lt;/h4&gt;
&lt;h5 id=&#34;注册事件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#注册事件&#34;&gt;#&lt;/a&gt; 注册事件&lt;/h5&gt;
&lt;p&gt;传统方式和方法监听注册方式&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGd6cF&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGd6cF.png&#34; alt=&#34;IGd6cF.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;eventTarget.addEventListener(type,listener[,useCapture])
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGsktA&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGsktA.png&#34; alt=&#34;IGsktA.png&#34;&gt;&lt;/a&gt;&lt;br&gt;
 里面的事件类型是字符串 必定加引号 不带 on&lt;br&gt;
 同一个元素 同一个事件可以添加多个侦听器 (事件处理程序)&lt;/p&gt;
&lt;p&gt;AttachEvent 事件监听方式 (&lt;strong&gt;不提倡仅供了解&lt;/strong&gt;)&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGsVpt&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGsVpt.png&#34; alt=&#34;IGsVpt.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;注册事件兼容性解决方法&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGdW7R&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGdW7R.png&#34; alt=&#34;IGdW7R.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&#34;删除事件解绑事件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#删除事件解绑事件&#34;&gt;#&lt;/a&gt; 删除事件 (解绑事件)&lt;/h5&gt;
&lt;p&gt;1. 传统法式:element.onclick = null&lt;br&gt;
2. 方法监听事件: eventTarget.removeEventListener (type,listener [,useCapture])&lt;br&gt;
 删除事件兼容性解决方案:&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGd4tx&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGd4tx.png&#34; alt=&#34;IGd4tx.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&#34;dom事件流&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#dom事件流&#34;&gt;#&lt;/a&gt; DOM 事件流&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGsunS&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGsunS.png&#34; alt=&#34;IGsunS.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;注意事项&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGsGpq&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGsGpq.png&#34; alt=&#34;IGsGpq.png&#34;&gt;&lt;/a&gt;&lt;br&gt;
 捕获阶段&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGs3hn&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGs3hn.png&#34; alt=&#34;IGs3hn.png&#34;&gt;&lt;/a&gt;&lt;br&gt;
 冒泡阶段&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGs1ts&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGs1ts.png&#34; alt=&#34;IGs1ts.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;事件对象&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#事件对象&#34;&gt;#&lt;/a&gt; 事件对象&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGdqnH&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGdqnH.png&#34; alt=&#34;IGdqnH.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&#34;事件对象的常见属性和方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#事件对象的常见属性和方法&#34;&gt;#&lt;/a&gt; 事件对象的常见属性和方法&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGdLBd&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGdLBd.png&#34; alt=&#34;IGdLBd.png&#34;&gt;&lt;/a&gt;&lt;br&gt;
e.target 返回的是触发事件的对象 而 this 返回的是绑定事件的对象，currentTarget 和 this 一样返回的是绑定事件的对象 ie678 不认识 currentTarget&lt;br&gt;
e.type: 返回事件类型 例如 click,mouseover&lt;/p&gt;
&lt;p&gt;组织默认事件 让链接不跳转 或者让提交按钮不提交 e.preventDefault ();&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGdx4P&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGdx4P.png&#34; alt=&#34;IGdx4P.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;组织事件冒泡 e.stopPropagation ()&lt;br&gt;
 兼容性解决方法&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGdvNt&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGdvNt.png&#34; alt=&#34;IGdvNt.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&#34;事件委托&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#事件委托&#34;&gt;#&lt;/a&gt; 事件委托&lt;/h5&gt;
&lt;p&gt;原理：给父节点添加侦听器，利用事件冒泡影响每一个子节点&lt;/p&gt;
&lt;h5 id=&#34;常用的鼠标事件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#常用的鼠标事件&#34;&gt;#&lt;/a&gt; 常用的鼠标事件&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGw9gS&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGw9gS.png&#34; alt=&#34;IGw9gS.png&#34;&gt;&lt;/a&gt;&lt;br&gt;
 禁止鼠标右键菜单:contextmenu 主要控制应该在何时显示上下文菜单，主要用于程序员取消默认的上下文菜单&lt;br&gt;
禁止鼠标选中:selectstart&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;   document.addEventListener(&#39;contextmenu&#39;, function (e) {
       e.preventDefault();
   })
   document.addEventListener(&#39;selectstart&#39;, function (e) {
       e.preventDefault();
   })
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;鼠标事件对象&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#鼠标事件对象&#34;&gt;#&lt;/a&gt; 鼠标事件对象&lt;/h5&gt;
&lt;p&gt;Mouseevent 鼠标事件对象&lt;br&gt;
 keyboard 键盘事件对象&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGwCjg&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGwCjg.png&#34; alt=&#34;IGwCjg.png&#34;&gt;&lt;/a&gt;&lt;br&gt;
client 以可视区为主 跟屏幕滚动没有关系&lt;br&gt;
 page 相对于文档页面的 X 和 Y 坐标&lt;br&gt;
 screen 鼠标相当于电脑屏幕的 X 和 Y 坐标 (当浏览器缩小或者放大时会变化)&lt;br&gt;
 mousemove 鼠标移动事件&lt;/p&gt;
&lt;h5 id=&#34;键盘事件对象&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#键盘事件对象&#34;&gt;#&lt;/a&gt; 键盘事件对象&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGwkHs&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGwkHs.png&#34; alt=&#34;IGwkHs.png&#34;&gt;&lt;/a&gt;&lt;br&gt;
 三个事件的执行顺序是 keydown keypress keyup&lt;/p&gt;
&lt;p&gt;KeyCode 返回键盘按键的 ASCII 的值&lt;br&gt;
 keyup 和 keydown 事件不区分字母大小写 a 和 A 得到的就是 65&lt;br&gt;
keypress 区分字母大小写&lt;/p&gt;
&lt;h3 id=&#34;bom浏览器对象模型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#bom浏览器对象模型&#34;&gt;#&lt;/a&gt; BOM 浏览器对象模型&lt;/h3&gt;
&lt;h4 id=&#34;bom概述&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#bom概述&#34;&gt;#&lt;/a&gt; BOM 概述&lt;/h4&gt;
&lt;p&gt;BOM: 浏览器对象模型&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IJFREt&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IJFREt.png&#34; alt=&#34;IJFREt.png&#34;&gt;&lt;/a&gt;&lt;br&gt;
BOM 的构成&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IJFf4f&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IJFf4f.png&#34; alt=&#34;IJFf4f.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;浏览器顶级对象window&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#浏览器顶级对象window&#34;&gt;#&lt;/a&gt; 浏览器顶级对象 window&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IJF4C8&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IJF4C8.png&#34; alt=&#34;IJF4C8.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&#34;窗口加载事件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#窗口加载事件&#34;&gt;#&lt;/a&gt; 窗口加载事件&lt;/h5&gt;
&lt;p&gt;window.onload 窗口加载事件，当文档内容完全加载完成后会触发该事件 (包括图像 css 脚本等等)&lt;br&gt;
 注意:&lt;br&gt;
1. 有了 window.onload 我们就可以将 js 写在任何位置 onload 是等页面文档加载完成后 最后加载的东西&lt;br&gt;
 2.window,onload 传统注册事件只能写一次，如果有多个，会以最后一个 window.onload 为准&lt;br&gt;
 3. 如果使用 AddEventListener 则没有限制&lt;br&gt;
 document.addEventListener (‘DOMContentLoaded’,function (){})&lt;br&gt;
 仅当 DOM 加载完成就开始触发，不包括样式表，图片，flash 等等&lt;br&gt;
后一个加载更快，如果是图片较多的网站等 会因为图片刷新过快 如果使用第一个方式 有可能无法加载出 js 文件 而使用后一个方式 则在 DOM 加载完成后 就加载 js&lt;/p&gt;
&lt;h5 id=&#34;调整窗口大小事件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#调整窗口大小事件&#34;&gt;#&lt;/a&gt; 调整窗口大小事件&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGwEEn&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGwEEn.png&#34; alt=&#34;IGwEEn.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;定时器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#定时器&#34;&gt;#&lt;/a&gt; 定时器&lt;/h4&gt;
&lt;h5 id=&#34;settimeout定时器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#settimeout定时器&#34;&gt;#&lt;/a&gt; setTimeout () 定时器&lt;/h5&gt;
&lt;p&gt;window.setTimeout (调用函数，[延迟的毫秒数]);&lt;br&gt;
 在定时器到期后执行函数&lt;br&gt;
 1.window 在调用的时候可以省略&lt;br&gt;
 2. 时间单位是毫秒，可以省略 如果省略默认为 0&lt;br&gt;
3. 页面中可能有很多的定时器 我们经常给定时器起一个标识符&lt;/p&gt;
&lt;p&gt;callback 回调函数&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IJFovQ&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IJFovQ.png&#34; alt=&#34;IJFovQ.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h6 id=&#34;停止settimeout定时器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#停止settimeout定时器&#34;&gt;#&lt;/a&gt; 停止 setTimeout () 定时器&lt;/h6&gt;
&lt;p&gt;window.clearaTimeout (定时器名字)&lt;/p&gt;
&lt;h5 id=&#34;setinterval定时器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#setinterval定时器&#34;&gt;#&lt;/a&gt; setInterval () 定时器&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IJFLEq&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IJFLEq.png&#34; alt=&#34;IJFLEq.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;区别:setTimeout 只调用一次回调函数&lt;br&gt;
 setInterval 会一直调用函数&lt;/p&gt;
&lt;h4 id=&#34;this指向问题&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#this指向问题&#34;&gt;#&lt;/a&gt; this 指向问题&lt;/h4&gt;
&lt;p&gt;1. 全局作用域或者普通函数中 this 指向全局对象 window (定时器里面的 this 指向 window)&lt;br&gt;
 2. 方法调用中谁调用 this 指向谁&lt;br&gt;
 3. 构造函数中 this 可以指向构造函数&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/oSEMu9&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/22/oSEMu9.png&#34; alt=&#34;oSEMu9.png&#34;&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/oSEQBR&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/22/oSEQBR.png&#34; alt=&#34;oSEQBR.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;js的执行队列&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#js的执行队列&#34;&gt;#&lt;/a&gt; js 的执行队列&lt;/h4&gt;
&lt;p&gt;js 是单线程的 同一个时间只能做一件事&lt;br&gt;
为了解决这个问题，利用多核 CPU 的计算能力，HTML5 允许 js 脚本创建多个线程，于是 js 中出现了同步和异步&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGwugU&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGwugU.png&#34; alt=&#34;IGwugU.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&#34;js执行机制&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#js执行机制&#34;&gt;#&lt;/a&gt; js 执行机制&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGw1b9&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGw1b9.png&#34; alt=&#34;IGw1b9.png&#34;&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGwQu4&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGwQu4.png&#34; alt=&#34;IGwQu4.png&#34;&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IJkczF&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IJkczF.png&#34; alt=&#34;IJkczF.png&#34;&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IJFz2F&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IJFz2F.png&#34; alt=&#34;IJFz2F.png&#34;&gt;&lt;/a&gt;&lt;br&gt;
 事件循环：主线程不断的城府获得任务 执行任务 再获取任务 执行任务&lt;/p&gt;
&lt;h4 id=&#34;location对象&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#location对象&#34;&gt;#&lt;/a&gt; location 对象&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IJAmF0&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IJAmF0.png&#34; alt=&#34;IJAmF0.png&#34;&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IJAnYV&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IJAnYV.png&#34; alt=&#34;IJAnYV.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&#34;location对象方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#location对象方法&#34;&gt;#&lt;/a&gt; location 对象方法&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGwJ4x&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGwJ4x.png&#34; alt=&#34;IGwJ4x.png&#34;&gt;&lt;/a&gt;&lt;br&gt;
assign 能够记录历史 可以实现后退功能&lt;/p&gt;
&lt;h4 id=&#34;navigator对象&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#navigator对象&#34;&gt;#&lt;/a&gt; navigator 对象&lt;/h4&gt;
&lt;p&gt;包含浏览器的信息 有很多属性 我们最常用的属性是 userAgent 该属性可以返回由客户机发送服务器的 user-agent 头部的值&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IJAuWT&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IJAuWT.png&#34; alt=&#34;IJAuWT.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;history对象&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#history对象&#34;&gt;#&lt;/a&gt; history 对象&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IJAQlF&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IJAQlF.png&#34; alt=&#34;IJAQlF.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;btn.addEventListener(&#39;click&#39;,function(){
history.forward();  
})
back() 和 go() 同理
其中go(-1) 表示后退一页 go(-1)表示后退两页
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;pc端网页特效&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#pc端网页特效&#34;&gt;#&lt;/a&gt; PC 端网页特效&lt;/h3&gt;
&lt;h4 id=&#34;元素偏移量offset系列&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#元素偏移量offset系列&#34;&gt;#&lt;/a&gt; 元素偏移量 offset 系列&lt;/h4&gt;
&lt;p&gt;动态获取元素位置和大小&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;获取元素距离带有定位父元素的位置&lt;/li&gt;
&lt;li&gt;获得元素自身的大小 (包含 padding 和 border)&lt;/li&gt;
&lt;li&gt;返回的数值不带单位&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/oih8C6&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/24/oih8C6.png&#34; alt=&#34;oih8C6.png&#34;&gt;&lt;/a&gt;&lt;br&gt;
offsetParent  返回的是带有定位的父元素 (没有则返回 body)&lt;br&gt;
 parentNode 返回的是最近一级的父元素 不管父元素有没有定位&lt;/p&gt;
&lt;h5 id=&#34;offset和style的区别&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#offset和style的区别&#34;&gt;#&lt;/a&gt; offset 和 style 的区别&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;offsetWidth 与 style.width&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/oiTCtA&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/24/oiTCtA.png&#34; alt=&#34;oiTCtA.png&#34;&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;元素可视区client系列&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#元素可视区client系列&#34;&gt;#&lt;/a&gt; 元素可视区 client 系列&lt;/h4&gt;
&lt;p&gt;使用 client 系列的相关属性获取元素可视区的相关信息&lt;br&gt;
通过 client 系列的相关属性可以动态得到该元素的边框大小，元素大小等&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/oib09s&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/24/oib09s.png&#34; alt=&#34;oib09s.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;淘宝源码分析&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#淘宝源码分析&#34;&gt;#&lt;/a&gt; 淘宝源码分析&lt;/h4&gt;
&lt;h5 id=&#34;立即执行函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#立即执行函数&#34;&gt;#&lt;/a&gt; 立即执行函数&lt;/h5&gt;
&lt;p&gt;不需要调用 立即执行&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;(function XXX() { })()  第二个小括号可以看成调用函数 也可以传递参数
(function XXX(){}()) 第二个小括号可以看成调用函数 也可以传递参数
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;XXX 为函数名 可以省略&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;多个立即执行函数之间必须使用分号隔开&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;好处：独立创建了一个作用域 里面所有的变量都是局部变量 避免了命名冲突的问题&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;元素滚动scroll系列&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#元素滚动scroll系列&#34;&gt;#&lt;/a&gt; 元素滚动 scroll 系列&lt;/h4&gt;
&lt;p&gt;得到元素的大小 滚动距离 与页面中的滚动条有关&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/oAwKnP&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/25/oAwKnP.png&#34; alt=&#34;oAwKnP.png&#34;&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt; 不包含边框 包含 padding 值&lt;/strong&gt;&lt;br&gt;
对于超出父元素的汉字 会按照所有汉字叠加的高度计算 (真正的内容实际大小)&lt;br&gt;
 与 client 不同的是 client 并不会计算超出的大小 而只是原有父元素的大小&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/oA0u8J&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/25/oA0u8J.png&#34; alt=&#34;oA0u8J.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&#34;scroll事件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#scroll事件&#34;&gt;#&lt;/a&gt; scroll 事件&lt;/h5&gt;
&lt;p&gt;当滚动条发生变化时会触发的事件&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;XXX.document.addEventListener(&#39;scroll&#39;,function(){})
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;动画函数封装&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#动画函数封装&#34;&gt;#&lt;/a&gt; 动画函数封装&lt;/h4&gt;
&lt;p&gt;通过定时器 setInterval () 不断移动盒子的位置&lt;br&gt;
 1. 获取当前位置&lt;br&gt;
 2. 给当前位置加一个移动距离&lt;br&gt;
 3. 利用定时器不断重复这个操作&lt;br&gt;
 4. 结束定时器&lt;br&gt;
&lt;strong&gt; 5. 元素需要添加定位才能使用 element.style.left&lt;/strong&gt;&lt;/p&gt;
&lt;h5 id=&#34;动画函数简单封装&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#动画函数简单封装&#34;&gt;#&lt;/a&gt; 动画函数简单封装&lt;/h5&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;function animate(obj, target) {
    clearInterval(obj.timer)
    obj.timer = setInterval(function () {
        if (obj.offsetLeft &amp;gt;= target) {
            clearInterval(obj.timer)
        } else
            obj.style.left = obj.offsetLeft + 2 + &#39;px&#39;;
    }, 30)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;缓动动画&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#缓动动画&#34;&gt;#&lt;/a&gt; 缓动动画&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;让盒子每次移动的距离慢慢变小 速度就会慢慢慢下来&lt;/li&gt;
&lt;li&gt;核心算法：(目标值 - 现在的位置)/10&lt;/li&gt;
&lt;li&gt;盒子等于目标位置就停止计时器&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="Javascript" />
        <updated>2021-11-05T16:00:00.000Z</updated>
    </entry>
</feed>
