{
    "version": "https://jsonfeed.org/version/1",
    "title": "S1m • All posts by \"c语言\" tag",
    "description": "博客记录个人学习笔记,处于不断完善中",
    "home_page_url": "https://github.com/YogMas/YogMas.github.io",
    "items": [
        {
            "id": "https://github.com/YogMas/YogMas.github.io/2022/07/10/c/",
            "url": "https://github.com/YogMas/YogMas.github.io/2022/07/10/c/",
            "title": "C++",
            "date_published": "2022-07-09T16:00:00.000Z",
            "content_html": "<h1 id=\"c\"><a class=\"markdownIt-Anchor\" href=\"#c\">#</a> C++</h1>\n<h2 id=\"第一章-预备知识\"><a class=\"markdownIt-Anchor\" href=\"#第一章-预备知识\">#</a> 第一章 预备知识</h2>\n<p>C++ 在 C 语言的编程上添加了<strong>面向对象编程</strong>和<strong>泛型编程</strong></p>\n<h2 id=\"第二章-c\"><a class=\"markdownIt-Anchor\" href=\"#第二章-c\">#</a> 第二章 C++</h2>\n<p>C++ 程序区分大小写同一个字母不同的大小写会被认为是两个意思</p>\n<h3 id=\"21-进入c\"><a class=\"markdownIt-Anchor\" href=\"#21-进入c\">#</a> 2.1 进入 C++</h3>\n<h4 id=\"c-语言输入输出\"><a class=\"markdownIt-Anchor\" href=\"#c-语言输入输出\">#</a> C 语言输入输出</h4>\n<ul>\n<li>注释 //</li>\n<li>预处理器编译指令 #include</li>\n<li>函数头: int  main ()</li>\n<li>编译指令 using namespace</li>\n<li>函数体 {}</li>\n<li>使用 C++ 的语句</li>\n<li>结束 main 函数的 return 语句</li>\n</ul>\n<h4 id=\"211-main函数\"><a class=\"markdownIt-Anchor\" href=\"#211-main函数\">#</a> 2.1.1  <code>main()</code>  函数</h4>\n<pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">int main() //函数头\n{\nstatements //函数语句\nreturn 0; //返回语句 结束函数\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"语句和分号\"><a class=\"markdownIt-Anchor\" href=\"#语句和分号\">#</a> 语句和分号</h5>\n<p>C++ 中不能省略分号</p>\n<p>int main(void)</p>\n<ul>\n<li>C++ 中 void 和括号空着表示相同的意思</li>\n<li>C 中括号空着表示对是否有参数输入函数表示沉默</li>\n</ul>\n<p>C++ 中必须包含一个 main 主函数</p>\n<h4 id=\"212-注释\"><a class=\"markdownIt-Anchor\" href=\"#212-注释\">#</a> 2.1.2 注释</h4>\n<ul>\n<li>C 注释: /*  XXX */</li>\n<li>C++ 注释: //</li>\n</ul>\n<h4 id=\"213-c预处理器和iostream文件\"><a class=\"markdownIt-Anchor\" href=\"#213-c预处理器和iostream文件\">#</a> 2.1.3 C++ 预处理器和 iostream 文件</h4>\n<p>iostream 文件包含了 C++ 中的输入和输出函数 ( <code>cout</code> )</p>\n<h4 id=\"214-头文件\"><a class=\"markdownIt-Anchor\" href=\"#214-头文件\">#</a> 2.1.4 头文件</h4>\n<p>C++ 的头文件不包含 <code>.h</code></p>\n<p>C 头文件转换成 C++ 头文件时，删除后面的 <code>.h</code> , 并且在前面加入一个 c</p>\n<p>例如:  <code>math.h</code>  -&gt;  <code>cmath</code></p>\n<h4 id=\"215-名称空间\"><a class=\"markdownIt-Anchor\" href=\"#215-名称空间\">#</a> 2.1.5 名称空间</h4>\n<p><code>using namespace std</code></p>\n<p>为了避免封装的两个文件中有相同的函数名导致的编译器无法判断使用哪个函数，就可以将函数放入不同的名称空间中</p>\n<p>例如  <code>cout</code>  的全部其实是  <code>std::cout</code>  std 就是一个名称空间 这样保证了函数之间的不混淆性</p>\n<h2 id=\"stl\"><a class=\"markdownIt-Anchor\" href=\"#stl\">#</a> STL</h2>\n<h3 id=\"变长数组vector\"><a class=\"markdownIt-Anchor\" href=\"#变长数组vector\">#</a> 变长数组 vector</h3>\n<p>因为涉及数组的复制操作，变长数组一般要比普通的数组速度慢</p>\n<p>队尾插入删除为 O (1), 队尾插入删除为 O (n);</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;vector&gt;\n//vector自带比较运算  字典序比较\nvector&lt;int&gt; a;  //生成一个长度动态变化的数组\nvector&lt;int&gt; b[233];  //相当于第一维长233，第二维长度动态变化的int数组\nstruct rec{…};\nvector&lt;rec&gt; c;\nvector&lt;int&gt;::iterator i = a.begin() //迭代器 类似于指针 *i 表示值\nfor (int i = 0; i &lt; a.size(); I ++) cout &lt;&lt; a[i] &lt;&lt; endl;\nfor (vector&lt;int&gt;::iterator it = a.begin(); it != a.end(); it ++) cout &lt;&lt; *it &lt;&lt; endl;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"相关函数\"><a class=\"markdownIt-Anchor\" href=\"#相关函数\">#</a> 相关函数</h4>\n<ul>\n<li><code>a.begin()</code> : 返回指向 vector 中第一个元素的迭代器</li>\n<li><code>a.end()</code> :end 函数返回 vector 的尾部，即第 n 个元素再往后的 “边界”</li>\n<li><code>a.clear()</code> : 将变长数组清空</li>\n<li><code>a.font()</code> : 返回 vector 的第一个元素，等价于 <code>*a.begin()</code>  和  <code>a[0]</code> 。</li>\n<li><code>a.back()</code> : 等价于 <code>a[a.size() – 1]</code></li>\n<li><code>a.push_back(x)</code> : 元素 x 插入到 vector a 的尾部。</li>\n<li><code>a.pop_back()</code> : 删除 vector a 的最后一个元素</li>\n</ul>\n<h3 id=\"队列queue\"><a class=\"markdownIt-Anchor\" href=\"#队列queue\">#</a> 队列 queue</h3>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;queue&gt;\nqueue&lt;int&gt; q;\nstruct rec{…}; queue&lt;rec&gt; q; \t//结构体rec中必须定义小于号\npriority_queue&lt;int&gt; q;\t\t// 大根堆 弹出时默认弹出最大值\npriority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt; q;\t// 小根堆 弹出元素时,默认弹出最小值\npriority_queue&lt;pair&lt;int, int&gt;&gt;q;\n//如果结构体使用优先队列 必须进行运算符重载 如下  \nstruct Rec\n{\n    int a,b;\n    bool operator &lt; (const Rec &amp;t) const   //运算符重载  重新定义符号  大根堆重载小于号 小根堆重载大于号\n    {\n        return a&lt;t.a;\n    }\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"相关函数-2\"><a class=\"markdownIt-Anchor\" href=\"#相关函数-2\">#</a> 相关函数</h4>\n<h5 id=\"普通队列\"><a class=\"markdownIt-Anchor\" href=\"#普通队列\">#</a> 普通队列</h5>\n<p>队列，优先队列，栈没有 **clear ()** 函数</p>\n<ul>\n<li><code>q.push(x)</code> : 队尾插入一个 x 元素</li>\n<li><code>q.pop()</code> : 弹出队头元素</li>\n<li><code>q.front()</code> : 返回队头元素</li>\n<li><code>q.back():</code>  返回队尾元素</li>\n</ul>\n<h5 id=\"优先队列\"><a class=\"markdownIt-Anchor\" href=\"#优先队列\">#</a> 优先队列</h5>\n<ul>\n<li><code>q.push(x)</code> : 把元素插入堆</li>\n<li><code>q.pop()</code> : 删除堆顶元素</li>\n<li><code>q.top()</code> : 查询堆顶元素</li>\n</ul>\n<h3 id=\"栈stack\"><a class=\"markdownIt-Anchor\" href=\"#栈stack\">#</a> 栈 stack</h3>\n<p>前进后出</p>\n<ul>\n<li><code>q.push(x)</code> : 把元素插入栈</li>\n<li><code>q.pop()</code> : 删除栈顶元素</li>\n<li><code>q.top()</code> : 返回栈顶元素</li>\n</ul>\n<h3 id=\"双端队列deque\"><a class=\"markdownIt-Anchor\" href=\"#双端队列deque\">#</a> 双端队列 deque</h3>\n<p>双端队列 deque 是一个支持在两端高效插入或删除元素的连续线性存储空间。它就像是 vector 和 queue 的结合。与 vector 相比，deque 在头部增删元素仅需要 O (1) 的时间；与 queue 相比，deque 像数组一样支持随机访问。</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;deque&gt;\ndeque&lt;int&gt; a;\n// vector性质\na.begin();\na.end();\na.front;\na.back()\n//queue性质\na.push_back(1); //从队尾插入\na.push_front(1); // 从队头插入\na.pop_back(); //弹出最后一个元素\na.pop_front(); //弹出第一个元素\na.clear(); //清空队列<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"set\"><a class=\"markdownIt-Anchor\" href=\"#set\">#</a> set</h3>\n<p>头文件 set 主要包括 set 和 multiset 两个容器，分别是 “有序集合” 和 “有序多重集合”，即前者的元素不能重复，而后者可以包含若干个相等的元素。set 和 multiset 的内部实现是一棵红黑树，它们支持的函数基本相同。</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;set&gt;\nset&lt;int&gt; a; //元素不能重复\nset&lt;int&gt;::iterator it = a.begin()  //迭代器 可++或者--; ++为后一个元素 --为前一个元素\na.begin();  //集合开始的位置  O(1)\na.end(); //最后一个元素的后一个位置 O(1)\na.insert(x); //插入一个x  O(logn)\na.find(x); //查找x  找到返回迭代器  没有找到返回a.end();  就可以使用a.find(x) == a.end() 来判断x在a中是否存在      O(logn)\na.lower_bound(x);  //找到大于等于x的最小的元素的迭代器\na.upper_bound(x);  //找到大于x的最小的元素的迭代器\n\na.erase(it);  // 从a中删除迭代器it指向的元素 O（logn） it是一元素,就是从a中删除所有等于it的元素 O(k+logn)\n\na.count(x) // a在x中的个数  O(k+logn)\n    \n\n    \nmultiset&lt;int&gt; a; // 元素可以重复\n//结构同样需要重载运算符\nsize/empty/clear 与vector相同<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"map\"><a class=\"markdownIt-Anchor\" href=\"#map\">#</a> map</h3>\n<p>map 容器是一个键值对 key-value 的映射，其内部实现是一棵以 key 为关键码的红黑树。Map 的 key 和 value 可以是任意类型，其中 key 必须定义小于号运算符。</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;map&gt;\nmap&lt;int,int&gt; a;\na[1] = 2; //插入&lt;1,2&gt; 二元组\ncout &lt;&lt; a[1] &lt;&lt; endl; //返回2\na[\"wxl\"] = 2;  //插入&lt;\"wxl\",2&gt;二元组\ncout &lt;&lt; a[\"wxl\"]  &lt;&lt; endl; //返回2\n//size/empty/clear/begin/end 与set类似\n//insert/erase 与set类似  只是需要传入一个二元组\na.insert({1,2});\na.find(\"wxl\");<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"pair\"><a class=\"markdownIt-Anchor\" href=\"#pair\">#</a> pair</h3>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">pair&lt;int,string&gt; a;\na = {3,\"wxl\"}; //C++ 99不支持\na.make_pair(3,\"wxl\");\n//pair支持比较运算 先比较first 再比较second\ncount &lt;&lt; a.first &lt;&lt; ' ' &lt;&lt; a.second &lt;&lt; endl;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"unordered_set\"><a class=\"markdownIt-Anchor\" href=\"#unordered_set\">#</a> unordered_set</h3>\n<p>无序的 set</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;unordered_set&gt;  //底层逻辑为哈希表\nunordered_set&lt;int&gt;;\nunordered_multiset&lt;int&gt; b; //重复元素\n// 与set函数用法相同 只是没有upper_bound 和 lower_bound 因为unordered_map 是无序的<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"unordered_map\"><a class=\"markdownIt-Anchor\" href=\"#unordered_map\">#</a> unordered_map</h3>\n<p>与 map 一样</p>\n<ul>\n<li>好处: map 的效率为 O (logn),unordered_map 的效率为 O (1);</li>\n<li>坏处:unordered_map 不支持二分</li>\n</ul>\n<h3 id=\"bitset\"><a class=\"markdownIt-Anchor\" href=\"#bitset\">#</a> bitset</h3>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;bitset&gt;   //用于位运算 不常用\n\nbitset&lt;长度&gt; a;   //为0,1串  没有赋值就为0\na[0] = 1\na.count();  //返回1的个数\na.set(下标); // 将a[下标]设成1\na.reset(下标);  // 将a[下标]设成0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"\"><a class=\"markdownIt-Anchor\" href=\"#\">#</a> </h3>\n",
            "tags": [
                "C语言"
            ]
        },
        {
            "id": "https://github.com/YogMas/YogMas.github.io/2021/11/06/c-yu-yan/",
            "url": "https://github.com/YogMas/YogMas.github.io/2021/11/06/c-yu-yan/",
            "title": "C语言",
            "date_published": "2021-11-05T16:00:00.000Z",
            "content_html": "<h1 id=\"c语言\"><a class=\"markdownIt-Anchor\" href=\"#c语言\">#</a> C 语言</h1>\n<!-- The Article Made by YogMas -->\n<h2 id=\"the-article-made-by-yogmas\"><a class=\"markdownIt-Anchor\" href=\"#the-article-made-by-yogmas\">#</a> The Article Made by YogMas</h2>\n<p>推荐用书: C Primer Plus (本文章绝大部分内容来自于关于此书的学习过程中记录 还有部分来自于 C 语言程序设计第二版 以及 UESTC MOOC)</p>\n<h3 id=\"c语言的执行过程\"><a class=\"markdownIt-Anchor\" href=\"#c语言的执行过程\">#</a> C 语言的执行过程</h3>\n<p>1. 预处理：可以给程序添加内容也可以修改程序 (例如: #include&lt;stdio.h&gt; 就会在预处理中运用 stdio.h 中的内容对源代码进行处理)<br>\n 2. 编译：将预处理过的语言转变为机器指令.<br>\n3. 链接：把编译器产生的目标代码和所需的其他附加代码整合到一起，产生最终完全可执行的程序.<br>\n(这三个过程是自动实现的)</p>\n<h3 id=\"c语言开始\"><a class=\"markdownIt-Anchor\" href=\"#c语言开始\">#</a> C 语言开始</h3>\n<h4 id=\"基本结构\"><a class=\"markdownIt-Anchor\" href=\"#基本结构\">#</a> 基本结构</h4>\n<blockquote>\n<p>指令<br>\n int main (void)<br>\n{<br>\n语句<br>\n}</p>\n</blockquote>\n<h4 id=\"指令\"><a class=\"markdownIt-Anchor\" href=\"#指令\">#</a> 指令</h4>\n<p>例如 #include &lt;stdio.h&gt; 这条指令说明在编译前将 &lt; stdio.h &gt; 中的信息包含到程序中</p>\n<h4 id=\"函数\"><a class=\"markdownIt-Anchor\" href=\"#函数\">#</a> 函数</h4>\n<p>函数分为两类，一类是程序员写的函数，一类是作为 C 语言实现的一部分提供的函数，我们把后者称为库函数。</p>\n<h4 id=\"语句\"><a class=\"markdownIt-Anchor\" href=\"#语句\">#</a> 语句</h4>\n<p>一种是调用语句 例如 printf (\"\"); 就是调用打印函数，将内容打印在屏幕上</p>\n<p>一种是返回语句<br>\n<strong> C 语言的每条语句都要以；结尾</strong></p>\n<h4 id=\"注释\"><a class=\"markdownIt-Anchor\" href=\"#注释\">#</a> 注释</h4>\n<blockquote>\n<pre><code>/*     */ \n</code></pre>\n</blockquote>\n<p>注释中的内容不会计入到程序中，只是方便程序员观看理解内容</p>\n<p>“盒子形状” 注释</p>\n<blockquote>\n<pre><code>    /*************************\n    *                        *\n    *                        *\n    *************************/\n</code></pre>\n</blockquote>\n<p>如此可以方便程序员更好地观察到注释</p>\n<p>C99 提供了另一种注释的方法</p>\n<blockquote>\n<pre><code>// XXXXXXXXX\n  双斜杠注释\n   这种风格的注释会在行末自动终止，注释第二行还应该添加双斜杠\n</code></pre>\n</blockquote>\n<p>优点：多行 // 可以让注释更加醒目，由于每一行都必须添加 // 可以有效防止注释吞没程序的事情发生</p>\n<h4 id=\"变量和赋值\"><a class=\"markdownIt-Anchor\" href=\"#变量和赋值\">#</a> 变量和赋值</h4>\n<p>程序进行一系列的运算，会有一种临时存储数据的方法，这种储存单元被称为变量</p>\n<h4 id=\"类型\"><a class=\"markdownIt-Anchor\" href=\"#类型\">#</a> 类型</h4>\n<p>每个变量都有一个类型，来说明所储存的数据的种类<br>\n列入 int (整数) 类型和 float (小数) 类型</p>\n<p>同时 float 类型可以储存的数可以比 int 大很多，但是坏处就是 float 的计算可能更加缓慢，而且会造成一定量的误差</p>\n<h4 id=\"声明\"><a class=\"markdownIt-Anchor\" href=\"#声明\">#</a> 声明</h4>\n<p>声明变量首先确定变量的类型，然后说明变量的名字<br>\n eg int height<br>\nint 就是变量的类型，而 height 就是变量的名字<br>\n<strong> main 的声明要放在语句之前</strong></p>\n<h4 id=\"赋值\"><a class=\"markdownIt-Anchor\" href=\"#赋值\">#</a> 赋值</h4>\n<p>变量通过赋值语句获得值</p>\n<blockquote>\n<pre><code>eg: height=8\n</code></pre>\n</blockquote>\n<p>这种确定的数值称为常量<br>\n赋值右侧可以是一个含有常量，变量和运算符的公式，在 C 语言中称为<strong>表达式</strong></p>\n<h4 id=\"显示变量的值\"><a class=\"markdownIt-Anchor\" href=\"#显示变量的值\">#</a> 显示变量的值</h4>\n<blockquote>\n<p>eg:pritnf(\"%d \\n\",height)</p>\n</blockquote>\n<p>这里 % d 是一个占位符，用来指明在显示过程中变量 height 的显示位置</p>\n<p>% d 只用于 int     % f 用于 float 类型变量 f 显示小数点后六位，没有的用 0 补齐<br>\n<strong>注意声明和赋值可以同时进行</strong></p>\n<blockquote>\n<p>eg: int weight=8</p>\n</blockquote>\n<p>需要注意的是，以下这种情况只有 width 拥有初始化器 10</p>\n<blockquote>\n<p>int height,length,width=10</p>\n</blockquote>\n<h4 id=\"宏定义给常量命名\"><a class=\"markdownIt-Anchor\" href=\"#宏定义给常量命名\">#</a> 宏定义给常量命名</h4>\n<blockquote>\n<p>eg:#define INCHES 166</p>\n</blockquote>\n<p>在后面的程序中所有的 INCHES 都会被替换成 166，这里需要注意的，一般宏定义的名称都用大写字母表示，这里没有硬性规定，但这是程序员遵循了几十年的基本准则，可以方便程序更方便的阅读<br>\n同样后面的 166 也可以为一个表达式，表达式建议用括号括上<br>\n<strong>注意 C 语言四舍五入时向下取整</strong></p>\n<h4 id=\"标识符\"><a class=\"markdownIt-Anchor\" href=\"#标识符\">#</a> 标识符</h4>\n<p>在编写程序时，需要进行大量的命名，这些名字被称为<strong>标识符</strong>，在 C 语言中标识符可以有字母，数字，和下划线，但是必须<strong>以字母或者下划线开头</strong></p>\n<p>同时标识符是区分大小写的也就是说 JOB 和 job 是两个完全不同的标识符</p>\n<h4 id=\"关键字\"><a class=\"markdownIt-Anchor\" href=\"#关键字\">#</a> 关键字</h4>\n<p>关键字对 C 编译器有着特殊的意义，因此这些关键字不能作为标识符来使用</p>\n<p><a href=\"https://imgtu.com/i/IQ9uZQ\"><img src=\"https://z3.ax1x.com/2021/11/06/IQ9uZQ.md.jpg\" alt=\"IQ9uZQ.md.jpg\"></a></p>\n<h4 id=\"书写规范\"><a class=\"markdownIt-Anchor\" href=\"#书写规范\">#</a> 书写规范</h4>\n<p>语句可以分开放在任意多行内。<br>\n记号间的宫格可以让我们更容易区分记号，基于这个原因，我通常会在每个运算符的前后都放上一个空格</p>\n<blockquote>\n<pre><code> eg volume = height * width * length\n</code></pre>\n</blockquote>\n<p>缩进有助于轻松识别程序嵌套</p>\n<p>空行可以把程序分为逻辑单元，从而使读者更容易辨别程序的结构，没有空行的程序很难阅读，就像不分章节的书一样.</p>\n<h3 id=\"格式化输入输出\"><a class=\"markdownIt-Anchor\" href=\"#格式化输入输出\">#</a> 格式化输入 / 输出</h3>\n<h4 id=\"printf函数\"><a class=\"markdownIt-Anchor\" href=\"#printf函数\">#</a> printf 函数</h4>\n<blockquote>\n<pre><code>   printf(\" i = %d , j = %d\",i,j);\n   printf(格式化字符串,表达式1，表达式2,...;)\n</code></pre>\n</blockquote>\n<p>格式化字母串包含<strong>普通字符</strong>和<strong>转换说明</strong><br>\n转换说明以 % 开头，% 后面的信息指定了把数值从内部形式转换为打印字母的方法<br>\n eg:% d 表示把 int 型数值从二进制转换成十进制的字符串</p>\n<p>注意编译器不会检测格式串中转换说明的数量是否和输出项的数量相匹配，但是如果多于或者少于会让程序简单地无意义地输出<br>\n如果转换说明的个数小于变量数，多的变量就无法显示出来<br>\n变量和占位符不匹配时，就是显示出一个无意义的数值.<br>\n<a href=\"https://imgtu.com/i/IQ9FPI\"><img src=\"https://z3.ax1x.com/2021/11/06/IQ9FPI.png\" alt=\"IQ9FPI.png\"></a></p>\n<h5 id=\"转换说明\"><a class=\"markdownIt-Anchor\" href=\"#转换说明\">#</a> 转换说明</h5>\n<h5 id=\"标志\"><a class=\"markdownIt-Anchor\" href=\"#标志\">#</a> 标志</h5>\n<p>-: 左对齐，也就是加空格或 0 时加在后面<br>\n不加 - 默认为右对齐，也就是加空格或 0 时加在前面</p>\n<p>0: 加 0 表示用空格代替 0，不加 0 时输出的值多的用空格代替</p>\n<h6 id=\"最小栏宽m\"><a class=\"markdownIt-Anchor\" href=\"#最小栏宽m\">#</a> 最小栏宽 m</h6>\n<p>最小栏宽 m 指定了要显示的最少字符数量 (<strong>m 表示了输出的数最少占几列</strong>)，如果要系那是的字符数少于 m，那么值在字段内是右对齐的 (换句话说，在值得前面显示空格)<br>\n 例如 %4d 将以<strong>空格 123</strong> 的形式显示数 123，如果要显示的值所需字符多于 m，那么栏宽会自动拓展为所需的尺寸。因此，转换说明 %4d 将以 12345 的形式显示数 12345，而不会丢失数字。在 m 前放上一个负号，会导致左对齐；转换说明 %-4d 将以<strong> 123 空格</strong>的形式显示 123</p>\n<h6 id=\"精度p\"><a class=\"markdownIt-Anchor\" href=\"#精度p\">#</a> 精度 p</h6>\n<p>精度的含义很难 6+<br>\n+ 描述，因为他依赖于转换指定符号<br>\n d:p 指明了待限制数字的最少个数 (包括空格)<br>\n, 如果省略 p，则默认它的值为 1<br>\ne: 表示科学计数法形式的浮点数。p 指明了小数点后应该出现的数字个数 (默认值为 6) 如果 p 为 0 则不显示小数点<br>\n g: 自动选 f 格式或 e 格式中较短的一种输出，且不输出无意义的 0<br>\no：无符号数转化为八进制数<br>\n x：无符号数转化为十六进制数<br>\n<a href=\"https://imgtu.com/i/IQ9ARP\"><img src=\"https://z3.ax1x.com/2021/11/06/IQ9ARP.png\" alt=\"IQ9ARP.png\"></a><br>\n<a href=\"https://imgtu.com/i/IQ9Exf\"><img src=\"https://z3.ax1x.com/2021/11/06/IQ9Exf.png\" alt=\"IQ9Exf.png\"></a></p>\n<h5 id=\"转义序列\"><a class=\"markdownIt-Anchor\" href=\"#转义序列\">#</a> 转义序列</h5>\n<p>警报响铃符:    \\a<br>\n 回退符:     \\b<br>\n 换行符:     \\n<br>\n 水平制表符：   \\t<br>\n“:”( \\  + 特殊字符 = 特殊字符 )</p>\n<h4 id=\"scanf函数\"><a class=\"markdownIt-Anchor\" href=\"#scanf函数\">#</a> scanf 函数</h4>\n<blockquote>\n<p>scanf (\"&amp;d\", 变量名)</p>\n</blockquote>\n<p>scanf 函数起到读取用户输入到屏幕的数据<br>\n pritnf 函数起到将程序中的数据显示到屏幕上的作用<br>\n scanf 与 prinf 函数是相对的<br>\n scanf 函数的工作原理 这里不一一叙述<br>\n可见程序与设计第 32 页 3.2.1</p>\n<p>另外 % i 也可以充当整数的占位符，在 printf 中与 % d 没有区别，但是在 scanf 中 % i 可以储存 10 进制，8 进制，16 进制的数字，而 % d 只能储存 10 进制的数字，如果输入的数前面有 0 那么 % i 会当成 8 进制处理，如果前面有 0x 那么输入的数会当成 16 进制处理，所以一般情况下我们坚持使用 % d，防止因为在数字前面加入 0 而导致数据识别错误</p>\n<h4 id=\"表达式\"><a class=\"markdownIt-Anchor\" href=\"#表达式\">#</a> 表达式</h4>\n<h5 id=\"算术运算符\"><a class=\"markdownIt-Anchor\" href=\"#算术运算符\">#</a> 算术运算符</h5>\n<blockquote>\n<p>一元运算符: + 正号  - 负号<br>\n二元运算符: + 加法 - 减法  * 乘法  / 除法 % 求余</p>\n</blockquote>\n<p>可能产生的意外结果</p>\n<blockquote>\n<p>两个操作数都是整数时，结果会进行四舍五入，例如 1/2 的结果是 0 而不是 0.5<br>\n% 要求操作数是整数 如果两个操作数中有一个不是整数，程序将无法编译通过<br>\n根据 C89 标准，如果两个运算符中有一个为负数，那么结果不确定，可能向上取整，也可能向下取整<br>\n在 C99 标准中 除法的结果总是趋向 0 截取    i% j 的结果的值得负号与 i 相同 例如 - 9%7 的结果为 - 2</p>\n</blockquote>\n<h5 id=\"优先级和结合性\"><a class=\"markdownIt-Anchor\" href=\"#优先级和结合性\">#</a> 优先级和结合性</h5>\n<blockquote>\n<p>最高优先级: + - (一元运算符)  *  /  %<br>\n 最低优先级:    +  -  (二元运算符)</p>\n</blockquote>\n<p>当有多个相同优先级的符号时，从左到右依次结合.<br>\n<a href=\"https://imgtu.com/i/IQ99VH\"><img src=\"https://z3.ax1x.com/2021/11/06/IQ99VH.png\" alt=\"IQ99VH.png\"></a></p>\n<h5 id=\"赋值运算符\"><a class=\"markdownIt-Anchor\" href=\"#赋值运算符\">#</a> 赋值运算符</h5>\n<p>求出表达式的值后，将值储存在变量中，就需要对变量进行赋值</p>\n<p>如果变量表示的含义和所输入的数字不同，将会把数字改成变量所对应的数字<br>\n例如: int i=72.999   这个时候 i 对应的值就是 72 而不是 72.999</p>\n<p>多个运算符可以串联在一起<br>\n i = j = k = 0;<br>\n 需要注意的是，赋值表达式是从右开始赋值的<br>\n i = (j = (k = 0))</p>\n<h5 id=\"左值\"><a class=\"markdownIt-Anchor\" href=\"#左值\">#</a> 左值</h5>\n<p>大多数 C 语言运算符允许他们的操作数是变量，常量，或者是其他运算符表达式，但是他们的<strong>左值</strong>必须是对象</p>\n<p>目前为止<strong>变量</strong>是唯一的左值</p>\n<h5 id=\"复合赋值\"><a class=\"markdownIt-Anchor\" href=\"#复合赋值\">#</a> 复合赋值</h5>\n<blockquote>\n<p>复合运算符 -=,*=,/=,%=,+=<br>\n 另外 5 种赋值运算符将在后面的章节中介绍</p>\n</blockquote>\n<p>v += e 表示 v 加上 e 再把结果储存在 v 中<br>\n这并不等价于 v = v+e 例如变量 i*=j+k 就不等于 i= i*j + k</p>\n<p>复合赋值运算符同样也是右结合的<br>\n语句 i += j += k 表示 i += (j += k)</p>\n<p>最常使用的两种运算是 自增和自减<br>\n例如 i = i + 1 而复合运算符可以缩短这串代码 可以改写为 i += 1</p>\n<h5 id=\"自增运算符和自减运算符\"><a class=\"markdownIt-Anchor\" href=\"#自增运算符和自减运算符\">#</a> 自增运算符和自减运算符</h5>\n<p>C 语言还允许使用 ++ (自增) 和 – (自减) 运算符将这些语句缩得更短<br>\n实际上自增和自减运算符的使用非常复杂，原因是 ++ 和 -- 既可以作为前缀，也可以作为后缀，根据实际使用情况而定</p>\n<p>而这种情况实际上是有副作用的，副作用的效果就是自增 i</p>\n<p>前缀自增和后缀自增的区别：前缀自增表示先自增 i 再将变量 i 代入表达式中，后缀自增表示先把变量 i 代入表达式中，再自增 i</p>\n<p>并且在同一个句子中多次使用 ++ 和 -- 往往难以理解，例如<br>\n i = 1; j = 2 ; k = <ins>i + j</ins>;</p>\n<p>后缀<ins>和 -- 优先级 比正号和负号高，并且都是左结合<br>\n前缀</ins>和 -- 优先级和正号负号相同，并且都是右结合</p>\n<h4 id=\"选择语句\"><a class=\"markdownIt-Anchor\" href=\"#选择语句\">#</a> 选择语句</h4>\n<h5 id=\"逻辑表达式\"><a class=\"markdownIt-Anchor\" href=\"#逻辑表达式\">#</a> 逻辑表达式</h5>\n<p>测试表达式的结果是 \"真\" 还是 \"假\"，这类表达式只有这两个效果，翻译为电脑语言就是这个表示只会输出两个值 0 或者 1<br>\n<a href=\"https://imgtu.com/i/IQ9ZM8\"><img src=\"https://z3.ax1x.com/2021/11/06/IQ9ZM8.png\" alt=\"IQ9ZM8.png\"></a><br>\n 逻辑运算符对操作数进行短路计算，这些运算符首先计算出左操作数的值，然后计算出右操作数的值，如果做操作数的值可以直接推导表达式的值，那么将不计算右操作数的值</p>\n<p>运算符！的优先级等于一元正负号的优先级，而运算符 &amp;&amp; 和 || 的优先级低于关系运算符和判等运算符，运算符！是右结合的，而运算符 &amp;&amp; 和运算符 || 是左结合的.</p>\n<h5 id=\"关系运算符\"><a class=\"markdownIt-Anchor\" href=\"#关系运算符\">#</a> 关系运算符</h5>\n<p><a href=\"https://imgtu.com/i/IQ9PIA\"><img src=\"https://z3.ax1x.com/2021/11/06/IQ9PIA.png\" alt=\"IQ9PIA.png\"></a></p>\n<p>需要注意的是 i &lt; j &lt; k 并不是所想象的 j 处在 i 和 k 的中间值得意思，表达式是左结合的<br>\n所以原式式 (i &lt; j) &lt; k  先对 i &lt; j 进行判定，输出 0 或者 1 来和 k 进行比较</p>\n<h5 id=\"判等运算符\"><a class=\"markdownIt-Anchor\" href=\"#判等运算符\">#</a> 判等运算符</h5>\n<p><a href=\"https://imgtu.com/i/IQ9esS\"><img src=\"https://z3.ax1x.com/2021/11/06/IQ9esS.png\" alt=\"IQ9esS.png\"></a></p>\n<p>i &lt;j == j &lt; k 等价于 (i &lt; j) == (j &lt; k)<br>\n 只有当 两边同为真或者同为假的时候 输出结果为真</p>\n<h5 id=\"运算顺序\"><a class=\"markdownIt-Anchor\" href=\"#运算顺序\">#</a> 运算顺序</h5>\n<p>C 语言对括号的运算顺序没有进行规定，所以因为编译器的不同可能出现不同的结果<br>\n例如 a = 5 ;<br>\nc = (b = a + 2 ) - ( a = 1 )<br>\n 先算 b = a + 2 还是先算 a = 1 不同的编译器有着不一样的算法，所以如果编译器不同，可能产生不一样的结果</p>\n<p>注意不要依赖特定的运算顺序</p>\n<p>例如: i = 2 ;  j = i * i++;<br>\n 大部分人可能会认为输出的结果是 4，其实也可能为 6，不同的编译器有时候会出现不同的结果<br>\n最好的方法就是将长的运算表达式转化为短的运算表达式，如此就可以适应不同的编译器.</p>\n<h4 id=\"if语句\"><a class=\"markdownIt-Anchor\" href=\"#if语句\">#</a> if 语句</h4>\n<blockquote>\n<p>if (表达式) 语句</p>\n</blockquote>\n<p>注意表达式两边的括号是必须的<br>\n计算时先计算括号内表达式的值，如果表达式的值非零也就是真值，那么接着执行括号后面的语句.<br>\n 一定要注意区分 ==(判等) 和 =(赋值)<br>\n 前面我们说了例如 i &lt; j &lt; k 这样的写法是不行的，为了判定变量是否落在某个数值范围内，例如为了判定 0≤ i &lt; n 我们可以写成</p>\n<blockquote>\n<p>if (0 &lt;= i &amp;&amp; i&lt; n) …</p>\n</blockquote>\n<p>|| 运算符也是相同的道理</p>\n<h5 id=\"复合语句\"><a class=\"markdownIt-Anchor\" href=\"#复合语句\">#</a> 复合语句</h5>\n<p>在 if 语句模板中，语句是一条语句而不是多条语句，如果想用 if 语句处理多条语句，我们引入了复合语句.<br>\n 复合语句由一对花括号和语句混合而成，可以有多个声明和多个语句，也可以什么都没有<br>\n为了表示清楚，通常将一条语句放在多行内，每行有一条语句，如下所示:<br>\n{<br>\nline_num = 0;<br>\npage_num++;<br>\n}<br>\n 注意，每条内部语句依然以<strong>分号</strong>结尾</p>\n<h5 id=\"else子句\"><a class=\"markdownIt-Anchor\" href=\"#else子句\">#</a> else 子句</h5>\n<p>if 语句可以有 else 子句</p>\n<blockquote>\n<p>if (表达式) 语句 else 语句</p>\n</blockquote>\n<p>注意，出现的语句末尾都要以<strong>分号</strong>结尾</p>\n<p>通常来说为了布局美观，和清楚显示代码，我们将 if 和 else 放在同一列，其内的内部语句同样进行缩进<br>\n可以为复合语句增加花括号，这不是必需的但是能够使复合语句更加清楚.</p>\n<h4 id=\"条件表达式\"><a class=\"markdownIt-Anchor\" href=\"#条件表达式\">#</a> 条件表达式</h4>\n<blockquote>\n<p>表达式 1 ? 表达式 2 : 表达式 3</p>\n</blockquote>\n<p>表达式 1,2,3 可以是任何类型的表达式，同时条件表达式被经常称为三元运算符.</p>\n<p>条件表达式读作 如果表达式 1 成立，那么表达式 2，否则表达式 3<br>\n 求值步骤为：首先计算出表达式 1 的值，如果此值不为 0，那么计算表达式 2 的值，并且计算出来的值就是整个表达式的值，如果表达式 1 的值为 0，那么表达式 3 的值是整个条件表达式的值</p>\n<p>条件表达式通常运用于 printf 中进行简化代码</p>\n<p>例如 if (i&gt; j ) printf (\"% d \\n\",i); else printf (\"% d \\n\",j);<br>\n 可以简化为  printf (\"% d \\n\",i&gt;j?i:j);<br>\n 同时在 return 中也经常使用，使用场景类似</p>\n<h4 id=\"switch语句\"><a class=\"markdownIt-Anchor\" href=\"#switch语句\">#</a> switch 语句</h4>\n<p>通常来说可以用 switch 语句来代替级联式 if 语句</p>\n<blockquote>\n<p>switch (表达式) {<br>\ncase 常量表达式：语句<br>\n…<br>\ncase 常量表达式：语句<br>\n default : 语句<br>\n}</p>\n</blockquote>\n<p>同样这里的语句也要以<strong>分号</strong>结尾<br>\n<a href=\"https://imgtu.com/i/IQ9mqg\"><img src=\"https://z3.ax1x.com/2021/11/06/IQ9mqg.jpg\" alt=\"IQ9mqg.jpg\"></a></p>\n<p>switch 语句实际上是一种给予计算的跳转。对控制表达式求值时， 控制会跳转到与 switch 表达式的值相匹配的分支标号处。在执行完一个分支后，程序控制向下跳转到下一个分支的第一条语句上，如果没有 break 语句，控制将从一个分支继续流向下一个分支。例如<br>\n switch (grade) {<br>\ncase 4 :printf (“Excellent”);<br>\ncase 3 :printf (“Good”);<br>\ncase 2 :printf (“Average”);<br>\ncase 1 :printf (“poor”);<br>\ncase 0 :printf (“Falling”);<br>\ndefault : printf (“Illegal grade”)<br>\n}<br>\n 当你输入 3 时，显示的消息是：GoodAveragePoorFailingIllegal grade</p>\n<h3 id=\"循环\"><a class=\"markdownIt-Anchor\" href=\"#循环\">#</a> 循环</h3>\n<h4 id=\"while语句\"><a class=\"markdownIt-Anchor\" href=\"#while语句\">#</a> while 语句</h4>\n<blockquote>\n<pre><code>[while语句]:    while (表达式) 语句\n例如: while(i&lt;n) i=i*2;\n</code></pre>\n</blockquote>\n<p>因为 while 语句中有循环，为了让循环更简单，我们可以将 i++ 或者 i–直接加到 printf 中来使代码更加简洁</p>\n<blockquote>\n<pre><code>例如: while(i&gt;0) printf(\"%d \\n\",i--)\n这串代码可以一直输出0~i的数字，是不是这样更加简洁\n</code></pre>\n</blockquote>\n<h4 id=\"do语句\"><a class=\"markdownIt-Anchor\" href=\"#do语句\">#</a> do 语句</h4>\n<p>do 语句在本质上其实就是 while 语句只不过其控制表达式是在每次执行完循环体之后进行判定.</p>\n<blockquote>\n<pre><code>[do语句]: do 语句  while(表达式):\n</code></pre>\n</blockquote>\n<p>do 语句的循环体必须是一条语句和 while 一样，当然如果想用多条语句可以用复合语句.</p>\n<p>执行 do 语句时，先执行循环体，再计算控制表达式的值</p>\n<h4 id=\"for语句\"><a class=\"markdownIt-Anchor\" href=\"#for语句\">#</a> for 语句</h4>\n<blockquote>\n<pre><code>[for语句]    for(表达式1或者声明;表达式2;表达式3)\n</code></pre>\n</blockquote>\n<p><a href=\"https://imgtu.com/i/IQpd8P\"><img src=\"https://z3.ax1x.com/2021/11/06/IQpd8P.png\" alt=\"IQpd8P.png\"></a></p>\n<p>对于向上增或向下减的循环来说，for 语句通常是最好的选择</p>\n<p>从 0 向上加到 n-1</p>\n<blockquote>\n<pre><code>for (i=0;i&lt;n;i++)\n</code></pre>\n</blockquote>\n<p>从 1 向上加到 n</p>\n<blockquote>\n<pre><code>for(i=1;i&lt;=n,i++)\n</code></pre>\n</blockquote>\n<p>等等同理</p>\n<p>如果所需要的语句没有那么多，for 语句允许省略语句，注意，即使省略了表达式，括号中也许有两个<strong>分号</strong><br>\n当 for 语句同时省略第一个和第三个表达式时，那么他和 while 语句没有任何区别<br>\n省略第一个语句时，程序会默认为真值，会一直循环下去</p>\n<p>在 C99 中第一个表达式可以替换成一个声明，但在 for 语言中的声明，仅可以在 for 语句内部使用，在 for 循环的外部不可用</p>\n<p>同时 for 语言中可以声明多个变量，但是他们的类型需要相同</p>\n<h4 id=\"逗号运算符\"><a class=\"markdownIt-Anchor\" href=\"#逗号运算符\">#</a> 逗号运算符</h4>\n<blockquote>\n<pre><code>[逗号表达式] 表达式1,表达式2\n</code></pre>\n</blockquote>\n<p>第一步计算出表达式 1 的值，抛弃。第二部计算出表达式 2 的值，并将表达式 2 的值作为整个表达式的值，需要注意的是这里并不是说表达式 1 的值并没有用，表达式 1 中例如 i++，i–等仍然会对表达式 2 中的 i 和 j 造成一定的影响</p>\n<p>逗号运算符是左结合的，并且逗号运算符的优先级比其他所有运算符的优先级都更低</p>\n<p>for 语句是唯一可以发现逗号运算符的地方.<br>\nfor 语句可以利用逗号表达式来声明更多的变量</p>\n<h3 id=\"跳出循环\"><a class=\"markdownIt-Anchor\" href=\"#跳出循环\">#</a> 跳出循环</h3>\n<h4 id=\"break语句\"><a class=\"markdownIt-Anchor\" href=\"#break语句\">#</a> break 语句</h4>\n<p>前面讨论过 break 语句跳出 switch 语句，同时 break 语句还可以用于跳出 while,do,for 循环</p>\n<p>需要注意的时，如果有嵌套的情况存在，break 语句只能跳出一层循环</p>\n<h4 id=\"continue语句\"><a class=\"markdownIt-Anchor\" href=\"#continue语句\">#</a> continue 语句</h4>\n<p>continue 语句与 break 语句的区别在于，break 语句把程序控制转移到循环体末尾之后，而 continue 语句刚好把程序控制转移到循环体末尾之前.<br>\ncontinue 语句会把程序控制留在循环内，而 break 语句会使程序控制跳出循环<br>\n continue 语句只能用于循环，而 break 语句可以用于 switch 语句和循环</p>\n<p>continue 语句不会跳出循环，但会直接跳过 continue 之后的一系列语句，重新开始循环</p>\n<h4 id=\"goto语句\"><a class=\"markdownIt-Anchor\" href=\"#goto语句\">#</a> goto 语句</h4>\n<p>goto 语句可以跳转到函数中任何有<strong>标号</strong>的语句处</p>\n<blockquote>\n<pre><code>[标号语句]  标识符:语句\n[goto语句]  goto 标识符;\n</code></pre>\n</blockquote>\n<p>两个语句必须在同一个函数中<br>\n goto 语句对于嵌套循环的退出是很有用的</p>\n<h4 id=\"空语句\"><a class=\"markdownIt-Anchor\" href=\"#空语句\">#</a> 空语句</h4>\n<blockquote>\n<pre><code>eg:for(XX;XX;XX);\n</code></pre>\n</blockquote>\n<p>空语句的一个好处：编写空循环体的循环.<br>\nC 程序员习惯性地把空语句单独放置在一行</p>\n<h3 id=\"基本类型\"><a class=\"markdownIt-Anchor\" href=\"#基本类型\">#</a> 基本类型</h3>\n<p>C 语言支持两种根本的数据类型 分别是 整数类型 和浮点数类型  简单来说 整数和其他数 (包括小数等等) 的区别</p>\n<h4 id=\"整数类型\"><a class=\"markdownIt-Anchor\" href=\"#整数类型\">#</a> 整数类型</h4>\n<p>正说类型 分为 有符号整数和无符号整数</p>\n<p>有符号整数：如果整数为正数或者 0 那么最左边的符号位为 0; 如果为负数 那么最左边的符号位为 1 储存的时候都是按有符号整数来储存 如果要当成无符号整数来储存 需要声明整数类型为 unsigned<br>\n 无符号整数：最左边的位是数值的一部分</p>\n<p>C 语言的整数类型 有着不同的大小 int 类型通常为 32 位   有些数字很大 所以 C 语言还提供了 长整型 和 需要很小空间来储存的数 这样的数称为短整型</p>\n<p>整型分为 4 种 long short signed unsigned 他们之间可以互相组合</p>\n<blockquote>\n<pre><code>short int\nunsigned short int\nint\nunsigned int\nlong int\nunsigned long int\n</code></pre>\n</blockquote>\n<p>其他组合都是上述组合的同义词<br>\n C 语言允许通过省略单词 int 来缩写整数类型的名字<br>\n但很多基于 c 语言的程序 甚至不允许程序员写 short int 这样的名字 而必须写成 short 或者 long<br>\n 不同类型的取值范围也可能一样<br>\n eg: long int 可能和 int 有相同的取值范围  但是 long int 永远不可能比 int 的取值范围短<br>\n<a href=\"https://imgtu.com/i/IQpcUs\"><img src=\"https://z3.ax1x.com/2021/11/06/IQpcUs.png\" alt=\"IQpcUs.png\"></a><br>\n<a href=\"https://imgtu.com/i/IQpsbQ\"><img src=\"https://z3.ax1x.com/2021/11/06/IQpsbQ.png\" alt=\"IQpsbQ.png\"></a><br>\n<a href=\"https://imgtu.com/i/IQp0v8\"><img src=\"https://z3.ax1x.com/2021/11/06/IQp0v8.png\" alt=\"IQp0v8.png\"></a><br>\n 但是这种范围会随着编译器的不同而不同 好的解决方法是检查 &lt;limis.h&gt; 头文件定义了每种整数类型的最大值和最小值的宏<br>\n C99 新增了 2 个 long long int 和 unsigned long long int</p>\n<h5 id=\"整数常量\"><a class=\"markdownIt-Anchor\" href=\"#整数常量\">#</a> 整数常量</h5>\n<p>常量：在程序中以文本形式出现的数，而不是读，写，计算出来的数.C 语言允许用十进制，八进制，十六进制来表示常量</p>\n<p>十进制不能以 0 开头 八进制必须以 0 开头 十六进制总是以 0x 开头<br>\n这里需要注意的是  这些只是书写数的方式 并不会对数的储存方式产生英雄 数都是以二进制储存的 所以我们进行计算的时候甚至可以将他们三个混合使用 程序仍然能够识别 并且计算出值<br>\n十进制整数常量的类型同城为 nit 但如果常量的值大得无法储存在 int 型中 那就用 long int 类型。如果出现 long int 还不够用的罕见情况 编译器会用 unsigned long int 做最后的尝试<br>\n八进制和十六进制 会从范围最小的整数型开始尝试 直至找到能表示该常量的类型</p>\n<p>要强制编译器把常量作为长整数来处理，只需要在后边加上一个字母 L/l  <strong>大小写无所谓</strong><br>\n同样 要指明是无符号变量 可以在常量后边加上字母 U/u<br>\n<strong>L 和 U 可以混合使用 顺序和大小都无所谓</strong></p>\n<h5 id=\"c99中的整型变量\"><a class=\"markdownIt-Anchor\" href=\"#c99中的整型变量\">#</a> C99 中的整型变量</h5>\n<p>在 C99 中 出现了 LL (long long) 在 ll 前面 U 的通常是 unsigned long long  需要注意的是 <strong>这里两个 l 的大小写需要一致</strong><br>\n十进制储存 按照 int      long int   long long int 中的最小的能适合的方式储存<br>\n而八进制和十六进制 按照 int        unsigned int          long int           unsigned long int   ……</p>\n<h5 id=\"整数溢出\"><a class=\"markdownIt-Anchor\" href=\"#整数溢出\">#</a> 整数溢出</h5>\n<p>对整数执行算数运算时，其结果有可能因为太大而无法显示，这时候就会发生整数溢出<br>\n有符号整数溢出时 会出现没有定义的情况 无法预估最后会发生的情况<br>\n无符号整数溢出时 结果会有定义的：正确答案对 2 的 n 次方取模 例如 65535+1 的结果 (能够被 2 除尽) 其结果可以保证为 0</p>\n<h5 id=\"读写整数\"><a class=\"markdownIt-Anchor\" href=\"#读写整数\">#</a> 读 / 写整数</h5>\n<p>通常我们发生整数溢出时，会马上去更换整数类型 但单单这样做是不够的 我们还必须检查数据类型的改变对程序其他部分的影响</p>\n<p>读写无符号整数时 使用 u,o,x 代替转换说明中的 d<br>\nu 表示十进制 o 表示八进制 x 表示十六进制</p>\n<p>读写短整数时 在 d,o,x 或者 u 前面加上字母 h</p>\n<p>读写长整数时，在 d,o,x 或者 u 前面加上字母 l</p>\n<p>读写尝尝整数时，在 d,o,x 或者 u 前面加上字母 ll</p>\n<h4 id=\"浮点类型\"><a class=\"markdownIt-Anchor\" href=\"#浮点类型\">#</a> 浮点类型</h4>\n<p>float: 单精度浮点数<br>\n double: 双精度浮点数<br>\n long double: 扩展精度浮点数</p>\n<p>C 语言没有明确的说明精度到底是多少 不同的计算机可以以不同的方法储存浮点数</p>\n<p>数值是由三部分组成：符号，指数和小数 指数部分的位数说明了数值可能大小程度 而小数部分的位数说明了精度<br>\n<a href=\"https://imgtu.com/i/IQpwgf\"><img src=\"https://z3.ax1x.com/2021/11/06/IQpwgf.png\" alt=\"IQpwgf.png\"></a><br>\nlong double 类型没有出现在表中 因为它的长度随着机器的不同而变化 最常见的大小是 80 位和 128 位</p>\n<p>C99 中 浮点类型分为两种 一种是实浮点类型 包括 float,double,long double 类型<br>\n另一种是 C99 新增的复数类型  包括 float ,_Complex ,double ,_Complex ,long double _Complex</p>\n<h5 id=\"浮点常量\"><a class=\"markdownIt-Anchor\" href=\"#浮点常量\">#</a> 浮点常量</h5>\n<p>浮点常量必须包括小数点或者指数 其中指数指明了对前面的数进行缩放所需的 10 的幂次 如果有指数 则需要在指数数值前放置字母 E 或者 e 可选符号 + 或者 - 可以出现在字母 E 或者 e 的后边 为了表明只需要单精度 可以在常量的末尾处加上字母 F/f; 而为了说明常量必须以 long double 的形式储存可以在常量的末尾处 加上字母 L 或者 l</p>\n<h5 id=\"读写浮点数\"><a class=\"markdownIt-Anchor\" href=\"#读写浮点数\">#</a> 读写浮点数</h5>\n<p>前面已讨论过，转换说明 % e,% f 和 % g 用于读写单精度浮点数 读写 double 和 long double 类型的值所需的转换说明略有不同<br>\n读写 double 类型的值时，在 e,f,g 前面放置字母 l   <strong>注意只能在字符串 scanf 中使用 在 printf 函数调用中使用额 e,f,g 可以用来写 float 类型或者 double 类型的值</strong><br>\n读写 long double 类型时，在 e,f,g 前面放置字母 L<br>\n<strong> 注意 double 和 long double 这里有字母大小写的区别</strong></p>\n<h4 id=\"字符类型char\"><a class=\"markdownIt-Anchor\" href=\"#字符类型char\">#</a> 字符类型 char</h4>\n<p>当前最常用的字符集是 ASCII 字符集，用 7 位代码表示 128 个字符<br>\n char 类型的变量可以用任意单字符赋值</p>\n<h5 id=\"字符操作\"><a class=\"markdownIt-Anchor\" href=\"#字符操作\">#</a> 字符操作</h5>\n<p>C 语言将字符当做整数进行处理 毕竟所有的字符都是以二进制的形式进行编码的</p>\n<blockquote>\n<pre><code>char ch;\nch = 65      此时ch是A\nch = ch+1    此时ch是B\n</code></pre>\n</blockquote>\n<h5 id=\"有符号字符和无符号字符\"><a class=\"markdownIt-Anchor\" href=\"#有符号字符和无符号字符\">#</a> 有符号字符和无符号字符</h5>\n<p>char 类型像整数类型一样存在符号性和无符号性两种 通常有符号型的取值是 - 128~127 而无符号字符的取值是 0~255<br>\n 所有 C 语言允许单词 signed 和 unsigned 来修饰 char 类型</p>\n<h4 id=\"算数类型\"><a class=\"markdownIt-Anchor\" href=\"#算数类型\">#</a> 算数类型</h4>\n<p><a href=\"https://imgtu.com/i/IQp6Ej\"><img src=\"https://z3.ax1x.com/2021/11/06/IQp6Ej.png\" alt=\"IQp6Ej.png\"></a></p>\n<h4 id=\"转义序列-2\"><a class=\"markdownIt-Anchor\" href=\"#转义序列-2\">#</a> 转义序列</h4>\n<p>转义序列分为字符转义序列和数字转义序列</p>\n<h5 id=\"字符转义序列\"><a class=\"markdownIt-Anchor\" href=\"#字符转义序列\">#</a> 字符转义序列</h5>\n<p><a href=\"https://imgtu.com/i/IQprDg\"><img src=\"https://z3.ax1x.com/2021/11/06/IQprDg.png\" alt=\"IQprDg.png\"></a></p>\n<h5 id=\"数字转义序列\"><a class=\"markdownIt-Anchor\" href=\"#数字转义序列\">#</a> 数字转义序列</h5>\n<p>字符转义序列没有包含所有无法打印的 ASCII 字符 字符转义序列也无法包含 128 个 ASICC 字符以外的字符 而数字转义字符可以表示任何字符 所有它可以解决上述问题</p>\n<p>作为字符常量来使用时，<strong> 转义序列必须用一堆单引号括起来</strong></p>\n<h4 id=\"字符处理函数\"><a class=\"markdownIt-Anchor\" href=\"#字符处理函数\">#</a> 字符处理函数</h4>\n<p>例如 toupper 函数可以将小写字母转化为大写字母 但要调用这类使用的字符处理函数 需要在顶部放置 #include &lt;ctype.h&gt; 这一条指令</p>\n<h5 id=\"用scanf-和printf读写字符\"><a class=\"markdownIt-Anchor\" href=\"#用scanf-和printf读写字符\">#</a> 用 scanf 和 printf 读写字符</h5>\n<p>scanf 读写字符时 并不会跳过空白字符 为了强制 scanf 在读入字符前跳过空白字符，需要在格式串中的转换说明 % C 前面加上一个空格</p>\n<h5 id=\"用getchar和putchar用于读写字符\"><a class=\"markdownIt-Anchor\" href=\"#用getchar和putchar用于读写字符\">#</a> 用 getchar 和 putchar 用于读写字符</h5>\n<p>getchar 函数和 putchar 函数可以用来取代 scanf 和 printf 函数 putchar 函数用于写单个字符<br>\n每次调用时他会读写一个字符并将其返回 为了保存这个字符 必须使用赋值操作将其储存在变量中<br>\n当混用 getchar 函数和 scanf 函数要小心 scanf 函数仅消耗掉匹配的输入数据 其余部分仍然留在缓冲区 (包括换行符)</p>\n<h4 id=\"类型转换\"><a class=\"markdownIt-Anchor\" href=\"#类型转换\">#</a> 类型转换</h4>\n<h5 id=\"隐式类型转换规则\"><a class=\"markdownIt-Anchor\" href=\"#隐式类型转换规则\">#</a> 隐式类型转换规则</h5>\n<p>较低级向较高级转换 (按存储长度)<br>\n 其中有一个操作数是浮点型时 把整型操作数往浮点型转换 而浮点型往精度更高的浮点型转换<br>\n两个操作数都不是浮点数时，如果有 char 或者 short int 类型 首先对两个操作数进行整型提升<br>\n<strong>特例</strong>:long int 和 unsigned int 数据类型长度相同时 则两个操作数均转换为 unsigned long<br>\n<a href=\"https://imgtu.com/i/IQ9FPI\"><img src=\"https://z3.ax1x.com/2021/11/06/IQ9FPI.png\" alt=\"IQ9FPI.png\"></a><br>\n 赋值中的类型转换：把赋值运算符右侧表达式的值转换为左侧变量的类型.</p>\n<h5 id=\"强制类型转换\"><a class=\"markdownIt-Anchor\" href=\"#强制类型转换\">#</a> 强制类型转换</h5>\n<blockquote>\n<pre><code>(类型)变量   eg(char)i  表示把i的类型强制转换为char的类型\n(类型)(表达式)\n</code></pre>\n</blockquote>\n<p>这些转换类型只是一次有效的 不会改变变量定义时的数据类型<br>\n C 语言把类型名视为一元运算符</p>\n<h4 id=\"类型定义\"><a class=\"markdownIt-Anchor\" href=\"#类型定义\">#</a> 类型定义</h4>\n<blockquote>\n<pre><code>typedef 数据类型 别名\n</code></pre>\n</blockquote>\n<p>用于对另一个数据类型创建一个别名<br>\n注意并没有创建一个新的类型 仅仅是对某个已有的类型增加一个别名<br>\n可以让程序更加易于理解 可读性更高</p>\n<h4 id=\"sizeof-运算符\"><a class=\"markdownIt-Anchor\" href=\"#sizeof-运算符\">#</a> sizeof 运算符</h4>\n<p>取数据类型 常量 变量或者表达式值得存储长度的运算符 (以字节为单位)</p>\n<blockquote>\n<pre><code>sizeof(数据类型说明符/表达式)\n用于类型名 sizeof(类型名)\n用于表达式 sizeof 表达式\n</code></pre>\n</blockquote>\n<h3 id=\"第八章-字符输入输出和输入验证\"><a class=\"markdownIt-Anchor\" href=\"#第八章-字符输入输出和输入验证\">#</a> 第八章 字符输入 / 输出和输入验证</h3>\n<h4 id=\"单字符io-getchar和putchar\"><a class=\"markdownIt-Anchor\" href=\"#单字符io-getchar和putchar\">#</a> 单字符 I/O getchar () 和 putchar ()</h4>\n<h4 id=\"缓冲区\"><a class=\"markdownIt-Anchor\" href=\"#缓冲区\">#</a> 缓冲区</h4>\n<p>用户输入的字符被收集并存储在一个被称为缓冲区的临时存储区 按下 enter 键后 程序才可以使用用户输入的字符<br>\n某些交互式系统无缓冲区 比如游戏中按下一个键需要立即执行按下的操作<br>\n缓冲区分为完全缓冲和行缓冲</p>\n<blockquote>\n<pre><code>完全缓冲输入指的是当缓冲区被填满时才刷新缓冲区\n行缓冲指的是在出现换行时刷新缓冲区(键盘输入)\n</code></pre>\n</blockquote>\n<p>是否能进行无缓冲输入取决于计算机系统 大部分直接规定输入都会缓冲输入</p>\n<h4 id=\"结束键盘输入\"><a class=\"markdownIt-Anchor\" href=\"#结束键盘输入\">#</a> 结束键盘输入</h4>\n<h5 id=\"文件流和键盘输入\"><a class=\"markdownIt-Anchor\" href=\"#文件流和键盘输入\">#</a> 文件，流和键盘输入</h5>\n<h5 id=\"文件结尾\"><a class=\"markdownIt-Anchor\" href=\"#文件结尾\">#</a> 文件结尾</h5>\n<p>方法 1 文件末尾放置一个特殊字符 来标记末尾<br>\n方法 2 存储文件大小的信息。如果程序有 3000 字节 那么程序在读到 3000 字节的时候便达到文件末尾</p>\n<p>在 C 语言中 用 getchar 或者 scanf 检测文件末尾时都将放回一个特殊值 即 EOF</p>\n<h3 id=\"第九章函数\"><a class=\"markdownIt-Anchor\" href=\"#第九章函数\">#</a> 第九章函数</h3>\n<h4 id=\"复习函数\"><a class=\"markdownIt-Anchor\" href=\"#复习函数\">#</a> 复习函数</h4>\n<h5 id=\"创建并使用简单函数\"><a class=\"markdownIt-Anchor\" href=\"#创建并使用简单函数\">#</a> 创建并使用简单函数</h5>\n<blockquote>\n<pre><code>#include &lt;stdio.h&gt;\n#define NAME \"GIGATHINK,INC\"\n#define ADDRESS \"101 Megabuck plaza\"\n#define PLACE \"MEGAPOLIS,CA 94904\"\n#define WIDTH 40\n\nvoid starbar(void);\n\nint main(void)\n{\n    starbar();\n    printf(\"%s \\n\", NAME);\n    printf(\"%s \\n\", ADDRESS);\n    printf(\"%s \\n\", PLACE);\n    starbar(); //使用函数\n    return 0;\n}\n\nvoid starbar(void) //定义函数\n{\n    int count;\n    for (count = 1; count &lt;= WIDTH; count++)\n    {\n        putchar('*');\n    }\n    putchar('\\n');\n}\n</code></pre>\n</blockquote>\n<h5 id=\"分析程序\"><a class=\"markdownIt-Anchor\" href=\"#分析程序\">#</a> 分析程序</h5>\n<p>函数原型：告诉编译器函数的类型<br>\n函数调用：表明在此处执行函数<br>\n函数定义：明确地指出函数要做什么</p>\n<p>函数和变量有一样有多种类型 任何程序在使用函数之前都要声明该函数的类型</p>\n<blockquote>\n<pre><code>void starbar(void);\n圆括号表示starbar是一个函数名 第一个void是函数类型 void类型表明函数没有返回值 第二个void(圆括号中)表明该函数不带参数。分号表示这是在申明函数不是在定义函数 \n这行表明了程序将使用一个名为starbar(),没有返回值,没有参数的函数,并告诉编译器在别处查找该函数的定义\n</code></pre>\n</blockquote>\n<p>一般而言 函数原型指明了函数的返回值类型和函数接受的参数类型 这些信息称为函数的<strong>签名</strong><br>\n这里对于 starbar () 函数而言 其签名是该函数没有返回值，没有参数<br>\n starbar () 原型放在任何位置都可以<br>\n执行顺序:<br>\n 在 main () 中 当计算机执行到 starbar () 函数时，会找到该函数的定义并执行其中的内容，执行完 starbar () 中的代码后，计算机返回主调函数继续执行下一行<br>\n函数头包括函数类型，函数名和圆括号，接着是左花括号，变量声明，函数表达式语句，最后以又花括号结束<br>\n ** 注意函数头中的 starbar () 没有分号 这是在告诉编译器这是定义 starbar ()，而不是调用函数或者声明函数类型<br>\n starbar () 函数中的 count 变量是局部变量，意思是该变量只属于 starbar () 函数，可以在程序中的其他地方使用 count 这并不会引起名称冲突 他们是同名的不同函数</p>\n<h5 id=\"函数参数\"><a class=\"markdownIt-Anchor\" href=\"#函数参数\">#</a> 函数参数</h5>\n<blockquote>\n<pre><code>void show_n_char(char ch,int num);   \nshou_n_char('*',12)\n</code></pre>\n</blockquote>\n<h5 id=\"定义带形式参数的函数\"><a class=\"markdownIt-Anchor\" href=\"#定义带形式参数的函数\">#</a> 定义带形式参数的函数</h5>\n<p>第一行告知编译器 show_n_char 使用两个参数 ch 和 num,ch 是 char 类型 num 是 int 类型。这两个变量被称为形式参数，简称形参。和定义在函数中变量一样 形参也是局部变量属于该函数私有。这以为着在其他函数中使用同名变量不会引起名称冲突 每次调用函数 就会给这些变量赋值<br>\n值得一提的是 虽然 show_n_char () 接受来自 main () 的值 但是它没有返回值。因此，show_n_char () 的类型是 void</p>\n<h5 id=\"声明带形式参数函数的原型\"><a class=\"markdownIt-Anchor\" href=\"#声明带形式参数函数的原型\">#</a> 声明带形式参数函数的原型</h5>\n<p>使用函数之前要声明函数原型: void shou_n_char (char ch,int num) 当然根据个人喜好 你也可以省略变量名<br>\n在原型中使用变量名并没有实际创建变量，char 仅代表了一个 char 类型的变量</p>\n<h5 id=\"调用带实际参数的函数\"><a class=\"markdownIt-Anchor\" href=\"#调用带实际参数的函数\">#</a> 调用带实际参数的函数</h5>\n<p>在函数的调用中 实际参数 (简称实参) 提供了 ch 和 num 的值 比如 show_n_char (’*’,12); 这两个值被赋值给函数中的形式参数<br>\n简而言之形式参数是被调函数中的变量 实际参数是主调函数赋值给被调函数的具体值 实际参数可以是常量变量甚至是更复杂的表达式 无论实际参数是何种形式都要被求值 然后该值被拷贝给被调函数相应的形式参数.</p>\n<h5 id=\"使用return从函数中返回值\"><a class=\"markdownIt-Anchor\" href=\"#使用return从函数中返回值\">#</a> 使用 return 从函数中返回值</h5>\n<blockquote>\n<pre><code>int imin(int n , int m)\nint imin(int n , int m)\n{\nint min ;\nif (n&lt;m) min=n;\nelse min = m;\nreturn min;\n}\nint a = imin(1,2)\n</code></pre>\n</blockquote>\n<p>关键字 return 后面的表达式的值就是函数的返回值 在该例中，函数的返回值就是变量 min 的值<br>\n变量 min 属于 imin () 函数私有 但是 return 语句把 min 的值传回了主调函数<br>\n return; return 语句还可以这样使用 这样使用 retrun 语句将会终止函数并把控制返回给主调函数</p>\n<h5 id=\"函数类型\"><a class=\"markdownIt-Anchor\" href=\"#函数类型\">#</a> 函数类型</h5>\n<p>声明函数必须声明函数的类型 带返回值的函数类型应该与其返回值得类型相同 没有返回值的函数声明为 void 类型<br>\n<strong>值得注意的是 函数类型指的是函数返回值的类型 而不是参数的类型</strong><br>\n函数的前置声明可以放在主调函数外面也可以放在主调函数里面<br>\n ANSIC 标准库中，函数被封城了多个系列，每一个系列都有各自的头文件，这些头文件中包含了本系列所有函数的声明。例如 stdio.h 头文件中包括了标准的 I/O 库函数 (如 printf he scanf 函数) 的声明</p>\n<h4 id=\"ansi-c-函数类型\"><a class=\"markdownIt-Anchor\" href=\"#ansi-c-函数类型\">#</a> ANSI C 函数类型</h4>\n<p>旨在说明老式声明函数的问题所在和解决方案 这里不做过多描述 可自行搜索</p>\n<p>ANSI C 使用了逗号分割的类型列表 eg imax (int a , int b) 如此 编译器可以检查函数调用是否和函数原型匹配 参数的数量是否匹配 参数的类型是否匹配</p>\n<h5 id=\"无参数和未指定参数\"><a class=\"markdownIt-Anchor\" href=\"#无参数和未指定参数\">#</a> 无参数和未指定参数</h5>\n<blockquote>\n<pre><code>void print_name()\n</code></pre>\n</blockquote>\n<p>接受 ANSI C 的编译器截石位 print_name () 不接受任何参数，然后在调用该函数时，编译器会检查来确保没有使用参数</p>\n<h5 id=\"函数原型的优点\"><a class=\"markdownIt-Anchor\" href=\"#函数原型的优点\">#</a> 函数原型的优点</h5>\n<p>使用函数原型会让编译器捕获在使用函数时可能出现的许多错误或疏漏，如果编译器没有发现这些问题，就很难觉察出来.<br>\n 有一种方法可以省略函数原型却保留函数原型的优点<br>\n把整个函数定义放在第一次调用该函数之前，也有相同的效果 此时函数定义也相当于函数原型。对于代码量较少的函数 这种用法很普遍</p>\n<blockquote>\n<pre><code>int imax(int a , int b ) {return a&gt;b?a:b}\n</code></pre>\n</blockquote>\n<h4 id=\"递归\"><a class=\"markdownIt-Anchor\" href=\"#递归\">#</a> 递归</h4>\n<p>C 允许函数调用他自己 这种调用过程称为<strong>递归</strong><br>\n难点：结束递归 (如果递归代码中没有终止递归的条件测试部分，一个调用自己的函数就会无限递归)<br>\n 注：可以使用循环的地方<strong>通常</strong>都可以使用递归</p>\n<h5 id=\"演示递归\"><a class=\"markdownIt-Anchor\" href=\"#演示递归\">#</a> 演示递归</h5>\n<p><a href=\"https://imgtu.com/i/IlPHk4\"><img src=\"https://z3.ax1x.com/2021/11/06/IlPHk4.jpg\" alt=\"IlPHk4.jpg\"></a><br>\n<a href=\"https://imgtu.com/i/IlPbtJ\"><img src=\"https://z3.ax1x.com/2021/11/06/IlPbtJ.jpg\" alt=\"IlPbtJ.jpg\"></a></p>\n<h5 id=\"递归的基本原理\"><a class=\"markdownIt-Anchor\" href=\"#递归的基本原理\">#</a> 递归的基本原理</h5>\n<p>1. 每级函数调用都有自己的变量 也就是说第一级的 n 和第二的 n 不一样 当程序最终返回第一级的时候 最初的 n 仍然是它的初值 1 (局部变量)<br>\n 2. 每次幻术调用都会返回一次 当函数执行完毕后 控制权将被传回上一级递归。程序必须按照顺序逐级返回递归 不能跳级<br>\n 3. 递归函数中位于递归调用之前的语句 均按被调函数的顺序执行<br>\n 4. 递归函数中位于递归调用之后的语句 均按被调函数的<strong>相反</strong>顺序执行<br>\n 5. 虽然每级递归都有自己的变量 但是并没有拷贝函数的代码，所以程序按顺序执行函数中的代码 而递归调用就相当于又从头开始执行函数的代码 除了为每次递归调用创建变量外 递归调用非常类似于一个循环语句<br>\n 6. 递归函数必须包含能让递归调用停止的语句。通常递归函数都使用 if 或者其他等价的测试条件在函数形参等于某个特定值时终止递归。为此 每次递归调用的形参都要使用不同的值</p>\n<h5 id=\"尾递归\"><a class=\"markdownIt-Anchor\" href=\"#尾递归\">#</a> 尾递归</h5>\n<p>将递归放置在函数的末尾 即正好在 return 语句之前 这种形式的递归被称为尾递归 相当于循环</p>\n<h5 id=\"递归和倒序计算\"><a class=\"markdownIt-Anchor\" href=\"#递归和倒序计算\">#</a> 递归和倒序计算</h5>\n<p>在处理这类倒序问题时  递归比循环简单</p>\n<h5 id=\"递归的优缺点\"><a class=\"markdownIt-Anchor\" href=\"#递归的优缺点\">#</a> 递归的优缺点</h5>\n<p>优点：为某些编程问题提供了最简单的解决方案，缺点是一些递归算法会快速消耗计算机的内存资源 另外递归不方便阅读和维护<br>\n<strong>在程序中使用递归要格外注意 尤其是效率优先的程序</strong></p>\n<h4 id=\"编译多源代码文件的程序\"><a class=\"markdownIt-Anchor\" href=\"#编译多源代码文件的程序\">#</a> 编译多源代码文件的程序</h4>\n<p>使用多个函数最简单的方法是把他们都放在同一个文件中 然后像编译只有一个函数的文件那样编译该文件即可。其他方法因操作系统而异，下面将举例说明.</p>\n<h5 id=\"unix\"><a class=\"markdownIt-Anchor\" href=\"#unix\">#</a> UNIX</h5>\n<p>假设 filel.c 和 file2.c 是两个内涵 C 函数的文件 下面的命令将编译两个文件并生成一个名为 a.out 的可执行文件:<br>\ncc filel.c file2.c<br>\n 另外还生成两个名为 file1.o 和 file2.o 的目标文件。如果后来改动了 filel.c 而 file2.c 不变 可以使用以下命令编译第一个文件 并与第二个文件的目标代码合并<br>\n cc filel.c file2.o</p>\n<h5 id=\"linux\"><a class=\"markdownIt-Anchor\" href=\"#linux\">#</a> Linux</h5>\n<p>假定 linux 系统安装了 GNU C 编译器 GCC 假设 filel.c 和 file2.c 是两个内含 C 函数的文件 下面的命令将编译两个文件并生成名为 a.out 的可执行文件<br>\n gcc filel.c file2.c<br>\n 另外还生成两个名为 file1.o 和 file2.o 的目标文件。如果后来改动了 filel.c 而 file2.c 不变 可以使用以下命令编译第一个文件 并与第二个文件的目标代码合并<br>\n gcc filel.c file2.o</p>\n<h5 id=\"dos命令行编译器\"><a class=\"markdownIt-Anchor\" href=\"#dos命令行编译器\">#</a> DOS 命令行编译器</h5>\n<p>绝大多数 DIS 命令行编译器的工作员刘和 UNIX 的 CC 命令类似 只不过使用不同的名称而已 其中一个区别是 对象文件的扩展名是.obj 而不是.o 一些编译器生成的不是目标代码文件 而是汇编语言或其他特殊代码的中间文件</p>\n<h5 id=\"windows和苹果的ide编译器\"><a class=\"markdownIt-Anchor\" href=\"#windows和苹果的ide编译器\">#</a> windows 和苹果的 IDE 编译器</h5>\n<p>windows 和 Macintosh 系统使用的集成开发环境中的编译器是面向项目的<br>\n项目 描述的是特定程序使用的资源 (资源包括源代码文件)<br>\n 这种 IDE 中的编译器要创建项目来运行单文件程序 对于多文件程序 要使用相应的菜单命令 把源代码文件加入到一个项目中 要确保所有的源代码文件都在项目列表中列出 许多 IDE 都不用在项目列表中列出头文件 (扩展名为.h 的文件) 因为项目只管理使用的源代码文件源代码文件中的 #include 指令管理该文件中使用的头文件 但是 Xcode 要在项目中添加头文件</p>\n<h5 id=\"使用头文件\"><a class=\"markdownIt-Anchor\" href=\"#使用头文件\">#</a> 使用头文件</h5>\n<p>如果把 main () 放在第一个文件中 把函数定义放在第二个文件中 那么第一个文件仍然要使用函数原型<br>\n把函数原型放在头文件中 就不用再每次使用函数文件时都要写出函数的原型</p>\n<h4 id=\"查找地址-运算符\"><a class=\"markdownIt-Anchor\" href=\"#查找地址-运算符\">#</a> 查找地址: &amp; 运算符</h4>\n<p>指针是 C 语言中最重要的概念之一 用于存储变量的地址。前面使用的 scanf () 函数中就是用地址最为参数<br>\n一元运算符 &amp; 给出变量的存储地址，如果 posh 是变量名那么 &amp; posh 就是变量的地址 可以把地址看做是变量在内存中的位置<br>\n不同的变量所处的位置是不同的</p>\n<h4 id=\"更改主调函数中的变量\"><a class=\"markdownIt-Anchor\" href=\"#更改主调函数中的变量\">#</a> 更改主调函数中的变量</h4>\n<p>例如要更改两个数 x,y 的位置 简单地 x = y, y = x 并没有作用<br>\n下面实现简单地交换值得功能</p>\n<blockquote>\n<pre><code>void interchange(int u ,int v ) {\nint temp;\ntemp = u\nu = v\nv = temp\n}\n</code></pre>\n</blockquote>\n<p>虽然这个函数表面上实现了交换的功能 但事实上 调用函数输出结果的时候 并不会交换这两个数值<br>\n因为在 interchange () 传回的变量并不是 main () 中的变量 (局部变量问题：在函数中的变量虽然表面上和 main 中的变量一样 但是实际上这两个变量是完全不同的 存储地址也不一样的两个变量). 因此交换 u 和 v 的值 对 x 和 y 的值没有影响<br>\n可以使用 return 语句把值传回 main () 比如 在函数末尾加上 return (u), 然后修改 main 中而定调用 x = interchange (x,y) 但是这只能改变 x 的值 return 语句只能把被调函数中的一个值传回主调函数 但是现在要传回两个值 这就需要指针了 下面开始概述指针</p>\n<h4 id=\"指针简介\"><a class=\"markdownIt-Anchor\" href=\"#指针简介\">#</a> 指针简介</h4>\n<p>指针：一个值为内存地址的变量 (或数据对象)<br>\n<strong> 例如:int 类型变量的值为整数 char 类型变量的值为字符 而指针变量的值为地址</strong></p>\n<blockquote>\n<pre><code>ptr = &amp;pooh\n</code></pre>\n</blockquote>\n<p>其中 表示 ptr\"指向\"pooh ptr 和 &amp; pooh 的区别是 ptr 是变量 而 &amp;pooh 是常量<br>\n这样 ptr 的值 就是 pooh 的地址<br>\n创建指针变量 要先声明指针变量的类型</p>\n<h5 id=\"间接运算符解引用运算符\"><a class=\"markdownIt-Anchor\" href=\"#间接运算符解引用运算符\">#</a> 间接运算符 (解引用运算符) *</h5>\n<p>间接运算符可以找出存储在内存地址下的值<br>\n注意分清楚 间接运算符 和 二元乘号运算符 虽然他们长得一样</p>\n<blockquote>\n<pre><code>val = *ptr\nptr = &amp;bhb\n上面这串代码就相当于是 val = bhb\n&amp;后跟一个变量名 表示该变量名的地址\n*后跟一个地址 或者指针名 表示存储在指针指向地址上的值\n</code></pre>\n</blockquote>\n<h5 id=\"声明指针\"><a class=\"markdownIt-Anchor\" href=\"#声明指针\">#</a> 声明指针</h5>\n<blockquote>\n<pre><code>int * pi         pi是指向int类型变量的指针\nchar * p         p是指向char类型变量的指针\nfloat * pf,*pg   pf,pg是指向float类型变量的指针\n</code></pre>\n</blockquote>\n<p>其中 * 表明声明的变量是一个指针 前面表示指针指向的类型<br>\n pi 指向的值是 int 类型 pi 本身叫做 指向 int 类型的指针 pi 的值是一个地址</p>\n<h5 id=\"使用指针在函数间通信\"><a class=\"markdownIt-Anchor\" href=\"#使用指针在函数间通信\">#</a> 使用指针在函数间通信</h5>\n<blockquote>\n<pre><code>void interchange(int * u, int * v)\n{\nint temp;\ntemp = *u;\n*u = *v;\n*v = temp;\n}\ninterchange(&amp;x,&amp;y)\n</code></pre>\n</blockquote>\n<p>该函数传递的就不是 x 和 y 的值 而是存储 x 和 y 的值的地址<br>\n函数中的第二个语句表示 把 u 地址中的值给 temp 第三个语句表示把 V 地址中存储的值赋值给 U 这样 U 地址存储的值变成了 V 地址存储的值第四个语句同样</p>\n<h5 id=\"小结来自c-primer-plus\"><a class=\"markdownIt-Anchor\" href=\"#小结来自c-primer-plus\">#</a> 小结 (来自 C primer Plus)</h5>\n<p><a href=\"https://imgtu.com/i/IlXp9K\"><img src=\"https://z3.ax1x.com/2021/11/07/IlXp9K.jpg\" alt=\"IlXp9K.jpg\"></a><br>\n<a href=\"https://imgtu.com/i/IlOxtx\"><img src=\"https://z3.ax1x.com/2021/11/07/IlOxtx.jpg\" alt=\"IlOxtx.jpg\"></a></p>\n<h4 id=\"关键概念\"><a class=\"markdownIt-Anchor\" href=\"#关键概念\">#</a> 关键概念</h4>\n<p>想用 C 编出高效灵活的程序，必须理解函数.<br>\n 函数是如何把信息从一个函数传递到另一函数 理解函数参数和返回值之间的工作原理<br>\n明白函数形参和其他局部变量属于函数私有因此 声明在不同函数中的同名变量是完全不同的变量<br>\n函数无法直接访问在其他函数中的变量 这样限制访问保护了数据的完整性<br>\n但是 当确实需要在函数中访问另一个函数的数据时 可以把指针作为函数的参数</p>\n<h4 id=\"本章小结\"><a class=\"markdownIt-Anchor\" href=\"#本章小结\">#</a> 本章小结</h4>\n<p>函数使用参数把值传给函数 使用关键字 return 把值返回函数 必须在函数定义和函数原型中指定函数的原型，如果需要在被调函数中修改主调函数的变量，使用地址或指针作为参数<br>\n ANSI C 提供了函数原型 允许编译器验证函数调用中使用的参数个数和类型是否正确<br>\n C 函数可以调用本身 即递归 一些编程问题要用递归来解决 但是递归消耗内存多 效率不高 而且费时</p>\n<h3 id=\"第十章数组和指针\"><a class=\"markdownIt-Anchor\" href=\"#第十章数组和指针\">#</a> 第十章数组和指针</h3>\n<h4 id=\"数组\"><a class=\"markdownIt-Anchor\" href=\"#数组\">#</a> 数组</h4>\n<p>数组：数据类型相同的一系列元素组成 通过声明告诉编译器数组中含有多少元素和这些元素的类型</p>\n<blockquote>\n<pre><code>float candy[365];\nchar code[12];\nint states[50];\n</code></pre>\n</blockquote>\n<p>方括号中的数组是数组中的元素个数.<br>\n 访问数组中的元素通过数组索引表示数组中的各元素。数组元素的标号从 0 开始 'candy [0]' 表示 candy 数组的第一个元素</p>\n<h5 id=\"初始化数组\"><a class=\"markdownIt-Anchor\" href=\"#初始化数组\">#</a> 初始化数组</h5>\n<p>标量变量：只存储单个值的变量</p>\n<blockquote>\n<pre><code>int fix = 1 ;\n</code></pre>\n</blockquote>\n<p>C 语言用新的语法来初始化数组</p>\n<blockquote>\n<pre><code>int power[8] = {1,2,4,6,8,6,4,2}\n</code></pre>\n</blockquote>\n<p>用以逗号分隔的值列表 (用花括号括起来) 来初始化数组，各值之间用逗号分割.<br>\n 使用 const 声明数组:<br>\n 有时需要把数组设置为只读，如此 程序只能从数组中检索值，不能把新值写入数组，此时就应该用 const 声明和初始化数组</p>\n<blockquote>\n<pre><code>const int days[12] = {31,28,31,30,31,30,31,31,30,31,30,31}\n</code></pre>\n</blockquote>\n<p><strong>使用数组之前必须初始化</strong><br>\n当初始化列表中的值少于数组元素个数时，编译器会把剩余的元素都初始化为 0, 但是如果不初始化数组，数组中存储的将会是不确定的垃圾值.<br>\n 但是如果初始化列表中的值多于数组元素个数时候编译器会进行报错<br>\n如果省略方括号中的数组编译器会根据初始化列表中的项数来确定数组的大小<br>\n通常使用 sizeof 运算符给出他的运算对象的大小 (单位为字节)</p>\n<blockquote>\n<pre><code>int days[] = {1,2,3};\nsizeof days[0] 表示数组中第一个元素的字节大小 //这里是4字节 因为一个int类型占据4字节\nsizeof days 表示数组中所有元素所占的字节大小\n我们通常使用数组中所有元素所占的字节大小来除以每一个元素的字节大小 得到数组中的元素数目\nsizeof days / sizeof days[0]\n</code></pre>\n</blockquote>\n<h5 id=\"指定初始化器c99\"><a class=\"markdownIt-Anchor\" href=\"#指定初始化器c99\">#</a> 指定初始化器 (C99)</h5>\n<p>C99 增加的新特性：指定初始化器 利用该特性可以初始化指定的数组元素</p>\n<blockquote>\n<pre><code>int arr[6] = {[5]=212}; 把arr[5]初始化为212\n</code></pre>\n</blockquote>\n<p>在初始化一个元素后 未初始化的元素都会被设置为 0<br>\n 如果初始化器后面有更多的值</p>\n<blockquote>\n<pre><code>[4] = 31,32,33   在days[4]被转化成31后 后面的数组会根据顺序转化 也就是说days[5]=32 以此类推\n</code></pre>\n</blockquote>\n<p>如果再次初始化元素 最后的初始化将会取代前面的初始化<br>\n数组中除了指定的初始化元素，其他的将会按照顺序排序</p>\n<blockquote>\n<p>int days [12] = {31,28,[4]=31} 此时 days [0] 就是 31 days [1] 就是 28<br>\n 如果没有指定元素大小 例如  int days [] = {[1]=2}<br>\n 此时园一期会把数组的大小设置为足够装得下初始化的值</p>\n</blockquote>\n<h5 id=\"给数组元素赋值\"><a class=\"markdownIt-Anchor\" href=\"#给数组元素赋值\">#</a> 给数组元素赋值</h5>\n<p>AA<br>\n 声明数组后，可以借助数组下标 (或索引) 给数组元素赋值<br>\n C 语言中只能使用循环给数组的元素依次赋值 不允许把数组作为一个单元赋给另一个数组<br>\n只有初始化允许使用花括号列表的形式赋值</p>\n<blockquote>\n<pre><code>int yaks[5];\nyaks[5] = {1,2,3,4,5};\n这样赋值是不起作用的\n</code></pre>\n</blockquote>\n<h5 id=\"数组边界\"><a class=\"markdownIt-Anchor\" href=\"#数组边界\">#</a> 数组边界</h5>\n<p>使用数组时，必须确保下标是有效的值 不能超出边界<br>\n编译器不会检查数组下标是否使用得当，结果是未定义的</p>\n<h5 id=\"指定数组的大小\"><a class=\"markdownIt-Anchor\" href=\"#指定数组的大小\">#</a> 指定数组的大小</h5>\n<p>声明数组只能在在方括号中使用整型常量表达式 另外表达式的值必须大于 0<br>\n<a href=\"https://imgtu.com/i/IBGPoQ\"><img src=\"https://z3.ax1x.com/2021/11/12/IBGPoQ.jpg\" alt=\"IBGPoQ.jpg\"></a></p>\n<h4 id=\"多维数组\"><a class=\"markdownIt-Anchor\" href=\"#多维数组\">#</a> 多维数组</h4>\n<p>声明:flaot rain [5][12]; //rain 是一个内涵 5 个元素的数组 每个元素的类型都是 float [12]<br>\n rain 的每个元素本身都是一个内涵 12 个 float 类型值的数组<br>\n例如:rain [0][0] 表示 rain 中的首个元素数组的首个元素</p>\n<blockquote>\n<pre><code>#include &lt;stdio.h&gt;\n#define MONTHS 12    // number of months in a year\n#define YEARS   5    // number of years of data\nint main(void)\n{\n    // initializing rainfall data for 2010 - 2014\n    const float rain[YEARS][MONTHS] =\n    {\n        {4.3,4.3,4.3,3.0,2.0,1.2,0.2,0.2,0.4,2.4,3.5,6.6},\n        {8.5,8.2,1.2,1.6,2.4,0.0,5.2,0.9,0.3,0.9,1.4,7.3},\n        {9.1,8.5,6.7,4.3,2.1,0.8,0.2,0.2,1.1,2.3,6.1,8.4},\n        {7.2,9.9,8.4,3.3,1.2,0.8,0.4,0.0,0.6,1.7,4.3,6.2},\n        {7.6,5.6,3.8,2.8,3.8,0.2,0.0,0.0,0.0,1.3,2.6,5.2}\n    };\n    int year, month;\n    float subtot, total;\n    \n    printf(\" YEAR    RAINFALL  (inches)\\n\");\n    for (year = 0, total = 0; year &lt; YEARS; year++)\n    {             // for each year, sum rainfall for each month\n        for (month = 0, subtot = 0; month &lt; MONTHS; month++)\n            subtot += rain[year][month];\n        printf(\"%5d %15.1f\\n\", 2010 + year, subtot);\n        total += subtot; // total for all years\n    }\n    printf(\"\\nThe yearly average is %.1f inches.\\n\\n\",\n           total/YEARS);\n    printf(\"MONTHLY AVERAGES:\\n\\n\");\n    printf(\" Jan  Feb  Mar  Apr  May  Jun  Jul  Aug  Sep  Oct \");\n    printf(\" Nov  Dec\\n\");\n                                                                    \n    for (month = 0; month &lt; MONTHS; month++)\n    {             // for each month, sum rainfall over years\n        for (year = 0, subtot =0; year &lt; YEARS; year++)\n            subtot += rain[year][month];\n        printf(\"%4.1f \", subtot/YEARS);\n    }\n    printf(\"\\n\");\n                                                                    \n    return 0;\n}\n</code></pre>\n</blockquote>\n<p>重点学习数组初始化和计算方案</p>\n<h5 id=\"初始化二维数组\"><a class=\"markdownIt-Anchor\" href=\"#初始化二维数组\">#</a> 初始化二维数组</h5>\n<blockquote>\n<pre><code>sometype arl[5] = {val1,val2,val3,val4,val5}\n</code></pre>\n</blockquote>\n<p>val1 等是 sometype 类型的值</p>\n<blockquote>\n<pre><code>    const float rain[YEARS][MONTHS] =\n    {\n        {4.3,4.3,4.3,3.0,2.0,1.2,0.2,0.2,0.4,2.4,3.5,6.6},\n        {8.5,8.2,1.2,1.6,2.4,0.0,5.2,0.9,0.3,0.9,1.4,7.3},\n        {9.1,8.5,6.7,4.3,2.1,0.8,0.2,0.2,1.1,2.3,6.1,8.4},\n        {7.2,9.9,8.4,3.3,1.2,0.8,0.4,0.0,0.6,1.7,4.3,6.2},\n        {7.6,5.6,3.8,2.8,3.8,0.2,0.0,0.0,0.0,1.3,2.6,5.2}\n    };\n</code></pre>\n</blockquote>\n<p>初始化时候可以省略内部的花括号只需要保存最外部的花括号就行了，前提是每个元素都必须写上 并且数目不足，像这样内外花括号 可以使 元素书小于定义数时 编译器自动以 0 填充<br>\n如果省略内部花括号 编译器会按照先后顺序逐行初始化 直到用完所有的值，后面没有初始化元素被统一初始化为 0</p>\n<h5 id=\"其他多维数组\"><a class=\"markdownIt-Anchor\" href=\"#其他多维数组\">#</a> 其他多维数组</h5>\n<p>三维数组: int box [10][20][30];<br>\n 一维数组是一行数据 二维数组是数据表 三维数组是一叠数据表<br>\n处理几维数组就需要使用到几维嵌套循环</p>\n<h4 id=\"指针和数组\"><a class=\"markdownIt-Anchor\" href=\"#指针和数组\">#</a> 指针和数组</h4>\n<p>系统中 地址按字节编扯，short 类型占用 2 字节等；在 C 中 指针加 1 指的是增加一个存储单元。对数组而言 这意味着 + 1 后的地址是下一个元素的地址；而不是下一个字节的地址 这卆为什么必须声明指针所指对象类型的原因之一 自算计要知道存储对象需要多少字节</p>\n<blockquote>\n<pre><code>dates+2 == &amp;dates[2];\n*(dates+2) ==dates[2];\n</code></pre>\n</blockquote>\n<p>** 注意间接运算符 * 的优先级要大于 +** 所以这里必须打括号</p>\n<p>例如数组名是 days   那么 days 也表示数组首元素的地址</p>\n<h4 id=\"函数数组和指针\"><a class=\"markdownIt-Anchor\" href=\"#函数数组和指针\">#</a> 函数，数组和指针</h4>\n<blockquote>\n<pre><code>int sum(int * ar,int n)\n{\nint i;\nint total 0;\nfor(i=0;i&lt;n;i++)\ntotal +=ar[i] 或者 *( ar + i );\nreturn total;\n}\n</code></pre>\n</blockquote>\n<p>第一个形参告诉该函数数组的地址和数据类型 第二个形参告诉函数该数组中的元素个数<br>\n关于函数的形参 还有一点要注意 只有在函数原型或函数定义头中才可以用 int ar [] 来代替 int * ar;<br>\nint * ar 和 int ar [] 都表示 ar 是一个指向 int 的指针 但是 int ar [] 只能用于声明形式函数但是他可以提醒读者 ar 指向的不仅仅是一个 int 类型值还是一个 int 类型数组的元素<br>\n函数原型可以省略参数名<br>\n但是在函数定义中不能省略参数名<br>\n我们的系统中用 8 字节存储地址 所以指针变量的大小是 8 字节 (其他系统中地址的大小可能不是 8 字节)</p>\n<h5 id=\"使用指针形参\"><a class=\"markdownIt-Anchor\" href=\"#使用指针形参\">#</a> 使用指针形参</h5>\n<p>函数要处理数组必须知道何时开始，何时结束<br>\n上面 sum 函数用一个整数形参表示待处理元素的元素个数和数据类型 但是这并不是给函数传递必备信息的唯一方法<br>\n还有一种方法是传递两个指针 第 1 个指针指明数组的开始处 (与前面用法相同), 第 2 个指针指明数组的结束处.</p>\n<blockquote>\n<pre><code>#include &lt;stdio.h&gt;\n#define SIZE 10\nint sump(int * start, int * end);\nint main(void)\n{\n    int marbles[SIZE] = {20,10,5,39,4,16,19,26,31,20};\n    long answer;\n    \n    answer = sump(marbles, marbles + SIZE);\n    printf(\"The total number of marbles is %ld.\\n\", answer);\n                                                                    \n    return 0;\n}\n\n/* use pointer arithmetic   */\nint sump(int * start, int * end)\n{\n    int total = 0;\n    \n    while (start &lt; end)\n    {\n        total += *start; // add value to total\n        start++;         // advance pointer to next element\n    }\n                                                                    \n    return total;\n}\n</code></pre>\n</blockquote>\n<p>指针 start 指向 marbles 数组的首元素 所以赋值表达式 total += *start 把首元素 (20) 加给 total 然后表达式 start++ 递增指针变量 start 使其指向数组的下一个元素 因为 start 是指向 int 的指针 start 递增 1 相当于其值递增 int 类型的大小<br>\n注意这里 sump () 函数用另一种方法结束加法循环 sump () 函数使用第二个指针 start &lt; end 来结束循环<br>\n whild 循环的测试条件是一个不相等的关系 所以循环最后处理的一个元素是 end 所指向位置的前一个元素 这意味着 end 指向的位置实际上在数组最后一个元素后面 C 保证在给数组分配空间时 之下宁数组后面第一个位置的指针仍然是有效的指针 这使得 while 循环的测试条件是有效的，因为 start 在循环最后的值是 end<br>\nanswer = sump(marbles, marbles + SIZE);<br>\n 下标从 0 开始 marbles+SIZE 指向数组末尾的下一个位置 如果 end 指向数组的最后一个元素而不是数组末尾的下个位置 则必须 - 1<br>\n 这种写法不简洁也不好记 很容易导致标称错误<br>\n **C 语言虽然保证了 marbles+SIZE 有效 但是对 marbles [SIZE](即存储在该位置上的值) 未作任何保证 所以程序不能访问该位置<br>\n循环体可以压缩成一行代码 total += *start++;<br>\n* 和 ++ 的优先级相同 结合律是从右往左 所以 start++ 先求值 然后才是 * start 也就是说 start 先递增后指向 使用后缀形式 start++ 而不是 ++start 意味着先把指针指向位置上的值加到 total 上然后再递增指针切记 (*start)++ 是完全错误的这表示先使用 start 指向的指 然后再递增该值 而不是递增指针 这样指针将一直指向同一个位置 但是在该位置上的值发生了变化 虽然 * start++ 的写法比较常用 但是 *(start++) 这样写更清楚</p>\n<h5 id=\"指针表示法和数组表示法\"><a class=\"markdownIt-Anchor\" href=\"#指针表示法和数组表示法\">#</a> 指针表示法和数组表示法</h5>\n<p>对于 C 语言而言 ar [i\\ 和 *(ar + i) 这两个表达式都是等价的无论 ar 是数组名还是指针变量 这两个表达式都没问题 但是只要有当 ar 是指针变量的时候才能使用 arr++ 这样的表达式<br>\n指针表示法更接近机器语言 因此一些编译器在编译时能生成效率更高的代码</p>\n<h4 id=\"指针操作\"><a class=\"markdownIt-Anchor\" href=\"#指针操作\">#</a> 指针操作</h4>\n<p><strong>赋值</strong>：可以把地址赋给指针 注意地址应该和指针类型兼容 也就是说不能把 double 类型的地址赋给指向 int 的指针至少要避免不明智的类型转换 C99/C11 已经不云讯这样做<br>\n<strong>解引用</strong>:* 运算符给出指针指向地址上存储的值<br>\n<strong>取址</strong>：和所有变量一样指针变量也有自己的地址和值 同样使用 &amp; 给出指针本身的地址<br>\n<strong>指针和整数相加</strong>：可以使用 + 运算符把指针和整数相加 或整数和指针相加 无论哪种情况 整数都会和指针指向类型的大小 (以字节为单位) 相乘然后把结果和初始位置相加 如果相加的结果超出了初始指针指向的数组范围 计算结果则是未定义的 除非正好超过数组末尾第一个位置<br>\n<strong>递增指针</strong>：递增指向数组元素的指针可以让该指针移动至数组的下一个元素，但是指针自己的地址是不会发生变化的毕竟变量不会因为值发生变化就移动位置<br>\n<strong>指针减去一个整数</strong>：大概和加法相同 但是这里和加法不同 <strong>指针必须是第 1 个运算对象 整数是第 2 个运算对象</strong><br>\n<strong>递减指针</strong>：类比递增指针<br>\n<strong>指针求差</strong>：通常求差的两个指针分别指向同一个数组的不同元素，通过计算求出两元素之间的距离 差值的单位和数组类型的单位相同 只要两个指针都指向相同的数组 (或者其中一个指针指向数组后面的第 1 个地址) C 都能保证相减运算有效<br>\n<strong>比较</strong>使用关系运算符可以比较两个指针的值 前提是两个指针都指向相同类型的对象<br>\n<strong> FBI WARNING 注意注意注意注意注意注意注意注意注意注意 FBI WARNING</strong><br>\n 这里的减法有两种 一个指针减去另一个指针得到一个整数 或者用一个指针减去一个整数得到另一个指针<br>\n递增递减指针时还要注意一些问题 编译器不会检查指针是否指向数组元素 C 只能保证指向数组任意元素的指针和指向数组后面第一个位置的指针有效。但是如果递增或者递减一个指针后超出了这个范围则是未定义的 另外 可以解引用指向数组任意元素的指针但是即使指针指向数组后面一个位置是有效的也不能保证可以解引用这样的越界指针<br>\n创建一个指针时 系统只分配了存储指针本身的内存 并未分配存储数据的内存在使用指针之前必须先用已分配的地址初始化它</p>\n<h4 id=\"处理数组中的数据\"><a class=\"markdownIt-Anchor\" href=\"#处理数组中的数据\">#</a> 处理数组中的数据</h4>\n<p>C 通常都按值传递数据 因为这样做可以保证数据的完整性 如果函数使用的是原始数据的副本 就不会意外修改原始数据 但是处理数组的函数通常都需要使用原始数据因此这样的函数可以修改原数组 有时这正是我们需要的<br>\n然而其他函数并不需要修改数据 这样变成错误就可能会破坏原始数据</p>\n<h5 id=\"对形式参数使用const\"><a class=\"markdownIt-Anchor\" href=\"#对形式参数使用const\">#</a> 对形式参数使用 const</h5>\n<p>ANSI C 提供了一种预防手段 如果函数的意图不是修改数组中的数据内容 那么在函数原型和函数定义中声明形式参数时使用关键字 const<br>\n 这样如果在函数中不小心使用了错误的表达式使原数组发生了改变，编译器会捕获这个错误并且生成一条错误信息.<br>\n 使用 const 并不是要求原数组是常量而是该函数在处理数组时将其视为常量不可更改<br>\n一般而言如果编写的函数不用修改数组 那么在声明数组形参时最好使用 const</p>\n<h5 id=\"const的其他内容\"><a class=\"markdownIt-Anchor\" href=\"#const的其他内容\">#</a> const 的其他内容</h5>\n<p>虽然用 #define 指令可以创建类似功能的符号常量 但是 const 的用法更加灵活 可以创建 const 数组 const 指针和指向 const 的指针<br>\n指向 const 的指针通常用语函数形参中 表明该函数不会使用指针改变数据<br>\n把 const 数据或非 const 数据的地址初始化为指向 const 的指针或为其赋值是合法的<br>\n然后只能把非 const 数据的地址赋给普通指针<br>\n因此对函数的形参使用 const 不仅能保护数据 还能让函数处理 const 数组<br>\n C 标准规定使用非 const 标识符改修 const 数据导致的结果是未定义的<br>\n const 还可以声明并初始化一个<strong>不能指向别处</strong>的指针</p>\n<blockquote>\n<pre><code>double rates[5] = {};\ndouble * const pc = rates;\npc = &amp;rates[2]; 不逊于 因为该指针不能指向别处\n</code></pre>\n</blockquote>\n<p>可以用这种指针修改它所指向的值 但是它只能指向初始化时设置的地址</p>\n<blockquote>\n<pre><code>const double * const pc = rates;\n</code></pre>\n</blockquote>\n<p>在创建指针时使用两次 const 该指针既不能更改他所指向的地址 也不能更改它所指向地址上的值</p>\n<h4 id=\"指针和多维数组\"><a class=\"markdownIt-Anchor\" href=\"#指针和多维数组\">#</a> 指针和多维数组</h4>\n<blockquote>\n<pre><code>int zippo[4][2];  /内涵int数组的数组/\n</code></pre>\n</blockquote>\n<ol>\n<li>数组名 zippo 是该数组首元素的地址 zippo 的首元素一个内含 2 个 int 值得数组 所以 zippo 是这个内涵两个 int 值的数组的地址</li>\n<li>zippo 是数组首元素的地址 zippo [0] 那么就是数组首元素数组的首元素的值 zippo [0] 是一个占用一个 int 大小对象的地址 而 zippo 是一个占用两个 int 大小对象的地址 由于这个整数和内涵两个整数的数组都开始与同一个地址所以 zippo 和 zippo [0] 的值相同</li>\n<li>给指针或地址加 1 其值会增加对应类型的大小 <strong>在这方面 zippo 和 zippo [0] 不同</strong> 因为 zippo 指向的对象占用了两个 int 大小 而 zippo [0] 指向的的对象只占用一个 int 大小</li>\n<li>在解引用一个指针或在数组名后使用带下标的 [] 运算符，得到解引用对象代表的值 *zippo 代表的是 zippo 首元素的值 而 zippo 首元素的值是一个数组那么这个数组的值就是 zippo 首元素数组的首元素的地址 这样来说 **zippo 和 *&amp;zippo [0][0] 等价简而言之 zippo 是地址的地址，必须解引用两次才能获得原始值 地址的地址 或者指针的指针就是双重间接</li>\n</ol>\n<blockquote>\n<pre><code>#include &lt;stdio.h&gt;\nint main(void)\n{\n     int zippo[4][2] = { { 2, 4 }, { 6, 8 }, { 1, 3 }, { 5, 7 } };\n\n     printf(\"   zippo = %p,    zippo + 1 = %p\\n\",zippo, zippo + 1);\n     printf(\"zippo[0] = %p, zippo[0] + 1 = %p\\n\",zippo[0], zippo[0] + 1);\n     printf(\"  *zippo = %p,   *zippo + 1 = %p\\n\",*zippo, *zippo + 1);\n     printf(\"zippo[0][0] = %d\\n\", zippo[0][0]);\n     printf(\"  *zippo[0] = %d\\n\", *zippo[0]);\n     printf(\"    **zippo = %d\\n\", **zippo);\n     printf(\"      zippo[2][1] = %d\\n\", zippo[2][1]);\n     printf(\"*(*(zippo+2) + 1) = %d\\n\", *(*(zippo + 2) + 1));\n                                                                \n     return 0;\n}\n</code></pre>\n</blockquote>\n<p><strong>完整理解整个程序的输出结果</strong><br>\n特别注意与 zippo [2][1] 等价的指针表示法是 *(*(zippo+2)+1)<br>\n 这张视图演示了数组地址 数组内容和指针之间的关系<br>\n<a href=\"https://imgtu.com/i/Ic4B0s\"><img src=\"https://z3.ax1x.com/2021/11/14/Ic4B0s.png\" alt=\"Ic4B0s.png\"></a></p>\n<h5 id=\"指向多维数组的指针\"><a class=\"markdownIt-Anchor\" href=\"#指向多维数组的指针\">#</a> 指向多维数组的指针</h5>\n<blockquote>\n<pre><code>int (*pz) [2]  //表示pz指向一个内含两个int类型值得数组\n</code></pre>\n</blockquote>\n<p>以上代码把 pz 声明为指向一个数组的指针 该数组含有两个 int 类型值<br>\n<strong>括号的原因是 [] 的优先级高于 *</strong></p>\n<blockquote>\n<pre><code>int * pax[2]   此时pax是一个内涵两个指针元素的数组 每个元素都指向int的指针\n</code></pre>\n</blockquote>\n<hr>\n<blockquote>\n<pre><code>#include &lt;stdio.h&gt;\nint main(void)\n{\n     int zippo[4][2] = { { 2, 4 }, { 6, 8 }, { 1,   &gt;     3 }, { 5, 7 } };\n     int(*pz)[2];\n     pz = zippo;\n\n     printf(\"   pz = %p,    pz + 1 = %p\\n\",    pz,   &gt;     pz + 1);\n     printf(\"pz[0] = %p, pz[0] + 1 = %p\\n\",    pz  &gt;     [0], pz[0] + 1);\n     printf(\"  *pz = %p,   *pz + 1 = %p\\n\",      &gt;     *pz, *pz + 1);\n     printf(\"pz[0][0] = %d\\n\", pz[0][0]);\n     printf(\"  *pz[0] = %d\\n\", *pz[0]);\n     printf(\"    **pz = %d\\n\", **pz);\n     printf(\"      pz[2][1] = %d\\n\", pz[2][1]);\n     printf(\"*(*(pz+2) + 1) = %d\\n\", *(*(pz + 2) +   &gt;     1));\n                                                                \n     return 0;\n}\n</code></pre>\n</blockquote>\n<p>虽然 pz 是一个指针 不是数组名但是也可以用 pz [2][1] 这样的写法 可以用数组表示法或指针表示法来表示一个数组元素 既可以用数组名 也可以用指针名</p>\n<h5 id=\"指针的兼容性\"><a class=\"markdownIt-Anchor\" href=\"#指针的兼容性\">#</a> 指针的兼容性</h5>\n<p>指针之间的赋值比数值类型之间的赋值要严格<br>\n不用类型转换就可以吧 int 类型的值赋给 double 类型的变量但是两个类型的指针不能这样做</p>\n<blockquote>\n<pre><code>int x = 20;\nconst int y = 23;\nint * p1 = &amp;x;\nconst int * p2 = &amp;y;\nconst int ** pp2;\np1 = p2;        // 不安全 -- 把const指针赋给非const指针\np2 = p1;        // 有效 -- 把非const指针赋给const指针\npp2 = &amp;p1;      // 不安全 –- 嵌套指针类型赋值\n</code></pre>\n</blockquote>\n<hr>\n<blockquote>\n<pre><code>int * pt;\nint (*pa)[3];\nint ar1[2][3];\nint ar2[3][2];\nint **p2;    // 一个指向指针的指针\n</code></pre>\n</blockquote>\n<hr>\n<blockquote>\n<pre><code>pt = &amp;ar1[0][0];     // 都是指向int的指针\npt = ar1[0];         // 都是指向int的指针\npt = ar1;            // 无效\npa = ar1;            // 都是指向内含3个int类型元素数组的指针\npa = ar2;            // 无效\np2 = &amp;pt;            // 都是指向int *的指针\n*p2 = ar2[0];        // 都是指向int的指针\np2 = ar2;            // 无效\n</code></pre>\n</blockquote>\n<p>理解以上的代码</p>\n<h5 id=\"函数和多维数组\"><a class=\"markdownIt-Anchor\" href=\"#函数和多维数组\">#</a> 函数和多维数组</h5>\n<p>编写一个处理二维数组的函数 一种方法是 利用 for 循环把处理一维数组的函数应用到二维数组的每一行</p>\n<blockquote>\n<pre><code>int junk[3][4] = {{2,4,5,8},{3,5,6,9},{12,10,8,6}};\nint i ,j;\nint total = 0;\nfor(i=0;i&lt;3;i++) \ntotal +=sum(junk[i],4);\n</code></pre>\n</blockquote>\n<p>junk 是二维数组 那么 junk [i] 就是一堆数组 可将其视为二维数组的一行 sum () 函数计算二维数组的每行的综合 然后 for 循环再把每行的总和加起来<br>\n这种方法无法记录行和列的信息 用这种方法计算总和  行和列的信息并不重要 但如果每行代表一年 每列代表一个月 就还需要一个函数计算某列的综合 可以通过声明正确的形参变量来完成 以便函数能正确地传递数组</p>\n<blockquote>\n<pre><code>void somefunction(int (*pt)[4]);\nvoid somefunction(int pt[][4]);  //当且仅当pt是一个函数的形式参数时可以这样声明\n</code></pre>\n</blockquote>\n<p>第一个方括号是空的  表示 pt 是一个指针</p>\n<blockquote>\n<pre><code>// array2d.c -- 处理二维数组的函数\n#include &lt;stdio.h&gt;\n#define ROWS 3\n#define COLS 4\nvoid sum_rows(int ar[][COLS], int rows);\nvoid sum_cols(int [][COLS], int);        // 省略形参名，没问题\nint sum2d(int(*ar)[COLS], int rows);     // 另一种语法\nint main(void)\n{\n     int junk[ROWS][COLS] = {\n               { 2, 4, 6, 8 },\n               { 3, 5, 7, 9 },\n               { 12, 10, 8, 6 }\n     };\n\n     sum_rows(junk, ROWS);\n     sum_cols(junk, ROWS);\n     printf(\"Sum of all elements = %d\\n\", sum2d(junk, ROWS));\n                                                                \n     return 0;\n}\n\nvoid sum_rows(int ar[][COLS], int rows)\n{\n     int r;\n     int c;\n     int tot;\n\n     for (r = 0; r &lt; rows; r++)\n     {\n          tot = 0;\n          for (c = 0; c &lt; COLS; c++)\n               tot += ar[r][c];\n          printf(\"row %d: sum = %d\\n\", r, tot);\n     }\n}\n\nvoid sum_cols(int ar[][COLS], int rows)\n{\n     int r;\n     int c;\n     int tot;\n\n     for (c = 0; c &lt; COLS; c++)\n     {\n          tot = 0;\n          for (r = 0; r &lt; rows; r++)\n               tot += ar[r][c];\n          printf(\"col %d: sum = %d\\n\", c, tot);\n     }\n}\n\nint sum2d(int ar[][COLS], int rows)\n{\n     int r;\n     int c;\n     int tot = 0;\n\n     for (r = 0; r &lt; rows; r++)\n          for (c = 0; c &lt; COLS; c++)\n               tot += ar[r][c];\n                                                                \n     return tot;\n}\n</code></pre>\n</blockquote>\n<hr>\n<p>输出结果</p>\n<blockquote>\n<pre><code>row 0: sum = 20\nrow 1: sum = 24\nrow 2: sum = 36\ncol 0: sum = 17\ncol 1: sum = 19\ncol 2: sum = 21\ncol 3: sum = 23\nSum of all elements = 80\n</code></pre>\n</blockquote>\n<p>一般而言 声明一个指向 N 维数组的指针时只能省略最左边方括号中的值<br>\n第一个方括号只用于表示这是一个指针 而其他方括号则用于描述指针所指向数据对象的类型</p>\n<h4 id=\"变长数组vla\"><a class=\"markdownIt-Anchor\" href=\"#变长数组vla\">#</a> 变长数组 (VLA)</h4>\n<p>是否发现上面在处理二维数组的函数中 只把数组的行数作为函数的形参 而列数却内置在函数体内<br>\n因为 C 规定 数组的位数必须是常量 不能用变量来代替常量<br>\n C99 新增了变长数组 允许使用变量表示数组的维度</p>\n<blockquote>\n<pre><code>int a = 4;\nint b = 5;\ndouble sales[a][b];  //一个变长数组\n</code></pre>\n</blockquote>\n<p>变长数组有一些限制 变长数组必须是自动存储类别 这意味着无论在函数中声明还是作为函数形参声明 都不能使用 static 和 extern 存储类别说明符 并且不能在声明中初始化他们<br>\n变长数组中的变 不是指可以修改已经创建数组的大小 而是 在创建数组时，可以使用变量指定数组的维度<br>\n声明一个带二维变长数组参数的函数</p>\n<blockquote>\n<pre><code>int sum2d(int row,int cols, int ar [rows][cols])   //有效\nint sum2d(int ar [rows][cols],int cols, int row)   //无效\n</code></pre>\n</blockquote>\n<p>因为 row 和 cols 用做第三个形参二维数组 ar 的两个维度 ar 的声明要使用 rows 和 cols 所以在形参列表中必须在声明 ar 之前先声明这两个形参<br>\n C99/C11 标准规定 可以省略原型中的形参名 但是在这种情况下必须用型号来代替省略的维度</p>\n<blockquote>\n<pre><code>int sum2d(int,int,int ar[*][*]);\n</code></pre>\n</blockquote>\n<p>函数定义的形参列表中表明的变长数组并未实际创建数组<br>\n变长数组实际上是一个指针 这说明变长数组形参的函数实际上实在原始数组中处理数组 因此可以修改传入的数组</p>\n<h5 id=\"const和数组大小\"><a class=\"markdownIt-Anchor\" href=\"#const和数组大小\">#</a> const 和数组大小</h5>\n<p>是否可以在声明数组时使用 const 变量？</p>\n<blockquote>\n<pre><code>const int SZ = 80;\ndouble ar[SZ];\n</code></pre>\n</blockquote>\n<p>C99/C11 标准允许在声明变长数组时使用 const 常量 所以该数组的定义必须是声明在块中的自动存储类别数组.</p>\n<h4 id=\"复合字面量\"><a class=\"markdownIt-Anchor\" href=\"#复合字面量\">#</a> 复合字面量</h4>\n<p>字面量是除符号常量外的常量 例如 5 是 int 类型字面量 81.3 是 double 类型字面量 'Y’是 char 类型的字面量 \"elephant\" 是字符串类型的字面量<br>\n对于数组 复合字面量类似数组初始化列表 前面是用括号括起来的类型名</p>\n<blockquote>\n<pre><code>int diva[2] = {10,20};   \n(int [2]){10,20}   //复合自变量\n</code></pre>\n</blockquote>\n<p>int [2] 就是复合字面量的类型名<br>\n初始化复合字面量可以省略大小 编译器会自动计算数组当前的元素个数</p>\n<blockquote>\n<pre><code>(int []){50,20,90}\n</code></pre>\n</blockquote>\n<p>复合字面量是匿名的 所以不能先创建然后再使用他 必须在创建的同意使用他 使用指针记录地址就是一种用法</p>\n<blockquote>\n<pre><code>int * pt1;\npt1 = (int [2]){10,20}\n</code></pre>\n</blockquote>\n<p>该复合字面量的字面常量和上面创建的 diva 数组的字面常量完全相同 复合字面量的类型名也代表首元素的地址<br>\n还可以把复合字面量作为实际参数传递给带有匹配形式参数的函数</p>\n<blockquote>\n<pre><code>total = sum((int[]){4,4,4,5,5,5},6)\n</code></pre>\n</blockquote>\n<p>这种用法的好处是 把信息传入函数前不必先创建数组 这是复合字面量的典型用法<br>\n该用法应用于二维数组或者多维数组</p>\n<blockquote>\n<pre><code>int (*pt2)[4];\nptr2 = (int [2][4]) {{1,2,3,-9},{4,5,6,-8}};\n</code></pre>\n</blockquote>\n<p>演示了如何创建二维 int 数组并存储其地址<br>\n复合字面量是提供至临时需要的值得一种手段 复合字面量具有块作用域，这意味着一旦离开定义复合字面量的块 程序将无法保证该字面量是否存在 也就是说 复合字面量的定义在最内层的花括号中</p>\n<h4 id=\"数组关键概念\"><a class=\"markdownIt-Anchor\" href=\"#数组关键概念\">#</a> 数组关键概念</h4>\n<p>数组用于存储相同类型的数据。C 把数组看作是派生类型，因为数组是建立在其他类型的基础上。也就是说，无法简单地声明一个数组。在声明数组时必须说明其元素的类型，如 int 类型的数组、float 类型的数组，或其他类型的数组。所谓的其他类型也可以是数组类型，这种情况下，创建的是数组的数组（或称为二维数组）。</p>\n<p>通常编写一个函数来处理数组，这样在特定的函数中解决特定的问题，有助于实现程序的模块化。在把数组名作为实际参数时，传递给函数的不是整个数组，而是数组的地址（因此，函数对应的形式参数是指针）。为了处理数组，函数必须知道从何处开始读取数据和要处理多少个数组元素。数组地址提供了 “地址”，“元素个数” 可以内置在函数中或作为单独的参数传递。第 2 种方法更普遍，因为这样做可以让同一个函数处理不同大小的数组。</p>\n<p>数组和指针的关系密切，同一个操作可以用数组表示法或指针表示法。它们之间的关系允许你在处理数组的函数中使用数组表示法，即使函数的形式参数是一个指针，而不是数组。</p>\n<p>对于传统的 C 数组，必须用常量表达式指明数组的大小，所以数组大小在编译时就已确定。C99/C11 新增了变长数组，可以用变量表示数组大小。这意味着变长数组的大小延迟到程序运行时才确定。</p>\n<h4 id=\"数组小结\"><a class=\"markdownIt-Anchor\" href=\"#数组小结\">#</a> 数组小结</h4>\n<p>数组是一组数据类型相同的元素。数组元素按顺序存储在内存中，通过整数下标（或索引）可以访问各元素。在 C 中，数组首元素的下标是 0，所以对于内含 n 个元素的数组，其最后一个元素的下标是 n-1。作为程序员，要确保使用有效的数组下标，因为编译器和运行的程序都不会检查下标的有效性。<br>\n声明一个简单的一维数组形式如下：</p>\n<blockquote>\n<pre><code>type name [ size ];\n</code></pre>\n</blockquote>\n<p>这里，type 是数组中每个元素的数据类型，name 是数组名，size 是数组元素的个数。对于传统的 C 数组，要求 size 是整型常量表达式。但是 C99/C11 允许使用整型非常量表达式。这种情况下的数组被称为变长数组。</p>\n<p>C 把数组名解释为该数组首元素的地址。换言之，数组名与指向该数组首元素的指针等价。概括地说，数组和指针的关系十分密切。如果 ar 是一个数组，那么表达式 ar [i] 和 *(ar+i) 等价。</p>\n<p>对于 C 语言而言，不能把整个数组作为参数传递给函数，但是可以传递数组的地址。然后函数可以使用传入的地址操控原始数组。如果函数没有修改原始数组的意图，应在声明函数的形式参数时使用关键字 const。在被调函数中可以使用数组表示法或指针表示法，无论用哪种表示法，实际上使用的都是指针变量。</p>\n<p>指针加上一个整数或递增指针，指针的值以所指向对象的大小为单位改变。也就是说，如果 pd 指向一个数组的 8 字节 double 类型值，那么 pd 加 1 意味着其值加 8，以便它指向该数组的下一个元素。</p>\n<p>二维数组即是数组的数组。例如，下面声明了一个二维数组：</p>\n<blockquote>\n<pre><code>double sales[5][12];\n</code></pre>\n</blockquote>\n<p>该数组名为 sales，有 5 个元素（一维数组），每个元素都是一个内含 12 个 double 类型值的数组。第 1 个一维数组是 sales [0]，第 2 个一维数组是 sales [1]，以此类推，每个元素都是内含 12 个 double 类型值的数组。使用第 2 个下标可以访问这些一维数组中的特定元素。例如，sales [2][5] 是 slaes [2] 的第 6 个元素，而 sales [2] 是 sales 的第 3 个元素。</p>\n<p>C 语言传递多维数组的传统方法是把数组名（即数组的地址）传递给类型匹配的指针形参。声明这样的指针形参要指定所有的数组维度，除了第 1 个维度。传递的第 1 个维度通常作为第 2 个参数。例如，为了处理前面声明的 sales 数组，函数原型和函数调用如下：</p>\n<blockquote>\n<pre><code>void display(double ar[][12], int rows);\n...\ndisplay(sales, 5);\n</code></pre>\n</blockquote>\n<p>变长数组提供第 2 种语法，把数组维度作为参数传递。在这种情况下，对应函数原型和函数调用如下：</p>\n<blockquote>\n<pre><code>void display(int rows, int cols, double ar[rows][cols]);\n...\ndisplay(5, 12, sales);\n</code></pre>\n</blockquote>\n<p>虽然上述讨论中使用的是 int 类型的数组和 double 类型的数组，其他类型的数组也是如此。然而，字符串有一些特殊的规则，这是由于其末尾的空字符所致。有了这个空字符，不用传递数组的大小，函数通过检测字符串的末尾也知道在何处停止。我们将在第 11 章中详细介绍。</p>\n<h3 id=\"第十一章字符串和字符串函数\"><a class=\"markdownIt-Anchor\" href=\"#第十一章字符串和字符串函数\">#</a> 第十一章字符串和字符串函数</h3>\n<h4 id=\"表示字符串和字符串io\"><a class=\"markdownIt-Anchor\" href=\"#表示字符串和字符串io\">#</a> 表示字符串和字符串 I/O</h4>\n<p>字符串是以空字符 (\\o) 结尾的 char 类型数组</p>\n<blockquote>\n<pre><code>#include &lt;stdio.h&gt;\n#define MSG \"I am a symbolic string constant.\"\n#define MAXLENGTH 81\nint main(void)\n{\n     char words[MAXLENGTH] = \"I am a string in an array.\";\n     const char * pt1 = \"Something is pointing at me.\";\n     puts(\"Here are some strings:\");\n     puts(MSG);\n     puts(words);\n     puts(pt1);\n     words[8] = 'p';\n     puts(words);\n\n     return 0;\n}\n</code></pre>\n</blockquote>\n<p>和 printf () 函数相同 puts () 函数也属于 stdio.h 系列的输出 / 输出函数 但是和 printf () 不同的是 puts () 函数只显示字符串 而且自动在显示的字符串末尾加上换行符</p>\n<h5 id=\"在程序中定义字符串\"><a class=\"markdownIt-Anchor\" href=\"#在程序中定义字符串\">#</a> 在程序中定义字符串</h5>\n<h6 id=\"1字符串字面量字符串常量\"><a class=\"markdownIt-Anchor\" href=\"#1字符串字面量字符串常量\">#</a> 1. 字符串字面量 (字符串常量)</h6>\n<p>字符串字面量 (字符串常量): 用双引号括起来的内容 双引号中的字符和编译器自动加入末尾的 \\O 字符 都作为字符串存储在内存中<br>\n从 ANSI C 标准起 如果字符串字面量之间没有间隔 或者用空白字符分隔 C 会将其视为串联起来的字符串常量</p>\n<blockquote>\n<pre><code>char greeting[50] = \"Hello,and\"\"how are\"  \" you\"\n                     \"\" today!\" ;\nchar greeting [50] = \"Hello,and how are you today!\"\n\n&gt; 这两行代码是等价的\n</code></pre>\n</blockquote>\n<p>如果要在字符串内部使用双引号 必须要在双引号前面加上一个反斜杠 (\\)<br>\n 字符串常量属于<strong>静态存储类别</strong>，这说明 如果在函数中使用字符串常量 该字符串只会被存储一次 在整个程序的生命周期内存在 即使函数被调用多次 用双引号括起来的内容被视为指向该字符串存储位置的指针。类似于把数组名作为指向该数组位置的指针</p>\n<blockquote>\n<pre><code>#include &lt;stdio.h&gt;\nint main(void)\n{\n     printf(\"%s, %p, %c\\n\", \"We\", \"are\", *\"space farers\");\n\n     return 0;\n}\n</code></pre>\n</blockquote>\n<p>% s 打印 We 根据 % p 转换说明打印一个地址 *\"space farers\" 表示该字符串所指向地址所存储的值 应该是字符串 \"space farers\" 的首字符</p>\n<h6 id=\"2字符串数组和初始化\"><a class=\"markdownIt-Anchor\" href=\"#2字符串数组和初始化\">#</a> 2. 字符串数组和初始化</h6>\n<p>定义字符串数组时 必须让编译器知道需要多少空间 一种方法是用足够空间的数组 存储字符串</p>\n<blockquote>\n<pre><code>const char m1[40] = \"Limit yourself to one line's worth.\";\n</code></pre>\n</blockquote>\n<p>这种形式的初始化比标准的数组初始化形式简单得多</p>\n<blockquote>\n<pre><code>const char m1[40] = { 'L','i', 'm', 'i', 't', ' ', 'y', 'o', 'u', 'r', 's', 'e', 'l',\n                      'f', ' ', 't', 'o', ' ', 'o', 'n', 'e', ' ','l', 'i', 'n', 'e',   \n                      '\\', 's', ' ', 'w', 'o', 'r','t', 'h', '.', '\\0'\n};\n</code></pre>\n</blockquote>\n<p>注意最后的空字符 没有这个空字符 这就不是一个字符串 而是一个字符数组<br>\n在指定数组大小时候要确保数组的元素个数至少比字符串长度多 1 (为了容纳空字符) 所有违背使用的元素都被自动化初始为 \\0 空字符<br>\n省略数组初始化声明中的大小编译器会自动计算数组的大小<br>\n处理字符串的函数通常都不知道数组的大小 这些函数通过查找字符串末尾的空字符确定字符串在何处结束<br>\n让编译器计算输的的大小只能用在初始化数组时。如果创建一个稍后再填充的数组 就必须在声明时指定大小。声明数组时数组大小 IXUS 是可求值得整数 在 CC 新增变长数组迁 数组的大小必须是整型变量 包括由整型变量组成的表达式</p>\n<p>字符数组名和其他数组名一样 是该数组首元素的地址</p>\n<p>同时还可以使用指针表示法创建字符串</p>\n<blockquote>\n<pre><code>const char * pt1 =\"yogmas best\";\nconst char ar1[] = \"yogmas best\";\n</code></pre>\n</blockquote>\n<p>这两个声明几乎相同<br>\n以上两个声明表示 pt1 和 ar1 都是该字符串的地址 在这两种情况下 带双引号的字符串本身决定了鱼类给字符串的存储空间 尽管如此 这两种形式并不完全相同</p>\n<h6 id=\"3数组和指针\"><a class=\"markdownIt-Anchor\" href=\"#3数组和指针\">#</a> 3. 数组和指针</h6>\n<p>数组形式和指针形式有一些不同点<br>\n数组形式：数组形式在计算机的内存中分配一个数组 (每个元素对应一个字符 再加上一个末尾的空字符), 每个元素被初始化为字符串字面量对应的字符.<br>\n 字符串都作为可执行文件的一部分存储在数据段中 当把程序载入内存时 也载入了了程序中的字符串 字符串存储在静态存储区中<br>\n程序在开始运行时 才为该数组分配内存 此时 才将字符串拷贝到数组中<br>\n此时字符串有两个副本 一个是在静态内存中的字符串字面量 另一个是存储在数组中的字符串<br>\n编译器把数组名识别为该数组首元素地址的别名 这以为着在数组形式中数组名是字符常量 不能更改 如果改变了就意味着改变了数组的存储位置 可以进行类似 ar1+1 这样的操作 表示数组的下一个元素 但是不允许进行 ++ar1 这样的操作 递增运算符只能用于变量名前</p>\n<p>指针形式：指针形式是的编译器为字符串在静态存储区预留 29 个元素的空间 另外一旦开始执行程序 他会为<strong>指针变量</strong>留出一个存储位置 并把字符串的地址存储在指针变量中 该变量最初指向该字符串的首字符但是它的值可以改变 因此可以使用递增运算符<br>\n<strong>字符串字面量被视为 const 数据</strong></p>\n<h5 id=\"指针和字符串\"><a class=\"markdownIt-Anchor\" href=\"#指针和字符串\">#</a> 指针和字符串</h5>\n<p>字符串的绝大多数操作都是通过指针完成的</p>\n<blockquote>\n<pre><code>#include &lt;stdio.h&gt;\nint main(void)\n{\n     const char * mesg = \"Don't be a fool!\";\n     const char * copy;\n\n     copy = mesg;\n     printf(\"%s\\n\", copy);\n     printf(\"mesg = %s; &amp;mesg = %p; value = %p\\n\", mesg, &amp;mesg, mesg);\n     printf(\"copy = %s; &amp;copy = %p; value = %p\\n\", copy, &amp;copy, copy);\n                                                                \n     return 0;\n}\n</code></pre>\n<p>如果编译器不识别 % p 用 % u 或者 % lu 来代替<br>\n字符串形式输出用 % s 转换说明<br>\n因为最后 mesg 和 copy 指针输出的值是一样的 即两个指针指向地址是一样的 这说明程序并未拷贝字符串 copy=mesg 仅仅把 mesg 的值即 mesg 存储的地址赋值给 copy 让 copy 也指向这一个地址<br>\n不拷贝整个字符串的原因是因为这样做更具有效率 如果一定要拷贝字符串可以使用 **strcpy () 和 strncpy ()** 函数，后续会介绍这两个函数</p>\n</blockquote>\n<h4 id=\"字符串输入\"><a class=\"markdownIt-Anchor\" href=\"#字符串输入\">#</a> 字符串输入</h4>\n<p>如果想把一个字符串读入程序 首先必须预留存储该字符串的空间 然后用输入函数获取该字符串</p>\n<h5 id=\"分配空间\"><a class=\"markdownIt-Anchor\" href=\"#分配空间\">#</a> 分配空间</h5>\n<p>分配空间的时候必须为字符串分配足够的空间 <strong>不要指望计算机在读取字符串的时候顺便计算它的长度然后再分配空间</strong> (计算机不会这样做 除非你编写一个处理这些任务的函数)</p>\n<blockquote>\n<pre><code>char * name;\nscanf(\"%s\",name);\n</code></pre>\n</blockquote>\n<p>可能会通过编译 但是在读入 name 时 name 可能会擦写掉程序中的数据或代码 而导致程序异常终止<br>\n因为 scanf () 要把信息拷贝到参数指定的地址上 此时 该参数是个未初始化的指针 name 可能会指向任何地方</p>\n<ul>\n<li>最简单的方法是 在声明时指明数组的大小</li>\n</ul>\n<blockquote>\n<pre><code>char name[81];\n</code></pre>\n</blockquote>\n<ul>\n<li>还有一种方法：使用 C 库函数来分配内存 (第 12 章)</li>\n</ul>\n<p>为字符串分配玩内存后 开始讨论读取字符串的函数</p>\n<h5 id=\"gets函数不幸\"><a class=\"markdownIt-Anchor\" href=\"#gets函数不幸\">#</a> gets () 函数–不幸</h5>\n<p>在读取字符串时，scanf () 和转换说明 % s 只能读取一个单词<br>\n程序中经常要读取一整行输入 gets () 函数就用于处理这种情况</p>\n<ul>\n<li>get () 函数读取整行输入 直到遇到换行符 然后丢弃换行符 存储其余字符 并在这些字符的末尾添加一个空字符使其称为一个 C 字符串 其经常和 puts () 函数配对使用</li>\n<li>puts () 函数用于显示字符串 并且在末尾添加换行符</li>\n</ul>\n<blockquote>\n<pre><code>#include &lt;stdio.h&gt;\n#define STLEN 81\nint main(void)\n{\n     char words[STLEN];\n\n     puts(\"Enter a string, please.\");\n     gets(words);  // 典型用法\n     printf(\"Your string twice:\\n\");\n     printf(\"%s\\n\", words);\n     puts(words);\n     puts(\"Done.\");\n                                                                \n     return 0;\n}\n</code></pre>\n</blockquote>\n<p>整行输入都被存储在 words 中 put () 和 printf () 的效果相同<br>\n但是在有些编译器中并不会输出正确的结果，并且会给出警告<br>\n gets () 的唯一参数是 words, 他无法检查数组是否装得下输入行.<br>\n 数组名仅仅是数组首元素的地址。因此，gets () 函数只知道数组的开始处 并不知道数组中有多少个元素</p>\n<p>如果输入的字符过长 会导致<strong>缓冲区溢出</strong>即多余的字符超出了指定的目标空间 如果这些多于的字符只是占用了<strong>尚未使用</strong>的内存就不会立即出现问题 如果他们擦写掉程序中的其他数据就会导致程序异常中止<br>\n<em>在过去有些人通过系统编程 利用 gets () 插入和运行一些破坏系统安全的代码</em><br>\n C99 中承认了 gets () 的问题并且建议不要使用它 尽管如此 现有程序中因为含有大量使用该函数的代码 所以在标准中保留了 gets ()<br>\n C11 直接从标准中废除了 gets () 函数<br>\n所以这就导致了有些编译器支持 gets () 函数而有些编译器不支持 gets () 函数<br>\n部分编译器为了兼容以前的代码 就继续支持 gets () 函数</p>\n<h5 id=\"gets的替代品\"><a class=\"markdownIt-Anchor\" href=\"#gets的替代品\">#</a> gets () 的替代品</h5>\n<p>过去尝尝用 fgets () 来代替 gets (),fgets () 函数稍微复杂些 在处理输入方面与 gets () 略有不同 C11 标准新增的 gets_s () 也可以代替 gets () 该函数与 gets () 函数更为接近 但是 它是 stdio.h 输入 / 输出函数系列中的可选拓展 所以编译器不一定支持它</p>\n<h6 id=\"fgets函数和fputs\"><a class=\"markdownIt-Anchor\" href=\"#fgets函数和fputs\">#</a> fgets () 函数和 (fputs)</h6>\n<p>fgets () 函数通过第 2 个参数限制读入的字符数来解决溢出的问题<br>\n<strong>该函数专门设计处理文件输入</strong>一般情况下可能不太好用<br>\n fgets () 与 gets () 的区别如下</p>\n<ul>\n<li>fgets () 函数的第 2 个参数指明了读入字符的最大数量，如果该参数是 n 那么 fgets () 函数将读入 n-1 个字符 或者读到遇到的第一个换行符为止</li>\n<li>如果 fgets () 读到一个换行符，会把它存储在字符串中 这点和 gets () 不同，gets () 会丢地换行符</li>\n<li>fgets () 函数的第三个参数执行要读入的文件 如果读入从键盘输入的数据 则以 **stdin (标准输入)<strong> 作为参数 该标识符定义在 stdio.h 中<br>\n因为 fgets () 函数把换行符放在字符串的末尾 (假设输入行不溢出) 通常要与 fputs () 配对使用，除非该函数不在字符串末尾添加换行符 fputs () 的第 2 个参数指明它要写入的文件 如果要显示在计算机显示器上，应使用</strong> stdout (标准输出)** 作为参数</li>\n</ul>\n<blockquote>\n<pre><code>#include &lt;stdio.h&gt;\n#define STLEN 14\nint main(void)\n{\n     char words[STLEN];\n\n     puts(\"Enter a string, please.\");\n     fgets(words, STLEN, stdin);\n     printf(\"Your string twice (puts(), then fputs()):\\n\");\n     puts(words);\n     fputs(words, stdout);\n     puts(\"Enter another string, please.\");\n     fgets(words, STLEN, stdin);\n     printf(\"Your string twice (puts(), then fputs()):\\n\");\n     puts(words);\n     fputs(words, stdout);\n     puts(\"Done.\");\n                                                                \n     return 0;\n}\n</code></pre>\n</blockquote>\n<p>输入案例</p>\n<blockquote>\n<pre><code>Enter a string, please.\napple pie\nYour string twice (puts(), then fputs()):\napple pie\n\napple pie\nEnter another string, please.\nstrawberry shortcake\nYour string twice (puts(), then fputs()):\nstrawberry sh\nstrawberry shDone.\n</code></pre>\n</blockquote>\n<ul>\n<li>第一行输入 apple pie 比 fgets () 读入的整行输入短 因此 apple pie 被存储在数组中 所以当 puts () 显示该字符串时又在末尾添加了换行符 因此 apple pie 后面有一行空行 因为 fputs () 不在字符串末尾添加换行符 所以并未打印出空行</li>\n<li>第二行输入 的字符超过了大小的限制 所以只会读入相应的字符 然后把前几个范围内的存储在数组中<br>\n<strong> puts () 函数会在待输入字符串末尾添加一个换行符 而 fputs () 不会这样做</strong><br>\n<strong>同样 fgets () 存储时会在末尾自动存储一个换行符 而 gets () 不会这样</strong></li>\n</ul>\n<p>fgets () 函数返回 char 的指针 该函数返回的地址与传入的一个参数相同 如果读到文件末尾将返回<strong>空指针</strong>该指针保证不会指向有效的数据 所以可用于表述特殊情况 在 C 语言中用宏 NULL 来代替 (如果读入数据错误 该函数也返回 NULL).</p>\n<p>下列函数演示了一个简单的循环 读入并显示用户输入的内容 直到 fgets () 读到文件末尾或空行 (首字符是换行符)</p>\n<blockquote>\n<pre><code>#include &lt;stdio.h&gt;\n#define STLEN 10\nint main(void)\n{\n     char words[STLEN];\n\n     puts(\"Enter strings (empty line to quit):\");\n     while (fgets(words, STLEN, stdin) != NULL &amp;&amp; words[0] != '\\n')\n          fputs(words, stdout);\n     puts(\"Done.\");\n                                                                \n     return 0;\n}\n</code></pre>\n</blockquote>\n<p>输出结果如下</p>\n<blockquote>\n<pre><code>Enter strings (empty line to quit):\nBy the way, the gets() function\nBy the way, the gets() function\nalso returns a null pointer if it\nalso returns a null pointer if it\nencounters end-of-file.\nencounters end-of-file.\n\nDone.\n</code></pre>\n</blockquote>\n<p>神奇的是 这个程序在处理过长的输入时完全没有问题<br>\n通过 while 循环每次读入 9 个字符 (虽然 STLEN 为 10 但是最后一个位置需要留给 \\0) 并且没有换行由此不断叠加<br>\n<strong> important</strong> 系统使用缓冲的 I/O 用户按 enter 键之前 输入都被存储在缓冲区中 按下 enter 键就在输入中增加了一个换行符 并且把整行输入发送给 fgets () 对出输出 fputs () 把字符发送给另一个缓冲区 当发送换行符时 缓冲区的内容被发送到屏幕上<br>\n fgets () 存储换行符有好有坏</p>\n<ul>\n<li>好处：对于存储的字符串而言 检查末尾是否有换行符可以判断是否读取了一整行</li>\n<li>坏处：可能编者本身并不想把换行符存储在字符串中 这样的换行符会带来一些麻烦</li>\n</ul>\n<p>存储的字符串 如果不是一整行 要妥善处理一行中剩下的字符</p>\n<p>如何处理掉换行符呢</p>\n<ul>\n<li>在已存储的字符串中查找换行符 并将其替换成空字符</li>\n</ul>\n<blockquote>\n<pre><code>while (words[i] != '\\n') // 假设\\n在words中\n     i++;\nwords[i] = '\\0';\n</code></pre>\n</blockquote>\n<ul>\n<li>如果仍然有字符串留在输入行怎么办，如果目标数组装不下一整行输入就丢弃多出的字符</li>\n</ul>\n<blockquote>\n<pre><code>while (getchar() != '\\n')    // 读取但不存储输入，包括\\n\ncontinue;\n</code></pre>\n</blockquote>\n<p>以下程序读取输入航 删除存储在字符串中的换行符  如果没有换行符 就丢弃数组装不下的字符</p>\n<blockquote>\n<pre><code>#include &lt;stdio.h&gt;\n#define STLEN 10\nint main(void)\n{\n     char words[STLEN];\n     int i;\n\n     puts(\"Enter strings (empty line to quit):\");\n     while (fgets(words, STLEN, stdin) != NULL &amp;&amp; words[0] != '\\n')\n     {\n          i = 0;\n          while (words[i] != '\\n' &amp;&amp; words[i] != '\\0')\n               i++;\n          if (words[i] == '\\n')\n               words[i] = '\\0';\n          else    // 如果word[i] == '\\0'则执行这部分代码\n               while (getchar() != '\\n')\n                     continue;\n          puts(words);\n     }\n     puts(\"done\");\n     return 0;\n}\n</code></pre>\n</blockquote>\n<p>遍历字符串 直到遇到换行符或者空字符 如果先遇到换行符 就替换成空字符 如果先遇到空字符 else 部分就丢弃输入行的剩余字符</p>\n<h6 id=\"gets_s函数\"><a class=\"markdownIt-Anchor\" href=\"#gets_s函数\">#</a> gets_s () 函数</h6>\n<p>和 fgets () 函数类似 用一个参数限制读入的字符数目</p>\n<p>区别如下:</p>\n<ul>\n<li>gets_s () 只从标准输入中读取数据 不需要第三个参数</li>\n<li>gets_s 读到换行符会丢弃换行符而不是存储</li>\n<li>如果 gets_s 读到最大字符数都没有读到换行符 他会先把数组中的首字符设置成空字符 读取然后丢弃随后的输入 知道读到换行符 然后返回空指针 接着调用 \"处理函数\" (可能会终止或者退出程序)</li>\n</ul>\n<p>如果输入行未超过最大字符数目 gets_s () 和 gets () 相同</p>\n<p>如果目标存储区装得下输入行 以上函数效果都一样</p>\n<p>如果输入行太长会怎样</p>\n<ul>\n<li>使用 gets () 会擦写现有数据 具有安全隐患</li>\n<li>gets_s () 很安全 但是如果不希望程序终止或者退出 就要知道如何编写 \"处理函数\" 如果让程序继续运行 gets_s 会丢弃该输入行的其余字符</li>\n<li>fgets () 综合了以上两个 可以自由选择 是截取丢弃 还是继续使用输入行中超出的字符 可以参考以上 fgets () 中两个程序的处理方法</li>\n</ul>\n<h6 id=\"s_gets函数\"><a class=\"markdownIt-Anchor\" href=\"#s_gets函数\">#</a> s_gets () 函数</h6>\n<p>fgets () 函数的一种语法 读取郑航输入并用空字符代替换行符 或者读取一部分输入 并丢弃其余部分 然而并没有处理这种情况的标准 C 库函数<br>\n所以我们就创建一个 或许在后面的程序中会用得上</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> <span class=\"token function\">s_gets</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> st<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> ret_val<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n ret_val <span class=\"token operator\">=</span> <span class=\"token function\">fgets</span><span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> <span class=\"token constant\">stdin</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ret_val<span class=\"token punctuation\">)</span>    <span class=\"token comment\">// 即，ret_val != NULL</span>\n <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'\\n'</span> <span class=\"token operator\">&amp;&amp;</span> st<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">)</span>\n           i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n           st<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">else</span><span class=\"token punctuation\">;</span>              \n\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n                     <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n     <span class=\"token keyword\">return</span> ret_val<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>如果 fgets () 返回 NULL，说明读到文件结尾或出现读取错误，s_gets () 函数跳过了这个过程。它模仿上面处理 fgets () 函数的的处理方法，如果字符串中出现换行符，就用空字符替换它；如果字符串中出现空字符，就丢弃该输入行的其余字符，然后返回与 fgets () 相同的值。我们在后面的示例中将讨论 fgets () 函数。</p>\n<p>为什么要丢弃过长输入行中的余下字符。<br>\n这是因为，输入行中多出来的字符会被留在缓冲区中，成为下一次读取语句的输入。<br>\n例如，如果下一条读取语句要读取的是 double 类型的值，就可能导致程序崩溃。丢弃输入行余下的字符保证了读取语句与键盘输入同步。</p>\n<p>s_gets () 函数并不完美，它最严重的缺陷是遇到不合适的输入时毫无反应。它丢弃多余的字符时，既不通知程序也不告知用户。但是，用来替换前面程序示例中的 gets () 足够了。</p>\n<h6 id=\"空字符和空指针\"><a class=\"markdownIt-Anchor\" href=\"#空字符和空指针\">#</a> 空字符和空指针</h6>\n<ul>\n<li>\n<p>空字符 (\\0) 用于标记 C 字符串末尾的字符 对应字符编码为 0 由于其他字符的编码不可能为 0 所以空字符不可能是字符串的一部分</p>\n</li>\n<li>\n<p>空指针 (NULL) 有一个值 该值不会与任何数据的有效地址对应.</p>\n</li>\n<li>\n<p>空指针是整数类型 空指针是指针类型 空字符是一个字符占 1 字节 空指针是一个地址 占 4 字节</p>\n</li>\n</ul>\n<h5 id=\"scanf函数-2\"><a class=\"markdownIt-Anchor\" href=\"#scanf函数-2\">#</a> scanf () 函数</h5>\n<p>前面用 scanf () 和 % s 来读取字符串<br>\n scanf () 和 gets () 以及 fgets () 的区别在于他们如何确定字符串的末尾</p>\n<ul>\n<li>\n<p>scanf () 更像是在 \"获取单词\" 而不是在 \"获取字符串\"</p>\n</li>\n<li>\n<p>如果预留区装得下输入航 gets () 和 fgets () 会读取第一个换行符之前所有的字符</p>\n</li>\n</ul>\n<p>scanf () 有两种方法确定输入结束，但是都是从第一个非空白字符作为字符的开始</p>\n<ul>\n<li>使用 % s 转换说明 以下一个空白字符 (空行 空格 制表符 换行符) 作为字符串的结束 (<strong>空白字符不存储在字符串中</strong>)</li>\n<li>如果指定了字符串的长度 如 %8s 那么 scanf () 将读取 8 个字符 或者读到空白符位置</li>\n</ul>\n<p><a href=\"https://imgtu.com/i/oFcCd0\"><img src=\"https://z3.ax1x.com/2021/11/25/oFcCd0.png\" alt=\"oFcCd0.png\"></a></p>\n<p>scanf () 函数返回一个整数值 该值等于 scanf () 成功读取的项数 或者 EOF (读到文件末尾)</p>\n<blockquote>\n<pre><code>#include &lt;stdio.h&gt;\nint main(void)\n{\n     char name1[11], name2[11];\n     int count;\n\n     printf(\"Please enter 2 names.\\n\");\n     count = scanf(\"%5s %10s\", name1, name2);\n     printf(\"I read the %d names %s and %s.\\n\", count, name1, name2);\n                                                                \n     return 0\n}\n</code></pre>\n</blockquote>\n<p>输入示例</p>\n<blockquote>\n<p>Please enter 2 names.<br>\nJesse Jukes<br>\nI read the 2 names Jesse and Jukes.  // 都未超出字段宽度<br>\n Please enter 2 names.<br>\nLiza Applebottham<br>\nI read the 2 names Liza and Applebotth.  // 第二个超出了字段宽度 自动截取了<br>\n Please enter 2 names.<br>\nPortensia Callowit<br>\nI read the 2 names Porte and nsia.   先读取了 5 个字符 (第一次调用 scanf ()) 然后又读取了 4 字符 (第二次调用 scanf () 从上一次调用结束的地方继续读取数据)</p>\n</blockquote>\n<p>根据输入数据的性质 用 scanf () 读取键盘输入的数据 有时并不合适<br>\n scanf () 无法完整地读入书名或者歌曲名 除非这些名称是一个单词<br>\n scanf () 的典型用法：读取并转换混合数据类型为某种标准形式<br>\n scanf () 缺点：输入行过长也会导致数据溢出<br>\n解决方法：在 % s 转换说明中限制字段宽度</p>\n<h4 id=\"字符串输出\"><a class=\"markdownIt-Anchor\" href=\"#字符串输出\">#</a> 字符串输出</h4>\n<p>C 中 3 个用于打印字符串的标准库函数</p>\n<ol>\n<li>puts()</li>\n<li>fputs()</li>\n<li>printf()</li>\n</ol>\n<h5 id=\"puts函数\"><a class=\"markdownIt-Anchor\" href=\"#puts函数\">#</a> puts () 函数</h5>\n<p>puts () 函数会在末尾自动添加一个换行符</p>\n<blockquote>\n<pre><code>#include &lt;stdio.h&gt;\n#define DEF \"I am a #defined string.\"\nint main(void)\n{\n     char str1[80] = \"An array was initialized to me.\";\n     const char * str2 = \"A pointer was initialized to me.\";\n\n     puts(\"I'm an argument to puts().\");\n     puts(DEF);\n     puts(str1);\n     puts(str2);\n     puts(&amp;str1[5]);  //puts后面需要跟的是一个地址 字符串的起始地址\n     puts(str2 + 4);\n                                                                \n     return 0;\n}\n</code></pre>\n</blockquote>\n<p>输出如下</p>\n<blockquote>\n<p>I’m an argument to puts().<br>\nI am a #defined string.<br>\nAn array was initialized to me.<br>\nA pointer was initialized to me.<br>\nray was initialized to me.<br>\ninter was initialized to me.</p>\n</blockquote>\n<p>puts 遇到空字符就停止输入 所以必须却要有空字符<br>\n如果缺少空字符他会一直打印内存后面中的内容 直到读到空字符的位置为止</p>\n<h5 id=\"fputs函数\"><a class=\"markdownIt-Anchor\" href=\"#fputs函数\">#</a> fputs () 函数</h5>\n<p>与 puts () 函数的区别如下</p>\n<ul>\n<li>fputs () 的第二个参数指明要写入数据的文件 如果要打印在显示器上 用定义在 stdio.h 中的 stdout (标准输出) 作为该参数</li>\n<li>fputs () 不会在输出的末尾添加换行符 而 puts () 会</li>\n</ul>\n<p>与前面的输入函数关联起来 也就是前面提过的<br>\n<strong> puts () 函数会在待输入字符串末尾添加一个换行符 而 fputs () 不会这样做</strong><br>\n<strong>同样 fgets () 存储时会在末尾自动存储一个换行符 而 gets () 不会这样</strong></p>\n<p>不推荐使用 gets () 因为已经废弃了  学习 gets () 只是以防以后看到 gets () 代码看不懂</p>\n<h5 id=\"printf函数-2\"><a class=\"markdownIt-Anchor\" href=\"#printf函数-2\">#</a> printf () 函数</h5>\n<p>printf () 把字符串的地址作为参数<br>\n printf () 不是那么方便 但是它可以格式化不同的数据类型</p>\n<blockquote>\n<pre><code>printf(\"%s \\n\",string)\nputs(string); 这两个语句的效果是相同的\n</code></pre>\n</blockquote>\n<h4 id=\"自定义输入输出函数\"><a class=\"markdownIt-Anchor\" href=\"#自定义输入输出函数\">#</a> 自定义输入 / 输出函数</h4>\n<p>以下是一个 类似 puts 但是不会就自动添加换行符的函数</p>\n<blockquote>\n<pre><code>#include &lt;stdio.h&gt;\nvoid put1(const char * string)/* 不会改变字符串 */\n{\n     while (*string != '\\0')\n          putchar(*string++);\n}\n</code></pre>\n</blockquote>\n<p>因为从右向左运算 *string++ 中递增是 string 本身而不是递增它所指向的字符</p>\n<p>很多 C 程序员在 whild 中会使用下面的测试条件</p>\n<blockquote>\n<pre><code>while (\\*string) 若\\*string是空字符 则为0 循环结束 这种方法非常简便\n</code></pre>\n</blockquote>\n<p>以下将打印一串字符串 并且 统计打印的字符个数</p>\n<blockquote>\n<pre><code> int put2(const char * string)\n {\n      int count = 0;\n      while (*string)    /* 常规用法 */\n      {\n           putchar(*string++);\n           count++;\n      }\n      putchar('\\n');    /* 不统计换行符 */\n\n      return(count);\n }\n 具体的程序使用\n #include &lt;stdio.h&gt;\n void put1(const char *);\n int put2(const char *);\n\n int main(void)\n {\n     put1(\"If I'd as much money\");\n     put1(\" as I could spend,\\n\");\n     printf(\"I count %d characters.\\n\",\n          put2(\"I never would cry old chairs to mend.\"));\n\n     return 0;\n }\n\n void put1(const char * string)\n {\n     while (*string)  /* 与 *string != '\\0' 相同 */\n          putchar(*string++);\n }\n\n int put2(const char * string)\n {\n     int count = 0;\n     while (*string)\n     {\n          putchar(*string++);\n          count++;\n     }\n     putchar('\\n');\n\n     return(count);\n\n }\n</code></pre>\n</blockquote>\n<h4 id=\"字符串函数\"><a class=\"markdownIt-Anchor\" href=\"#字符串函数\">#</a> 字符串函数</h4>\n<p>C 库中有多个处理字符串的函数 ANSI C 放在了 string.h 头文件中</p>\n<h5 id=\"strlen-函数\"><a class=\"markdownIt-Anchor\" href=\"#strlen-函数\">#</a> strlen () 函数</h5>\n<p>strlen () 函数用于统计字符串的长度<br>\n以下函数用于缩短字符串的长度</p>\n<blockquote>\n<pre><code>void fit(char *string, unsigned int size)\n{\n     if (strlen(string) &gt; size)\n         string[size] = '\\0';\n}\n</code></pre>\n</blockquote>\n<h5 id=\"strcat函数\"><a class=\"markdownIt-Anchor\" href=\"#strcat函数\">#</a> strcat () 函数</h5>\n<p>strcat () 用于拼接字符串<br>\n函数接受两个字符串作为参数 该函数是把第二个字符串的备份附加在第一个字符串末尾 然后把拼接后形成的新字符串作为第一个字符串 第二个字符串不发生改变<br>\n strcat () 的类型是指向 char 的指针 返回的值是第一个字符串的地址</p>\n<h5 id=\"strncat函数\"><a class=\"markdownIt-Anchor\" href=\"#strncat函数\">#</a> strncat () 函数</h5>\n<p>strcat () 无法检查第一个数组 是否能够容纳第 2 个字符串 如果第一个数组的空间不够大 拼接的时候就会出现问题<br>\n strncat () 的第三个参数制定了最大添加字符数</p>\n<blockquote>\n<pre><code>strncat(bugs,addon,13)\n</code></pre>\n</blockquote>\n<p>在加到第 13 个字符或者空字符的时候就停止<br>\n strncat () 和 gets () 一样也会导致缓冲区溢出 但是并没有废弃</p>\n<h5 id=\"strcmp函数\"><a class=\"markdownIt-Anchor\" href=\"#strcmp函数\">#</a> strcmp () 函数</h5>\n<p>strcmp 用于字符串的比较<br>\n如果两个字符串参数相同 函数就返回 0 否则返回非 0 数<br>\n<strong>注意</strong><br>\n strcmp () 比较的是字符串不是整个数组 即使数组很大 strcmp () 也只会比较数组中存储的字符串 也就是第一个空字符前面的字符串</p>\n<h6 id=\"strcmp的返回值\"><a class=\"markdownIt-Anchor\" href=\"#strcmp的返回值\">#</a> strcmp () 的返回值</h6>\n<ul>\n<li>如果第一个字符串在第二个字符串前面 strcmp () 返回一个负数</li>\n<li>如果两个字符串相同 则返回 0</li>\n<li>如果第一个字符串在第二个字符串后面 strcmp () 返回一个正数</li>\n</ul>\n<p>比较过程中 strcmp () 会依次比较每个字符 知道发现第一对不同的字符为止 然后返回相应的值</p>\n<p>strcmp () 与其说是比较字符串 不如说是根据 ASCII 的值 按照<strong>机器排序序列</strong>进行比较</p>\n<p><strong>注意</strong> strcmp () 比较的是字符串而不是字符 也就是说即使要比较单个字符 也应该写成 \"A\" 而不是’A’<br>\n实际上因为 char 类型实际上是 int 类型 所以比较字符时 也不需要使用到 strcmp () 函数</p>\n<h5 id=\"strncmp函数\"><a class=\"markdownIt-Anchor\" href=\"#strncmp函数\">#</a> strncmp () 函数</h5>\n<ul>\n<li>strcmp () 比较字符串中的字符 这一过程会持续到直到发现不同</li>\n<li>strncmp () 在比较两个字符串时 可以限定函数只比较哪几个字符 这样可以用来查找哪个字母 或者开头 结尾 相同的单词</li>\n</ul>\n<blockquote>\n<pre><code>strncmp(\"transform\",\"transparent\",5)\n</code></pre>\n</blockquote>\n<p>此时函数就只会比较前面 5 个字符 并且输出的结果是 0 因为前 5 个字符 trans 相同</p>\n<h5 id=\"strcpy和strncpy函数\"><a class=\"markdownIt-Anchor\" href=\"#strcpy和strncpy函数\">#</a> strcpy () 和 strncpy () 函数</h5>\n<p>如何希望拷贝整个字符串就用 strcpy ()<br>\n strcpy () 函数相当于<strong>字符串赋值运算符</strong></p>\n<p>strcpy () 第二个参数 指向的字符串被拷贝至第一个参数指向的数组中</p>\n<ul>\n<li>拷贝出来的字符串被称为<strong>目标字符串</strong></li>\n<li>最初的字符串被称为<strong>源字符串</strong></li>\n</ul>\n<p>如果拷贝到的数组没有被初始化 这时候可能被拷贝到任意地方</p>\n<h6 id=\"strcpy的其他属性\"><a class=\"markdownIt-Anchor\" href=\"#strcpy的其他属性\">#</a> strcpy () 的其他属性</h6>\n<ul>\n<li>strcpy () 的返回类型是 char * 该函数返回第一个字符的地址</li>\n<li>第一个参数不必指向数组的开始</li>\n</ul>\n<h6 id=\"更谨慎的选择-strncpy\"><a class=\"markdownIt-Anchor\" href=\"#更谨慎的选择-strncpy\">#</a> 更谨慎的选择: strncpy ()</h6>\n<p>strcpy () 不能检查目标空间是否能容纳源字符串的副本<br>\n strncpy () 的第三个参数指明可拷贝的最大字符数</p>\n<blockquote>\n<pre><code>strncpy(target,source,n)\n</code></pre>\n<p>把 source 中的 n 个字符或者空字符之前的字符拷贝到 target 中<br>\n strncpy () 拷贝字符串的长度不会超过 n<br>\n<strong> 如果拷贝到底 n 还没有拷贝完整个字符串 就不会拷贝空字符</strong><br>\n如此写程序的时候可以用 if else 语句 把拷贝过去的字符串最后一个转化为空字符 以保证存储的是一个字符串</p>\n</blockquote>\n<h6 id=\"sprintf函数\"><a class=\"markdownIt-Anchor\" href=\"#sprintf函数\">#</a> sprintf () 函数</h6>\n<p>sprintf 函数声明在 stdio.h 中<br>\n该函数和 printf 类似 但是是把数据写入字符串 而不是打印在电脑屏幕上</p>\n<ul>\n<li>sprintf () 的第一个参数是目标字符串的地址</li>\n<li>其他参数和 printf () 相同</li>\n</ul>\n<blockquote>\n<pre><code>sprintf(formal,\"    \",X,Y,Z)\n</code></pre>\n<p>表示法 X,Y,Z 拼接成一个字符串并且存储在 formal 中</p>\n</blockquote>\n<h5 id=\"其他字符串函数\"><a class=\"markdownIt-Anchor\" href=\"#其他字符串函数\">#</a> 其他字符串函数</h5>\n<p>对以上函数 和一些常用函数的总结</p>\n<blockquote>\n<p>char *strcpy (char* restrict s1, const char * restrict s2);<br>\n 该函数把 s2 指向的字符串（包括空字符）拷贝至 s1 指向的位置，返回值是 s1。<br>\nchar*strncpy(char * restrict s1, const char * restrict s2, size_t n);<br>\n 该函数把 s2 指向的字符串拷贝至 s1 指向的位置，拷贝的字符数不超过 n，其返回值是 s1。该函数不会拷贝空字符后面的字符，如果源字符串的字符少于 n 个，目标字符串就以拷贝的空字符结尾；如果源字符串有 n 个或超过 n 个字符，就不拷贝空字符。<br>\nchar *strcat(char * restrict s1, const char * restrict s2);<br>\n 该函数把 s2 指向的字符串拷贝至 s1 指向的字符串末尾。s2 字符串的第 1 个字符将覆盖 s1 字符串末尾的空字符。该函数返回 s1。<br>\nchar *strncat(char * restrict s1, const char * restrict s2, size_t n);<br>\n 该函数把 s2 字符串中的 n 个字符拷贝至 s1 字符串末尾。s2 字符串的第 1 个字符将覆盖 s1 字符串末尾的空字符。不会拷贝 s2 字符串中空字符和其后的字符，并在拷贝字符的末尾添加一个空字符。该函数返回 s1。<br>\nint strcmp(const char * s1, const char * s2);<br>\n 如果 s1 字符串在机器排序序列中位于 s2 字符串的后面，该函数返回一个正数；如果两个字符串相等，则返回 0；如果 s1 字符串在机器排序序列中位于 s2 字符串的前面，则返回一个负数。<br>\nint strncmp(const char * s1, const char * s2, size_t n);<br>\n 该函数的作用和 strcmp () 类似，不同的是，该函数在比较 n 个字符后或遇到第 1 个空字符时停止比较。<br>\nchar *strchr(const char * s, int c);<br>\n 如果 s 字符串中包含 c 字符，该函数返回指向 s 字符串首次出现的 c 字符的指针（末尾的空字符也是字符串的一部分，所以在查找范围内）；如果在字符串 s 中未找到 c 字符，该函数则返回空指针。<br>\nchar *strpbrk(const char * s1, const char * s2);<br>\n 如果 s1 字符中包含 s2 字符串中的任意字符，该函数返回指向 s1 字符串首位置的指针；如果在 s1 字符串中未找到任何 s2 字符串中的字符，则返回空字符。<br>\nchar *strrchr(const char * s, char c);<br>\n 该函数返回 s 字符串中 c 字符的最后一次出现的位置（末尾的空字符也是字符串的一部分，所以在查找范围内）。如果未找到 c 字符，则返回空指针。<br>\nchar *strstr(const char * s1, const char * s2);<br>\n 该函数返回指向 s1 字符串中 s2 字符串出现的首位置。如果在 s1 中没有找到 s2，则返回空指针。<br>\nsize_t strlen(const char * s);<br>\n 该函数返回 s 字符串中的字符数，不包括末尾的空字符。<br>\n请注意，那些使用 const 关键字的函数原型表明，函数不会更改字符串。例如，下面的函数原型：<br>\nchar *strcpy(char * restrict s1, const char * restrict s2);<br>\n 表明不能更改 s2 指向的字符串，至少不能在 strcpy () 函数中更改。但是可以更改 s1 指向的字符串。这样做很合理，因为 s1 是目标字符串，要改变，而 s2 是源字符串，不能更改。</p>\n<p>关键字 restrict 将在第 12 章中介绍，该关键字限制了函数参数的用法。例如，不能把字符串拷贝给本身。</p>\n<p>第 5 章中讨论过，size_t 类型是 sizeof 运算符返回的类型。C 规定 sizeof 运算符返回一个整数类型，但是并未指定是哪种整数类型，所以 size_t 在一个系统中可以是 unsigned int，而在另一个系统中可以是 unsigned long。string.h 头文件针对特定系统定义了 size_t，或者参考其他有 size_t 定义的头文件。</p>\n<p>前面提到过，参考资料 V 中列出了 string.h 系列的所有函数。除提供 ANSI 标准要求的函数外，许多实现还提供一些其他函数。应查看你所使用的 C 实现文档，了解可以使用哪些函数。</p>\n</blockquote>\n<h4 id=\"字符串示例字符串排序\"><a class=\"markdownIt-Anchor\" href=\"#字符串示例字符串排序\">#</a> 字符串示例：字符串排序</h4>\n<blockquote>\n<pre><code><pre class=\"line-numbers language-none\"><code class=\"language-none\">#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n#define SIZE 81        /* 限制字符串长度，包括 \\0 */\n#define LIM 20         /* 可读入的最多行数 */\n#define HALT \"\"        /* 空字符串停止输入 */\nvoid stsrt(char *strings [], int num);    /* 字符串排序函数 */\nchar * s_gets(char * st, int n);\n\nint main(void)\n{\n     char input[LIM][SIZE];       /* 存储输入的数组        */\n     char *ptstr[LIM];            /* 内含指针变量的数组    */\n     int ct = 0;                  /* 输入计数             */\n     int k;                       /* 输出计数             */\n\n printf(\"Input up to %d lines, and I will sort them.\\n\", LIM);\n printf(\"To stop, press the Enter key at a line's start.\\n\");\n while (ct &lt; LIM &amp;&amp; s_gets(input[ct], SIZE) != NULL\n           &amp;&amp; input[ct][0] != '\\0')\n {\n      ptstr[ct] = input[ct];  /* 设置指针指向字符串    */\n      ct++;\n }\n stsrt(ptstr, ct);            /* 字符串排序函数        */\n puts(\"\\nHere's the sorted list:\\n\");\n for (k = 0; k &lt; ct; k++)\n      puts(ptstr[k]);         /* 排序后的指针          */\n\n return 0;\n\n}\n\n/* 字符串-指针-排序函数 */\nvoid stsrt(char *strings [], int num)\n{\n     char *temp;\n     int top, seek;\n\n for (top = 0; top &lt; num - 1; top++)\n      for (seek = top + 1; seek &lt; num; seek++)\n           if (strcmp(strings[top], strings[seek]) &gt; 0)\n           {\n                temp = strings[top];\n                strings[top] = strings[seek];\n                strings[seek] = temp;\n           }\n\n}\n\nchar * s_gets(char * st, int n)\n{\n     char * ret_val;\n     int i = 0;\n\n ret_val = fgets(st, n, stdin);\n if (ret_val)\n {\n      while (st[i] != '\\n' &amp;&amp; st[i] != '\\0')\n           i++;\n      if (st[i] == '\\n')\n           st[i] = '\\0';\n      else \n           while (getchar() != '\\n')\n                   continue;\n }\n return ret_val;\n\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</code></pre>\n</blockquote>\n<h5 id=\"排序指针而非字符串\"><a class=\"markdownIt-Anchor\" href=\"#排序指针而非字符串\">#</a> 排序指针而非字符串</h5>\n<p><a href=\"https://imgtu.com/i/oYWJcq\"><img src=\"https://z3.ax1x.com/2021/12/02/oYWJcq.png\" alt=\"字符串排序\"></a></p>\n<h5 id=\"选择排序算法\"><a class=\"markdownIt-Anchor\" href=\"#选择排序算法\">#</a> 选择排序算法</h5>\n<p>用 for 循环依次将首元素与每个元素进行比较，排在前面的值就被放置在首元素的位置上，这样可以挑选出排序排在最前面的值；然后依靠外层 for 循环从第二个位置开始，寻找第二靠前的值，依次类推</p>\n<h4 id=\"ctypeh字符函数和字符串\"><a class=\"markdownIt-Anchor\" href=\"#ctypeh字符函数和字符串\">#</a> ctype.h 字符函数和字符串</h4>\n<p>ToUpper () 函数，利用 toupper () 函数处理字符串中的每个字符，将整个字符串转化为大写</p>\n<blockquote>\n<pre><code>void ToUpper(char * str)\n{\n     while (*str)\n     {\n          *str = toupper(*str);\n          str++;\n     }\n}\n</code></pre>\n</blockquote>\n<p>PunctCount () 函数，利用 inpunct ()[被用来检测是不是标点符号] 统计字符串中的标点符号个数</p>\n<blockquote>\n<pre><code>int PunctCount(const char * str)\n{\n     int ct = 0;\n     while (*str)\n     {\n          if (ispunct(*str))\n               ct++;\n          str++;\n     }\n\n     return ct;\n\n}\n</code></pre>\n</blockquote>\n<p>isslower () 函数用户检查是否为小写 如果是 则判定为真 如果不是 则判定为假<br>\n while (*str) 用来循环处理 str 指向地址中的每一个字符，直到遇到空字符，因为空字符的编码值是 0 判定为假 循环结束</p>\n<h4 id=\"命令行参数\"><a class=\"markdownIt-Anchor\" href=\"#命令行参数\">#</a> 命令行参数</h4>\n<p><strong>命令行</strong>是在命令环境中，用户为运行程序输入命令的行</p>\n<blockquote>\n<pre><code>/* repeat.c -- 带参数的 main() */\n#include &lt;stdio.h&gt;\nint main(int argc, char *argv [])\n{\n     int count;\n\n     printf(\"The command line has %d arguments:\\n\", argc - 1);\n     for (count = 1; count &lt; argc; count++)\n          printf(\"%d: %s\\n\", count, argv[count]);\n     printf(\"\\n\");\n                                                                \n     return 0;\n}\n</code></pre>\n</blockquote>\n<p>下面是输出结果</p>\n<blockquote>\n<p>C&gt;repeat Resistance is futile<br>\nThe command line has 3 argumentcs:<br>\n1: Resistance<br>\n2: is<br>\n3: futile</p>\n</blockquote>\n<p>C 编译器允许没有参数或者有两个参数<br>\n当有两个参数的时候</p>\n<ul>\n<li>第一个参数是命令行中的字符串数量 通常用 argc 表示 (argumenet count 参数计数)<strong> 系统用空格表示一个字符串的结束和下一个字符串的开始</strong></li>\n<li>第二个参数是存储命令行字符串的地址的数组 (argv 表示表示参数值 argument value)</li>\n</ul>\n<blockquote>\n<p>argv [0] 指向 repeat （对大部分系统而言）<br>\nargv [1] 指向 Resistance<br>\nargv [2] 指向 is<br>\nargv [3] 指向 futile</p>\n</blockquote>\n<p>main 中形参的声明和其他函数函数中形参的声明一样</p>\n<h4 id=\"把字符串转化为数字\"><a class=\"markdownIt-Anchor\" href=\"#把字符串转化为数字\">#</a> 把字符串转化为数字</h4>\n<p>printf () 利用 % d 等转化说明可以把数字转化为字符串显示在屏幕上<br>\n scanf () 可以将命令行中输入的字符串转化为数值<br>\n atoi (用于把字母数字 (以字符串存储数字) 转化为整数 (int 类型)) 该函数接受一个字符串作为参数，返回相应的整数值</p>\n<ul>\n<li>如果字符串仅以整数开头 后面不是整数 那么 atoi 就会将其中的整数提取出来并且进行转化</li>\n<li>如果命令行参数不是数字，atoi () 函数返回 0 (在 C 标准中这种情况下是未定义的)</li>\n</ul>\n<blockquote>\n<pre><code>/* hello.c -- 把命令行参数转换为数字 */\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nint main(int argc, char *argv [])\n{\n     int i, times;\n\n     if (argc &lt; 2 || (times = atoi(argv[1])) &lt; 1)\n          printf(\"Usage: %s positive-number\\n\", argv[0]);\n     else\n          for (i = 0; i &lt; times; i++)\n               puts(\"Hello, good looking!\");\n     return 0;\n}\n</code></pre>\n</blockquote>\n<p>输出示例</p>\n<blockquote>\n<p>$ hello 3<br>\nHello, good looking!<br>\nHello, good looking!<br>\nHello, good looking!</p>\n</blockquote>\n<p>该程序中包含了 stdlib.h 头文件，该头文件中包含了</p>\n<ul>\n<li>atio (): 将字符串转化为 int 类型的值</li>\n<li>atof (): 将字符串转化为 double 类型的值</li>\n<li>atol (): 将字符串转化为 long 类型的值</li>\n</ul>\n<p>ANSI C 提供了一套更加智能的函数</p>\n<ul>\n<li>strtol (): 把字符串转化为 long 类型的值</li>\n<li>strtoul (): 把字符串转化为 unsigned long 类型的值</li>\n<li>strtod (): 把字符串转化为 double 类型的值</li>\n</ul>\n<p>这些函数会识别和报告字符串的首字母是否为数字<br>\n同时 strtol 和 stroul 还可以指定数字的进制</p>\n<p>strtol 函数原型:</p>\n<blockquote>\n<pre><code>long strtol(const char * restrict nptr, char ** restrict endptr, int base);\n</code></pre>\n</blockquote>\n<ul>\n<li>\n<p>nptr 是指向待转换字符串的指针</p>\n</li>\n<li>\n<p>endptr 是一个指针的地址，该指针被设置为标识输入数字结束字符的地址</p>\n</li>\n<li>\n<p>base 表示以什么进制写入数字</p>\n</li>\n<li>\n<p>strtol 最多可以转换三十六进制</p>\n</li>\n<li>\n<p>strtoul 函数与 strtol 函数类似，但是它是吧字符串转化为无符号值</p>\n</li>\n<li>\n<p>strtod () 只以十进制转化，他只需要两个参数</p>\n</li>\n</ul>\n<h4 id=\"字符串关键概念\"><a class=\"markdownIt-Anchor\" href=\"#字符串关键概念\">#</a> 字符串关键概念</h4>\n<p>我们用言语互动，实用文本的例子不计其数，C 程序通过字符串的方式处理他们</p>\n<p><strong>字符串</strong>，无论是右字符数组，指针，还是字符串常量来标识，都存储为包含字符编码的一系列字节并且最终以空字符串结尾；C 语言提供一系列库函数处理字符串，查找字符串并分析他们<br>\n字符串中用 strcmp () 来代替关系运算符<br>\n比较字符串的时候应该使用 strcpy () 和 strncpy () 代替赋值运算符把字符串赋给字符数组</p>\n<h4 id=\"字符串小结\"><a class=\"markdownIt-Anchor\" href=\"#字符串小结\">#</a> 字符串小结</h4>\n<ol>\n<li>C 字符串是一系列 char 类型的字符，以空字符 (’\\0’) 结尾.</li>\n</ol>\n<p>字符串可以存储在字符数组中 字符串还可以用<strong>字符串常量</strong>来表示 (括在双引号中), 空字符由编译器提供 自行加在字符数组的末尾处</p>\n<p>存储字符串时 字符串的存储长度要比字符串长度多 1, 因为多了一个空字符 (’\\0’), 但是 strlen () 计算长度的时候不用考虑空字符的问题 因为 strlen () 函数会自动减去空字符</p>\n<ol start=\"2\">\n<li>字符串常量又叫做<strong>字符串字面量</strong>，用于初始化字符数组，按照上文所说，字符串的存储长度要比字符串的长度大 1, 所以为了容纳末尾的空字符，数组的大小至少要比容纳的数组长度多 1</li>\n<li>函数使用指向字符串首字符的指针来表示待处理的字符串，对应的实际参数分为三种，但是传递的都是首字符的地址，一般来说 没有必要传递字符串的长度 因为函数可以通过字符串末尾存储的空字符来确定字符串的结束\n<ul>\n<li>数组名</li>\n<li>指针变量</li>\n<li>用双引号括起来的字符串</li>\n</ul>\n</li>\n<li>fgets () 函数获取一行输入，puts () 和 fputs () 函数显示一行的输出，他们是 stdio.h 头文件中的函数 用于代替已被弃用的 gets ()</li>\n<li>C 库中有多个<strong>字符串处理函数</strong>，在 ANSI C 中，这些函数都声明在 string.h 文件中，C 库中海油许多<strong>字符处理函数</strong>，声明在 ctype.h 文件中</li>\n<li>给 main () 函数提供两个合适的形式参数，可以让程序访问命令行参数.\n<ul>\n<li>第一个参数通常是 int 类型的 <code>argc</code> , 代表命令行的单词数量</li>\n<li>第二个参数是一个指向数组的指针 <code>argv</code>  数组内含指向 char 的指针，每个指向 char 的指针都指向一个命令行参数字符串 <code>argv[0]</code>  指向命令名称， <code>argv[1]</code>  指向第一个命令行参数以此类推</li>\n</ul>\n</li>\n<li><code>atoi()</code> , <code>atol()</code> , <code>atof()</code>  函数把字符串形式的数组分别转化为 int,long 和 double 类型的数字， <code>strtol()</code> , <code>strtoul</code> , <code>strtod()</code>  函数把字符串形式的数字分别转化为 long,unsigned long 和 double 类型的数字.</li>\n</ol>\n<h3 id=\"第十二章-存储类别链接和内存管理\"><a class=\"markdownIt-Anchor\" href=\"#第十二章-存储类别链接和内存管理\">#</a> 第十二章 存储类别，链接和内存管理</h3>\n<p>程序员指定变量的作用域和生命期，实现对程序的控制 合理利用内存存储数据时设计程序的一个要点</p>\n<h4 id=\"121存储类别\"><a class=\"markdownIt-Anchor\" href=\"#121存储类别\">#</a> 12.1 存储类别</h4>\n<p>C 语言提供不同的<strong>存储类别</strong>在内存中存储数据</p>\n<ul>\n<li>\n<p>对象：数据存储在内存中 被存储的每个值都占有一定的物理内存，这样的一块内存叫做对象</p>\n</li>\n<li>\n<p>标识符：一个名称，用来指定特定对象的内容</p>\n<blockquote>\n<p>int entity = 3   其中 entity 就是一个标识符</p>\n</blockquote>\n</li>\n<li>\n<p>左值：指向对象的表达式</p>\n<blockquote>\n<p>int * pt = &amp;entity</p>\n</blockquote>\n<p>pt 是一个标识符，他指定了一个存储<strong>地址</strong>的对象 所以他是左值</p>\n<p>*pt 不是一个标识符 因为他不是一个名称，然而他指向了一个对象 所以他是左值</p>\n</li>\n<li>\n<p>存储期：对象在内存中保留了多长时间</p>\n</li>\n<li>\n<p>作用域：描述程序中可访问标识符的区域</p>\n</li>\n</ul>\n<h5 id=\"1211作用域\"><a class=\"markdownIt-Anchor\" href=\"#1211作用域\">#</a> 12.1.1 作用域</h5>\n<p>作用域包括:</p>\n<ol>\n<li>块级作用域</li>\n<li>函数作用域</li>\n<li>函数原型作用域</li>\n<li>文件作用域</li>\n</ol>\n<ul>\n<li>\n<p><strong>块</strong>：一对花括号括起来的代码区域 (对于 <code>for</code> , <code>while</code> , <code>do while</code> , <code>if</code>  等等判别式也包括在块以内)(函数的形参也包括在整个函数的块作用域内)</p>\n<p>定义在块中的变量具有<strong>块作用域</strong>，块作用域变量的课件范围时从定义出到包含该定义的块的末尾</p>\n</li>\n<li>\n<p><strong>函数作用域</strong>仅用于 <code>goto</code>  语句的标签，即使一个标签首次出现在函数的内层快中 它的作用域也会延伸到整个函数</p>\n</li>\n<li>\n<p>函数作用域和块作用域的<strong>区别</strong>：函数作用域作用于整个函数，而块作用域仅仅作用域方括号内</p>\n</li>\n<li>\n<p><strong>函数原型作用域</strong>用于函数原型的形参名，作用范围是从形参定义处到原型声明结束，所以编译器只关心函数原型中的形参的类型 而对于形参名可有可无 因为即使有 也无法和函数定义中的形参名匹配<strong>只有在变长数组中 形参名才有用</strong></p>\n</li>\n<li>\n<p>变量的定义在函数外面的具有<strong>文件作用域</strong>，从定义处到文件的结尾都可见</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"token keyword\">int</span> units <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">{</span>\n\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这里变量 units 具有文件作用域 (更准确是为外部链接文件作用域)</p>\n<p><strong>文件作用域</strong>也被称为<strong>全局变量</strong></p>\n</li>\n<li>\n<p><strong>翻译单元</strong>：编译器把源代码文件和所有的头文件都看成是一个包含信息的单独文件，这个文件被称为<strong>翻译单元</strong>，若程序由多个源代码文件组成，那么该程序也将由多个翻译单元组成，每个翻译单元均对应一个源代码文件和它所包含的文件</p>\n</li>\n</ul>\n<h5 id=\"1212链接\"><a class=\"markdownIt-Anchor\" href=\"#1212链接\">#</a> 12.1.2 链接</h5>\n<p>C 变量有三种链接属性</p>\n<ol>\n<li>外部链接</li>\n<li>内部链接</li>\n<li>无链接</li>\n</ol>\n<ul>\n<li><strong>无链接变量</strong>：具有块作用域，函数作用域或函数原型作用域的变量，这些变量属于定义他们的块，函数或原型私有</li>\n<li><strong>外链接变量</strong>：可以在多文件程序中使用，简称为<strong>全局作用域</strong>或者<strong>程序作用域</strong></li>\n<li><strong>内部链接变量</strong>：只能在一个<u>翻译单元</u>(一个源代码文件和它所包含的头文件) 中使用   简称为<strong>内部链接文件作用域</strong></li>\n</ul>\n<p>具有文件作用域的变量可以是外部链接，也可以是内部链接</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> giant <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//文件作用域,外部链接(统一程序的所有文件都可以使用)</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> dodgerts <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//文件作用域 内部链接(文件私有),使用关键字static</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n   <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"1213存储期\"><a class=\"markdownIt-Anchor\" href=\"#1213存储期\">#</a> 12.1.3 存储期</h5>\n<p><strong>存储期</strong>：描述了通过这些标识符访问的对象的生存期</p>\n<p>C 语言有 4 种存储期:</p>\n<ol>\n<li>\n<p>** 静态存储期:** 在程序的执行期间一直存在，<strong> 文件作用域变量</strong> (外部链接和内部链接) 具有静态存储期</p>\n</li>\n<li>\n<p><strong>线程存储期</strong>：用于并发程序设计，程序执行被分为多个线程，具有线程存储器的对象从被声明时到线程结束一直存在，以关键字 <code>_Thread_local</code>  声明一个对象时，每个线程都获得该变量的私有备份</p>\n</li>\n<li>\n<p><strong>自动存储期</strong>:<strong> 块作用域变量</strong>通常都具有自动存储期，程序进入定义这些变量的块时，为这些变量分配内存，当退出这个块时，释放刚才为变量分配的内存</p>\n<ul>\n<li>\n<p>变长数组的存储期从声明处到块的末尾，而不是从块的开始处到快的末尾</p>\n</li>\n<li>\n<p>目前来说局部变量都是自动类别 (在使用函数时候被创建，在离开函数时被销毁)</p>\n</li>\n<li>\n<p>块作用域变量也能具有静态存储器，把变量声明在块中，并且在声明前面加上关键字 static, 但是只有在执行函数的时候程序才能使用 ct 访问它所指向的对象 (但是，该函数可以给其他函数提供该存储区的地址以便间接访问该对象，例如通过指针形参或返回值)</p>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>动态分配存储期</strong>：后续介绍</p>\n</li>\n</ol>\n<p><a href=\"https://imgtu.com/i/o5YBqg\"><img src=\"https://s1.ax1x.com/2021/12/10/o5YBqg.png\" alt=\"5种存储类别\"></a></p>\n<h5 id=\"1214自动变量\"><a class=\"markdownIt-Anchor\" href=\"#1214自动变量\">#</a> 12.1.4 自动变量</h5>\n<p>自动存储类别的变量具有自动存储期，块作用域且无链接，默认情况下，声明在块或函数头中的任何变量都属于自动存储类别，也可以显式使用关键字 <code>auto</code></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">auto</span> <span class=\"token keyword\">int</span> plox\n        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>auto 是<strong>存储类别说明符</strong></p>\n<ul>\n<li><strong>块作用域和无链接</strong>意味着只有在变量定义所在块中才能通过变量名访问该变量</li>\n<li><strong>自动存储期</strong>意味着，程序进入变量声明所在块时变量存在，程序在退出该块时变量小时</li>\n<li>当内层块中的变量和外层块中的变量同名时，内层块会<strong>隐藏</strong>外层块的定义，但是在离开内层块后外层变量的作用域又回到了原来的作用域</li>\n</ul>\n<ol>\n<li>\n<p>没有括号的块</p>\n<p>作为循环或者 <code>if</code>  语句的一部分，即使不适用花括号，也是一个块.</p>\n</li>\n<li>\n<p>自动变量的初始化</p>\n<p><strong>自动变量</strong>不会初始化，除非显式初始化它</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> repid<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p><code>repid</code>  变量的值不会是 0, 而是之前占用分配给 <code>repid</code>  的空间中的任意值 (前提是存在)</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> rush<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> rance <span class=\"token operator\">=</span> <span class=\"token number\">5</span> <span class=\"token operator\">*</span> ruth<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token comment\">// 可以如此定义(前提是ruth已经在前面定义过了)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<h5 id=\"1215寄存器变量\"><a class=\"markdownIt-Anchor\" href=\"#1215寄存器变量\">#</a> 12.1.5 寄存器变量</h5>\n<p>变量通常存储在计算器内存中，<strong> 如果幸运的话</strong>，寄存器变量存在 CPU 的寄存器中，或者存在最快的可用内存中，与普通变量相比，访问和处理这些变量的速度更快.</p>\n<p>但是由于寄存器变量存储在寄存器而非内存中，所以无法获取寄存器变量的地址</p>\n<p>绝大多数方面寄存器变量和自动变量一样</p>\n<p>使用 <code>register</code>  可以声明寄存器变量</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">register</span> <span class=\"token keyword\">int</span> quick<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>声明变量为 <code>register</code>  更像是一种<strong>请求</strong>，编译器胡根据寄存器或者最快可用内存的数量衡量你的请求，或者直接忽略你的请求，这种情况下寄存器变量就编程了普通的自动变量，即使是这样，<strong> 仍然不能对该变量使用地址运算符</strong></p>\n<p>可声明为 <code>register</code>  的数据类型有限，比如处理器中的寄存器可能没有足够大的空间来存储 <code>double</code>  类型的值</p>\n<h5 id=\"1216块作用域的静态变量\"><a class=\"markdownIt-Anchor\" href=\"#1216块作用域的静态变量\">#</a> 12.1.6 块作用域的静态变量</h5>\n<p><strong>静态变量</strong>：变量在内存中不变</p>\n<p>具有文件作用域的变量自动具有静态存储期</p>\n<p>使用 <code>static</code>  可以创建具有静态存储期，块作用域的局部变，但是无法在函数的形参中使用<u>static</u></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">trystat</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">;</span>\n\n     <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> count <span class=\"token operator\">&lt;=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> count<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Here comes iteration %d:\\n\"</span><span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">trystat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n\n     <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">trystat</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">int</span> fade <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> stay <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fade = %d and stay = %d\\n\"</span><span class=\"token punctuation\">,</span> fade<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> stay<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>输出结果:</p>\n<blockquote>\n<p>Here coms iteration 1:</p>\n<p>fade = 1 and stay = 1</p>\n<p>Here coms iteration 2:</p>\n<p>fade = 1 and stay = 2</p>\n<p>Here coms iteration 3:</p>\n<p>fade = 1 and stay = 3</p>\n</blockquote>\n<p>显然可见静态变量 <code>stay</code>  保存了他被递增后的值，而 <code>fade</code>  变量每次都是 <code>1</code></p>\n<p>这表明了初始化的不同，每次调用 <code>trystat()</code>  都会初始化 <code>fade</code>  但是 <code>stay</code>  只在编译 <code>trystat()</code>  初始化一次</p>\n<p>如果未显式初始化<strong>静态变量</strong>，他们会被初始化为 0</p>\n<p>事实上静态变量和外部变量在程序被载入内存时已经执行完毕了，把这条声明放在 <code>trystat()</code>  函数中是为了告诉编译器只有 <code>trystat()</code>  函数才能看到该变量.</p>\n<p>具有块作用域的静态变量也被称为<strong>静态局部变量</strong>，一些老的 C 语言文献称为<strong>内部静态存储类别</strong></p>\n<h5 id=\"1217外部链接的静态变量\"><a class=\"markdownIt-Anchor\" href=\"#1217外部链接的静态变量\">#</a> 12.1.7 外部链接的静态变量</h5>\n<p><strong>外部链接的静态变量</strong>具有</p>\n<ol>\n<li>文件作用域</li>\n<li>外部链接</li>\n<li>静态存储期</li>\n</ol>\n<p>该类别被称为<strong>外部存储类别</strong>，属于该类别的的变量称为<strong>外部变量</strong></p>\n<p>变量的定义性声明放在所有函数的外面便创建了外部变量，为了指出该函数使用了外部变量可以在函数中使用关键字 <code>extern</code>  再次声明</p>\n<p>如果一个源代码文件使用的外部变量定义在另一个源代码文件中，则必须用 <code>extern</code>  在该文件中声明该变量</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> Errupt<span class=\"token punctuation\">;</span>                <span class=\"token comment\">/* 外部定义的变量 */</span>\n<span class=\"token keyword\">double</span> Up<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\">/* 外部定义的数组 */</span>\n<span class=\"token keyword\">extern</span> <span class=\"token keyword\">char</span> Coal<span class=\"token punctuation\">;</span>          <span class=\"token comment\">/* 如果Coal被定义在另一个文件， */</span>\n                           <span class=\"token comment\">/*则必须这样声明*/</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> Errupt<span class=\"token punctuation\">;</span>     <span class=\"token comment\">/* 可选的声明*/</span>\n\n     <span class=\"token keyword\">extern</span> <span class=\"token keyword\">double</span> Up<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">/* 可选的声明*/</span>\n     <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>事实上 <code>main()</code>  函数声明中的 <code>extern</code>  声明完全可以省略因为外部链接具有文件作用域，他们出现在那里，仅仅是为了说明 <code>main()</code>  函数要使用这两个变量</p>\n<p>如果在 <code>main()</code>  函数中创建变量时，去除了 <code>extern</code> , 那么他将会创建一个自动变量，简而言之就是和之前一样，会隐藏其同名外部变量，并且此自动变量只在这个函数内有效</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> Hocus<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">magic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> Hocus<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 声明Hocus，默认是自动变量</span>\n     <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> Pocus<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">magic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">auto</span> <span class=\"token keyword\">int</span> Hocus<span class=\"token punctuation\">;</span> <span class=\"token comment\">//把局部变量Hocus显式声明为自动变量</span>\n     <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>外部变量的生命周期</strong>：在程序运行时一直存在，因为他们不会在某个函数返回后就消失</p>\n<ol>\n<li>\n<p>初始化外部变量</p>\n<p>外部变量也可以被显示初始化，如果未初始化外部变量，<strong> 那么他们会被自动初始化为 <code>0</code> </strong>, 并且外部变量只能使用<strong>常量表达式</strong>初始化.</p>\n</li>\n<li>\n<p>使用外部变量</p>\n<p>外部变量具有文件作用域，所以在一个翻译单元中都可以使用</p>\n</li>\n<li>\n<p>外部名称</p>\n<p>外部变量名比局部变量名的规则严格，因为外部变量名还要遵循局部环境规则，所受的限制更多</p>\n</li>\n<li>\n<p>定义和声明</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> tern <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* tern被定义 */</span>\n<span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> tern<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 使用在别处定义的tern */</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p><code>tern</code>  被声明了两次，第一次声明为变量预留了存储空间，该声明构成了<strong>变量的定义</strong>，第二次声明只告诉编译器使用之前已创建的 <code>tern</code>  变量，所以这不是定义</p>\n<ul>\n<li>第一次声明被称为<strong>定义式声明</strong></li>\n<li>第二次声明被称为<strong>引用式声明</strong></li>\n<li>关键字 <code>extern</code>  表明该声明不是定义，因为他只是编译器去别处查询其定义，所以，<u>不要使用关键字 <code>extern</code>  创建外部定义，只用它来引用现有的外部定义</u></li>\n<li>外部变量只能<strong>初始化</strong>一次，且必须在定义该变量时进行</li>\n</ul>\n</li>\n</ol>\n<h5 id=\"1218内部链接的静态变量\"><a class=\"markdownIt-Anchor\" href=\"#1218内部链接的静态变量\">#</a> 12.1.8 内部链接的静态变量</h5>\n<p>该存储类别的变量具有</p>\n<ol>\n<li>静态存储期</li>\n<li>文件作用域</li>\n<li>内部链接</li>\n</ol>\n<p>在所有函数的外部，用存储类别说明符 <code>static</code>  定义的变量具有这种存储类别</p>\n<p>内部链接的静态变量只能用于<strong>同一个文件中</strong>的函数，与外部链接相同可以使用存储类别说明符 <code>extern</code> , 在函数中重复声明任何具有文件作用域的变量，因为 <code>extern</code>  表明变量的定义在别处</p>\n<h5 id=\"1219多文件\"><a class=\"markdownIt-Anchor\" href=\"#1219多文件\">#</a> 12.1.9 多文件</h5>\n<p>复杂的 C 程序通常由多个单独的源代码文件组成，这些文件可能要<strong>共享</strong>一个外部变量，C 通过在一个文件中进行<strong>定义式声明</strong>，然后在其他文件中进行<strong>引用式声明</strong>来是实现<strong>共享</strong></p>\n<p>除了一个<strong>定义式声明</strong>，其他声明要是用 <code>extern</code>  关键字，并且只有定义式声明才能<strong>初始化常量</strong></p>\n<p>如果外部变量定义在一个文件中，其他文件在使用该变量之前必须要用 <code>extern</code>  关键字声明它</p>\n<h5 id=\"12110-存储类别说明符\"><a class=\"markdownIt-Anchor\" href=\"#12110-存储类别说明符\">#</a> 12.1.10 存储类别说明符</h5>\n<p>C 语言中有六个关键字作为存储类别说明符 <code>auto</code> , <code>register</code> , <code>static</code> , <code>extern</code> , <code>_Thread_local</code> , <code>typedef</code></p>\n<ol>\n<li><code>auto</code> : 只能用于<strong>块作用域</strong>的变量声明中，表明变量是自动存储期，可以省略因为块中声明的变量本身就有自动存储期。</li>\n<li><code>register</code> : 只能用于<strong>块作用域</strong>的变量声明中，它把变量归为寄存器存储类别，<strong> 请求</strong>以最快速度访问该变量，<u>此存储类别的变量的地址不可被获取</u></li>\n<li><code>static</code> : 表明该说明符创建的对象具有<strong>静态存储期</strong>\n<ul>\n<li>如果 <code>static</code>  用于文件作用域声明，作用域受限于该文件.</li>\n<li>如果 <code>static</code>  用于块作用声明，作用域受限于该块，在程序运行时，其值会一直保存，但是只有在执行块内的代码时，才能通过标识符访问.</li>\n<li>区分外部链接和内部链接就需要靠 <code>static</code>  进行声明</li>\n<li>块作用域的静态变量无链接，文件作用域的静态变量具有内部链接</li>\n</ul>\n</li>\n<li><code>extern</code> : 表示声明的变量定义在别处.</li>\n</ol>\n<h5 id=\"12111存储类别和函数\"><a class=\"markdownIt-Anchor\" href=\"#12111存储类别和函数\">#</a> 12.1.11 存储类别和函数</h5>\n<p>函数也有存储类别，可以分为<strong>外部函数 (默认)<strong> 和</strong>内部函数</strong>，C99 增加了第三种类别–<strong>内联函数</strong></p>\n<p>外部函数可以被其他文件的函数访问，但是静态函数只能用于其定义所在的文件.</p>\n<p>同样以 <code>static</code>  存储类别说明符创建的函数属于特定模块私有，这样有效避免了名称冲突的问题</p>\n<p><u>通常的做法是</u>: 用 <code>extern</code>  关键字声明定义在其他文件中的函数，</p>\n<p>除非使用 <code>static</code>  关键字，否则一般函数声明都默认为 <code>extern</code></p>\n<h5 id=\"12112存储类别的选择\"><a class=\"markdownIt-Anchor\" href=\"#12112存储类别的选择\">#</a> 12.1.12 存储类别的选择</h5>\n<p>绝大多数存储类别的选择都是自动存储类别</p>\n<p>保护性程序设计的<strong>黄金法则</strong>是:\"按需知道\" 原则，尽量在函数内部解决该函数的任务，只共享那些需要共享的变量 \\</p>\n<h4 id=\"122随机数函数和静态变量\"><a class=\"markdownIt-Anchor\" href=\"#122随机数函数和静态变量\">#</a> 12.2 随机数函数和静态变量</h4>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"hello.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h&gt;</span></span>\n<span class=\"token keyword\">extern</span> <span class=\"token keyword\">void</span> <span class=\"token function\">srand1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> <span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">unsigned</span> seed<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"please enter your choice for seed. \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%u\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>seed<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">srand1</span><span class=\"token punctuation\">(</span>seed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> count <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> count<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">rand1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Please enter next seed(q to quit): \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Done \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">//hello.h 文件</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> next <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//next 仅仅能够给rand1() 和srand1()函数使用</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">rand1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    next <span class=\"token operator\">=</span> next <span class=\"token operator\">*</span> <span class=\"token number\">1103515245</span> <span class=\"token operator\">+</span> <span class=\"token number\">123456</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>next <span class=\"token operator\">/</span> <span class=\"token number\">65536</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">32768</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">srand1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> seed<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    next <span class=\"token operator\">=</span> seed<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"123掷骰子\"><a class=\"markdownIt-Anchor\" href=\"#123掷骰子\">#</a> 12.3 掷骰子</h4>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">//manydice.c</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;time.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"hello.h\"</span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> dice<span class=\"token punctuation\">,</span> roll<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> sides<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> status<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">srand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter the number of sides per dice,0 to stop \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>sides<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> sides <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"How many dice? \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>status <span class=\"token operator\">=</span> <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>dice<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>status <span class=\"token operator\">==</span> <span class=\"token constant\">EOF</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 退出循环 */</span>\n            <span class=\"token keyword\">else</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"You should have entered an integer.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" Let's begin again.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 处理错误的输入 */</span>\n                <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"How many sides? Enter 0 to stop.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 进入循环的下一轮迭代 */</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        roll <span class=\"token operator\">=</span> <span class=\"token function\">roll_n_dice</span><span class=\"token punctuation\">(</span>dice<span class=\"token punctuation\">,</span> sides<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"You have rolled a %d using %d %d-sided dice.\\n\"</span><span class=\"token punctuation\">,</span>\n               roll<span class=\"token punctuation\">,</span> dice<span class=\"token punctuation\">,</span> sides<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"How many sides? Enter 0 to stop.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The rollem() function was called %d times.\\n\"</span><span class=\"token punctuation\">,</span>\n           roll_count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 使用外部变量 */</span>\n\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GOOD FORTUNE TO YOU!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// hello.h</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h&gt;</span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">roll_n_dice</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> dice<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> sides<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> roll_count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">rollem</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> sides<span class=\"token punctuation\">)</span> <span class=\"token comment\">//计算骰子掷出的点数</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> roll<span class=\"token punctuation\">;</span>\n\n    roll <span class=\"token operator\">=</span> <span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> sides <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">++</span>roll_count<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> roll<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">roll_n_dice</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> dice<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> sides<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> d<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> total <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sides <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Need at least 2 sides. \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dice <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Need at lease 1 dice. \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>d <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> d <span class=\"token operator\">&lt;</span> dice<span class=\"token punctuation\">;</span> d<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        total <span class=\"token operator\">+=</span> <span class=\"token function\">rollem</span><span class=\"token punctuation\">(</span>sides<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> total<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"124分配内存malloc和free\"><a class=\"markdownIt-Anchor\" href=\"#124分配内存malloc和free\">#</a> 12.4 分配内存:malloc () 和 free ()</h4>\n<p>C 语言可以通过库函数分配和管理内存</p>\n<p><code>malloc()</code> : 其接受所需的字节数，然后找到合适的空间内存块， <code>malloc()</code>  不会为其赋名，但是他会返回动态分配内存块的<strong>首字节的地址</strong>，可以把该地址付给指针，并使用指针访问这块内存。如果 <code>malloc()</code>  分配内存失败，将返回<strong>空指针</strong></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">double</span> <span class=\"token operator\">*</span> ptd<span class=\"token punctuation\">;</span>\nptd <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>此代码表示使用 <code>malloc()</code>  创建了一个可以存储 30 个 double 类型的数组，除了请求内存之外，还通过 ptd 指针记录了这块内存的位置</p>\n<p>需要注意的是 <code>molloc()</code>  的返回值是首字节的地址，并且指针指向类型为 <code>void</code> , 而指针指向 <code>void</code>  的指针赋给任意类型的指针都不用考虑类型匹配的问题，所以 <code>ptd</code>  指向的是首元素，也就是一个 <code>double</code>  类型，也就是说 <code>ptd</code>  可以当做<strong>数组名</strong>来使用</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">ptd <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//可以如此声明动态数组</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><code>free()</code> : 用于释放内存，参数是需要释放的内存的地址</p>\n<p>通常 <code>malloc()</code>  和 <code>free()</code>  配套使用， <code>free()</code>  的参数是 <code>malloc()</code>  返回的值，由此可以实现使用函数时 <code>malloc()</code>  分配内存，函数结束时 <code>free()</code>  释放内存，并且不能用 <code>free()</code>  释放通过其他方式分配的内存</p>\n<p>可以调用 <code>exit()</code>  函数结束程序，其原型在 <code>stdlib.h</code>  中。标准提供了两个返回值以保证在所有操作系统中都能正常工作</p>\n<ol>\n<li>EXIT_SUCCESS 表示普通的程序结束</li>\n<li>EXIT_FAILURE 表示程序异常终止</li>\n</ol>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">/* dyn_arr.c -- 动态分配数组 */</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h&gt;</span> <span class=\"token comment\">/* 为 malloc()、free()提供原型 */</span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">double</span> <span class=\"token operator\">*</span> ptd<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">int</span> max<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">int</span> number<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"What is the maximum number of type double entries?\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>max<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Number not correctly entered -- bye.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>EXIT_FAILURE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n     ptd <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>max <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ptd <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Memory allocation failed. Goodbye.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>EXIT_FAILURE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n     <span class=\"token comment\">/* ptd 现在指向有max个元素的数组 */</span>\n     <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter the values (q to quit):\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> max <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lf\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>ptd<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n          <span class=\"token operator\">++</span>i<span class=\"token punctuation\">;</span>\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Here are your %d entries:\\n\"</span><span class=\"token punctuation\">,</span> number <span class=\"token operator\">=</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> number<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%7.2f \"</span><span class=\"token punctuation\">,</span> ptd<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">%</span> <span class=\"token number\">7</span> <span class=\"token operator\">==</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span>\n               <span class=\"token function\">putchar</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">%</span> <span class=\"token number\">7</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n          <span class=\"token function\">putchar</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Done.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>ptd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"1241free的重要性\"><a class=\"markdownIt-Anchor\" href=\"#1241free的重要性\">#</a> 12.4.1free () 的重要性</h5>\n<p>静态内存的数量在编译时候是<strong>固定</strong>的，在<strong>程序运行期间</strong>不会改变，如果忘记添加 <code>free()</code>  可能导致<strong>内存遗漏</strong>问题，也就是在程序运行完之前就耗尽了所有的内存</p>\n<h5 id=\"1242calloc函数\"><a class=\"markdownIt-Anchor\" href=\"#1242calloc函数\">#</a> 12.4.2 <code>calloc()</code>  函数</h5>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">long</span> <span class=\"token operator\">*</span> newmem<span class=\"token punctuation\">;</span>\nnewmem <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">calloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><code>calloc()</code>  函数接受两个参数，第一个参数是所需的存储单元<strong>数量</strong>，第 2 个参数是存储单元的<strong>大小</strong> (以<strong>字节</strong>为单位)</p>\n<p><code>calloc()</code>  把块中所有的位都设置为 <code>0</code>  (有点不懂)</p>\n<p><code>free()</code>  函数也可以用来释放 calloc () 分配的内存</p>\n<h5 id=\"1243-动态内存分配和变长数组\"><a class=\"markdownIt-Anchor\" href=\"#1243-动态内存分配和变长数组\">#</a> 12.4.3 动态内存分配和变长数组</h5>\n<p>变长数组是<strong>自动存储类型</strong>，程序在离开变长数组定义所在的块时，变长数组占用的内存空间会被自动释放</p>\n<p><code>malloc()</code>  创建的数组不必局限在一个函数内访问，可以被调函数创建一个数组并返回指针，供主调函数访问，然后主调函数在末尾用 free 释放之前被调函数分配的内存.</p>\n<p>多维数组使用变长数组更方便，也可以使用 <code>malloc()</code>  创建二维数组</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> ar2<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// n×m的变长数组（VLA）</span>\n<span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span> p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// C99之前的写法</span>\n<span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span> p3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 要求支持变长数组</span>\np2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">*</span> <span class=\"token number\">6</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// n×6 数组</span>\np3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">*</span> m <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// n×m 数组（要求支持变长数组）</span>\nar2<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> p2<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"1244-存储类别和动态内存分配\"><a class=\"markdownIt-Anchor\" href=\"#1244-存储类别和动态内存分配\">#</a> 12.4.4 存储类别和动态内存分配</h5>\n<p>程序把可用的内存分为 3 部分:</p>\n<ul>\n<li>一部分供具有外部链接，内部链接和无链接的静态变量使用</li>\n<li>一部分供自动变量使用</li>\n<li>一部分供动态内存分配</li>\n</ul>\n<p>内存使用:</p>\n<ul>\n<li>静态存储类别所用的内存数量在编译时确定，在程序开始执行的时候被创建，在程序结束的时候被销毁.</li>\n<li>自动存储类别的变量在程序进入变量定义所在块时存在，在程序离开块时消失，随着程序调用函数和函数结束，自动边浪的内存数量也相应地增加和减少</li>\n<li>动态内存在调用 <code>malloc()</code>  或相关函数时存在，在调用 <code>free()</code>  后释放，这部分的内存由程序员管理，所以内存块可以在一个函数中创建，在另一个函数中销毁</li>\n</ul>\n<p><strong>程序把静态对象，自动对象和动态分配的动向存储在不同的区域</strong></p>\n<h4 id=\"125ansi-c类型限定符\"><a class=\"markdownIt-Anchor\" href=\"#125ansi-c类型限定符\">#</a> 12.5ANSI C 类型限定符</h4>\n<p>C90 增加了两个属性：恒常性 (constancy) 和易变性 (volatility), 分别使用关键字 <code>const</code>  和 <code>volatile</code>  来恒明</p>\n<p>C99 标准新增了第三个限定符:  <code>restrict</code></p>\n<p>C11 标准新增了第四个限定符:  <code>_Atomic</code></p>\n<p>在一条声明中可以多次使用同一个限定符，多余的限定符将被忽略</p>\n<h5 id=\"1251-const类型限定符\"><a class=\"markdownIt-Anchor\" href=\"#1251-const类型限定符\">#</a> 12.5.1  <code>const</code>  类型限定符</h5>\n<p>以 <code>const</code>  关键字声明的对象，其值不能通过赋值，但是可以初始化 <code>const</code>  变量</p>\n<ol>\n<li>\n<p>在指针和形参声明中使用 <code>const</code></p>\n<p><strong>注意区分 const 限定是指针本身还是指针指向的值</strong></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// pf指针指向的值不能更改但是指针指向的对象可以更改</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span> pf<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* pf 指向一个float类型的const值 */</span>\n<span class=\"token comment\">// pt指针指向的对象不能更改,但是指向对象的值可以更改</span>\n<span class=\"token keyword\">float</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">const</span> pt<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* pt 是一个const指针 */</span>\n\n<span class=\"token keyword\">float</span> <span class=\"token keyword\">const</span> <span class=\"token operator\">*</span> pfc<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 与const float * pfc;相同</span>\n<span class=\"token comment\">//既不能修改ptr指针指向的对象的值,也不能修改ptr指针的指向的对象</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">const</span> ptr<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li><code>const</code>  放在 * 左侧的任意位置，限定了指针指向的数据不能改变</li>\n<li><code>const</code>  放在 * 的右侧，限定了指针本身不能改变</li>\n</ul>\n<p><code>const</code>  关键字的常见用法是声明为函数形参的指针，函数不会改变传入地址指向的数据</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> array<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> limit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>\n<p>对全局数据使用 <code>const</code></p>\n<p>在文件间共享 <code>const</code>  数据可以采取两个策略</p>\n<ul>\n<li>在一个文件中使用定义式声明，在其他文件中使用引用式声明 ( <code>extern</code>  关键字)</li>\n<li>把 <code>const</code>  变量放在一个头文件中，然后在其他文件中包含该头文件（这样做必须在头文件中用关键字 <code>static</code>  声明全局 <code>const</code>  变量，否则会导致每一个文件中都有一个相同标识符的定义式声明)</li>\n</ul>\n</li>\n</ol>\n<h5 id=\"1252-volatile类型限定符\"><a class=\"markdownIt-Anchor\" href=\"#1252-volatile类型限定符\">#</a> 12.5.2  <code>volatile</code>  类型限定符</h5>\n<p><code>volatile</code>  限定符告知计算机，代理可以改变该变量的值，通常被用于硬件地址以及在其他程序或同时运行的线程中共享数据</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">volatile</span> <span class=\"token keyword\">int</span> loc1<span class=\"token punctuation\">;</span>      <span class=\"token comment\">/* loc1 是一个易变的位置 */</span>\n<span class=\"token keyword\">volatile</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span> ploc<span class=\"token punctuation\">;</span>    <span class=\"token comment\">/* ploc 是一个指向易变的位置的指针 */</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><code>volatile</code>  可以在一定程度上节约程序运行的时间</p>\n<p>高速缓存的概念:</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">val1 <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/* 一些不使用 x 的代码*/</span>\nval2 <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>编译器会注意到使用了两次 <code>X</code> , 但并未改变它的值，编译器会把 X 的值临时存储在寄存器中，然后在 <code>val2</code>  需要使用 <code>X</code>  时，才从寄存器 (<strong>不是从原始内存位置上</strong>) 中读取 x 的值，以此来节约时间，这个过程被称为<strong>高速缓存</strong>.</p>\n<p>如果以上两条语句之间改变了 X 的值，就不能这样优化</p>\n<p>所以如果没有 <code>volatile</code>  关键字，编译器就不知道这种事情是否会发生，为了安全起见，编译器就不会进行高速缓存，这是 ANSI 之前的情况</p>\n<p>现在如果声明中没有 <code>volatile</code>  关键字，编译器会假定变量的值在使用过程中不变，然后再尝试优化代码</p>\n<h5 id=\"1253-restrict类型限定符\"><a class=\"markdownIt-Anchor\" href=\"#1253-restrict类型限定符\">#</a> 12.5.3  <code>restrict</code>  类型限定符</h5>\n<p><code>restrict</code>  只能用于<strong>指针</strong>，表明该指针是访问数据对象的唯一且初始的方式</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> ar<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span> restrict restar <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span> par <span class=\"token operator\">=</span> ar<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// restar使用了关键字restrict,而其他变量没有</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> n <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> n<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     par<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n     restar<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n     ar<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">*=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n     par<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n     restar<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>这里 <code>restar</code>  可以将两个赋值语句合并在一起为 <code>restar[n] +=8</code>  而 <code>par</code>  不能，因为 <code>par</code>  中间通过 <code>ar</code>  改变了数据的值</li>\n<li>如果没有使用关键字 <code>restrict</code> , 编译器就必须假设最坏的情况 (即，在两次使用指针之间，其他的标识符可能改变了数据), 如果使用了 <code>restrict</code>  关键字，编译器就可以选择捷径优化计算</li>\n</ul>\n<p><code>restrict</code>  关键字有两个读者</p>\n<p>一个是编译器，该关键字告诉编译器可以自由假定一些优化方案</p>\n<p>另一个读者是用户，该关键字告诉用户要使用满足 <code>restrict</code>  要求的参数</p>\n<h5 id=\"1254-_atomic类型限定符c11\"><a class=\"markdownIt-Anchor\" href=\"#1254-_atomic类型限定符c11\">#</a> 12.5.4 _Atomic 类型限定符 (C11)</h5>\n<p>并发程序设计把程序执行分成可以同时执行的多个线程，C11 通过包含可选的头文件 <code>stdatomic.h</code>  和 <code>threads.h</code> , 提供了一些可以选择的管理方法，(当一个线程对一个原子类型的对象执行原子操作时，其他线程不能访问该对象)</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> hogs<span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 普通声明</span>\nhogs <span class=\"token operator\">=</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 普通赋值</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>可以替换成</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">_Atomic</span> <span class=\"token keyword\">int</span> hogs<span class=\"token punctuation\">;</span>           <span class=\"token comment\">// hogs 是一个原子类型的变量</span>\n<span class=\"token function\">atomic_store</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>hogs<span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// stdatomic.h中的宏</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h5 id=\"1255-旧关键字的新位置\"><a class=\"markdownIt-Anchor\" href=\"#1255-旧关键字的新位置\">#</a> 12.5.5 旧关键字的新位置</h5>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">ofmouth</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">const</span> a1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span> restrict a2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 以前的风格</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ofmouth</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a1<span class=\"token punctuation\">[</span><span class=\"token keyword\">const</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> a2<span class=\"token punctuation\">[</span>restrict<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 新的等价语法 C99允许</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><code>static</code>  的情况不同，新标准为 <code>static</code>  引入了一种与以前用法不相关的新用法，<strong> 新用法告知编译器如何使用形式参数</strong></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">double</span> <span class=\"token function\">stick</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> ar<span class=\"token punctuation\">[</span><span class=\"token keyword\">static</span> <span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><code>static</code>  的这种用法表明，函数调用中的实际参数应该是一个指向数组首元素的指针，并且该数组至少有 20 个元素</p>\n<h3 id=\"13-文件输入输出\"><a class=\"markdownIt-Anchor\" href=\"#13-文件输入输出\">#</a> 13 文件输入输出</h3>\n<h4 id=\"131-与文件进行通信\"><a class=\"markdownIt-Anchor\" href=\"#131-与文件进行通信\">#</a> 13.1 与文件进行通信</h4>\n<p>使用特殊的<strong> I/O 函数</strong>程序从文件中读取信息或者把信息写入文件</p>\n<h5 id=\"1311文件是什么\"><a class=\"markdownIt-Anchor\" href=\"#1311文件是什么\">#</a> 13.1.1 文件是什么</h5>\n<p><strong>文件</strong>：在磁盘或固态硬盘上的一段已命名的存储区</p>\n<p>C 把文件看作是一系列连续的字节，每个字节都能被单独读取.</p>\n<p>C 提供两种文件模式：文本模式和二进制模式</p>\n<h5 id=\"1312-文本模式和二进制模式\"><a class=\"markdownIt-Anchor\" href=\"#1312-文本模式和二进制模式\">#</a> 13.1.2 文本模式和二进制模式</h5>\n<ul>\n<li><strong>C</strong> 和<strong> UNIX</strong> 在文本中都用 <code>\\n</code>  表示换行</li>\n<li><strong>OS X Macintosh</strong> 文件用 <code>\\r</code>  表示新的一行</li>\n<li><strong>MS-DOS</strong> 文件用 <code>\\r\\n</code>  组合小时新的一行</li>\n</ul>\n<p>C 提供两种访问文件的途径:<strong> 二进制模式</strong>和<strong>文本模式</strong></p>\n<ol>\n<li>\n<p>二进制模式</p>\n<p>在二进制模式中，程序可以访问文件的每个字节</p>\n</li>\n<li>\n<p>文本模式</p>\n<p>在文本模式中，程序所见的内容和文件的实际内容不同，程序以<strong>文本模式</strong>读取文件时，把本地环境表示的行末尾或文件结尾映射为 C 模式 (例如：在<strong> MS-DOS</strong> 平台<u>读取文件时</u>, 把 <code>\\r\\n</code>  转换成 <code>\\n</code> ,<u>写入文件</u>时候，把 <code>\\n</code>  转换成 <code>\\r\\n</code> )</p>\n<p><a href=\"https://imgtu.com/i/T9tQSA\"><img src=\"https://s4.ax1x.com/2021/12/16/T9tQSA.png\" alt=\"T9tQSA.png\"></a></p>\n</li>\n</ol>\n<h5 id=\"1313-io的级别\"><a class=\"markdownIt-Anchor\" href=\"#1313-io的级别\">#</a> 13.1.3 I/O 的级别</h5>\n<p>I/O 的两个级别 (处理文件访问的两个级别)</p>\n<ul>\n<li><strong>底层 I\\O</strong>: 使用操作系统提供的基本 I\\O 服务</li>\n<li><strong>标准高级 I\\O</strong>: 使用 C 库的标准包和 <code>stdio.h</code>  头文件定义</li>\n</ul>\n<p>因为无法保证所有的操作系统都是用相同的底层 I\\O 模型，C 标准只支持标准的 I\\O 包</p>\n<h5 id=\"1314-标准文件\"><a class=\"markdownIt-Anchor\" href=\"#1314-标准文件\">#</a> 13.1.4 标准文件</h5>\n<p>C 程序会自动打开 3 个文件</p>\n<ol>\n<li>\n<p><strong>标准输入</strong>:</p>\n<p>系统的普通输入设备，通常为键盘</p>\n<p>为程序提供输入，是 <code>getchar()</code>  和 <code>scanf()</code>  使用的文件</p>\n</li>\n<li>\n<p><strong>标准输出</strong>:</p>\n<p>系统的普通输出设备，通常为显示屏</p>\n<p>程序通常输出到标准输出，是 <code>putchar()</code> , <code>puts()</code>  和 <code>printf()</code>  使用的文件</p>\n</li>\n<li>\n<p><strong>标准错误输出</strong>：系统的普通输出设备，通常为显示屏</p>\n</li>\n</ol>\n<h4 id=\"132-标准io\"><a class=\"markdownIt-Anchor\" href=\"#132-标准io\">#</a> 13.2 标准 I\\O</h4>\n<p>标准 I\\O 有多个好处</p>\n<ol>\n<li>有专门的函数简化了处理不同的 I/O 问题</li>\n<li>输入和输出都是<strong>缓冲</strong>的，极大地提高了数据传输效率，系统可以检查缓冲区中的字节</li>\n</ol>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">/* count.c -- 使用标准 I/O */</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h&gt;</span>    <span class=\"token comment\">// 提供 exit()的原型</span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">int</span> ch<span class=\"token punctuation\">;</span>            <span class=\"token comment\">// 读取文件时，存储每个字符的地方</span>\n     FILE <span class=\"token operator\">*</span>fp<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// “文件指针”</span>\n     <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>argc <span class=\"token operator\">!=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Usage: %s filename\\n\"</span><span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>EXIT_FAILURE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>fp <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"r\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Can't open %s\\n\"</span><span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>EXIT_FAILURE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n     <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ch <span class=\"token operator\">=</span> <span class=\"token function\">getc</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token constant\">EOF</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">putc</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">,</span> <span class=\"token constant\">stdout</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 与 putchar(ch); 相同</span>\n          count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n     <span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"File %s has %lu characters\\n\"</span><span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"1321-检查命令行参数\"><a class=\"markdownIt-Anchor\" href=\"#1321-检查命令行参数\">#</a> 13.2.1 检查命令行参数</h5>\n<p>第一个 <code>if</code>  语句先检查 <code>argc</code>  的值，查看是否有命令行参数</p>\n<p><code>argc[0]</code>  是该程序的名称</p>\n<p><code>exit()</code>  和 <code>return</code>  的区别</p>\n<ol>\n<li><code>exit()</code>  中用 <code>0</code>  或者宏 <code>EXIT_SUCCESS</code>  表示成功结束程序，用宏 <code>EXIT_FAILURE</code>  表述结束程序失败，这些宏和 <code>exit()</code>  原型都位于 <code>stdlib.h</code>  文件中</li>\n<li>如果在递归中， <code>exit()</code>  会结束整个程序，而 <code>return</code>  只会把控制权交给上一级递归，直到最初的一级， <code>return</code>  结束程序</li>\n<li>在其他函数中，调用 <code>exit()</code>  也能结束整个程序</li>\n</ol>\n<h5 id=\"1322-fopen函数\"><a class=\"markdownIt-Anchor\" href=\"#1322-fopen函数\">#</a> 13.2.2  <code>fopen()</code>  函数</h5>\n<p>函数声明在 <code>stdio.h</code>  中，以 <code>fopen()</code>  函数打开文件</p>\n<ul>\n<li>第一个参数是待打开文件的名称</li>\n<li>第二个参数是一个字符串，指定打开文件的模式</li>\n</ul>\n<p><a href=\"https://imgtu.com/i/T9aVe0\"><img src=\"https://s4.ax1x.com/2021/12/16/T9aVe0.png\" alt=\"T9aVe0.png\"></a></p>\n<blockquote>\n<p>如果使用任何一种 W 模式打开一个现有文件，该文件内容都会被删除，以便程序在一个空白文件中开始操作。然而，如果使用带 X 字母的任何一种模式，将无法打开一个现有文件</p>\n</blockquote>\n<p>程序成功打开文件后， <code>fopen()</code>  将返回<strong>文件指针</strong>，其他 I\\O 函数可以使用这个指针指定该文件.</p>\n<p><strong>文件指针</strong>的类型是指向 <code>FILE</code>  的指针， <code>FILE</code>  是一个定义在 <code>stdio.h</code>  中的派生类型.</p>\n<p><code>fp</code>  并不指向实际的文件，它指向一个包含文件信息的数据对象，其中包含操作文件的 I/O 函数所用的缓冲区信息</p>\n<h5 id=\"1323-getc和putc函数\"><a class=\"markdownIt-Anchor\" href=\"#1323-getc和putc函数\">#</a> 13.2.3  <code>getc()</code>  和 <code>putc()</code>  函数</h5>\n<p><code>getc()</code>  和 <code>putc()</code>  函数与 <code>getchar()</code>  和 <code>putchar()</code>  函数类似，不同的是要告诉 <code>getc()</code>  和 <code>putc()</code>  函数使用的文件</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">ch <span class=\"token operator\">=</span> <span class=\"token function\">getc</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 从fp指定的文件中获取一个字符</span>\n<span class=\"token function\">putc</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">,</span> fpout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//把字符ch放入FILE指针fpout指定的文件中</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<ul>\n<li><code>putc()</code> : 第一个参数是待写的字符，第二个参数是文件指针，若果第二个参数是 <code>stdout</code> , 则将会打印在屏幕上</li>\n</ul>\n<h5 id=\"1324-文件结尾\"><a class=\"markdownIt-Anchor\" href=\"#1324-文件结尾\">#</a> 13.2.4 文件结尾</h5>\n<p><code>getc()</code>  函数在读到文件末尾时会返回一个特殊值 <code>EOF</code></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span> ch <span class=\"token operator\">=</span> <span class=\"token function\">getc</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token constant\">EOF</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token function\">putchar</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//处理输入</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>使用如此函数，检查是否读到文件末尾</p>\n<h5 id=\"1325-fclose函数\"><a class=\"markdownIt-Anchor\" href=\"#1325-fclose函数\">#</a> 13.2.5  <code>fclose()</code>  函数</h5>\n<p><code>fclose()</code>  函数关闭指定的文件，必要时刷新缓冲区</p>\n<p>如果关闭成功 函数返回 <code>0</code>  否则返回 <code>EOF</code>  (磁盘已满，移动硬盘被溢出，出现 I\\O 错误)</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error in closing file %s\\n\"</span><span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h5 id=\"1326-指向标准文件的指针\"><a class=\"markdownIt-Anchor\" href=\"#1326-指向标准文件的指针\">#</a> 13.2.6 指向标准文件的指针</h5>\n<p><code>stdio.h</code>  头文件把 3 个文件指针和 3 个标准文件相关联</p>\n<p><a href=\"https://imgtu.com/i/T9BgDs\"><img src=\"https://s4.ax1x.com/2021/12/16/T9BgDs.png\" alt=\"T9BgDs.png\"></a></p>\n<h4 id=\"133-一个简单的文件压缩程序\"><a class=\"markdownIt-Anchor\" href=\"#133-一个简单的文件压缩程序\">#</a> 13.3 一个简单的文件压缩程序</h4>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h&gt;</span>    <span class=\"token comment\">// 提供 exit()的原型</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h&gt;</span>    <span class=\"token comment\">// 提供 strcpy()、strcat()的原型</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">LEN</span> <span class=\"token expression\"><span class=\"token number\">40</span></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     FILE  <span class=\"token operator\">*</span>in<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>out<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 声明两个指向 FILE 的指针</span>\n     <span class=\"token keyword\">int</span> ch<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span>LEN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 存储输出文件名</span>\n     <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token comment\">// 检查命令行参数</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>argc <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Usage: %s filename\\n\"</span><span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>EXIT_FAILURE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n     <span class=\"token comment\">// 设置输入</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>in <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"r\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"I couldn't open the file \\\"%s\\\"\\n\"</span><span class=\"token punctuation\">,</span>\n                    argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>EXIT_FAILURE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n     <span class=\"token comment\">// 设置输出</span>\n     <span class=\"token function\">strncpy</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> LEN <span class=\"token operator\">-</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 拷贝文件名</span>\n     name<span class=\"token punctuation\">[</span>LEN <span class=\"token operator\">-</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">strcat</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> <span class=\"token string\">\".red\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                <span class=\"token comment\">// 在文件名后添加.red</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>out <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> <span class=\"token string\">\"w\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>                       <span class=\"token comment\">// 以写模式打开文件</span>\n          <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Can't create output file.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n     <span class=\"token comment\">// 拷贝数据</span>\n     <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ch <span class=\"token operator\">=</span> <span class=\"token function\">getc</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token constant\">EOF</span><span class=\"token punctuation\">)</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count<span class=\"token operator\">++</span> <span class=\"token operator\">%</span> <span class=\"token number\">3</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n               <span class=\"token function\">putc</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">,</span> out<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 打印3个字符中的第1个字符</span>\n     <span class=\"token comment\">// 收尾工作</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> <span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n          <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Error in closing files\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"134-文件io\"><a class=\"markdownIt-Anchor\" href=\"#134-文件io\">#</a> 13.4 文件 I/O</h4>\n<h5 id=\"1341-fprintf和fscanf函数\"><a class=\"markdownIt-Anchor\" href=\"#1341-fprintf和fscanf函数\">#</a> 13.4.1  <code>fprintf()</code>  和 ``fscanf ()` 函数</h5>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MAX</span> <span class=\"token expression\"><span class=\"token number\">41</span></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     FILE <span class=\"token operator\">*</span>fp<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">char</span> words<span class=\"token punctuation\">[</span>MAX<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>fp <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wordy\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"a+\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stdout</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Can't open \\\"wordy\\\" file.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>EXIT_FAILURE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n\n     <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter words to add to the file; press the #\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key at the beginning of a line to terminate.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token function\">fscanf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stdin</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"%40s\"</span><span class=\"token punctuation\">,</span> words<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>words<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'#'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n          <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">,</span> <span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> words<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"File contents:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">rewind</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">/* 返回到文件开始处 */</span>\n     <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">fscanf</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">,</span> <span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span> words<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n          <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span>words<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Done!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n          <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Error closing file\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><code>remind()</code>  函数让文件回到开头处</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stdout</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Can't open \\\"wordy\\\" file.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//将字符串输出到stout标准输出中 也就是电脑屏幕</span>\n<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">,</span> <span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> words<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//将words中的数据输出到fp中</span>\n<span class=\"token function\">fscanf</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">,</span> <span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span> words<span class=\"token punctuation\">)</span> <span class=\"token comment\">//读取fp中的输入</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"1342-fgets和fputs函数\"><a class=\"markdownIt-Anchor\" href=\"#1342-fgets和fputs函数\">#</a> 13.4.2  <code>fgets()</code>  和 <code>fputs()</code>  函数</h5>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">fgets</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> STLEN<span class=\"token punctuation\">,</span> fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ol>\n<li>\n<p><code>fgets()</code>  函数接受 3 个参数</p>\n<ul>\n<li>第一个参数表示存储输入位置的地址</li>\n<li>第二个参数表示待输入字符串的长度</li>\n<li>第三个参数是文件指针，指定待读取的文件</li>\n</ul>\n<p>简单来说：就是从第三个参数读取小于第二个参数数量的字符然后存储在第一个参数 (地址) 指向的数组中</p>\n<p><code>fgets()</code>  函数读取到第一个换行符后面，或者文件末尾，或者 <code>STLEN-1</code>  同时会在末尾添加一个<strong>空字符</strong>，使其成为一个字符串</p>\n<p><code>fgets()</code>  函数遇到文件末尾也就是 <code>EOF</code>  会返回 <code>NULL</code>  值，如果没有遇到就返回第一个参数的地址</p>\n</li>\n<li>\n<p><code>fputs()</code>  接受两个参数</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">fputs</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li>第一个是字符串的地址</li>\n<li>第二个是文件指针</li>\n</ul>\n<p>简单来说：就是把第一个地址指向的数组中的字符串数据打印到第二个参数文件指针所指向的文件中</p>\n</li>\n</ol>\n<h4 id=\"135-随即访问fseek和ftell\"><a class=\"markdownIt-Anchor\" href=\"#135-随即访问fseek和ftell\">#</a> 13.5 随即访问: <code>fseek()</code>  和 <code>ftell()</code></h4>\n<p>有了 <code>fseek()</code>  函数，便可以把文件看作数组，在 <code>fopen()</code>  打开的文件中直接移动到任意字节处</p>\n<p><code>fseek()</code>  有 3 个参数，返回 <code>Int</code>  类型的值</p>\n<p><code>ftell()</code>  函数返回 <code>long</code>  类型的值</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">/* reverse.c -- 倒序显示文件的内容 */</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">CNTL_Z</span> <span class=\"token string\">'\\032'</span>        <span class=\"token comment\">/* DOS文本文件中的文件结尾标记 */</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SLEN</span> <span class=\"token expression\"><span class=\"token number\">81</span></span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">char</span> file<span class=\"token punctuation\">[</span>SLEN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">;</span>\n     FILE <span class=\"token operator\">*</span>fp<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">long</span> count<span class=\"token punctuation\">,</span> last<span class=\"token punctuation\">;</span>\n\n     <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter the name of the file to be processed:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%80s\"</span><span class=\"token punctuation\">,</span> file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>fp <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">,</span> <span class=\"token string\">\"rb\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>                                    <span class=\"token comment\">/* 只读模式    */</span>\n          <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"reverse can't open %s\\n\"</span><span class=\"token punctuation\">,</span> file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>EXIT_FAILURE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n\n     <span class=\"token function\">fseek</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">,</span> <span class=\"token number\">0L</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">SEEK_END</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                <span class=\"token comment\">/* 定位到文件末尾 */</span>\n     last <span class=\"token operator\">=</span> <span class=\"token function\">ftell</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">=</span> <span class=\"token number\">1L</span><span class=\"token punctuation\">;</span> count <span class=\"token operator\">&lt;=</span> last<span class=\"token punctuation\">;</span> count<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">fseek</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>count<span class=\"token punctuation\">,</span> <span class=\"token constant\">SEEK_END</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">/* 回退        */</span>\n          ch <span class=\"token operator\">=</span> <span class=\"token function\">getc</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ch <span class=\"token operator\">!=</span> CNTL_Z <span class=\"token operator\">&amp;&amp;</span> ch <span class=\"token operator\">!=</span> <span class=\"token string\">'\\r'</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">/* MS-DOS 文件 */</span>\n               <span class=\"token function\">putchar</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n     <span class=\"token function\">putchar</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"1351-fseek和ftell的工作原理\"><a class=\"markdownIt-Anchor\" href=\"#1351-fseek和ftell的工作原理\">#</a> 13.5.1  <code>fseek()</code>  和 <code>ftell()</code>  的工作原理</h5>\n<ol>\n<li><code>fseek()</code>\n<ul>\n<li>第一个参数是 <code>FILE</code>  指针，指向待查找的文件</li>\n<li>第二个参数是<strong>偏移量</strong>，表示从起始点开始要移动的距离，该参数必须是一个<strong> long</strong> 类型的值</li>\n<li>第三个参数是模式，确定起始点，在 <code>stdio.h</code>  头文件中规定</li>\n</ul>\n</li>\n</ol>\n<p><a href=\"https://imgtu.com/i/TFPX5T\"><img src=\"https://s4.ax1x.com/2021/12/17/TFPX5T.png\" alt=\"TFPX5T.png\"></a></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">//示例</span>\n<span class=\"token function\">fseek</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">,</span> <span class=\"token number\">0L</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">SEEK_SET</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 定位至文件开始处</span>\n<span class=\"token function\">fseek</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">,</span> <span class=\"token number\">10L</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">SEEK_SET</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 定位至文件中的第10个字节</span>\n<span class=\"token function\">fseek</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">,</span> <span class=\"token number\">2L</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">SEEK_CUR</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 从文件当前位置前移2个字节</span>\n<span class=\"token function\">fseek</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">,</span> <span class=\"token number\">0L</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">SEEK_END</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 定位至文件结尾</span>\n<span class=\"token function\">fseek</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">10L</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">SEEK_END</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 从文件结尾处回退10个字节</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>一切正常， <code>fseek()</code>  的返回值为 <code>0</code></li>\n<li>如果出现错误 (试图移动的距离超出文件的范围), 其返回值为 <code>-1</code></li>\n</ul>\n<ol start=\"2\">\n<li>\n<p><code>ftell()</code></p>\n<p>返回值是 <code>long</code> , 返回的是<strong>参数指向文件</strong>的当前位置距离文件开始处的字节数，定义在<strong> stdio.h</strong> 中</p>\n</li>\n</ol>\n<p>先用 <code>fseek()</code>  设置到文件末尾，然后用 <code>ftell()</code>  返回当前位置到文件开始位置的字节数就可以获得文件全部的字节数</p>\n<h5 id=\"1352-二进制模式和文本模式\"><a class=\"markdownIt-Anchor\" href=\"#1352-二进制模式和文本模式\">#</a> 13.5.2 二进制模式和文本模式</h5>\n<ol>\n<li><strong>MS-DOS</strong> 用 <code>\\r\\n</code>  组合表示文本文件换行\n<ul>\n<li>以文本模式打开时候，C 程序把 <code>/r/n</code>  看作是 <code>/n</code></li>\n<li>以二进制模式打开时，C 程序将两个程序分开来看，所以打印的时候，还需要有不打印 <code>/r</code>  的代码</li>\n</ul>\n</li>\n<li><code>fell()</code>  在文本模式和二进制模式中的工作方式不同\n<ul>\n<li>对于文本模式， <code>ftell()</code>  返回的值可以作为 <code>fseek()</code>  的第 2 个参数</li>\n<li>对于 MS-DOS, <code>ftell()</code>  返回的值把 <code>/r/n</code>  当做一个字节计数</li>\n</ul>\n</li>\n</ol>\n<h5 id=\"1353-可移植性\"><a class=\"markdownIt-Anchor\" href=\"#1353-可移植性\">#</a> 13.5.3 可移植性</h5>\n<ul>\n<li>在二进制模式中，实现不必支持 <code>SEEK_END</code>  模式</li>\n<li>在文本模式中，只有以下调用能保证其相应的行为</li>\n</ul>\n<p><a href=\"https://imgtu.com/i/TFkA3D\"><img src=\"https://s4.ax1x.com/2021/12/17/TFkA3D.png\" alt=\"TFkA3D.png\"></a></p>\n<h5 id=\"1354-fgetpos和fsetpos\"><a class=\"markdownIt-Anchor\" href=\"#1354-fgetpos和fsetpos\">#</a> 13.5.4  <code>fgetpos()</code>  和 <code>fsetpos()</code></h5>\n<p><code>fseek()</code>  和 <code>ftell()</code> , 规定为<strong> long</strong> 类型，可能由于文件过大导致不可用</p>\n<p>ANSI C 新增了两个处理较大文件的<strong>新定位函数</strong>: <code>fsetpos()</code>  和  <code>fgetpos()</code></p>\n<p>这两个函数使用一种新的类型 <code>fpos_t</code>  (file position type 文件定位类型)</p>\n<p><code>fpos_s</code>  类型的变量可以在文件中指定一个位置</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">fgetpos</span><span class=\"token punctuation\">(</span>FILE <span class=\"token operator\">*</span> restrict stream<span class=\"token punctuation\">,</span> <span class=\"token class-name\">fpos_t</span> <span class=\"token operator\">*</span> restrict pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//fgetpos()函数原型</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li>第一个参数表示文件指针</li>\n<li>第二个参数表示接受<strong>文件中的当前位置距文件开头的字节数</strong>的地址</li>\n<li>成功则返回 <code>0</code> , 失败则返回非 <code>0</code></li>\n</ul>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">fsetpos</span><span class=\"token punctuation\">(</span>FILE <span class=\"token operator\">*</span>stream<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token class-name\">fpos_t</span> <span class=\"token operator\">*</span>pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li>第一个参数表示文件指针</li>\n<li>第二个参数表示 <code>pos</code>  指向位置上的 <code>fpos_t</code>  类型值，来设置文件指针指向偏移值后指定的值</li>\n<li>成功则返回 0, 失败则返回非 0</li>\n</ul>\n<h4 id=\"136-标准io的机理\"><a class=\"markdownIt-Anchor\" href=\"#136-标准io的机理\">#</a> 13.6 标准 I/O 的机理</h4>\n<ol>\n<li>第一步</li>\n</ol>\n<p>使用 <code>fopen()</code>  打开文件，此时会创建一个缓冲区 (<u>读写模式</u>下创造两个缓冲区) 以及一个包含文件和缓冲区<strong>数据</strong>的<strong>结构</strong></p>\n<p>结构包含</p>\n<ul>\n<li>一个指定流中当前位置的文本位置指示器</li>\n<li>错误和文件结尾的指示器</li>\n<li>一个指向缓冲区开始处的指针</li>\n<li>一个文件标识符</li>\n<li>一个计数</li>\n</ul>\n<p><code>fopen()</code>  返回一个指向该结构的指针</p>\n<p>将该指针赋给一个指针变量 <code>fp</code> , 就称 <code>fopen()</code>  函数打开了一个流</p>\n<ul>\n<li>以文本模式打开该文件，就获得了一个文本流</li>\n<li>以二进制模式打开该文件，就获得了一个二进制流</li>\n</ul>\n<ol start=\"2\">\n<li>第二步</li>\n</ol>\n<p>调用一个输入函数 (一调用，文件中的缓冲大小数据块就被拷贝到缓冲区中)</p>\n<p>还要设置流中当前位置和拷贝进缓冲区的字节数</p>\n<p>所有输入函数都使用相同的缓冲区，所以调用任何一个函数都将从上一个函数停止调用的位置开始</p>\n<p>当输入函数读完缓冲区的所有字符后，会请求把下一个缓冲大小的数据块从文件中拷贝到该缓冲区中，以此来读取文件中的所有数据，直到文件结尾，返回 <code>EOF</code></p>\n<h4 id=\"137-其他标准io函数\"><a class=\"markdownIt-Anchor\" href=\"#137-其他标准io函数\">#</a> 13.7 其他标准 I/O 函数</h4>\n<h5 id=\"1371-int-ungetsint-c-file-fp函数\"><a class=\"markdownIt-Anchor\" href=\"#1371-int-ungetsint-c-file-fp函数\">#</a> 13.7.1  <code>int ungets(int c .FILE * fp)</code>  函数</h5>\n<p><code>int ungetc()</code>  函数把 <code>c</code>  指定 字符放回输入流中，如果把一个字符放回输入流中下次调用标准输入函数将读取该字符</p>\n<p><a href=\"https://imgtu.com/i/TFaoA1\"><img src=\"https://s4.ax1x.com/2021/12/17/TFaoA1.png\" alt=\"TFaoA1.png\"></a></p>\n<h5 id=\"1372-int-fflush函数\"><a class=\"markdownIt-Anchor\" href=\"#1372-int-fflush函数\">#</a> 13.7.2  <code>int fflush()</code>  函数</h5>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">fflush</span><span class=\"token punctuation\">(</span>FILE <span class=\"token operator\">*</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>调用 <code>fflush()</code>  函数<strong>刷新缓冲区</strong></p>\n<p>将缓冲区中所有的未写入数据都发送到 fp 指定的输出文件，如果 fp 是<strong>空指针</strong>，所有输出缓冲区都将被刷新</p>\n<p>在输入流中使用 <code>fflush()</code>  是未定义的</p>\n<h5 id=\"1373-int-setvbuf函数\"><a class=\"markdownIt-Anchor\" href=\"#1373-int-setvbuf函数\">#</a> 13.7.3  <code>int setvbuf()</code>  函数</h5>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">setvbuf</span><span class=\"token punctuation\">(</span>FILE <span class=\"token operator\">*</span> restrict fp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> restrict buf<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> mode<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>使用 <code>setvbuf()</code>  函数创建一个供标准 I/O 函数替换使用的缓冲区</p>\n<p>在打开文件后且未对流进行其他操作之前可以使用</p>\n<ul>\n<li><code>fp</code>  识别待处理的流</li>\n<li><code>buf</code>  指向待用的存储区，如果是 <code>NULL</code> , 函数会自己分配一个存储区</li>\n<li><code>size</code>  告诉数组 (存储区) 的大小</li>\n<li>mode 的选择\n<ol>\n<li><code>_IOFBF</code>  表示完全缓冲 (在缓冲区满时刷新)</li>\n<li><code>_IOLBF</code>  表示行缓冲，在缓冲区满时或写入一个换行符时刷新</li>\n<li><code>_IONBF</code>  表示无缓冲</li>\n</ol>\n</li>\n</ul>\n<p>如果操作成功，返回 <code>0</code> ; 操作失败，返回一个非 <code>0</code>  值</p>\n<h5 id=\"1374-二进制io-fread和fwrite\"><a class=\"markdownIt-Anchor\" href=\"#1374-二进制io-fread和fwrite\">#</a> 13.7.4 二进制 I/O:  <code>fread()</code>  和 <code>fwrite()</code></h5>\n<p><a href=\"https://imgtu.com/i/TFBcVJ\"><img src=\"https://s4.ax1x.com/2021/12/17/TFBcVJ.png\" alt=\"TFBcVJ.png\"></a></p>\n<p><code>fread()</code>  和 <code>fwrite</code>  以<strong>二进制</strong>处理数据</p>\n<h5 id=\"1375-size_t-fwrite函数\"><a class=\"markdownIt-Anchor\" href=\"#1375-size_t-fwrite函数\">#</a> 13.7.5  <code>size_t fwrite()</code>  函数</h5>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token class-name\">size_t</span> <span class=\"token function\">fwrite</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span> restrict ptr<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> size<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> nmemb<span class=\"token punctuation\">,</span>FILE <span class=\"token operator\">*</span> restrict fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li>ptr 是待写入数据块的地址</li>\n<li>size 表示数据块的大小</li>\n<li>nmemb 表示待写入数据块的数量</li>\n<li>fp 指定写入的文件</li>\n</ul>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// 保存一个为256字节的数据</span>\n<span class=\"token keyword\">char</span> buffer<span class=\"token punctuation\">[</span><span class=\"token number\">256</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">fwrite</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">,</span> <span class=\"token number\">256</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 保存一个内含10个double类型的数组</span>\n<span class=\"token keyword\">double</span> earnings<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">fwrite</span><span class=\"token punctuation\">(</span>earnings<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"1376-size_t-fread函数\"><a class=\"markdownIt-Anchor\" href=\"#1376-size_t-fread函数\">#</a> 13.7.6 size_t fread () 函数</h5>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token class-name\">size_t</span> <span class=\"token function\">fread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span> restrict ptr<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> size<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> nmemb<span class=\"token punctuation\">,</span>FILE <span class=\"token operator\">*</span> restrict fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>接受的参数和 <code>fwrite()</code>  的参数相同，该函数用于读取被 <code>fwrie()</code>  写入文件的数据</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">double</span> earnings<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">fread</span><span class=\"token punctuation\">(</span>earnings<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h5 id=\"1377-int-feoffile-fp和int-ferrorfile-fp函数\"><a class=\"markdownIt-Anchor\" href=\"#1377-int-feoffile-fp和int-ferrorfile-fp函数\">#</a> 13.7.7  <code>int feof(FILE * fp)</code>  和 <code>int ferror(FILE * fp)</code>  函数</h5>\n<p>标准输入函数读取到文件末尾时返回 <code>EOF</code> , 当读取到错误时，函数也返回 <code>EOF</code> .</p>\n<p><code>feof()</code>  和 <code>ferror()</code>  用于区分这两种情况</p>\n<p>当上一次输入调用检测到文件末尾时候， <code>feof()</code>  返回一个非零值，否则返回 <code>0</code></p>\n<p>当读写出现错误， <code>ferro()</code>  函数安徽一个非零值，否则返回 <code>0</code></p>\n<h5 id=\"1378-一个程序示例\"><a class=\"markdownIt-Anchor\" href=\"#1378-一个程序示例\">#</a> 13.7.8 一个程序示例</h5>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">/* append.c -- 把文件附加到另一个文件末尾 */</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">BUFSIZE</span> <span class=\"token expression\"><span class=\"token number\">4096</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SLEN</span> <span class=\"token expression\"><span class=\"token number\">81</span></span></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>FILE <span class=\"token operator\">*</span>source<span class=\"token punctuation\">,</span> FILE <span class=\"token operator\">*</span>dest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> <span class=\"token function\">s_gets</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> st<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     FILE <span class=\"token operator\">*</span>fa<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>fs<span class=\"token punctuation\">;</span>          <span class=\"token comment\">// fa 指向目标文件，fs 指向源文件</span>\n     <span class=\"token keyword\">int</span> files <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// 附加的文件数量</span>\n     <span class=\"token keyword\">char</span> file_app<span class=\"token punctuation\">[</span>SLEN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 目标文件名</span>\n     <span class=\"token keyword\">char</span> file_src<span class=\"token punctuation\">[</span>SLEN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 源文件名</span>\n     <span class=\"token keyword\">int</span> ch<span class=\"token punctuation\">;</span>\n\n     <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter name of destination file:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">s_gets</span><span class=\"token punctuation\">(</span>file_app<span class=\"token punctuation\">,</span> SLEN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>fa <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span>file_app<span class=\"token punctuation\">,</span> <span class=\"token string\">\"a+\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Can't open %s\\n\"</span><span class=\"token punctuation\">,</span> file_app<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>EXIT_FAILURE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">setvbuf</span><span class=\"token punctuation\">(</span>fa<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> _IOFBF<span class=\"token punctuation\">,</span> BUFSIZE<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">fputs</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Can't create output buffer\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">stderr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>EXIT_FAILURE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n     <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter name of first source file (empty line to quit):\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">s_gets</span><span class=\"token punctuation\">(</span>file_src<span class=\"token punctuation\">,</span> SLEN<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> file_src<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>file_src<span class=\"token punctuation\">,</span> file_app<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n               <span class=\"token function\">fputs</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Can't append file to itself\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">stderr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>fs <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span>file_src<span class=\"token punctuation\">,</span> <span class=\"token string\">\"r\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n               <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Can't open %s\\n\"</span><span class=\"token punctuation\">,</span> file_src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">else</span>\n          <span class=\"token punctuation\">{</span>\n               <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">setvbuf</span><span class=\"token punctuation\">(</span>fs<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> _IOFBF<span class=\"token punctuation\">,</span> BUFSIZE<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n               <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">fputs</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Can't create input buffer\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">stderr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n               <span class=\"token punctuation\">}</span>\n               <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>fs<span class=\"token punctuation\">,</span> fa<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n               <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">ferror</span><span class=\"token punctuation\">(</span>fs<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Error in reading file %s.\\n\"</span><span class=\"token punctuation\">,</span>\n                              file_src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n               <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">ferror</span><span class=\"token punctuation\">(</span>fa<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Error in writing file %s.\\n\"</span><span class=\"token punctuation\">,</span>\n                              file_app<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n               <span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span>fs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n               files<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n               <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"File %s appended.\\n\"</span><span class=\"token punctuation\">,</span> file_src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n               <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Next file (empty line to quit):\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n     <span class=\"token punctuation\">}</span>\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Done appending. %d files appended.\\n\"</span><span class=\"token punctuation\">,</span> files<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">rewind</span><span class=\"token punctuation\">(</span>fa<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s contents:\\n\"</span><span class=\"token punctuation\">,</span> file_app<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ch <span class=\"token operator\">=</span> <span class=\"token function\">getc</span><span class=\"token punctuation\">(</span>fa<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token constant\">EOF</span><span class=\"token punctuation\">)</span>\n          <span class=\"token function\">putchar</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Done displaying.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span>fa<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>FILE <span class=\"token operator\">*</span>source<span class=\"token punctuation\">,</span> FILE <span class=\"token operator\">*</span>dest<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token class-name\">size_t</span> bytes<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">static</span> <span class=\"token keyword\">char</span> temp<span class=\"token punctuation\">[</span>BUFSIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 只分配一次</span>\n\n     <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>bytes <span class=\"token operator\">=</span> <span class=\"token function\">fread</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> BUFSIZE<span class=\"token punctuation\">,</span> source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n          <span class=\"token function\">fwrite</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> bytes<span class=\"token punctuation\">,</span> dest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> <span class=\"token function\">s_gets</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> st<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> ret_val<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> find<span class=\"token punctuation\">;</span>\n\n     ret_val <span class=\"token operator\">=</span> <span class=\"token function\">fgets</span><span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> <span class=\"token constant\">stdin</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ret_val<span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n          find <span class=\"token operator\">=</span> <span class=\"token function\">strchr</span><span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">,</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 查找换行符</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>find<span class=\"token punctuation\">)</span>                    <span class=\"token comment\">// 如果地址不是NULL，</span>\n               <span class=\"token operator\">*</span>find <span class=\"token operator\">=</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">;</span>           <span class=\"token comment\">// 在此处放置一个空字符</span>\n          <span class=\"token keyword\">else</span>\n               <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n     <span class=\"token keyword\">return</span> ret_val<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"1379-用二进制io进行随机访问\"><a class=\"markdownIt-Anchor\" href=\"#1379-用二进制io进行随机访问\">#</a> 13.7.9 用二进制 I/O 进行随机访问</h5>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">/* randbin.c -- 用二进制I/O进行随机访问 */</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">ARSIZE</span> <span class=\"token expression\"><span class=\"token number\">1000</span></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">double</span> numbers<span class=\"token punctuation\">[</span>ARSIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">double</span> value<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> file <span class=\"token operator\">=</span> <span class=\"token string\">\"numbers.dat\"</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">long</span> pos<span class=\"token punctuation\">;</span>\n     FILE <span class=\"token operator\">*</span>iofile<span class=\"token punctuation\">;</span>\n\n     <span class=\"token comment\">// 创建一组 double类型的值</span>\n     <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> ARSIZE<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n          numbers<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">100.0</span> <span class=\"token operator\">*</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1.0</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token comment\">// 尝试打开文件</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>iofile <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">,</span> <span class=\"token string\">\"wb\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Could not open %s for output.\\n\"</span><span class=\"token punctuation\">,</span> file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>EXIT_FAILURE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n     <span class=\"token comment\">// 以二进制格式把数组写入文件</span>\n     <span class=\"token function\">fwrite</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ARSIZE<span class=\"token punctuation\">,</span> iofile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span>iofile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>iofile <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">,</span> <span class=\"token string\">\"rb\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span>\n               <span class=\"token string\">\"Could not open %s for random access.\\n\"</span><span class=\"token punctuation\">,</span> file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>EXIT_FAILURE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n     <span class=\"token comment\">// 从文件中读取选定的内容</span>\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter an index in the range 0-%d.\\n\"</span><span class=\"token punctuation\">,</span> ARSIZE <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> i <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> i <span class=\"token operator\">&lt;</span> ARSIZE<span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n          pos <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span> i <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 计算偏移量</span>\n          <span class=\"token function\">fseek</span><span class=\"token punctuation\">(</span>iofile<span class=\"token punctuation\">,</span> pos<span class=\"token punctuation\">,</span> <span class=\"token constant\">SEEK_SET</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// 定位到此处</span>\n          <span class=\"token function\">fread</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> iofile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The value there is %f.\\n\"</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Next index (out of range to quit):\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n     <span class=\"token comment\">// 完成</span>\n     <span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span>iofile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bye!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"第十四章-结构和其他数据形式\"><a class=\"markdownIt-Anchor\" href=\"#第十四章-结构和其他数据形式\">#</a> 第十四章 结构和其他数据形式</h3>\n<p>C 提供了<strong>机构变量</strong>提高表示数据的能力</p>\n<h4 id=\"141-示例问题创建图书目录\"><a class=\"markdownIt-Anchor\" href=\"#141-示例问题创建图书目录\">#</a> 14.1 示例问题：创建图书目录</h4>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">//* book.c -- 一本书的图书目录 */</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h&gt;</span></span>\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> <span class=\"token function\">s_gets</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> st<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MAXTITL</span>  <span class=\"token expression\"><span class=\"token number\">41</span>      </span><span class=\"token comment\">/* 书名的最大长度 + 1    */</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MAXAUTL</span>  <span class=\"token expression\"><span class=\"token number\">31</span>      </span><span class=\"token comment\">/* 作者姓名的最大长度 + 1*/</span></span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">book</span> <span class=\"token punctuation\">{</span>            <span class=\"token comment\">/* 结构模版：标记是 book */</span>\n     <span class=\"token keyword\">char</span> title<span class=\"token punctuation\">[</span>MAXTITL<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">char</span> author<span class=\"token punctuation\">[</span>MAXAUTL<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">float</span> value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>                       <span class=\"token comment\">/* 结构模版结束          */</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">struct</span> <span class=\"token class-name\">book</span> library<span class=\"token punctuation\">;</span>    <span class=\"token comment\">/* 把 library 声明为一个 book 类型的变量 */</span>\n\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Please enter the book title.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">s_gets</span><span class=\"token punctuation\">(</span>library<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">,</span> MAXTITL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">/* 访问title部分*/</span>\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Now enter the author.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">s_gets</span><span class=\"token punctuation\">(</span>library<span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">,</span> MAXAUTL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Now enter the value.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%f\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>library<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s by %s: $%.2f\\n\"</span><span class=\"token punctuation\">,</span> library<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">,</span>\n          library<span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">,</span> library<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s: \\\"%s\\\" ($%.2f)\\n\"</span><span class=\"token punctuation\">,</span> library<span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">,</span>\n             library<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">,</span> library<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Done.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> <span class=\"token function\">s_gets</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> st<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> ret_val<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> find<span class=\"token punctuation\">;</span>\n\n     ret_val <span class=\"token operator\">=</span> <span class=\"token function\">fgets</span><span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> <span class=\"token constant\">stdin</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ret_val<span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n          find <span class=\"token operator\">=</span> <span class=\"token function\">strchr</span><span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">,</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 查找换行符</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>find<span class=\"token punctuation\">)</span>                    <span class=\"token comment\">// 如果地址不是 NULL,</span>\n               <span class=\"token operator\">*</span>find <span class=\"token operator\">=</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">;</span>           <span class=\"token comment\">// 在此处放置一个空字符</span>\n          <span class=\"token keyword\">else</span>\n               <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">//处理输入行中剩余的字符</span>\n     <span class=\"token punctuation\">}</span>\n     <span class=\"token keyword\">return</span> ret_val<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>结构有三部分，每个部分称为<strong>成员</strong>或者<strong>字段</strong></p>\n<ul>\n<li>为结构建立一个格式或样式</li>\n<li>声明一个适合该样式的变量</li>\n<li>访问结构变量的各个部分</li>\n</ul>\n<h4 id=\"142-建立结构声明\"><a class=\"markdownIt-Anchor\" href=\"#142-建立结构声明\">#</a> 14.2 建立结构声明</h4>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">book</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">char</span> title<span class=\"token punctuation\">[</span>MAXTITL<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">char</span> author<span class=\"token punctuation\">[</span>MAXAUTL<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">float</span> value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>两个字符数组和一个 <code>float</code>  类型变量组成的结构，该声明描述了该对象由什么组成</p>\n<p>关键字 <code>struct</code>  后面跟着的是<strong>标记</strong>，程序中可以通过词标记引用该结构</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">book</span> library<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>把 <code>library</code>  声明为一个使用 <code>book</code>  结构布局的结构变量</p>\n<p>结构内部被称为结构成员列表，每个成员都用自己的声明来描述</p>\n<h4 id=\"143-定义结构变量\"><a class=\"markdownIt-Anchor\" href=\"#143-定义结构变量\">#</a> 14.3 定义结构变量</h4>\n<p>结构有两层含义</p>\n<ul>\n<li>结构布局：告诉编译器如何表示数据</li>\n<li>创建结构变量:  eg: struct book library</li>\n</ul>\n<p><a href=\"https://imgtu.com/i/TnvExU\"><img src=\"https://s4.ax1x.com/2021/12/20/TnvExU.png\" alt=\"TnvExU.png\"></a></p>\n<p>编译器创建一个结构变量 <code>libarary</code> , 使用 <code>book</code>  模板为该变量分配空间：一个 <code>MAXTITL</code>  个元素的 <code>char</code>  数组，一个内涵 <code>MAXAITL</code>  个元素 <code>char</code>  数组和一个 <code>float</code>  类型的变量，这些存储空间都与一个名称 <code>libarary</code>  结合在一起</p>\n<p>完整声明</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">book</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">char</span> title<span class=\"token punctuation\">[</span>MAXTITL<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">char</span> author<span class=\"token punctuation\">[</span>AXAUTL<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">float</span> value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> library<span class=\"token punctuation\">;</span>    <span class=\"token comment\">/* 声明的右花括号后跟变量名*/</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* 无结构标记 */</span>\n     <span class=\"token keyword\">char</span> title<span class=\"token punctuation\">[</span>MAXTITL<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">char</span> author<span class=\"token punctuation\">[</span>MAXAUTL<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">float</span> value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> library<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>如果打算多次使用结构模板，就要使用带标记的形式，或者使用 <code>typedef</code></p>\n<h5 id=\"1431-初始化结构\"><a class=\"markdownIt-Anchor\" href=\"#1431-初始化结构\">#</a> 14.3.1 初始化结构</h5>\n<p>也可以如此初始化</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">book</span> library <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token string\">\"The Pious Pirate and the Devious Damsel\"</span><span class=\"token punctuation\">,</span>\n     <span class=\"token string\">\"Renee Vivotte\"</span><span class=\"token punctuation\">,</span>\n     <span class=\"token number\">1.95</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>需要注意的时，如果初始的是一个静态存储期的结构，初始化列表中的值必须是常量表达式</p>\n<h5 id=\"1432-访问结构成员\"><a class=\"markdownIt-Anchor\" href=\"#1432-访问结构成员\">#</a> 14.3.2 访问结构成员</h5>\n<p>访问结构中的成员使用<strong>结构成员运算符</strong>–点 ( <code>.</code> ) 访问结构中的成员</p>\n<h5 id=\"1433-结构的初始化器\"><a class=\"markdownIt-Anchor\" href=\"#1433-结构的初始化器\">#</a> 14.3.3 结构的初始化器</h5>\n<p>结构的初始化器可以使用点运算符和成员名标识特定的元素</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">book</span> gift <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token number\">25.99</span><span class=\"token punctuation\">,</span>\n                     <span class=\"token punctuation\">.</span>author <span class=\"token operator\">=</span> <span class=\"token string\">\"James Broadfool\"</span><span class=\"token punctuation\">,</span>\n                     <span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token string\">\"Rue for the Toad\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">book</span> gift<span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token number\">18.90</span><span class=\"token punctuation\">,</span>\n                   <span class=\"token punctuation\">.</span>author <span class=\"token operator\">=</span> <span class=\"token string\">\"Philionna Pestle\"</span><span class=\"token punctuation\">,</span>\n                   <span class=\"token number\">0.25</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n                   <span class=\"token comment\">// 此时value的值是0.25,因为后面的赋值0.25将前面的赋值18.90覆盖了</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"144-结构数组\"><a class=\"markdownIt-Anchor\" href=\"#144-结构数组\">#</a> 14.4 结构数组</h4>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">/* manybook.c -- 包含多本书的图书目录 */</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h&gt;</span></span>\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> <span class=\"token function\">s_gets</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> st<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MAXTITL</span>   <span class=\"token expression\"><span class=\"token number\">40</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MAXAUTL</span>   <span class=\"token expression\"><span class=\"token number\">40</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MAXBKS</span>   <span class=\"token expression\"><span class=\"token number\">100</span>         </span><span class=\"token comment\">/* 书籍的最大数量  */</span></span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">book</span> <span class=\"token punctuation\">{</span>                <span class=\"token comment\">/* 建立 book 模板     */</span>\n     <span class=\"token keyword\">char</span> title<span class=\"token punctuation\">[</span>MAXTITL<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">char</span> author<span class=\"token punctuation\">[</span>MAXAUTL<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">float</span> value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">struct</span> <span class=\"token class-name\">book</span> library<span class=\"token punctuation\">[</span>MAXBKS<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">/*  book 类型结构的数组 */</span>\n     <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">;</span>\n\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Please enter the book title.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Press [enter] at the start of a line to stop.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">&lt;</span> MAXBKS <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">s_gets</span><span class=\"token punctuation\">(</span>library<span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">,</span> MAXTITL<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span>\n          <span class=\"token operator\">&amp;&amp;</span> library<span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Now enter the author.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">s_gets</span><span class=\"token punctuation\">(</span>library<span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">,</span> MAXAUTL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Now enter the value.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%f\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>library<span class=\"token punctuation\">[</span>count<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n               <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">/* 清理输入行*/</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">&lt;</span> MAXBKS<span class=\"token punctuation\">)</span>\n               <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter the next title.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Here is the list of your books:\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> index <span class=\"token operator\">&lt;</span> count<span class=\"token punctuation\">;</span> index<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n               <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s by %s: $%.2f\\n\"</span><span class=\"token punctuation\">,</span> library<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">,</span>\n               library<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">,</span> library<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n     <span class=\"token keyword\">else</span>\n          <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"No books? Too bad.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> <span class=\"token function\">s_gets</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> st<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> ret_val<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> find<span class=\"token punctuation\">;</span>\n\n     ret_val <span class=\"token operator\">=</span> <span class=\"token function\">fgets</span><span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> <span class=\"token constant\">stdin</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ret_val<span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n          find <span class=\"token operator\">=</span> <span class=\"token function\">strchr</span><span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">,</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 查找换行符</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>find<span class=\"token punctuation\">)</span>                   <span class=\"token comment\">// 如果地址不是 NULL，</span>\n               <span class=\"token operator\">*</span>find <span class=\"token operator\">=</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// 在此处放置一个空字符</span>\n          <span class=\"token keyword\">else</span>\n               <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// 处理输入行中剩余的字符</span>\n     <span class=\"token punctuation\">}</span>\n     <span class=\"token keyword\">return</span> ret_val<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>该数组是自动存储类别的对象，信息存储在栈中，而如此大的数组需要很大的内存，可能会因为栈太小导致内存溢出出现错误，可以通过编译器修改栈的大小或者可以创建静态或者外部数组 (这样编译器就不会把数组放在栈中)</p>\n<h5 id=\"1441-声明结构数组\"><a class=\"markdownIt-Anchor\" href=\"#1441-声明结构数组\">#</a> 14.4.1 声明结构数组</h5>\n<pre class=\"line-numbers language-w\" data-language=\"w\"><code class=\"language-w\">struct book library[MAXBKS];<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><a href=\"https://imgtu.com/i/TuSyQK\"><img src=\"https://s4.ax1x.com/2021/12/20/TuSyQK.png\" alt=\"TuSyQK.png\"></a></p>\n<h5 id=\"1442-标识结构数组的成员\"><a class=\"markdownIt-Anchor\" href=\"#1442-标识结构数组的成员\">#</a> 14.4.2 标识结构数组的成员</h5>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">library<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>value    <span class=\"token comment\">/* 第1个数组元素与value 相关联 */</span>\nlibrary<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>title    <span class=\"token comment\">/* 第5个数组元素与title 相关联 */</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">library               <span class=\"token comment\">// 一个book 结构的数组</span>\nlibrary<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>            <span class=\"token comment\">// 一个数组元素，该元素是book结构</span>\nlibrary<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>title      <span class=\"token comment\">// 一个char数组（library[2]的title成员）</span>\nlibrary<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span>   <span class=\"token comment\">// 数组中library[2]元素的title 成员的一个字符</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"1443-程序讨论\"><a class=\"markdownIt-Anchor\" href=\"#1443-程序讨论\">#</a> 14.4.3 程序讨论</h5>\n<h4 id=\"145嵌套结构\"><a class=\"markdownIt-Anchor\" href=\"#145嵌套结构\">#</a> 14.5 嵌套结构</h4>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// friend.c -- 嵌套结构示例</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">LEN</span> <span class=\"token expression\"><span class=\"token number\">20</span></span></span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> msgs<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token string\">\"    Thank you for the wonderful evening, \"</span><span class=\"token punctuation\">,</span>\n     <span class=\"token string\">\"You certainly prove that a \"</span><span class=\"token punctuation\">,</span>\n     <span class=\"token string\">\"is a special kind of guy. We must get together\"</span><span class=\"token punctuation\">,</span>\n     <span class=\"token string\">\"over a delicious \"</span><span class=\"token punctuation\">,</span>\n     <span class=\"token string\">\" and have a few laughs\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">names</span> <span class=\"token punctuation\">{</span>                   <span class=\"token comment\">// 第1个结构</span>\n     <span class=\"token keyword\">char</span> first<span class=\"token punctuation\">[</span>LEN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">char</span> last<span class=\"token punctuation\">[</span>LEN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">guy</span> <span class=\"token punctuation\">{</span>                     <span class=\"token comment\">// 第2个结构</span>\n     <span class=\"token keyword\">struct</span> <span class=\"token class-name\">names</span> handle<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 嵌套结构</span>\n     <span class=\"token keyword\">char</span> favfood<span class=\"token punctuation\">[</span>LEN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">char</span> job<span class=\"token punctuation\">[</span>LEN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">float</span> income<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">struct</span> <span class=\"token class-name\">guy</span> fellow <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>        <span class=\"token comment\">// 初始化一个结构变量</span>\n               <span class=\"token punctuation\">{</span> <span class=\"token string\">\"Ewen\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Villard\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n               <span class=\"token string\">\"grilled salmon\"</span><span class=\"token punctuation\">,</span>\n               <span class=\"token string\">\"personality coach\"</span><span class=\"token punctuation\">,</span>\n               <span class=\"token number\">68112.00</span>\n     <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Dear %s, \\n\\n\"</span><span class=\"token punctuation\">,</span> fellow<span class=\"token punctuation\">.</span>handle<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s%s.\\n\"</span><span class=\"token punctuation\">,</span> msgs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> fellow<span class=\"token punctuation\">.</span>handle<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s%s\\n\"</span><span class=\"token punctuation\">,</span> msgs<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> fellow<span class=\"token punctuation\">.</span>job<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> msgs<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s%s%s\"</span><span class=\"token punctuation\">,</span> msgs<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> fellow<span class=\"token punctuation\">.</span>favfood<span class=\"token punctuation\">,</span> msgs<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fellow<span class=\"token punctuation\">.</span>income <span class=\"token operator\">&gt;</span> <span class=\"token number\">150000.0</span><span class=\"token punctuation\">)</span>\n          <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"!!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fellow<span class=\"token punctuation\">.</span>income <span class=\"token operator\">&gt;</span> <span class=\"token number\">75000.0</span><span class=\"token punctuation\">)</span>\n          <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">else</span>\n          <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n%40s%s\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"See you soon,\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%40s%s\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Shalala\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"146-指向结构的指针\"><a class=\"markdownIt-Anchor\" href=\"#146-指向结构的指针\">#</a> 14.6 指向结构的指针</h4>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">/* friends.c -- 使用指向结构的指针 */</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">LEN</span> <span class=\"token expression\"><span class=\"token number\">20</span></span></span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">names</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">char</span> first<span class=\"token punctuation\">[</span>LEN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">char</span> last<span class=\"token punctuation\">[</span>LEN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">guy</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">struct</span> <span class=\"token class-name\">names</span> handle<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">char</span> favfood<span class=\"token punctuation\">[</span>LEN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">char</span> job<span class=\"token punctuation\">[</span>LEN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">float</span> income<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">struct</span> <span class=\"token class-name\">guy</span> fellow<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n               <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"Ewen\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Villard\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token string\">\"grilled salmon\"</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token string\">\"personality coach\"</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token number\">68112.00</span>\n               <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n               <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"Rodney\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Swillbelly\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token string\">\"tripe\"</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token string\">\"tabloid editor\"</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token number\">432400.00</span>\n               <span class=\"token punctuation\">}</span>\n     <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">struct</span> <span class=\"token class-name\">guy</span> <span class=\"token operator\">*</span> him<span class=\"token punctuation\">;</span>        <span class=\"token comment\">/* 这是一个指向结构的指针 */</span>\n\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"address #1: %p #2: %p\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>fellow<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>fellow<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     him <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>fellow<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">/* 告诉编译器该指针指向何处  */</span>\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pointer #1: %p #2: %p\\n\"</span><span class=\"token punctuation\">,</span> him<span class=\"token punctuation\">,</span> him <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"him-&gt;income is $%.2f: (*him).income is $%.2f\\n\"</span><span class=\"token punctuation\">,</span>\n               him<span class=\"token operator\">-&gt;</span>income<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>him<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>income<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     him<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>                <span class=\"token comment\">/* 指向下一个结构      */</span>\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"him-&gt;favfood is %s:  him-&gt;handle.last is %s\\n\"</span><span class=\"token punctuation\">,</span>\n               him<span class=\"token operator\">-&gt;</span>favfood<span class=\"token punctuation\">,</span> him<span class=\"token operator\">-&gt;</span>handle<span class=\"token punctuation\">.</span>last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"1461-声明和初始化结构指针\"><a class=\"markdownIt-Anchor\" href=\"#1461-声明和初始化结构指针\">#</a> 14.6.1 声明和初始化结构指针</h5>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">guy</span> <span class=\"token operator\">*</span> him<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>him 是一个可以指向任意 guy 机构的指针</p>\n<p>结构变量名并不是结构变量的地址，所以要在结构变量名前面机上 <code>&amp;</code>  运算符来获取地址</p>\n<h5 id=\"1462-用指针访问成员\"><a class=\"markdownIt-Anchor\" href=\"#1462-用指针访问成员\">#</a> 14.6.2 用指针访问成员</h5>\n<ol>\n<li>\n<p>第一种方法</p>\n<p>使用  <code>-&gt;</code>  运算符</p>\n<p>如果 him == &amp;barney，那么 him-&gt;income 即是 barney.income</p>\n</li>\n<li>\n<p>第二种方法</p>\n<p>按照顺序指定结构成员的值</p>\n</li>\n</ol>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">fellow<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>income <span class=\"token operator\">==</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>him<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>income\n    <span class=\"token comment\">// 注意.运算符比*运算符的优先级高</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">barney<span class=\"token punctuation\">.</span>income <span class=\"token operator\">==</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>him<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>income <span class=\"token operator\">==</span> him<span class=\"token operator\">-&gt;</span>income <span class=\"token comment\">// 假设 him == &amp;barney</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"147-向函数传递结构信息\"><a class=\"markdownIt-Anchor\" href=\"#147-向函数传递结构信息\">#</a> 14.7 向函数传递结构信息</h4>\n<h5 id=\"1471-传递结构成员\"><a class=\"markdownIt-Anchor\" href=\"#1471-传递结构成员\">#</a> 14.7.1 传递结构成员</h5>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">/* funds1.c -- 把结构成员作为参数传递 */</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">FUNDLEN</span> <span class=\"token expression\"><span class=\"token number\">50</span></span></span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">funds</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">char</span>      bank<span class=\"token punctuation\">[</span>FUNDLEN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">double</span>    bankfund<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">char</span>      save<span class=\"token punctuation\">[</span>FUNDLEN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">double</span>    savefund<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">double</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">struct</span> <span class=\"token class-name\">funds</span> stan <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token string\">\"Garlic-Melon Bank\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token number\">4032.27</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string\">\"Lucky's Savings and Loan\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token number\">8543.94</span>\n     <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Stan has a total of $%.2f.\\n\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>stan<span class=\"token punctuation\">.</span>bankfund<span class=\"token punctuation\">,</span> stan<span class=\"token punctuation\">.</span>savefund<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* 两个double类型的数相加 */</span>\n<span class=\"token keyword\">double</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> y<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>因为结构成员是 double 类型，所以可以当做 double 类型的常量直接传入函数中</p>\n<h5 id=\"1472-传递结构的地址\"><a class=\"markdownIt-Anchor\" href=\"#1472-传递结构的地址\">#</a> 14.7.2 传递结构的地址</h5>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">/* funds2.c -- 传递指向结构的指针 */</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">FUNDLEN</span> <span class=\"token expression\"><span class=\"token number\">50</span></span></span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">funds</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">char</span>      bank<span class=\"token punctuation\">[</span>FUNDLEN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">double</span>    bankfund<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">char</span>      save<span class=\"token punctuation\">[</span>FUNDLEN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">double</span>    savefund<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">double</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">funds</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">/* 参数是一个指针 */</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">struct</span> <span class=\"token class-name\">funds</span> stan <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token string\">\"Garlic-Melon Bank\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token number\">4032.27</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string\">\"Lucky's Savings and Loan\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token number\">8543.94</span>\n     <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Stan has a total of $%.2f.\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>stan<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">double</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">funds</span> <span class=\"token operator\">*</span> money<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>money<span class=\"token operator\">-&gt;</span>bankfund <span class=\"token operator\">+</span> money<span class=\"token operator\">-&gt;</span>savefund<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"1473-传递结构\"><a class=\"markdownIt-Anchor\" href=\"#1473-传递结构\">#</a> 14.7.3 传递结构</h5>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">/* funds3.c -- 传递一个结构 */</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">FUNDLEN</span> <span class=\"token expression\"><span class=\"token number\">50</span></span></span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">funds</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">char</span>   bank<span class=\"token punctuation\">[</span>FUNDLEN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">double</span> bankfund<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">char</span>   save<span class=\"token punctuation\">[</span>FUNDLEN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">double</span> savefund<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">double</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">funds</span> moolah<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">/* 参数是一个结构 */</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">struct</span> <span class=\"token class-name\">funds</span> stan <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token string\">\"Garlic-Melon Bank\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token number\">4032.27</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string\">\"Lucky's Savings and Loan\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token number\">8543.94</span>\n     <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Stan has a total of $%.2f.\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>stan<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">double</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">funds</span> moolah<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>moolah<span class=\"token punctuation\">.</span>bankfund <span class=\"token operator\">+</span> moolah<span class=\"token punctuation\">.</span>savefund<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"1474-其他结构特性\"><a class=\"markdownIt-Anchor\" href=\"#1474-其他结构特性\">#</a> 14.7.4 其他结构特性</h5>\n<p>C 允许同类型的结构相互赋值</p>\n<p>C 也允许把一个结构初始化为相同类型的另一个结构</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">names</span> right_field <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"Ruthie\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"George\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">names</span> captain <span class=\"token operator\">=</span> right_field<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 把一个结构初始化为另一个结构</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>C 结构不仅可以作为参数传递，还能把结构作为返回值返回</p>\n<ol>\n<li>第一种用法</li>\n</ol>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">/* names1.c -- 使用指向结构的指针 */</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h&gt;</span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">NLEN</span> <span class=\"token expression\"><span class=\"token number\">30</span></span></span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">namect</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">char</span> fname<span class=\"token punctuation\">[</span>NLEN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">char</span> lname<span class=\"token punctuation\">[</span>NLEN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">int</span> letters<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">getinfo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">namect</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">makeinfo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">namect</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">showinfo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">namect</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> <span class=\"token function\">s_gets</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> st<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">struct</span> <span class=\"token class-name\">namect</span> person<span class=\"token punctuation\">;</span>\n\n     <span class=\"token function\">getinfo</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">makeinfo</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">showinfo</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">getinfo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">namect</span> <span class=\"token operator\">*</span> pst<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Please enter your first name.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">s_gets</span><span class=\"token punctuation\">(</span>pst<span class=\"token operator\">-&gt;</span>fname<span class=\"token punctuation\">,</span> NLEN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Please enter your last name.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">s_gets</span><span class=\"token punctuation\">(</span>pst<span class=\"token operator\">-&gt;</span>lname<span class=\"token punctuation\">,</span> NLEN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">makeinfo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">namect</span> <span class=\"token operator\">*</span> pst<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     pst<span class=\"token operator\">-&gt;</span>letters <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>pst<span class=\"token operator\">-&gt;</span>fname<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>pst<span class=\"token operator\">-&gt;</span>lname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">showinfo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">namect</span> <span class=\"token operator\">*</span> pst<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s %s, your name contains %d letters.\\n\"</span><span class=\"token punctuation\">,</span>\n               pst<span class=\"token operator\">-&gt;</span>fname<span class=\"token punctuation\">,</span> pst<span class=\"token operator\">-&gt;</span>lname<span class=\"token punctuation\">,</span> pst<span class=\"token operator\">-&gt;</span>letters<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> <span class=\"token function\">s_gets</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> st<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> ret_val<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> find<span class=\"token punctuation\">;</span>\n\n     ret_val <span class=\"token operator\">=</span> <span class=\"token function\">fgets</span><span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> <span class=\"token constant\">stdin</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ret_val<span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n          find <span class=\"token operator\">=</span> <span class=\"token function\">strchr</span><span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">,</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 查找换行符</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>find<span class=\"token punctuation\">)</span>                   <span class=\"token comment\">// 如果地址不是 NULL,</span>\n               <span class=\"token operator\">*</span>find <span class=\"token operator\">=</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// 在此处放置一个空字符</span>\n          <span class=\"token keyword\">else</span>\n               <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// 处理输入行的剩余字符</span>\n     <span class=\"token punctuation\">}</span>\n     <span class=\"token keyword\">return</span> ret_val<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol start=\"2\">\n<li>第二种用法</li>\n</ol>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">/* names2.c -- 传递并返回结构 */</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h&gt;</span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">NLEN</span> <span class=\"token expression\"><span class=\"token number\">30</span></span></span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">namect</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">char</span> fname<span class=\"token punctuation\">[</span>NLEN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">char</span> lname<span class=\"token punctuation\">[</span>NLEN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">int</span> letters<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">namect</span> <span class=\"token function\">getinfo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">namect</span> <span class=\"token function\">makeinfo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">namect</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">showinfo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">namect</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> <span class=\"token function\">s_gets</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> st<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">struct</span> <span class=\"token class-name\">namect</span> person<span class=\"token punctuation\">;</span>\n\n     person <span class=\"token operator\">=</span> <span class=\"token function\">getinfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     person <span class=\"token operator\">=</span> <span class=\"token function\">makeinfo</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">showinfo</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">namect</span> <span class=\"token function\">getinfo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">struct</span> <span class=\"token class-name\">namect</span> temp<span class=\"token punctuation\">;</span>\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Please enter your first name.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">s_gets</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">.</span>fname<span class=\"token punctuation\">,</span> NLEN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Please enter your last name.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">s_gets</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">.</span>lname<span class=\"token punctuation\">,</span> NLEN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token keyword\">return</span> temp<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">namect</span> <span class=\"token function\">makeinfo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">namect</span> info<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     info<span class=\"token punctuation\">.</span>letters <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">.</span>fname<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">.</span>lname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token keyword\">return</span> info<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">showinfo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">namect</span> info<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s %s, your name contains %d letters.\\n\"</span><span class=\"token punctuation\">,</span>\n               info<span class=\"token punctuation\">.</span>fname<span class=\"token punctuation\">,</span> info<span class=\"token punctuation\">.</span>lname<span class=\"token punctuation\">,</span> info<span class=\"token punctuation\">.</span>letters<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> <span class=\"token function\">s_gets</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> st<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> ret_val<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> find<span class=\"token punctuation\">;</span>\n\n     ret_val <span class=\"token operator\">=</span> <span class=\"token function\">fgets</span><span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> <span class=\"token constant\">stdin</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ret_val<span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n          find <span class=\"token operator\">=</span> <span class=\"token function\">strchr</span><span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">,</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 查找换行符</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>find<span class=\"token punctuation\">)</span>                   <span class=\"token comment\">// 如果地址不是 NULL，</span>\n               <span class=\"token operator\">*</span>find <span class=\"token operator\">=</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// 在此处放置一个空字符</span>\n          <span class=\"token keyword\">else</span>\n               <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// 处理输入行的剩余部分</span>\n     <span class=\"token punctuation\">}</span>\n     <span class=\"token keyword\">return</span> ret_val<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"1475-结构和结构指针的选择\"><a class=\"markdownIt-Anchor\" href=\"#1475-结构和结构指针的选择\">#</a> 14.7.5 结构和结构指针的选择</h5>\n<p>传递结构的两个缺点</p>\n<ul>\n<li>老版本无法处理这样的代码</li>\n<li>传递结构浪费时间和空间</li>\n</ul>\n<p>程序员追求效率会使用结构指针作为函数参数，如需返回原始数据被意外修改，使用 <code>const</code>  修改符</p>\n<p>按值传递结构是处理小型结构最常用的方法</p>\n<h5 id=\"1476-结构中的字符数组和字符指针\"><a class=\"markdownIt-Anchor\" href=\"#1476-结构中的字符数组和字符指针\">#</a> 14.7.6 结构中的字符数组和字符指针</h5>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">LEN</span> <span class=\"token expression\"><span class=\"token number\">20</span></span></span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">names</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">char</span> first<span class=\"token punctuation\">[</span>LEN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">char</span> last<span class=\"token punctuation\">[</span>LEN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//会为数组分配内存</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">pnames</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> first<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> last<span class=\"token punctuation\">;</span>   <span class=\"token comment\">//指针只是存储地址不会分配内存,这样字符串会存储在别的地方,结构里面的指针只是用来管理别的地方的字符串的地址而已</span>\n    <span class=\"token comment\">//由于初始化的指针没有给任何地址,所以传进来的字符串可能放在任何地方，运气好程序可以正常运行 运气不好可能会导致程序崩溃</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">names</span> veep <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"Talia\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Summers\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">pnames</span> treas <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"Brad\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Fallingjaw\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s and %s\\n\"</span><span class=\"token punctuation\">,</span> veep<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">,</span> treas<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//可以正常于运行</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>结构存储字符串，用字符数组作为成员比较简单</li>\n<li>用指向 <code>char</code>  的指针，误用就会导致严重的问题</li>\n</ul>\n<h5 id=\"1477-结构指针和malloc\"><a class=\"markdownIt-Anchor\" href=\"#1477-结构指针和malloc\">#</a> 14.7.7 结构，指针和 <code>malloc()</code></h5>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">namect</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> fname<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 用指针代替数组</span>\n     <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> lname<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">int</span> letters<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">getinfo</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">namect</span> <span class=\"token operator\">*</span> pst<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">char</span> temp<span class=\"token punctuation\">[</span>SLEN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Please enter your first name.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">s_gets</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">,</span> SLEN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token comment\">// 分配内存存储名</span>\n     pst<span class=\"token operator\">-&gt;</span>fname <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token comment\">// 把名拷贝到已分配的内存</span>\n     <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>pst<span class=\"token operator\">-&gt;</span>fname<span class=\"token punctuation\">,</span> temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Please enter your last name.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">s_gets</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">,</span> SLEN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     pst<span class=\"token operator\">-&gt;</span>lname <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>pst<span class=\"token operator\">-&gt;</span>lname<span class=\"token punctuation\">,</span> temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//这两个字符串都没存储在结构中,他们都存储在malloc()份额皮的内存块中 结构中存储着这两个字符串的地址</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// names3.c -- 使用指针和 malloc()</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h&gt;</span>   <span class=\"token comment\">// 提供 strcpy()、strlen() 的原型</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h&gt;</span>   <span class=\"token comment\">// 提供 malloc()、free() 的原型</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SLEN</span> <span class=\"token expression\"><span class=\"token number\">81</span></span></span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">namect</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> fname<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 使用指针</span>\n     <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> lname<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">int</span> letters<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">getinfo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">namect</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 分配内存</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">makeinfo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">namect</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">showinfo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">namect</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">cleanup</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">namect</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 调用该函数时释放内存</span>\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> <span class=\"token function\">s_gets</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> st<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">struct</span> <span class=\"token class-name\">namect</span> person<span class=\"token punctuation\">;</span>\n\n     <span class=\"token function\">getinfo</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">makeinfo</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">showinfo</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">cleanup</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">getinfo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">namect</span> <span class=\"token operator\">*</span> pst<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">char</span> temp<span class=\"token punctuation\">[</span>SLEN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Please enter your first name.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">s_gets</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">,</span> SLEN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token comment\">// 分配内存以存储名</span>\n     pst<span class=\"token operator\">-&gt;</span>fname <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token comment\">// 把名拷贝到动态分配的内存中</span>\n     <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>pst<span class=\"token operator\">-&gt;</span>fname<span class=\"token punctuation\">,</span> temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Please enter your last name.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">s_gets</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">,</span> SLEN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     pst<span class=\"token operator\">-&gt;</span>lname <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>pst<span class=\"token operator\">-&gt;</span>lname<span class=\"token punctuation\">,</span> temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">makeinfo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">namect</span> <span class=\"token operator\">*</span> pst<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     pst<span class=\"token operator\">-&gt;</span>letters <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>pst<span class=\"token operator\">-&gt;</span>fname<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>\n          <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>pst<span class=\"token operator\">-&gt;</span>lname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">showinfo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">namect</span> <span class=\"token operator\">*</span> pst<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s %s, your name contains %d letters.\\n\"</span><span class=\"token punctuation\">,</span>\n          pst<span class=\"token operator\">-&gt;</span>fname<span class=\"token punctuation\">,</span> pst<span class=\"token operator\">-&gt;</span>lname<span class=\"token punctuation\">,</span> pst<span class=\"token operator\">-&gt;</span>letters<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">cleanup</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">namect</span> <span class=\"token operator\">*</span> pst<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>pst<span class=\"token operator\">-&gt;</span>fname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>pst<span class=\"token operator\">-&gt;</span>lname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> <span class=\"token function\">s_gets</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> st<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> ret_val<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> find<span class=\"token punctuation\">;</span>\n\n     ret_val <span class=\"token operator\">=</span> <span class=\"token function\">fgets</span><span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> <span class=\"token constant\">stdin</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ret_val<span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n          find <span class=\"token operator\">=</span> <span class=\"token function\">strchr</span><span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">,</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 查找换行符</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>find<span class=\"token punctuation\">)</span>                   <span class=\"token comment\">// 如果地址不是 NULL，</span>\n               <span class=\"token operator\">*</span>find <span class=\"token operator\">=</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// 在此处放置一个空字符</span>\n          <span class=\"token keyword\">else</span>\n               <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// 处理输入行的剩余部分</span>\n     <span class=\"token punctuation\">}</span>\n     <span class=\"token keyword\">return</span> ret_val<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>将 <code>malloc()</code>  与 <code>free()</code>  一起使用</p>\n<h5 id=\"1478-复合字面量和结构\"><a class=\"markdownIt-Anchor\" href=\"#1478-复合字面量和结构\">#</a> 14.7.8 复合字面量和结构</h5>\n<p>如果只需要一个临时结构值，可以使用复合字面量</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">book</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"The Idiot\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Fyodor Dostoyevsky\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6.99</span><span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">/* complit.c -- 复合字面量 */</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MAXTITL</span>  <span class=\"token expression\"><span class=\"token number\">41</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MAXAUTL</span>  <span class=\"token expression\"><span class=\"token number\">31</span></span></span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">book</span> <span class=\"token punctuation\">{</span>          <span class=\"token comment\">// 结构模版：标记是 book</span>\n     <span class=\"token keyword\">char</span> title<span class=\"token punctuation\">[</span>MAXTITL<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">char</span> author<span class=\"token punctuation\">[</span>MAXAUTL<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">float</span> value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">struct</span> <span class=\"token class-name\">book</span> readfirst<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">int</span> score<span class=\"token punctuation\">;</span>\n\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter test score: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>score<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>score <span class=\"token operator\">&gt;=</span> <span class=\"token number\">84</span><span class=\"token punctuation\">)</span>\n          readfirst <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">book</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"Crime and Punishment\"</span><span class=\"token punctuation\">,</span>\n                                     <span class=\"token string\">\"Fyodor Dostoyevsky\"</span><span class=\"token punctuation\">,</span>\n                                     <span class=\"token number\">11.25</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">else</span>\n          readfirst <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">book</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"Mr. Bouncy's Nice Hat\"</span><span class=\"token punctuation\">,</span>\n                                     <span class=\"token string\">\"Fred Winsome\"</span><span class=\"token punctuation\">,</span>\n                                     <span class=\"token number\">5.99</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Your assigned reading:\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s by %s: $%.2f\\n\"</span><span class=\"token punctuation\">,</span> readfirst<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">,</span>\n          readfirst<span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">,</span> readfirst<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>\n<p>如果函数接受一个结构，可以把复合字面量作为实际参数传递</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">rect</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">double</span> x<span class=\"token punctuation\">;</span> <span class=\"token keyword\">double</span> y<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">double</span> <span class=\"token function\">rect_area</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">rect</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> r<span class=\"token punctuation\">.</span>x <span class=\"token operator\">*</span> r<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">double</span> area<span class=\"token punctuation\">;</span>\narea <span class=\"token operator\">=</span> <span class=\"token function\">rect_area</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">rect</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token number\">10.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20.0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>如果函数接受一个地址，可以传递复合字面量的地址</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">rect</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">double</span> x<span class=\"token punctuation\">;</span> <span class=\"token keyword\">double</span> y<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">double</span> <span class=\"token function\">rect_areap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">rect</span> <span class=\"token operator\">*</span> rp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> rp<span class=\"token operator\">-&gt;</span>x <span class=\"token operator\">*</span> rp<span class=\"token operator\">-&gt;</span>y<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">double</span> area<span class=\"token punctuation\">;</span>\narea <span class=\"token operator\">=</span> <span class=\"token function\">rect_areap</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">rect</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token number\">10.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20.0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ul>\n<h5 id=\"1479-伸缩型数组成员c99\"><a class=\"markdownIt-Anchor\" href=\"#1479-伸缩型数组成员c99\">#</a> 14.7.9 伸缩型数组成员 (C99)</h5>\n<p>C99 新增特性:<strong> 伸缩性数组成员</strong>，利用这项特性声明的结构，其最后一个数组成员具有一些特性</p>\n<ul>\n<li>该数组不会立即存在</li>\n<li>使用这个伸缩性数组成员可以编写合适的代码，就好像它确实存在并具有所需数目的元素一样</li>\n</ul>\n<p>声明一个伸缩性数组成员有如下规则</p>\n<ul>\n<li>伸缩性数组成员必须是结构的最后一个成员</li>\n<li>结构中必须至少有一个成员</li>\n<li>伸缩数组的声明类似于普通数组，只是它的方括号中是空的</li>\n</ul>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">flex</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">double</span> average<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">double</span> scores<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 伸缩型数组成员</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>不能使用 <code>scores</code>  做任何事，因为没有给这个数组预留空间</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">flex</span> <span class=\"token operator\">*</span> pf<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 声明一个指针</span>\n<span class=\"token comment\">// 请求为一个结构和一个数组分配存储空间</span>\npf <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">flex</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">5</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>此时 就有足够的空间存储 <code>count</code> , <code>average</code>  和一个内含 5 个 <code>double</code>  类型值的数组。可以用指针 <code>pf</code>  访问这些成员</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">pf<span class=\"token operator\">-&gt;</span>count <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// 设置 count 成员</span>\npf<span class=\"token operator\">-&gt;</span>scores<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">18.5</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 访问数组成员的一个元素</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token operator\">/</span> flexmemb<span class=\"token punctuation\">.</span>c <span class=\"token operator\">--</span> 伸缩型数组成员（C99新增特性）\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h&gt;</span></span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">flex</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token class-name\">size_t</span> count<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">double</span> average<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">double</span> scores <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 伸缩型数组成员</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">showFlex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">flex</span> <span class=\"token operator\">*</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">struct</span> <span class=\"token class-name\">flex</span> <span class=\"token operator\">*</span> pf1<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>pf2<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">int</span> tot <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token comment\">// 为结构和数组分配存储空间</span>\n     pf1 <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">flex</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> n <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     pf1<span class=\"token operator\">-&gt;</span>count <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n          pf1<span class=\"token operator\">-&gt;</span>scores<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">20.0</span> <span class=\"token operator\">-</span> i<span class=\"token punctuation\">;</span>\n          tot <span class=\"token operator\">+=</span> pf1<span class=\"token operator\">-&gt;</span>scores<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n     pf1<span class=\"token operator\">-&gt;</span>average <span class=\"token operator\">=</span> tot <span class=\"token operator\">/</span> n<span class=\"token punctuation\">;</span>\n     <span class=\"token function\">showFlex</span><span class=\"token punctuation\">(</span>pf1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n     n <span class=\"token operator\">=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span>\n     tot <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n     pf2 <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">flex</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> n <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     pf2<span class=\"token operator\">-&gt;</span>count <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n          pf2<span class=\"token operator\">-&gt;</span>scores<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">20.0</span> <span class=\"token operator\">-</span> i <span class=\"token operator\">/</span> <span class=\"token number\">2.0</span><span class=\"token punctuation\">;</span>\n          tot <span class=\"token operator\">+=</span> pf2<span class=\"token operator\">-&gt;</span>scores<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n     pf2<span class=\"token operator\">-&gt;</span>average <span class=\"token operator\">=</span> tot <span class=\"token operator\">/</span> n<span class=\"token punctuation\">;</span>\n     <span class=\"token function\">showFlex</span><span class=\"token punctuation\">(</span>pf2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>pf1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>pf2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">showFlex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">flex</span> <span class=\"token operator\">*</span> p<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Scores : \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> p<span class=\"token operator\">-&gt;</span>count<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n          <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%g \"</span><span class=\"token punctuation\">,</span> p<span class=\"token operator\">-&gt;</span>scores<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nAverage: %g\\n\"</span><span class=\"token punctuation\">,</span> p<span class=\"token operator\">-&gt;</span>average<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>伸缩性数组成员的结构有一些特殊的要求</p>\n<ol>\n<li>\n<p>不能用结构进行赋值和拷贝</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">flex</span> <span class=\"token operator\">*</span> pf1<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>pf2<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// *pf1 和*pf2 都是结构</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token operator\">*</span>pf2 <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>pf1<span class=\"token punctuation\">;</span>                <span class=\"token comment\">// 不要这样做</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>不要以按值防止把这种结构传递给结构</p>\n</li>\n<li>\n<p>不要使用待伸缩性数组成员的结构作为数组成员或另一个结构的成员</p>\n</li>\n</ol>\n<h5 id=\"14710-匿名结构\"><a class=\"markdownIt-Anchor\" href=\"#14710-匿名结构\">#</a> 14.7.10 匿名结构</h5>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">names</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">char</span> first<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">char</span> last<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">person</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">struct</span> <span class=\"token class-name\">names</span> name<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 嵌套结构成员</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">person</span> ted <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">8483</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"Ted\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Grass\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这里 <code>name</code>  成员是一个嵌套结构，此时通过 <code>ted.name.first</code>  可以进行访问</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">person</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">char</span> first<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">char</span> last<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 匿名结构</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>初始化结构两者都相同，但是访问时<strong>匿名结构</strong>可以更加简便一点</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">puts</span><span class=\"token punctuation\">(</span>ted<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h5 id=\"14711-使用结构数组的函数\"><a class=\"markdownIt-Anchor\" href=\"#14711-使用结构数组的函数\">#</a> 14.7.11 使用结构数组的函数</h5>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">/* funds4.c -- 把结构数组传递给函数 */</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">FUNDLEN</span> <span class=\"token expression\"><span class=\"token number\">50</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">N</span> <span class=\"token expression\"><span class=\"token number\">2</span></span></span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">funds</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">char</span>      bank<span class=\"token punctuation\">[</span>FUNDLEN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">double</span>    bankfund<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">char</span>      save<span class=\"token punctuation\">[</span>FUNDLEN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">double</span>    savefund<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">double</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">funds</span> money <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">struct</span> <span class=\"token class-name\">funds</span> jones<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n               <span class=\"token punctuation\">{</span>\n                    <span class=\"token string\">\"Garlic-Melon Bank\"</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token number\">4032.27</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token string\">\"Lucky's Savings and Loan\"</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token number\">8543.94</span>\n\n               <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n               <span class=\"token punctuation\">{</span>\n                    <span class=\"token string\">\"Honest Jack's Bank\"</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token number\">3620.88</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token string\">\"Party Time Savings\"</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token number\">3802.91</span>\n               <span class=\"token punctuation\">}</span>\n     <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The Joneses have a total of $%.2f.\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>jones<span class=\"token punctuation\">,</span> N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//sum(&amp;jones[0], N) 效果相同</span>\n\n     <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">double</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">funds</span> money <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">double</span> total<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n\n     <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> total <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n          total <span class=\"token operator\">+=</span> money<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>bankfund <span class=\"token operator\">+</span> money<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>savefund<span class=\"token punctuation\">;</span>\n\n     <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>total<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"148-把结构内容保存到文件中\"><a class=\"markdownIt-Anchor\" href=\"#148-把结构内容保存到文件中\">#</a> 14.8 把结构内容保存到文件中</h4>\n<p>存储在一个结构中的整套信息称为<strong>记录</strong>，单独的项被称为<strong>字段</strong></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MAXAUTL</span> <span class=\"token expression\"><span class=\"token number\">40</span></span></span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">book</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">char</span> title<span class=\"token punctuation\">[</span>MAXTITL<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">char</span> author<span class=\"token punctuation\">[</span>MAXAUTL<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">float</span> value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span>pbooks<span class=\"token punctuation\">,</span> <span class=\"token string\">\"%s %s %.2f\\n\"</span><span class=\"token punctuation\">,</span> primer<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">,</span>primer<span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">,</span> primer<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">fwrite</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>primer<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">book</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> pbooks<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"1481-保存结构的程序示例\"><a class=\"markdownIt-Anchor\" href=\"#1481-保存结构的程序示例\">#</a> 14.8.1  保存结构的程序示例</h5>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">/* booksave.c -- 在文件中保存结构中的内容 */</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MAXTITL</span>  <span class=\"token expression\"><span class=\"token number\">40</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MAXAUTL</span>  <span class=\"token expression\"><span class=\"token number\">40</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MAXBKS</span>   <span class=\"token expression\"><span class=\"token number\">10</span>             </span><span class=\"token comment\">/* 最大书籍数量 */</span></span>\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> <span class=\"token function\">s_gets</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> st<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">book</span> <span class=\"token punctuation\">{</span>                   <span class=\"token comment\">/* 建立 book 模板 */</span>\n     <span class=\"token keyword\">char</span> title<span class=\"token punctuation\">[</span>MAXTITL<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">char</span> author<span class=\"token punctuation\">[</span>MAXAUTL<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">float</span> value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">struct</span> <span class=\"token class-name\">book</span> library<span class=\"token punctuation\">[</span>MAXBKS<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 结构数组  */</span>\n     <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">,</span> filecount<span class=\"token punctuation\">;</span>\n     FILE <span class=\"token operator\">*</span> pbooks<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">int</span> size <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">book</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>pbooks <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"book.dat\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"a+b\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">fputs</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Can't open book.dat file\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">stderr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n\n     <span class=\"token function\">rewind</span><span class=\"token punctuation\">(</span>pbooks<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\">/* 定位到文件开始 */</span>\n     <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">&lt;</span> MAXBKS <span class=\"token operator\">&amp;&amp;</span>  <span class=\"token function\">fread</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>library<span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">,</span>\n          <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> pbooks<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n               <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Current contents of book.dat:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s by %s: $%.2f\\n\"</span><span class=\"token punctuation\">,</span> library<span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">,</span>\n               library<span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">,</span> library<span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n     filecount <span class=\"token operator\">=</span> count<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">==</span> MAXBKS<span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">fputs</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The book.dat file is full.\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">stderr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n\n     <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Please add new book titles.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Press [enter] at the start of a line to stop.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">&lt;</span> MAXBKS <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">s_gets</span><span class=\"token punctuation\">(</span>library<span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">,</span> MAXTITL<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span>\n          <span class=\"token operator\">&amp;&amp;</span> library<span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Now enter the author.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">s_gets</span><span class=\"token punctuation\">(</span>library<span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">,</span> MAXAUTL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Now enter the value.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%f\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>library<span class=\"token punctuation\">[</span>count<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n               <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\">/* 清理输入行  */</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">&lt;</span> MAXBKS<span class=\"token punctuation\">)</span>\n               <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter the next title.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Here is the list of your books:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> index <span class=\"token operator\">&lt;</span> count<span class=\"token punctuation\">;</span> index<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n               <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s by %s: $%.2f\\n\"</span><span class=\"token punctuation\">,</span> library<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">,</span>\n               library<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">,</span> library<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">fwrite</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>library<span class=\"token punctuation\">[</span>filecount<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">,</span> count <span class=\"token operator\">-</span> filecount<span class=\"token punctuation\">,</span>\n               pbooks<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n     <span class=\"token keyword\">else</span>\n          <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"No books? Too bad.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bye.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span>pbooks<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> <span class=\"token function\">s_gets</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> st<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> ret_val<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> find<span class=\"token punctuation\">;</span>\n\n     ret_val <span class=\"token operator\">=</span> <span class=\"token function\">fgets</span><span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> <span class=\"token constant\">stdin</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ret_val<span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n          find <span class=\"token operator\">=</span> <span class=\"token function\">strchr</span><span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">,</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 查找换行符</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>find<span class=\"token punctuation\">)</span>                <span class=\"token comment\">// 如果地址不是 NULL，</span>\n               <span class=\"token operator\">*</span>find <span class=\"token operator\">=</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\">// 在此处放置一个空字符</span>\n          <span class=\"token keyword\">else</span>\n               <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 清理输入行</span>\n     <span class=\"token punctuation\">}</span>\n     <span class=\"token keyword\">return</span> ret_val<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"149-链式结构\"><a class=\"markdownIt-Anchor\" href=\"#149-链式结构\">#</a> 14.9 链式结构</h4>\n<p>结构可以创建新的数据形式，包括队列，二叉树，堆，哈希表，图标。许多这样的结构都由<strong>链式结构</strong>组成</p>\n<h4 id=\"1410-联合简介\"><a class=\"markdownIt-Anchor\" href=\"#1410-联合简介\">#</a> 14.10 联合简介</h4>\n<p><strong>联合</strong>是一种数据类型，能在同一个内存空间中存储不同的数据类型 (<strong>不是同时存储</strong>)</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">union</span> hold <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">int</span> digit<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">double</span> bigfl<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">char</span> letter<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//带标记的联合模板</span>\n<span class=\"token keyword\">union</span> hold fit<span class=\"token punctuation\">;</span>         <span class=\"token comment\">// hold类型的联合变量</span>\n<span class=\"token keyword\">union</span> hold save<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 内含10个联合变量的数组</span>\n<span class=\"token keyword\">union</span> hold <span class=\"token operator\">*</span> pu<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 指向hold类型联合变量的指针</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>联合只能存储一个 <code>int</code>  类型，一个 <code>double</code>  类型和 <code>char</code>  类型的值</p>\n<p>创建联合变量，编译器会分配足够的空间以便他们能存储联合声明中占用最大字节的类型</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">union hold valA;\nvalA.letter = 'R';\nunion hold valB = valA;             // 用另一个联合来初始化\nunion hold valC = {88};             // 初始化联合的digit 成员\nunion hold valD = {.bigfl = 118.2}; // 指定初始化器<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"14101-使用联合\"><a class=\"markdownIt-Anchor\" href=\"#14101-使用联合\">#</a> 14.10.1 使用联合</h5>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">fit<span class=\"token punctuation\">.</span>digit <span class=\"token operator\">=</span> <span class=\"token number\">23</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//把 23 存储在 fit，占2字节</span>\nfit<span class=\"token punctuation\">.</span>bigfl <span class=\"token operator\">=</span> <span class=\"token number\">2.0</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 清除23，存储 2.0，占8字节</span>\nfit<span class=\"token punctuation\">.</span>letter <span class=\"token operator\">=</span> <span class=\"token string\">'h'</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 清除2.0，存储h，占1字节</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>在联合当中一次只能存储一个类型的值</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">pu <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>fit<span class=\"token punctuation\">;</span>\nx <span class=\"token operator\">=</span> pu<span class=\"token operator\">-&gt;</span>digit<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 相当于 x = fit.digit </span>\n<span class=\"token comment\">// 用指针访问联合也需要用 - &gt; 符号</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>联合的另一种用法</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">owner</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">char</span> socsecurity<span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">leasecompany</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">40</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">char</span> headquarters<span class=\"token punctuation\">[</span><span class=\"token number\">40</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">union</span> data <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">struct</span> <span class=\"token class-name\">owner</span> owncar<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">struct</span> <span class=\"token class-name\">leasecompany</span> leasecar<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">car_data</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">char</span> make<span class=\"token punctuation\">[</span><span class=\"token number\">15</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">int</span> status<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 私有为0，租赁为1 */</span>\n     <span class=\"token keyword\">union</span> data ownerinfo<span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"14102-匿名联合c11\"><a class=\"markdownIt-Anchor\" href=\"#14102-匿名联合c11\">#</a> 14.10.2 匿名联合 (C11)</h5>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">owner</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">char</span> socsecurity<span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">leasecompany</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">40</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">char</span> headquarters<span class=\"token punctuation\">[</span><span class=\"token number\">40</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">car_data</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">char</span> make<span class=\"token punctuation\">[</span><span class=\"token number\">15</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">int</span> status<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 私有为0，租赁为1 */</span>\n     <span class=\"token keyword\">union</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">struct</span> <span class=\"token class-name\">owner</span> owncar<span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">struct</span> <span class=\"token class-name\">leasecompany</span> leasecar<span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"1411-枚举类型\"><a class=\"markdownIt-Anchor\" href=\"#1411-枚举类型\">#</a> 14.11 枚举类型</h4>\n<p><strong>枚举类型</strong>声明名称来表示整型常量，使用 <code>enum</code>  关键字可以创建一个新 \"类型\" 并指定他可具有的值</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">enum</span> <span class=\"token class-name\">spectrum</span> <span class=\"token punctuation\">{</span>red<span class=\"token punctuation\">,</span> orange<span class=\"token punctuation\">,</span> yellow<span class=\"token punctuation\">,</span> green<span class=\"token punctuation\">,</span> blue<span class=\"token punctuation\">,</span> violet<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//创建了spetrum作为标记名 可以把enum spectrum作为一个类型名使用</span>\n<span class=\"token keyword\">enum</span> <span class=\"token class-name\">spectrum</span> color<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 使color作为该类型的变量，color可能是上面的任意值</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>符号常量被称为<strong>枚举符</strong></p>\n<h5 id=\"14111-enum常量\"><a class=\"markdownIt-Anchor\" href=\"#14111-enum常量\">#</a> 14.11.1  <code>enum</code>  常量</h5>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"red = %d, orange = %d\\n\"</span><span class=\"token punctuation\">,</span> red<span class=\"token punctuation\">,</span> orange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nred <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> orange <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token comment\">//输出</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>只要能使用整型常量的地方都可以使用枚举常量</p>\n<p>正声明数组时可以用枚举常量表示数组的大小</p>\n<p>在 <code>switch</code>  语句好难过，可以把枚举常量作为标签</p>\n<h5 id=\"14112-默认值\"><a class=\"markdownIt-Anchor\" href=\"#14112-默认值\">#</a> 14.11.2 默认值</h5>\n<p>默认情况下，枚举列表中的常量按照顺序被赋值 <code>0</code> , <code>1</code> , <code>2</code>  等等</p>\n<h5 id=\"14113-赋值\"><a class=\"markdownIt-Anchor\" href=\"#14113-赋值\">#</a> 14.11.3 赋值</h5>\n<p>在枚举声明中可以为枚举常量指定整数值</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">enum</span> <span class=\"token class-name\">levels</span> <span class=\"token punctuation\">{</span>low <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> medium <span class=\"token operator\">=</span> <span class=\"token number\">500</span><span class=\"token punctuation\">,</span> high <span class=\"token operator\">=</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>如果没有全部赋值，后面的常量会被赋予后续的值</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">enum</span> <span class=\"token class-name\">feline</span> <span class=\"token punctuation\">{</span>cat<span class=\"token punctuation\">,</span> lynx <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> puma<span class=\"token punctuation\">,</span> tiger<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//cat为0  puma为11 tiger为12</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h5 id=\"14114-enum的用法\"><a class=\"markdownIt-Anchor\" href=\"#14114-enum的用法\">#</a> 14.11.4  <code>enum</code>  的用法</h5>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">/* enum.c -- 使用枚举类型的值 */</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h&gt;</span>     <span class=\"token comment\">// 提供 strcmp()、strchr()函数的原型</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdbool.h&gt;</span>    <span class=\"token comment\">// C99 特性</span></span>\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> <span class=\"token function\">s_gets</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> st<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">enum</span> <span class=\"token class-name\">spectrum</span> <span class=\"token punctuation\">{</span> red<span class=\"token punctuation\">,</span> orange<span class=\"token punctuation\">,</span> yellow<span class=\"token punctuation\">,</span> green<span class=\"token punctuation\">,</span> blue<span class=\"token punctuation\">,</span> violet <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> colors <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"red\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"orange\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"yellow\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token string\">\"green\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"blue\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"violet\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">LEN</span> <span class=\"token expression\"><span class=\"token number\">30</span></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">char</span> choice<span class=\"token punctuation\">[</span>LEN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">enum</span> <span class=\"token class-name\">spectrum</span> color<span class=\"token punctuation\">;</span>\n     bool color_is_found <span class=\"token operator\">=</span> false<span class=\"token punctuation\">;</span>\n\n     <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter a color (empty line to quit):\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">s_gets</span><span class=\"token punctuation\">(</span>choice<span class=\"token punctuation\">,</span> LEN<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">&amp;&amp;</span> choice<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>color <span class=\"token operator\">=</span> red<span class=\"token punctuation\">;</span> color <span class=\"token operator\">&lt;=</span> violet<span class=\"token punctuation\">;</span> color<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">{</span>\n               <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>choice<span class=\"token punctuation\">,</span> colors<span class=\"token punctuation\">[</span>color<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n               <span class=\"token punctuation\">{</span>\n                    color_is_found <span class=\"token operator\">=</span> true<span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n               <span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">}</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>color_is_found<span class=\"token punctuation\">)</span>\n               <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">{</span>\n               <span class=\"token keyword\">case</span> red<span class=\"token operator\">:</span> <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Roses are red.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n               <span class=\"token keyword\">case</span> orange<span class=\"token operator\">:</span> <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Poppies are orange.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n               <span class=\"token keyword\">case</span> yellow<span class=\"token operator\">:</span> <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Sunflowers are yellow.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n               <span class=\"token keyword\">case</span> green<span class=\"token operator\">:</span> <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Grass is green.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n               <span class=\"token keyword\">case</span> blue<span class=\"token operator\">:</span> <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bluebells are blue.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n               <span class=\"token keyword\">case</span> violet<span class=\"token operator\">:</span> <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Violets are violet.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n          <span class=\"token keyword\">else</span>\n               <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I don't know about the color %s.\\n\"</span><span class=\"token punctuation\">,</span> choice<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          color_is_found <span class=\"token operator\">=</span> false<span class=\"token punctuation\">;</span>\n          <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Next color, please (empty line to quit):\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n     <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Goodbye!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> <span class=\"token function\">s_gets</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> st<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> ret_val<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> find<span class=\"token punctuation\">;</span>\n\n     ret_val <span class=\"token operator\">=</span> <span class=\"token function\">fgets</span><span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> <span class=\"token constant\">stdin</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ret_val<span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n          find <span class=\"token operator\">=</span> <span class=\"token function\">strchr</span><span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">,</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 查找换行符</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>find<span class=\"token punctuation\">)</span>                   <span class=\"token comment\">// 如果地址不是 NULL，</span>\n               <span class=\"token operator\">*</span>find <span class=\"token operator\">=</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// 在此处放置一个空字符</span>\n          <span class=\"token keyword\">else</span>\n               <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// 清理输入行</span>\n     <span class=\"token punctuation\">}</span>\n     <span class=\"token keyword\">return</span> ret_val<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"14115-共享名称空间\"><a class=\"markdownIt-Anchor\" href=\"#14115-共享名称空间\">#</a> 14.11.5 共享名称空间</h5>\n<p>两个不同作用域的同名变量不冲突，两个作用域的同名变量冲突</p>\n<h4 id=\"1412-typedef简介\"><a class=\"markdownIt-Anchor\" href=\"#1412-typedef简介\">#</a> 14.12  <code>typedef</code>  简介</h4>\n<p>使用 <code>typedef</code>  可以为某一类型自定义名称，这一方面与 <code>#define</code>  相似，但是有三点不同</p>\n<ul>\n<li>与 <code>#define</code>  不同， <code>typedef</code>  创建的符号名只受限于<strong>类型</strong>，不能用于值</li>\n<li><code>typedef</code>  由编译器解释，不是预处理器</li>\n<li><code>typedef</code>  比 <code>#define</code>  更灵活</li>\n</ul>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> BYTE<span class=\"token punctuation\">;</span>\nBYTE x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span> z<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>该定义的作用域取决于 <code>typedef</code>  定义所在的位置</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">//注意以下typedef和#define的区别</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> STRING<span class=\"token punctuation\">;</span>\nSTRING name<span class=\"token punctuation\">,</span> sign<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> name<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span> sign<span class=\"token punctuation\">;</span> <span class=\"token comment\">//将两者都翻译成指针</span>\n<span class=\"token comment\">//</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">STRING</span> <span class=\"token expression\"><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span></span></span>\nSTRING name<span class=\"token punctuation\">,</span> sign<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> name<span class=\"token punctuation\">,</span> sign<span class=\"token punctuation\">;</span> <span class=\"token comment\">//#define相当于只是将STRING进行了替换</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"1413-其他复杂的声明\"><a class=\"markdownIt-Anchor\" href=\"#1413-其他复杂的声明\">#</a> 14.13 其他复杂的声明</h4>\n<p><a href=\"https://imgtu.com/i/Tuzck9\"><img src=\"https://s4.ax1x.com/2021/12/21/Tuzck9.png\" alt=\"Tuzck9.png\"></a></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span> risks<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//数组内含指针</span>\n<span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span> rusks<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//指向数组的指针</span>\n<span class=\"token keyword\">int</span> goods<span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">50</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span> oof<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//内含指针的数组</span>\n<span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span> uuf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//指向3*4二维数组的指针</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> <span class=\"token function\">fump</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// 返回字符指针的函数</span>\n<span class=\"token keyword\">char</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span> frump<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// 指向函数的指针，该函数的返回类型为char</span>\n<span class=\"token keyword\">char</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span> flump<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 内含3个指针的数组，每个指针都指向返回类型为char的函数</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> arr5<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> arr5 <span class=\"token operator\">*</span> p_arr5<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> p_arr5 arrp10<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\narr5 togs<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// togs 是一个内含5个int类型值的数组</span>\np_arr5 p2<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// p2 是一个指向数组的指针，该数组内含5个int类型的值</span>\narrp10 ap<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// ap 是一个内含10个指针的数组，每个指针都指向一个内含5个int类型值的数组</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"1414-函数与指针\"><a class=\"markdownIt-Anchor\" href=\"#1414-函数与指针\">#</a> 14.14 函数与指针</h4>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// pf 是一个指向函数的指针</span>\n<span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token function\">pf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// pf 是一个返回字符指针的函数</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">ToUpper</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ToLower</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">round</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npf <span class=\"token operator\">=</span> ToUpper<span class=\"token punctuation\">;</span>      <span class=\"token comment\">// 有效，ToUpper是该类型函数的地址</span>\npf <span class=\"token operator\">=</span> ToLower<span class=\"token punctuation\">;</span>      <span class=\"token comment\">//有效，ToLower是该类型函数的地址</span>\npf <span class=\"token operator\">=</span> round<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 无效，round与指针类型不匹配</span>\npf <span class=\"token operator\">=</span> <span class=\"token function\">ToLower</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 无效，ToLower()不是地址</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">ToUpper</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ToLower</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> mis<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Nina Metier\"</span><span class=\"token punctuation\">;</span>\npf <span class=\"token operator\">=</span> ToUpper<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>mis<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 把ToUpper 作用于mis（语法1）</span>\npf <span class=\"token operator\">=</span> ToLower<span class=\"token punctuation\">;</span>\n<span class=\"token function\">pf</span><span class=\"token punctuation\">(</span>mis<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// 把ToLower 作用于mis（语法2）</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">// func_ptr.c -- 使用函数指针\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n#include &lt;ctype.h&gt;\n#define LEN 81\nchar * s_gets(char * st, int n);\nchar showmenu(void);\nvoid eatline(void);        // 读取至行末尾\nvoid show(void(*fp)(char *), char * str);\nvoid ToUpper(char *);      // 把字符串转换为大写\nvoid ToLower(char *);      // 把字符串转换为小写\nvoid Transpose(char *);    // 大小写转置\nvoid Dummy(char *);        // 不更改字符串\n\nint main(void)\n{\n     char line[LEN];\n     char copy[LEN];\n     char choice;\n     void(*pfun)(char *); // 声明一个函数指针，被指向的函数接受char *类型的参数，无返回值\n\n     puts(\"Enter a string (empty line to quit):\");\n     while (s_gets(line, LEN) != NULL &amp;&amp; line[0] != '\\0')\n     {\n          while ((choice = showmenu()) != 'n')\n          {\n               switch (choice)  // switch语句设置指针\n               {\n               case 'u': pfun = ToUpper;   break;\n               case 'l': pfun = ToLower;   break;\n               case 't': pfun = Transpose; break;\n               case 'o': pfun = Dummy;     break;\n               }\n               strcpy(copy, line);    // 为show()函数拷贝一份\n               show(pfun, copy);      // 根据用户的选择，使用选定的函数\n          }\n          puts(\"Enter a string (empty line to quit):\");\n     }\n     puts(\"Bye!\");\n\n     return 0;\n}\n\nchar showmenu(void)\n{\n     char ans;\n     puts(\"Enter menu choice:\");\n     puts(\"u) uppercase       l) lowercase\");\n     puts(\"t) transposed case o) original case\");\n     puts(\"n) next string\");\n     ans = getchar();      // 获取用户的输入\n     ans = tolower(ans);   // 转换为小写\n     eatline();            // 清理输入行\n     while (strchr(\"ulton\", ans) == NULL)\n     {\n          puts(\"Please enter a u, l, t, o, or n:\");\n          ans = tolower(getchar());\n          eatline();\n     }\n\n     return ans;\n}\n\nvoid eatline(void)\n{\n     while (getchar() != '\\n')\n          continue;\n}\n\nvoid ToUpper(char * str)\n{\n     while (*str)\n     {\n          *str = toupper(*str);\n          str++;\n     }\n}\n\nvoid ToLower(char * str)\n{\n     while (*str)\n     {\n          *str = tolower(*str);\n          str++;\n     }\n}\nvoid Transpose(char * str)\n{\n     while (*str)\n     {\n          if (islower(*str))\n               *str = toupper(*str);\n          else if (isupper(*str))\n               *str = tolower(*str);\n          str++;\n     }\n}\n\nvoid Dummy(char * str)\n{\n     // 不改变字符串\n}\n\nvoid show(void(*fp)(char *), char * str)\n{\n     (*fp)(str);   // 把用户选定的函数作用于str\n     puts(str);    // 显示结果\n}\n\nchar * s_gets(char * st, int n)\n{\n     char * ret_val;\n     char * find;\n\n     ret_val = fgets(st, n, stdin);\n     if (ret_val)\n     {\n          find = strchr(st, '\\n');    // 查找换行符\n          if (find)                   // 如果地址不是NULL，\n               *find = '\\0';          // 在此处放置一个空字符\n          else\n               while (getchar() != '\\n')\n                    continue;         // 清理输入行中剩余的字符\n     }\n     return ret_val;\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"15-第十五章位操作\"><a class=\"markdownIt-Anchor\" href=\"#15-第十五章位操作\">#</a> 15 第十五章位操作</h3>\n<h4 id=\"151-二进制数位和字节\"><a class=\"markdownIt-Anchor\" href=\"#151-二进制数位和字节\">#</a> 15.1 二进制数，位和字节</h4>\n<h5 id=\"1511-二进制整数\"><a class=\"markdownIt-Anchor\" href=\"#1511-二进制整数\">#</a> 15.1.1 二进制整数</h5>\n<p><a href=\"https://imgtu.com/i/TDB091\"><img src=\"https://s4.ax1x.com/2021/12/27/TDB091.png\" alt=\"TDB091.png\"></a></p>\n<p>1 字节为 8 位，从右到左编号 <code>0~7</code> , 编号为 7 的称为<strong>高阶位</strong>，编号为 0 的被称为<strong>低阶位</strong></p>\n<p>显然计算机进行二进制存储，一个字节可以存储 <code>0~255</code>  的范围的值</p>\n<ul>\n<li><code>unsigned char</code>  存储 <code>0~255</code></li>\n<li><code>signed char</code>  存储 <code>-128~127</code></li>\n</ul>\n<h5 id=\"1512-有符号整数\"><a class=\"markdownIt-Anchor\" href=\"#1512-有符号整数\">#</a> 15.1.2 有符号整数</h5>\n<ol>\n<li>\n<p><strong>符号量表示法</strong>：将符号存储在高阶位上用 <code>1</code>  和 <code>0</code>  区分 <code>+</code>  和 <code>-</code></p>\n</li>\n<li>\n<p><strong>二进制补码方法</strong>：1 字节的后七位表示 <code>0~127</code> , 高阶位设置为 0, 高阶位为 1 表示负数</p>\n<p>与<strong>符号表示法</strong>的区别在于如何确定负值：从 256 的二进制形式减去一个负数的位组合，结果就是该负值的量</p>\n<p>如此得到二进制补码数的相反数，就简单的方法就是反转每一位然后加上 1</p>\n</li>\n</ol>\n<h5 id=\"1513-二进制浮点数\"><a class=\"markdownIt-Anchor\" href=\"#1513-二进制浮点数\">#</a> 15.1.3 二进制浮点数</h5>\n<ol>\n<li>\n<p>二进制小数</p>\n<p>二进制表示法可以精确地表示多个<strong> 1\\2</strong> 的和</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">0</span><span class=\"token operator\">/</span><span class=\"token number\">4</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">8</span>\n<span class=\"token number\">0.50</span> <span class=\"token operator\">+</span> <span class=\"token number\">0.00</span> <span class=\"token operator\">+</span> <span class=\"token number\">0.125</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>浮点数表示法</p>\n<p>计算机中表示一个浮点数，留出若干位存储二进制分数，其他位存储指数</p>\n</li>\n</ol>\n<h4 id=\"152-其他进制数\"><a class=\"markdownIt-Anchor\" href=\"#152-其他进制数\">#</a> 15.2 其他进制数</h4>\n<h5 id=\"1521-八进制数\"><a class=\"markdownIt-Anchor\" href=\"#1521-八进制数\">#</a> 15.2.1 八进制数</h5>\n<p>一个八进制位等价于三个二进制位 8=2 的三次方</p>\n<p><a href=\"https://imgtu.com/i/TDsEX6\"><img src=\"https://s4.ax1x.com/2021/12/27/TDsEX6.png\" alt=\"TDsEX6.png\"></a></p>\n<h5 id=\"1522-十六进制\"><a class=\"markdownIt-Anchor\" href=\"#1522-十六进制\">#</a> 15.2.2 十六进制</h5>\n<p>十六进制中 <code>A~F</code>  表示 <code>10~15</code> , 每个十六进制位对应一个 4 位的二进制数</p>\n<h4 id=\"153-c按位运算符\"><a class=\"markdownIt-Anchor\" href=\"#153-c按位运算符\">#</a> 15.3 C 按位运算符</h4>\n<h5 id=\"1531-按位逻辑算符\"><a class=\"markdownIt-Anchor\" href=\"#1531-按位逻辑算符\">#</a> 15.3.1 按位逻辑算符</h5>\n<ol>\n<li>\n<p>二进制反码或按位取反: <code>~</code></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">～<span class=\"token punctuation\">(</span><span class=\"token number\">10011010</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 表达式</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">01100101</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">// 结果值</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>按位与: <code>&amp;</code></p>\n<p>逐位比较两个运算对象，对于每一个位只有都为 1 时为真</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token punctuation\">(</span><span class=\"token number\">10010011</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token number\">00111101</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">// 表达式</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">00010001</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">// 结果值</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>按位与赋值运算符: <code>&amp;=</code></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">val <span class=\"token operator\">&amp;=</span> <span class=\"token number\">0377</span><span class=\"token punctuation\">;</span>\nval <span class=\"token operator\">=</span> val <span class=\"token operator\">&amp;</span> <span class=\"token number\">0377</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//效用相同</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>按位或:  <code>|</code></p>\n<p>对应位中一个为真就为真</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token punctuation\">(</span><span class=\"token number\">10010011</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token number\">00111101</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 表达式</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">10111111</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 结果值</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>按位或与赋值运算符： <code>|=</code></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">val <span class=\"token operator\">|=</span> <span class=\"token number\">0377</span><span class=\"token punctuation\">;</span>\nval <span class=\"token operator\">=</span> val <span class=\"token operator\">|</span> <span class=\"token number\">0377</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>按位异或: <code>^</code></p>\n<p>其中一个为 1, 不能两个都为 1, 就为真</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token punctuation\">(</span><span class=\"token number\">10010011</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token punctuation\">(</span><span class=\"token number\">00111101</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 表达式</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">10101110</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">// 结果值</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>按位异或和赋值结合的运算符： <code>^=</code></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">val <span class=\"token operator\">^=</span> <span class=\"token number\">0377</span><span class=\"token punctuation\">;</span>\nval <span class=\"token operator\">=</span> val <span class=\"token operator\">^</span> <span class=\"token number\">0377</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<h5 id=\"1532-用法掩码\"><a class=\"markdownIt-Anchor\" href=\"#1532-用法掩码\">#</a> 15.3.2 用法：掩码</h5>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">flags <span class=\"token operator\">=</span> flags <span class=\"token operator\">&amp;</span> MASK<span class=\"token punctuation\">;</span> <span class=\"token comment\">//MASK为00000010</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>因为任何数和 0 最后都会为 0, 而 1 不发生改变，保留 <code>flags</code>  中的原值，这相当于把掩码中的 0 看做不透明，1 看做透明， <code>flags &amp; MASK</code>  相当于把掩码覆盖在 <code>flags</code>  的位组合上，只有 <code>MASK</code>  为 1 的位才可见</p>\n<h5 id=\"1533-用法打开位设置位\"><a class=\"markdownIt-Anchor\" href=\"#1533-用法打开位设置位\">#</a> 15.3.3 用法：打开位 (设置位)</h5>\n<p>打开一个值中的特定位而保持其他位不变</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">flags <span class=\"token operator\">=</span> flags <span class=\"token operator\">|</span> MASK<span class=\"token punctuation\">;</span> <span class=\"token comment\">//MASK只有1号位为1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>这样 flags 中的一号位会变成 1, 而其他值会保持不变</p>\n<h5 id=\"1534-用法关闭位清空位\"><a class=\"markdownIt-Anchor\" href=\"#1534-用法关闭位清空位\">#</a> 15.3.4 用法：关闭位 (清空位)</h5>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">flags <span class=\"token operator\">=</span> flags <span class=\"token operator\">&amp;</span> ～MASK<span class=\"token punctuation\">;</span> <span class=\"token comment\">//MASK只有1号位为1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>所有和 1 <code>和</code> 的都会保持原位，而 1 号位变成了 0, 这样 <code>flags</code>  的一号位就会变成 0</p>\n<h5 id=\"1535-用法切换位\"><a class=\"markdownIt-Anchor\" href=\"#1535-用法切换位\">#</a> 15.3.5 用法：切换位</h5>\n<p><strong>切换位</strong>：打开已关闭的位或关闭已经打开的位</p>\n<p>可以使用 <code>^</code> (如果 b 是 1, <code>1^b</code>  为 0, 如果 b 是 0, <code>1^b</code>  为 1)</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">flags <span class=\"token operator\">=</span> flags <span class=\"token operator\">^</span> MASK<span class=\"token punctuation\">;</span>\nflags <span class=\"token operator\">^=</span> MASK<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">00001111</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token punctuation\">(</span><span class=\"token number\">10110110</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">// 表达式</span>\n <span class=\"token punctuation\">(</span><span class=\"token number\">10111001</span><span class=\"token punctuation\">)</span>                <span class=\"token comment\">// 结果值</span>\n    <span class=\"token comment\">//将MASK中要切换的位设置为1,其他位设置成0</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"1536-用法检查某位的值\"><a class=\"markdownIt-Anchor\" href=\"#1536-用法检查某位的值\">#</a> 15.3.6 用法：检查某位的值</h5>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>flags <span class=\"token operator\">&amp;</span> MASK<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> MASK<span class=\"token punctuation\">)</span>\n     <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Wow!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h5 id=\"1537-移位运算符\"><a class=\"markdownIt-Anchor\" href=\"#1537-移位运算符\">#</a> 15.3.7 移位运算符</h5>\n<ol>\n<li>\n<p>左移: <code>&lt;&lt;</code></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token punctuation\">(</span><span class=\"token number\">10001010</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">2</span>   <span class=\"token comment\">// 表达式</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">00101000</span><span class=\"token punctuation\">)</span>        <span class=\"token comment\">// 结果值</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>移出左端的值丢失，空余部分用 0 填充</p>\n</li>\n<li>\n<p>右移: <code>&gt;&gt;</code></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token punctuation\">(</span><span class=\"token number\">10001010</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">2</span>       <span class=\"token comment\">// 表达式，有符号值</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">00100010</span><span class=\"token punctuation\">)</span>            <span class=\"token comment\">// 在某些系统中的结果值</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">10001010</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">2</span>       <span class=\"token comment\">// 表达式，有符号值</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">11100010</span><span class=\"token punctuation\">)</span>            <span class=\"token comment\">// 在另一些系统上的结果值</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">10001010</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">2</span>       <span class=\"token comment\">// 表达式，无符号值</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">00100010</span><span class=\"token punctuation\">)</span>            <span class=\"token comment\">// 所有系统都得到该结果值</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>与左移类似</p>\n</li>\n<li>\n<p>用法：移位运算符</p>\n<p>针对 2 的幂提供快速有效的乘法和除法</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">number <span class=\"token operator\">&lt;&lt;</span> n        <span class=\"token comment\">//number乘以2的n次幂</span>\nnumber <span class=\"token operator\">&gt;&gt;</span> n        <span class=\"token comment\">//如果number为非负，则用number除以2的n次幂</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>​\t类似于在十进制中移动小数点</p>\n</li>\n</ol>\n<h5 id=\"1538-编程实例\"><a class=\"markdownIt-Anchor\" href=\"#1538-编程实例\">#</a> 15.3.8 编程实例</h5>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">/* binbit.c -- 使用位操作显示二进制 */</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;limits.h&gt;</span>  <span class=\"token comment\">// 提供 CHAR_BIT 的定义，CHAR_BIT 表示每字节的位数</span></span>\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> <span class=\"token function\">itobs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">show_bstr</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">char</span> bin_str<span class=\"token punctuation\">[</span>CHAR_BIT <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">int</span> number<span class=\"token punctuation\">;</span>\n\n     <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter integers and see them in binary.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Non-numeric input terminates program.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>number<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">itobs</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">,</span> bin_str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d is \"</span><span class=\"token punctuation\">,</span> number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">show_bstr</span><span class=\"token punctuation\">(</span>bin_str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">putchar</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n     <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bye!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> <span class=\"token function\">itobs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> ps<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">const</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> size <span class=\"token operator\">=</span> CHAR_BIT <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> size <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">,</span> n <span class=\"token operator\">&gt;&gt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n          ps<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">01</span> <span class=\"token operator\">&amp;</span> n<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">;</span>\n     ps<span class=\"token punctuation\">[</span>size<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token keyword\">return</span> ps<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/*4位一组显示二进制字符串 */</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">show_bstr</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> str<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">/* 不是一个空字符 */</span>\n     <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">putchar</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>i <span class=\"token operator\">%</span> <span class=\"token number\">4</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n               <span class=\"token function\">putchar</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"154-位字段\"><a class=\"markdownIt-Anchor\" href=\"#154-位字段\">#</a> 15.4 位字段</h4>\n<p>位字段是操作位的第二种方法</p>\n<p>位字段是一个 <code>signed int</code>  或 <code>unsigned int</code>  类型变量中的一组相邻的位</p>\n<p>位字段通过一个结构声明来建立，该结构声明为每个字段提供了标签</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">struct {\n     unsigned int autfd : 1;\n     unsigned int bldfc : 1;\n     unsigned int undln : 1;\n     unsigned int itals : 1;\n} prnt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"16-第十六章-c预处理器和c库\"><a class=\"markdownIt-Anchor\" href=\"#16-第十六章-c预处理器和c库\">#</a> 16 第十六章 C 预处理器和 C 库</h3>\n<h4 id=\"161-翻译程序的第一步\"><a class=\"markdownIt-Anchor\" href=\"#161-翻译程序的第一步\">#</a> 16.1 翻译程序的第一步</h4>\n<ol>\n<li>\n<p>编译器把源代码中出现的字符映射到源字符集</p>\n</li>\n<li>\n<p>编译器定位每个反斜杠后面跟着换行符的实例，并删除他们</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span>\"That's wond\\ \n　　　　 erful<span class=\"token operator\">!</span>\\n\"<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//物理行</span>\n　　　　 <span class=\"token comment\">//经过转化</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"That's wonderful\\n!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//逻辑行</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>也就是把源代码中分成分成多行的物理行 转化成一行的逻辑行</p>\n<p>代码中 <code>wond</code>  后面的 <code>\\</code>  的意思是按下 <code>enter</code>  在源代码文件中换行生成的字符</p>\n</li>\n<li>\n<p>编译器把文本划分成<strong>预处理记号序列</strong> (记号是由空格，制表符，换行符分隔的项),<strong> 空白序列</strong>和<strong>注释序列</strong></p>\n<p><strong>编译器将用空格字符替换每一条注释</strong></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span><span class=\"token comment\">/* 这看起来并不像一个空格*/</span>fox<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//将变成</span>\n<span class=\"token keyword\">int</span> fox<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<p>然后程序开始循环一行中以 <code>#</code> 开始的预处理指令</p>\n<h4 id=\"162-明示常量-define\"><a class=\"markdownIt-Anchor\" href=\"#162-明示常量-define\">#</a> 16.2 明示常量:  <code>#define</code></h4>\n<p>指令可以出现在源文件的任何地方，定义从指令出现的地方到该<strong>文件末尾</strong>有效</p>\n<p>大量使用 <code>#difine</code>  指令来定义<strong>明示常量</strong></p>\n<p>预处理器指令从 <code>#</code> 开始运行，到后面的第一个换行符为止，指令的长度<strong>仅限于一行</strong></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">OW</span> <span class=\"token string\">\"Consistency is the last refuge of the unimagina\\\n　　 tive. - Oscar Wilde\"</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>可以通过添加 <code>\\</code>  来拓展行，注意 <code>tive</code>  前面的空格也会计算在内</p>\n<p><code>#define</code>  (逻辑行) 由三部分组成</p>\n<ul>\n<li>\n<p><code>#define</code>  指令本身</p>\n</li>\n<li>\n<p>选定的缩写，成为<strong>宏</strong>，分为<strong>类对象宏</strong>和<strong>类函数宏</strong></p>\n<p>宏的名称不允许有空格，<u>只能使用字符，数字和下划线字符 ( <code>-</code> ), 并且首字符不能是数字</u></p>\n</li>\n<li>\n<p><strong>替换体或者替换列表</strong>，预处理器程序在程序中找到宏的示例后，就会用替换体代替该宏</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">LIMIT</span> <span class=\"token expression\"><span class=\"token number\">20</span></span></span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> LIM <span class=\"token operator\">=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> data1<span class=\"token punctuation\">[</span>LIMIT<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>　 　<span class=\"token comment\">// 有效</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> data2<span class=\"token punctuation\">[</span>LIM<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>　　 　<span class=\"token comment\">// 无效</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> LIM2 <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> LIMIT 　<span class=\"token comment\">// 有效</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> LIM3 <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> LIM<span class=\"token punctuation\">;</span>　　<span class=\"token comment\">// 无效</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"1621-记号\"><a class=\"markdownIt-Anchor\" href=\"#1621-记号\">#</a> 16.2.1 记号</h5>\n<p>可以把宏的替换体看做是<strong>记号型</strong>字符串，而不是字符型字符串</p>\n<ul>\n<li>字符型字符串：把替换体中的空格看做为替换体的一部分</li>\n<li>记号型字符串：把替换体中的空格看做替换体中各记号的分隔符</li>\n</ul>\n<h5 id=\"1622-重定义常量\"><a class=\"markdownIt-Anchor\" href=\"#1622-重定义常量\">#</a> 16.2.2 重定义常量</h5>\n<p>对同一个宏进行二次定义这个过程称为<strong>重定义常量</strong></p>\n<p>除非新定义和旧定义相同，否则有些实现会将其视为错误</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SIX</span> <span class=\"token expression\"><span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token number\">3</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SIX</span> <span class=\"token expression\"><span class=\"token number\">2</span><span class=\"token operator\">*</span><span class=\"token number\">3</span></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>以上两者是不同的定义，第一行中有三个记号通过空格分开，第二行中只有一个记号</p>\n<h4 id=\"163-在define中使用参数\"><a class=\"markdownIt-Anchor\" href=\"#163-在define中使用参数\">#</a> 16.3 在 <code>#define</code>  中使用参数</h4>\n<p>在 <code>#define</code>  中使用参数可以创建外形和作用与函数类似的<strong>类函数宏</strong></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">SQUARE</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span> X<span class=\"token operator\">*</span>X   </span><span class=\"token comment\">//SQUARE是宏标识符 x是红参数 x*x是替换列表</span></span>\nz <span class=\"token operator\">=</span> <span class=\"token function\">SQUARE</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>预处理器不做计算不求值，只替换字符序列，所以会在一些地方导致错误</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">SQUARE</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span> X<span class=\"token operator\">*</span>X</span></span>\n<span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\nz <span class=\"token operator\">=</span> <span class=\"token function\">SQUARE</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>z 的结果不会是你想象中的 49, 按照一一对应替换 最后得到的表达式是 x+2 * x + 2 先乘法再加减 最后得到的结果会是 17</p>\n<p>一般而言不要在宏中使用递增或者递减运算符，因为 C 标准对这种表达式求值没有定义，所以不同的编译器计算出来的答案可能是不一样的</p>\n<h5 id=\"1631-用宏参数创建字符串-运算符\"><a class=\"markdownIt-Anchor\" href=\"#1631-用宏参数创建字符串-运算符\">#</a> 16.3.1 用宏参数创建字符串: #运算符</h5>\n<p>在类函数宏的替换体中， <code>#</code> 作为一个预处理运算符，可以把记号转换成字符串</p>\n<p>比如 如果 <code>x</code>  是一个宏形参，那么 <code>#x</code>  就是形参的名字，这个过程叫做<strong>字符串化</strong></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">/* subst.c -- 在字符串中替换 */</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">PSQR</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span></span><span class=\"token string\">\"The square of \"</span> <span class=\"token expression\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">x</span> </span></span><span class=\"token string\">\" is %d.\\n\"</span><span class=\"token expression\"><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span>\n　\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n　　 <span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n　\n　　 <span class=\"token function\">PSQR</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token function\">PSQR</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　\n　　 <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//输出结果</span>\nThe square of y is <span class=\"token number\">25.</span>\nThe square of <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">4</span> is <span class=\"token number\">36.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"1632-预处理器黏合剂-运算符\"><a class=\"markdownIt-Anchor\" href=\"#1632-预处理器黏合剂-运算符\">#</a> 16.3.2 预处理器黏合剂:  <code>##</code> 运算符</h5>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// glue.c -- 使用##运算符</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">XNAME</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> x </span><span class=\"token punctuation\">##</span> <span class=\"token expression\">n</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">PRINT_XN</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span></span><span class=\"token string\">\"x\"</span> <span class=\"token expression\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">n</span> </span></span><span class=\"token string\">\" = %d\\n\"</span><span class=\"token expression\"><span class=\"token punctuation\">,</span> x </span><span class=\"token punctuation\">##</span> <span class=\"token expression\">n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></span>\n　\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n　　 <span class=\"token keyword\">int</span> <span class=\"token function\">XNAME</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">14</span><span class=\"token punctuation\">;</span>　　<span class=\"token comment\">// 变成 int x1 = 14;</span>\n　　 <span class=\"token keyword\">int</span> <span class=\"token function\">XNAME</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>　  <span class=\"token comment\">// 变成 int x2 = 20;</span>\n　　 <span class=\"token keyword\">int</span> x3 <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token function\">PRINT_XN</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>　　　<span class=\"token comment\">// 变成 printf(\"x1 = %d\\n\", x1);</span>\n　　 <span class=\"token function\">PRINT_XN</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>　　　<span class=\"token comment\">// 变成 printf(\"x2 = %d\\n\", x2);</span>\n　　 <span class=\"token function\">PRINT_XN</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>　　　<span class=\"token comment\">// 变成 printf(\"x3 = %d\\n\", x3);</span>\n　　　 <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//输出结果</span>\nx1 <span class=\"token operator\">=</span> <span class=\"token number\">14</span>\nx2 <span class=\"token operator\">=</span> <span class=\"token number\">20</span>\nx3 <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"1633-变参宏-和__va_args__\"><a class=\"markdownIt-Anchor\" href=\"#1633-变参宏-和__va_args__\">#</a> 16.3.3 变参宏:  <code>...</code>  和 <code>__VA_ARGS__</code></h5>\n<p><code>stdvar.h</code>  头文件提供了工具，让用户自定义带可变参数的函数</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">PR</span><span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span>_ _VA_ARGS_ _<span class=\"token punctuation\">)</span> </span><span class=\"token comment\">//   ...中的部分会替换__VA_ARGS__</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// variadic.c -- 变参宏</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;math.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">PR</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span></span><span class=\"token string\">\"Message \"</span> <span class=\"token expression\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token expression\">X </span></span></span><span class=\"token string\">\": \"</span> <span class=\"token expression\">_ _VA_ARGS_ _<span class=\"token punctuation\">)</span></span></span>\n　\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n　　 <span class=\"token keyword\">double</span> x <span class=\"token operator\">=</span> <span class=\"token number\">48</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token keyword\">double</span> y<span class=\"token punctuation\">;</span>\n　\n　　 y <span class=\"token operator\">=</span> <span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token function\">PR</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"x = %g\\n\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token function\">PR</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"x = %.2f, y = %.4f\\n\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　\n　　 <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>注意，省略号只能代替<strong>最后的宏参数</strong></p>\n<h4 id=\"164-宏和函数的选择\"><a class=\"markdownIt-Anchor\" href=\"#164-宏和函数的选择\">#</a> 16.4 宏和函数的选择</h4>\n<p>宏要更加不咋一些 稍有不慎就会产生奇怪的副作用</p>\n<ul>\n<li>宏相当于是生成内联代码，即在程序中生成语句 插入代码，</li>\n<li>由于宏处理的是字符串 而不是实际的值 所以不同担心变量类型</li>\n</ul>\n<p>对于简单的函数关系式可以使用宏</p>\n<p>需要注意以下几点：</p>\n<ul>\n<li>宏名中不能用空格，但是在替换字符串中可以有空格</li>\n<li>用圆括号把宏的参数和整个替换体括起来，这能才能确保被括起来的部分能够正常展开</li>\n<li>用大写字母表示宏函数的名称</li>\n</ul>\n<h4 id=\"165-文件包含-include\"><a class=\"markdownIt-Anchor\" href=\"#165-文件包含-include\">#</a> 16.5 文件包含: ： <code>#include</code></h4>\n<p>预处理器发现 <code>#include</code> , 会产后面的文件名，并把文件的内容包含到当前文件中，替换源文件中 <code>#include</code>  指令</p>\n<p><code>#include</code>  指令有两种形式</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span>　　　<span class=\"token expression\">←文件名在尖括号中</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"mystuff.h\"</span>　　<span class=\"token expression\">←文件名在双引号中</span></span>\n<span class=\"token comment\">//</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span>　　  　<span class=\"token expression\">←查找系统目录</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"hot.h\"</span>　      　<span class=\"token expression\">←查找当前工作目录</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"/usr/biff/p.h\"</span>　<span class=\"token expression\">←查找<span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>biff目录</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"1651-头文件示例\"><a class=\"markdownIt-Anchor\" href=\"#1651-头文件示例\">#</a> 16.5.1 头文件示例</h5>\n<p>声明和指令放在 <code>.h</code>  头文件中，函数定义放在 <code>.c</code>  源代码文件中</p>\n<h5 id=\"1652-使用头文件\"><a class=\"markdownIt-Anchor\" href=\"#1652-使用头文件\">#</a> 16.5.2 使用头文件</h5>\n<p>可以通过头文件声明外部变量供其他文件共享</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> status <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>　　<span class=\"token comment\">// 该变量具有文件作用域，在源代码文件</span>\n<span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> status<span class=\"token punctuation\">;</span>　　<span class=\"token comment\">// 在头文件中</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h4 id=\"166-其他指令\"><a class=\"markdownIt-Anchor\" href=\"#166-其他指令\">#</a> 16.6 其他指令</h4>\n<h5 id=\"1661-undef指令\"><a class=\"markdownIt-Anchor\" href=\"#1661-undef指令\">#</a> 16.6.1  <code>#undef</code>  指令</h5>\n<p><code>#undef</code>  指令用于<strong>取消</strong>已经定义的 <code>#define</code>  指令</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">LIMIT</span> <span class=\"token expression\"><span class=\"token number\">400</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">undef</span> <span class=\"token expression\">LIMIT </span><span class=\"token comment\">//取消LIMIT</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h5 id=\"1662-从c预处理器角度看已定义\"><a class=\"markdownIt-Anchor\" href=\"#1662-从c预处理器角度看已定义\">#</a> 16.6.2  从 C 预处理器角度看已定义</h5>\n<p>通过 <code>#define</code>  指令创建的红名，而且没有使用 <code>#undef</code>  关闭就是已定义</p>\n<h5 id=\"1663-条件编译\"><a class=\"markdownIt-Anchor\" href=\"#1663-条件编译\">#</a> 16.6.3 条件编译</h5>\n<h6 id=\"1-ifdefelseendif指令\"><a class=\"markdownIt-Anchor\" href=\"#1-ifdefelseendif指令\">#</a> 1.  <code>#ifdef</code> , <code>#else</code> , <code>#endif</code>  指令</h6>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">MAVIS</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"horse.h\"</span>　 <span class=\"token comment\">// 如果已经用#define定义了 MAVIS，则执行下面的指令</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">STABLES</span> <span class=\"token expression\"><span class=\"token number\">5</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"cow.h\"</span>　　　<span class=\"token comment\">//如果没有用#define定义 MAVIS，则执行下面的指令</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">STABLES</span> <span class=\"token expression\"><span class=\"token number\">15</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">/* ifdef.c -- 使用条件编译 */</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">JUST_CHECKING</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">LIMIT</span> <span class=\"token expression\"><span class=\"token number\">4</span></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n　　 <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n　　 <span class=\"token keyword\">int</span> total <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n　　 <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> LIMIT<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n　　 <span class=\"token punctuation\">{</span>\n　　　　　total <span class=\"token operator\">+=</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> i<span class=\"token operator\">*</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">JUST_CHECKING</span></span>\n　　　　　<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i=%d, running total = %d\\n\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> total<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n　　 <span class=\"token punctuation\">}</span>\n　　 <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Grand total = %d\\n\"</span><span class=\"token punctuation\">,</span> total<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n　　 <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h6 id=\"2-ifndef指令\"><a class=\"markdownIt-Anchor\" href=\"#2-ifndef指令\">#</a> 2.  <code>#ifndef</code>  指令</h6>\n<p>与 <code>#ifdef</code>  指令相似，但是 <code>#ifndef</code>  是判断后面是否为未定义</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">/* things.h */</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">THINGS_H_</span></span>\n　　 #define THINGS_H_\n　　 <span class=\"token comment\">/* 省略了头文件中的其他内容*/</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// names.h --修订后的 names_st 头文件，避免重复包含</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">NAMES_H_</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">NAMES_H_</span></span>\n\n<span class=\"token comment\">// 明示常量</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SLEN</span> <span class=\"token expression\"><span class=\"token number\">32</span></span></span>\n\n<span class=\"token comment\">// 结构声明</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">names_st</span>\n<span class=\"token punctuation\">{</span>\n　　 <span class=\"token keyword\">char</span> first<span class=\"token punctuation\">[</span>SLEN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token keyword\">char</span> last<span class=\"token punctuation\">[</span>SLEN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 类型定义</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">names_st</span> names<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 函数原型</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">get_names</span><span class=\"token punctuation\">(</span>names <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">show_names</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> names <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> <span class=\"token function\">s_gets</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> st<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n<span class=\"token comment\">//可以放置二次重复包含导致的错误</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h6 id=\"3-if和elif指令\"><a class=\"markdownIt-Anchor\" href=\"#3-if和elif指令\">#</a> 3.  <code>#if</code>  和 <code>#elif</code>  指令</h6>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\">SYS <span class=\"token operator\">==</span> <span class=\"token number\">1</span></span></span>\n　　 #include <span class=\"token string\">\"ibmpc.h\"</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">elif</span> <span class=\"token expression\">SYS <span class=\"token operator\">==</span> <span class=\"token number\">2</span></span></span>\n　　 #include <span class=\"token string\">\"vax.h\"</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">elif</span> <span class=\"token expression\">SYS <span class=\"token operator\">==</span> <span class=\"token number\">3</span></span></span>\n　　 #include <span class=\"token string\">\"mac.h\"</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span></span>\n　　 #include <span class=\"token string\">\"general.h\"</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"1664-预定义宏\"><a class=\"markdownIt-Anchor\" href=\"#1664-预定义宏\">#</a> 16.6.4 预定义宏</h5>\n<p><a href=\"https://imgtu.com/i/TQS9tH\"><img src=\"https://s4.ax1x.com/2021/12/21/TQS9tH.png\" alt=\"TQS9tH.png\"></a></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// predef.c -- 预定义宏和预定义标识符</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">why_me</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n　　 <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The file is %s.\\n\"</span><span class=\"token punctuation\">,</span> _ _FILE_ _<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The date is %s.\\n\"</span><span class=\"token punctuation\">,</span> _ _DATE_ _<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The time is %s.\\n\"</span><span class=\"token punctuation\">,</span> _ _TIME_ _<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The version is %ld.\\n\"</span><span class=\"token punctuation\">,</span> _ _STDC_VERSION_ _<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"This is line %d.\\n\"</span><span class=\"token punctuation\">,</span> _ _LINE_ _<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"This function is %s\\n\"</span><span class=\"token punctuation\">,</span> _ _func_ _<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token function\">why_me</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n　　 <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">why_me</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n　　 <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"This function is %s\\n\"</span><span class=\"token punctuation\">,</span> _ _func_ _<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"This is line %d.\\n\"</span><span class=\"token punctuation\">,</span> _ _LINE_ _<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//输出结果</span>\nThe file is predef<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">.</span>\nThe date is Sep <span class=\"token number\">23</span> <span class=\"token number\">2013.</span>\nThe time is <span class=\"token number\">22</span><span class=\"token operator\">:</span><span class=\"token number\">01</span><span class=\"token operator\">:</span><span class=\"token number\">09.</span>\nThe version is <span class=\"token number\">201112.</span>\nThis is line <span class=\"token number\">11.</span>\nThis function is main\nThis function is why_me\nThis is line <span class=\"token number\">21.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"1665-line和error\"><a class=\"markdownIt-Anchor\" href=\"#1665-line和error\">#</a> 16.6.5  <code>#line</code>  和 <code>#error</code></h5>\n<p><code>#line</code>  重置 <code>_ _LINE_ _</code> 和 <code>_ _FILE_ _</code> 宏报告的行号和文件名</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">line</span> <span class=\"token expression\"><span class=\"token number\">1000</span> 　　　    </span><span class=\"token comment\">// 把当前行号重置为1000</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">line</span> <span class=\"token expression\"><span class=\"token number\">10</span> </span><span class=\"token string\">\"cool.c\"</span> 　<span class=\"token comment\">// 把行号重置为10，把文件名重置为cool.c</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><code>#error</code>  指令让预处理器发出一条错误信息</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\">_ _STDC_VERSION_ _ <span class=\"token operator\">!=</span> <span class=\"token number\">201112L</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">error</span> <span class=\"token expression\">Not C11</span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"1666-pragma\"><a class=\"markdownIt-Anchor\" href=\"#1666-pragma\">#</a> 16.6.6  <code>#pragma</code></h5>\n<p><code>#pragma</code>  把编译器指令放入源代码中</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">c9x on </span><span class=\"token comment\">//让编译器支持C9X</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>C99 提供了 <code>_Pragma</code>  预处理器运算符，该运算符把字符串转化成普通的编译指示</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">_Pragma</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"nonstandardtreatmenttypeB on\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">nonstandardtreatmenttypeB on</span></span>\n    <span class=\"token comment\">//两者等价</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"1667-泛型选择c11\"><a class=\"markdownIt-Anchor\" href=\"#1667-泛型选择c11\">#</a> 16.6.7 泛型选择 (C11)</h5>\n<p><strong>泛型编程</strong>：没有特定类型，但是一旦指定一种类型，就可以转换成指定类型的代码</p>\n<p><strong>泛型表达式</strong>：可以根据表达式的类型选择一个值</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">_Generic</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//_Generic是关键字</span>\n    <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">MYTYPE</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span> <span class=\"token keyword\">_Generic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span><span class=\"token punctuation\">\\</span>\n　　 <span class=\"token expression\"><span class=\"token keyword\">int</span><span class=\"token operator\">:</span> </span><span class=\"token string\">\"int\"</span><span class=\"token expression\"><span class=\"token punctuation\">,</span></span><span class=\"token punctuation\">\\</span>\n　　 <span class=\"token expression\"><span class=\"token keyword\">float</span> <span class=\"token operator\">:</span> </span><span class=\"token string\">\"float\"</span><span class=\"token expression\"><span class=\"token punctuation\">,</span></span><span class=\"token punctuation\">\\</span>\n　　 <span class=\"token expression\"><span class=\"token keyword\">double</span><span class=\"token operator\">:</span> </span><span class=\"token string\">\"double\"</span><span class=\"token expression\"><span class=\"token punctuation\">,</span></span><span class=\"token punctuation\">\\</span>\n　　 <span class=\"token expression\"><span class=\"token keyword\">default</span><span class=\"token operator\">:</span> </span><span class=\"token string\">\"other\"</span><span class=\"token punctuation\">\\</span>\n<span class=\"token expression\"><span class=\"token punctuation\">)</span></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// mytype.c</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">MYTYPE</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span> <span class=\"token keyword\">_Generic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span><span class=\"token punctuation\">\\</span>\n　　 <span class=\"token expression\"><span class=\"token keyword\">int</span><span class=\"token operator\">:</span> </span><span class=\"token string\">\"int\"</span><span class=\"token expression\"><span class=\"token punctuation\">,</span></span><span class=\"token punctuation\">\\</span>\n　　 <span class=\"token expression\"><span class=\"token keyword\">float</span> <span class=\"token operator\">:</span> </span><span class=\"token string\">\"float\"</span><span class=\"token expression\"><span class=\"token punctuation\">,</span></span><span class=\"token punctuation\">\\</span>\n　　 <span class=\"token expression\"><span class=\"token keyword\">double</span><span class=\"token operator\">:</span> </span><span class=\"token string\">\"double\"</span><span class=\"token expression\"><span class=\"token punctuation\">,</span></span><span class=\"token punctuation\">\\</span>\n　　 <span class=\"token expression\"><span class=\"token keyword\">default</span><span class=\"token operator\">:</span> </span><span class=\"token string\">\"other\"</span><span class=\"token punctuation\">\\</span>\n<span class=\"token expression\"><span class=\"token punctuation\">)</span></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n　　 <span class=\"token keyword\">int</span> d <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n\n　　 <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">MYTYPE</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>　  　<span class=\"token comment\">// d 是int类型</span>\n　　 <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">MYTYPE</span><span class=\"token punctuation\">(</span><span class=\"token number\">2.0</span><span class=\"token operator\">*</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>　<span class=\"token comment\">// 2.0 * d 是double类型</span>\n　　 <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">MYTYPE</span><span class=\"token punctuation\">(</span><span class=\"token number\">3L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>　 　<span class=\"token comment\">// 3L 是long类型</span>\n　　 <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">MYTYPE</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>　 　<span class=\"token comment\">// &amp;d 的类型是 int *</span>\n　　 <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//输出结果</span>\n<span class=\"token keyword\">int</span>\n<span class=\"token keyword\">double</span>\nother\nother<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"167-内联函数c99\"><a class=\"markdownIt-Anchor\" href=\"#167-内联函数c99\">#</a> 16.7 内联函数 (C99)</h4>\n<p>把函数变成内联函数，编译器可能会用内联代码替换函数调用</p>\n<p>具有内部链接的函数可以称为内联函数，内联函数的定义和调用该函数的代码必须在同一个文件中</p>\n<p>最简单的定义方法是使用函数说明符 <code>inline</code>  和存储类别说明符 <code>static</code></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">eatline</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>　<span class=\"token comment\">// 内联函数定义/原型</span>\n<span class=\"token punctuation\">{</span>\n　　 <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n　　　　　<span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n　　 <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n　　 <span class=\"token function\">eatline</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>　　　<span class=\"token comment\">// 函数调用</span>\n　　 <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>编译器会用函数体中的代码替换函数调用</p>\n<p>由于没有给内联函数预留单独的代码块所以无法获得内联函数的地址</p>\n<h4 id=\"168-_noreturn函数c11\"><a class=\"markdownIt-Anchor\" href=\"#168-_noreturn函数c11\">#</a> 16.8  <code>_Noreturn</code>  函数 (C11)</h4>\n<p><code>_Noreturn</code>  表示调用完函数后不返回主调函数</p>\n<h4 id=\"169-c库\"><a class=\"markdownIt-Anchor\" href=\"#169-c库\">#</a> 16.9 C 库</h4>\n<h5 id=\"1691-访问c库\"><a class=\"markdownIt-Anchor\" href=\"#1691-访问c库\">#</a> 16.9.1 访问 C 库</h5>\n<ol>\n<li>\n<p>自动访问</p>\n<p>在一些系统中只需要编译程序，就可以使用一些常用的库函数</p>\n</li>\n<li>\n<p>文件包含</p>\n<p>可以通过 <code>#include</code>  指令包含定义宏函数的文件</p>\n</li>\n<li>\n<p>库包含</p>\n<p>在编译或链接程序的某些阶段，可能需要指定库选项，需要通过编译时选项像是指定这些库</p>\n</li>\n</ol>\n<h5 id=\"1692-使用库描述\"><a class=\"markdownIt-Anchor\" href=\"#1692-使用库描述\">#</a> 16.9.2 使用库描述</h5>\n<h4 id=\"1610-数学库\"><a class=\"markdownIt-Anchor\" href=\"#1610-数学库\">#</a> 16.10 数学库</h4>\n<p><code>math.h</code>  头文件提供这些函数的原型</p>\n<p><a href=\"https://imgtu.com/i/TQiHhD\"><img src=\"https://s4.ax1x.com/2021/12/21/TQiHhD.png\" alt=\"TQiHhD.png\"></a></p>\n<h5 id=\"16101-三角问题\"><a class=\"markdownIt-Anchor\" href=\"#16101-三角问题\">#</a> 16.10.1 三角问题</h5>\n<p>数学库提供平方根函数和一堆反正切函数</p>\n<ul>\n<li>平方根函数是 <code>sqrt()</code> , 接受一个 <code>double</code>  类型的值，并返回参数的平方根也是 <code>double</code>  类型</li>\n<li><code>atan()</code>  接受一个 <code>double</code>  类型的参数，并返回一个角度</li>\n<li><code>atan2()</code>  函数，接受两个参数 <code>X</code>  和 <code>Y</code> ,</li>\n</ul>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">/* rect_pol.c -- 把直角坐标转换为极坐标 */</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;math.h&gt;</span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">RAD_TO_DEG</span> <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token number\">180</span><span class=\"token operator\">/</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span> <span class=\"token operator\">*</span> <span class=\"token function\">atan</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">polar_v</span> <span class=\"token punctuation\">{</span>\n　　 <span class=\"token keyword\">double</span> magnitude<span class=\"token punctuation\">;</span>\n　　 <span class=\"token keyword\">double</span> angle<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> Polar_V<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">rect_v</span> <span class=\"token punctuation\">{</span>\n　　 <span class=\"token keyword\">double</span> x<span class=\"token punctuation\">;</span>\n　　 <span class=\"token keyword\">double</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> Rect_V<span class=\"token punctuation\">;</span>\n\nPolar_V <span class=\"token function\">rect_to_polar</span><span class=\"token punctuation\">(</span>Rect_V<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n　　 Rect_V input<span class=\"token punctuation\">;</span>\n　　 Polar_V result<span class=\"token punctuation\">;</span>\n\n　　 <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter x and y coordinates; enter q to quit:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lf %lf\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>input<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>input<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n　　 <span class=\"token punctuation\">{</span>\n　　　　　result <span class=\"token operator\">=</span> <span class=\"token function\">rect_to_polar</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　　　　<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"magnitude = %0.2f, angle = %0.2f\\n\"</span><span class=\"token punctuation\">,</span>\n　　　　　　　 result<span class=\"token punctuation\">.</span>magnitude<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">.</span>angle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token punctuation\">}</span>\n　　 <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bye.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n　　 <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nPolar_V <span class=\"token function\">rect_to_polar</span><span class=\"token punctuation\">(</span>Rect_V rv<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n　　 Polar_V pv<span class=\"token punctuation\">;</span>\n\n　　 pv<span class=\"token punctuation\">.</span>magnitude <span class=\"token operator\">=</span> <span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span>rv<span class=\"token punctuation\">.</span>x <span class=\"token operator\">*</span> rv<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> rv<span class=\"token punctuation\">.</span>y <span class=\"token operator\">*</span> rv<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pv<span class=\"token punctuation\">.</span>magnitude <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n　　　　　pv<span class=\"token punctuation\">.</span>angle <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token keyword\">else</span>\n　　　　　pv<span class=\"token punctuation\">.</span>angle <span class=\"token operator\">=</span> RAD_TO_DEG <span class=\"token operator\">*</span> <span class=\"token function\">atan2</span><span class=\"token punctuation\">(</span>rv<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span> rv<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n　　 <span class=\"token keyword\">return</span> pv<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 输出示例</span>\nEnter x and y coordinates<span class=\"token punctuation\">;</span> enter q to quit<span class=\"token operator\">:</span>\n<span class=\"token number\">10</span> <span class=\"token number\">10</span>\nmagnitude <span class=\"token operator\">=</span> <span class=\"token number\">14.14</span><span class=\"token punctuation\">,</span> angle <span class=\"token operator\">=</span> <span class=\"token number\">45.00</span>\n<span class=\"token operator\">-</span><span class=\"token number\">12</span> <span class=\"token operator\">-</span><span class=\"token number\">5</span>\nmagnitude <span class=\"token operator\">=</span> <span class=\"token number\">13.00</span><span class=\"token punctuation\">,</span> angle <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">157.38</span>\nq\nBye<span class=\"token punctuation\">.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"16102-类型变体\"><a class=\"markdownIt-Anchor\" href=\"#16102-类型变体\">#</a> 16.10.2 类型变体</h5>\n<p>C 标准专门为 <code>float</code>  类型和 <code>long double</code>  类型提供了标准函数</p>\n<ul>\n<li><code>sqrtf()</code> : <code>sqrt</code>  的 float 版本</li>\n<li><code>sqrtl()</code> : <code>sqrt</code>  的 long double 版本</li>\n</ul>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;math.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">RAD_TO_DEG</span> <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token number\">180</span><span class=\"token operator\">/</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span> <span class=\"token operator\">*</span> <span class=\"token function\">atanl</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span>\n\n<span class=\"token comment\">// 泛型平方根函数</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">SQRT</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span> <span class=\"token keyword\">_Generic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span><span class=\"token punctuation\">\\</span>\n　　<span class=\"token expression\"><span class=\"token keyword\">long</span> <span class=\"token keyword\">double</span><span class=\"token operator\">:</span> sqrtl<span class=\"token punctuation\">,</span> </span><span class=\"token punctuation\">\\</span>\n　　<span class=\"token expression\"><span class=\"token keyword\">default</span><span class=\"token operator\">:</span> sqrt<span class=\"token punctuation\">,</span> </span><span class=\"token punctuation\">\\</span>\n　　<span class=\"token expression\"><span class=\"token keyword\">float</span><span class=\"token operator\">:</span> sqrtf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span></span></span>\n\n<span class=\"token comment\">// 泛型正弦函数，角度的单位为度</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">SIN</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span> <span class=\"token keyword\">_Generic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span><span class=\"token punctuation\">\\</span>\n　　 <span class=\"token expression\"><span class=\"token keyword\">long</span> <span class=\"token keyword\">double</span><span class=\"token operator\">:</span> <span class=\"token function\">sinl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>RAD_TO_DEG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span><span class=\"token punctuation\">\\</span>\n　　 <span class=\"token expression\"><span class=\"token keyword\">default</span><span class=\"token operator\">:</span>　　 <span class=\"token function\">sin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>RAD_TO_DEG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span><span class=\"token punctuation\">\\</span>\n　　 <span class=\"token expression\"><span class=\"token keyword\">float</span><span class=\"token operator\">:</span>　　　<span class=\"token function\">sinf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>RAD_TO_DEG<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">\\</span>\n<span class=\"token expression\"><span class=\"token punctuation\">)</span></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n　　 <span class=\"token keyword\">float</span> x <span class=\"token operator\">=</span> <span class=\"token number\">45.0f</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token keyword\">double</span> xx <span class=\"token operator\">=</span> <span class=\"token number\">45.0</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token keyword\">long</span> <span class=\"token keyword\">double</span> xxx <span class=\"token operator\">=</span> <span class=\"token number\">45.0L</span><span class=\"token punctuation\">;</span>\n\n　　 <span class=\"token keyword\">long</span> <span class=\"token keyword\">double</span> y <span class=\"token operator\">=</span> <span class=\"token function\">SQRT</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token keyword\">long</span> <span class=\"token keyword\">double</span> yy <span class=\"token operator\">=</span> <span class=\"token function\">SQRT</span><span class=\"token punctuation\">(</span>xx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token keyword\">long</span> <span class=\"token keyword\">double</span> yyy <span class=\"token operator\">=</span> <span class=\"token function\">SQRT</span><span class=\"token punctuation\">(</span>xxx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%.17Lf\\n\"</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>　　<span class=\"token comment\">// 匹配 float</span>\n　　 <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%.17Lf\\n\"</span><span class=\"token punctuation\">,</span> yy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>　 <span class=\"token comment\">// 匹配 default</span>\n　　 <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%.17Lf\\n\"</span><span class=\"token punctuation\">,</span> yyy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>　<span class=\"token comment\">// 匹配 long double</span>\n　　 <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">45</span><span class=\"token punctuation\">;</span>\n　　 yy <span class=\"token operator\">=</span> <span class=\"token function\">SQRT</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>　　　　      <span class=\"token comment\">// 匹配 default</span>\n　　 <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%.17Lf\\n\"</span><span class=\"token punctuation\">,</span> yy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　 yyy <span class=\"token operator\">=</span> <span class=\"token function\">SIN</span><span class=\"token punctuation\">(</span>xxx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>　　      　<span class=\"token comment\">// 匹配 long double</span>\n　　 <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%.17Lf\\n\"</span><span class=\"token punctuation\">,</span> yyy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n　　 <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"16103-tgmathh库\"><a class=\"markdownIt-Anchor\" href=\"#16103-tgmathh库\">#</a> 16.10.3  <code>tgmath.h</code>  库</h5>\n<p><code>tgmath.h</code>  文件创建了一个泛型类型宏，与原来 <code>double</code>  版本的函数名同名</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;tgmath.h&gt;</span></span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n　　 <span class=\"token keyword\">float</span> x <span class=\"token operator\">=</span> <span class=\"token number\">44.0</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token keyword\">double</span> y<span class=\"token punctuation\">;</span>\n　　 y <span class=\"token operator\">=</span> <span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>　　<span class=\"token comment\">// 调用宏，所以是 sqrtf(x)</span>\n　　 y <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>sqrt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>　<span class=\"token comment\">// 调用函数 sqrt()</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"1611-通用工具库\"><a class=\"markdownIt-Anchor\" href=\"#1611-通用工具库\">#</a> 16.11 通用工具库</h4>\n<h5 id=\"16111-exit和atexit函数\"><a class=\"markdownIt-Anchor\" href=\"#16111-exit和atexit函数\">#</a> 16.11.1  <code>exit()</code>  和 <code>atexit()</code>  函数</h5>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">/* byebye.c -- atexit()示例 */</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h&gt;</span></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">sign_off</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">too_bad</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n　　 <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span>\n\n　　 <span class=\"token function\">atexit</span><span class=\"token punctuation\">(</span>sign_off<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>　　<span class=\"token comment\">/* 注册 sign_off()函数 */</span>\n　　 <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter an integer:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n　　 <span class=\"token punctuation\">{</span>\n　　　　　<span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"That's no integer!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　　　　<span class=\"token function\">atexit</span><span class=\"token punctuation\">(</span>too_bad<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>　<span class=\"token comment\">/* 注册 too_bad()函数 */</span>\n　　　　　<span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>EXIT_FAILURE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token punctuation\">}</span>\n　　 <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d is %s.\\n\"</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"even\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"odd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n　　 <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">sign_off</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n　　 <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Thus terminates another magnificent program from\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SeeSaw Software!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">too_bad</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n　　 <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SeeSaw Software extends its heartfelt condolences\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"to you upon the failure of your program.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//运行示例</span>\n<span class=\"token comment\">//Enter an integer:</span>\n<span class=\"token comment\">//212</span>\n<span class=\"token comment\">//212 is even.</span>\n<span class=\"token comment\">//Thus terminates another magnificent program from</span>\n<span class=\"token comment\">//SeeSaw Software!</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li>\n<p><code>atexit()</code>  函数的用法</p>\n<p>这个函数使用<strong>函数指针</strong></p>\n<p>使用 <code>atexit()</code>  函数，只需把退出时要调用的函数地址传递给 <code>atexit()</code>  即可，函数名作为函数参数时相当于该函数的地址</p>\n<p><code>atexit()</code>  注册了这些函数 当最后调用 <code>exit()</code>  函数时 这些函数就会被执行</p>\n<p>程序结束时会自动隐式调用 <code>exit()</code></p>\n</li>\n<li>\n<p><code>exit()</code>  函数的用法</p>\n<p>会完成一些清理工作:</p>\n<p>刷新所有的输出流，关闭所有打开的流和关闭由标准 I/O 函数 <code>tmpfile()</code>  创建的临时文件</p>\n</li>\n</ol>\n<h5 id=\"16112-qsort函数\"><a class=\"markdownIt-Anchor\" href=\"#16112-qsort函数\">#</a> 16.11.2  <code>qsort()</code>  函数</h5>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">qsort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>base<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> nmemb<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> size<span class=\"token punctuation\">,</span>\n　　　　　　　<span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>compar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//函数原型</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<ul>\n<li>第一个参数是指针，指向待排序数组的首元素地址</li>\n<li>第二个参数是待排序项的数量</li>\n<li>第三个参数是待排序数组中每个元素的大小 可以使用 <code>sizeof()</code></li>\n<li>第四个参数是一个指向函数的指针，这个被指针指向的比较函数用于确定排序的顺序，该函数接受两个参数：分别指向待比较两项的指针，如果第一项大于第二项，比较函数返回正数，相同返回 <code>0</code> , 小于则返回负数</li>\n</ul>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">/* qsorter.c -- 用 qsort()排序一组数字 */</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h&gt;</span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">NUM</span> <span class=\"token expression\"><span class=\"token number\">40</span></span></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fillarray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> ar <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">showarray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">double</span> ar <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">mycomp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span> p1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span> p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n　　 <span class=\"token keyword\">double</span> vals<span class=\"token punctuation\">[</span>NUM<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token function\">fillarray</span><span class=\"token punctuation\">(</span>vals<span class=\"token punctuation\">,</span> NUM<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Random list:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token function\">showarray</span><span class=\"token punctuation\">(</span>vals<span class=\"token punctuation\">,</span> NUM<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token function\">qsort</span><span class=\"token punctuation\">(</span>vals<span class=\"token punctuation\">,</span> NUM<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> mycomp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nSorted list:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token function\">showarray</span><span class=\"token punctuation\">(</span>vals<span class=\"token punctuation\">,</span> NUM<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">fillarray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> ar <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n　　 <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">;</span>\n\n　　 <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> index <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> index<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n　　　　　ar<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span> <span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span> <span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">showarray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">double</span> ar <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n　　 <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">;</span>\n\n　　 <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> index <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> index<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n　　 <span class=\"token punctuation\">{</span>\n　　　　　<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%9.4f \"</span><span class=\"token punctuation\">,</span> ar<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　　　　<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">%</span> <span class=\"token number\">6</span> <span class=\"token operator\">==</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n　　　　　　　 <span class=\"token function\">putchar</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token punctuation\">}</span>\n　　 <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">%</span> <span class=\"token number\">6</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n　　　　　<span class=\"token function\">putchar</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* 按从小到大的顺序排序 */</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">mycomp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span> p1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span> p2<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n　　 <span class=\"token comment\">/* 要使用指向double的指针来访问这两个值 */</span>\n　　 <span class=\"token keyword\">const</span> <span class=\"token keyword\">double</span> <span class=\"token operator\">*</span> a1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">double</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> p1<span class=\"token punctuation\">;</span>\n　　 <span class=\"token keyword\">const</span> <span class=\"token keyword\">double</span> <span class=\"token operator\">*</span> a2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">double</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> p2<span class=\"token punctuation\">;</span>\n\n　　 <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>a1 <span class=\"token operator\">&lt;</span> <span class=\"token operator\">*</span>a2<span class=\"token punctuation\">)</span>\n　　　　　<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>a1 <span class=\"token operator\">==</span> <span class=\"token operator\">*</span>a2<span class=\"token punctuation\">)</span>\n　　　　　<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token keyword\">else</span>\n　　　　　<span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//输出结果</span>\n<span class=\"token comment\">//Random list:</span>\n<span class=\"token comment\">//0.0001 　 1.6475 　2.4332 　0.0693 　0.7268 　0.7383</span>\n<span class=\"token comment\">//24.0357 　0.1009 　87.1828　5.7361 　0.6079 　0.6330</span>\n<span class=\"token comment\">//1.6058  　0.1406 　0.5933 　1.1943 　5.5295 　2.2426</span>\n<span class=\"token comment\">//0.8364  　2.7127 　0.2514 　0.9593 　8.9635 　0.7139</span>\n<span class=\"token comment\">//0.6249  　1.6044 　0.8649 　2.1577 　0.5420 　15.0123</span>\n<span class=\"token comment\">//1.7931  　1.6183 　1.9973 　2.9333 　12.8512  1.3034</span>\n<span class=\"token comment\">//0.3032  　1.1406 　18.7880 　0.9887</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//Sorted list:</span>\n<span class=\"token comment\">//0.0001  　0.0693 　0.1009 　0.1406 　0.2514 　0.3032</span>\n<span class=\"token comment\">//0.5420  　0.5933 　0.6079 　0.6249 　0.6330 　0.7139</span>\n<span class=\"token comment\">//0.7268 　 0.7383 　0.8364 　0.8649 　0.9593　 0.9887</span>\n<span class=\"token comment\">//1.1406  　1.1943 　1.3034 　1.6044 　1.6058 　1.6183</span>\n<span class=\"token comment\">//1.6475  　1.7931 　1.9973 　2.1577 　2.2426 　2.4332</span>\n<span class=\"token comment\">//2.7127  　2.9333 　5.5295 　5.7361 　8.9635 　12.8512</span>\n<span class=\"token comment\">//15.0123 　18.7880　24.0357　87.1828</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li><code>mycomp()</code>  的定义</li>\n</ul>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">mycomp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span> p1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span> p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"1612-断言库\"><a class=\"markdownIt-Anchor\" href=\"#1612-断言库\">#</a> 16.12 断言库</h4>\n<p><code>assert()</code>  宏在 <code>assert.h</code>  头文件中，接受一个整型表达式作为参数，如果表达式求值为假， <code>assert()</code>  宏就在标准错误流中写入一条错误信息，并调用 <code>abort()</code>  函数终止程序</p>\n<p>并且会提示出错的地点 行数</p>\n<h5 id=\"16121-assert的用法\"><a class=\"markdownIt-Anchor\" href=\"#16121-assert的用法\">#</a> 16.12.1  <code>assert</code>  的用法</h5>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">/* assert.c -- 使用 assert() */</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;math.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;assert.h&gt;</span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n　　 <span class=\"token keyword\">double</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">;</span>\n\n　　 <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter a pair of numbers (0 0 to quit): \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lf%lf\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>y<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">2</span>\n　　　　　<span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> y <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n　　 <span class=\"token punctuation\">{</span>\n　　　　　z <span class=\"token operator\">=</span> x <span class=\"token operator\">*</span> x <span class=\"token operator\">-</span> y <span class=\"token operator\">*</span> y<span class=\"token punctuation\">;</span>　<span class=\"token comment\">/* 应该用 + */</span>\n　　　　　<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>z <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　　　　<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"answer is %f\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　　　　<span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Next pair of numbers: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token punctuation\">}</span>\n　　 <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Done\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n　　 <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//输出实例</span>\nEnter a pair of <span class=\"token function\">numbers</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token number\">0</span> to quit<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n<span class=\"token number\">4</span> <span class=\"token number\">3</span>\nanswer is <span class=\"token number\">2.645751</span>\nNext pair of numbers<span class=\"token operator\">:</span>\n<span class=\"token number\">5</span> <span class=\"token number\">3</span>\nanswer is <span class=\"token number\">4.000000</span>\nNext pair of numbers<span class=\"token operator\">:</span>\n<span class=\"token number\">3</span> <span class=\"token number\">5</span>\nAssertion failed<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>z <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> function main<span class=\"token punctuation\">,</span> file <span class=\"token operator\">/</span>Users<span class=\"token operator\">/</span>assert<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">,</span> line <span class=\"token number\">14.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"16122-_static_assertc11\"><a class=\"markdownIt-Anchor\" href=\"#16122-_static_assertc11\">#</a> 16.12.2  <code>_Static_assert</code> (C11)</h5>\n<p><code>_Static_assert()</code>  会导致程序无法通过编译，其接受两个参数</p>\n<ul>\n<li>第一个参数是整型常量表达式</li>\n<li>第二个参数是一个字符串，如果第一个表达式是假，编译器就不会编译该程序并且提示这串字符串</li>\n</ul>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">//　statasrt.c</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;limits.h&gt;</span></span>\n<span class=\"token keyword\">_Static_assert</span><span class=\"token punctuation\">(</span>CHAR_BIT <span class=\"token operator\">==</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"16-bit char falsely assumed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n　　 <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"char is 16 bits.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 输出实例 </span>\n<span class=\"token comment\">//$ clang statasrt.c</span>\n<span class=\"token comment\">//statasrt.c:4:1: error: static_assert failed \"16-bit char falsely assumed\"</span>\n<span class=\"token comment\">//_Static_assert(CHAR_BIT == 16, \"16-bit char falsely assumed\");</span>\n<span class=\"token comment\">//^　　　　　　　　 ～～～～～～～～～～～～～～</span>\n<span class=\"token comment\">//1 error generated.</span>\n<span class=\"token comment\">//$</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"1613-stringh库宏的memcpy和memove\"><a class=\"markdownIt-Anchor\" href=\"#1613-stringh库宏的memcpy和memove\">#</a> 16.13  <code>string.h</code>  库宏的 <code>memcpy()</code>  和 <code>memove()</code></h4>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">\n<span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span> restrict s1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span> restrict s2<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token function\">memmove</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>s1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>s2<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// mems.c -- 使用 memcpy() 和 memmove()</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SIZE</span> <span class=\"token expression\"><span class=\"token number\">10</span></span></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">show_array</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> ar <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 如果编译器不支持C11的_Static_assert，可以注释掉下面这行</span>\n<span class=\"token keyword\">_Static_assert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"double not twice int size\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n　　 <span class=\"token keyword\">int</span> values<span class=\"token punctuation\">[</span>SIZE<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token keyword\">int</span> target<span class=\"token punctuation\">[</span>SIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token keyword\">double</span> curious<span class=\"token punctuation\">[</span>SIZE <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token number\">2.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.0e5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.0e10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.0e20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5.0e30</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n　　 <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"memcpy() used:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"values (original data): \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token function\">show_array</span><span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">,</span> SIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> values<span class=\"token punctuation\">,</span> SIZE <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"target (copy of values):\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token function\">show_array</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> SIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n　　 <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nUsing memmove() with overlapping ranges:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token function\">memmove</span><span class=\"token punctuation\">(</span>values <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> values<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"values -- elements 0-4 copied to 2-6:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token function\">show_array</span><span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">,</span> SIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n　　 <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nUsing memcpy() to copy double to int:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> curious<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>SIZE <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"target -- 5 doubles into 10 int positions:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token function\">show_array</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> SIZE <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token function\">show_array</span><span class=\"token punctuation\">(</span>target <span class=\"token operator\">+</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> SIZE <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n　　 <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">show_array</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> ar <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n　　 <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n\n　　 <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n　　　　　<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span> ar<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token function\">putchar</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>拷贝任意类型的数组</p>\n<h4 id=\"1614-可变参数-stdargh\"><a class=\"markdownIt-Anchor\" href=\"#1614-可变参数-stdargh\">#</a> 16.14 可变参数:  <code>stdarg.h</code></h4>\n<pre class=\"line-numbers language-C\" data-language=\"C\"><code class=\"language-C\">#include &lt;stdio.h&gt;\n#include &lt;stdarg.h&gt;\ndouble sum(int, ...);\n\nint main(void)\n{\n　　 double s, t;\n\n　　 s = sum(3, 1.1, 2.5, 13.3);\n　　 t = sum(6, 1.1, 2.1, 13.1, 4.1, 5.1, 6.1);\n　　 printf(\"return value for \"\n　　　　　\"sum(3, 1.1, 2.5, 13.3):　　　　　　　　%g\\n\", s);\n　　 printf(\"return value for \"\n　　　　　\"sum(6, 1.1, 2.1, 13.1, 4.1, 5.1, 6.1): %g\\n\", t);\n\n　　 return 0;\n}\n\ndouble sum(int lim, ...)\n{\n　　 va_list ap;　　　  　 　// 声明一个对象存储参数\n　　 double tot = 0;\n　　 int i;\n\n　　 va_start(ap, lim);　　　// 把ap初始化为参数列表\n　　 for (i = 0; i &lt; lim; i++)\n　　　　　tot += va_arg(ap, double);　// 访问参数列表中的每一项\n　　 va_end(ap);　　　            　　// 清理工作\n\n　　 return tot;\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"第十七章-高级数据表示\"><a class=\"markdownIt-Anchor\" href=\"#第十七章-高级数据表示\">#</a> 第十七章 高级数据表示</h3>\n<h4 id=\"171-研究数据表示\"><a class=\"markdownIt-Anchor\" href=\"#171-研究数据表示\">#</a> 17.1 研究数据表示</h4>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">/* films1.c -- 使用一个结构数组 */</span>\n<span class=\"token comment\">// 存储片名和评级</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">TSIZE</span>       <span class=\"token expression\"><span class=\"token number\">45</span>   </span><span class=\"token comment\">/* 存储片名的数组大小 */</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">FMAX</span>        <span class=\"token expression\"><span class=\"token number\">5</span>    </span><span class=\"token comment\">/* 影片的最大数量 */</span></span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">film</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">char</span> title<span class=\"token punctuation\">[</span>TSIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">int</span> rating<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> <span class=\"token function\">s_gets</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>st<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">struct</span> <span class=\"token class-name\">film</span> movies<span class=\"token punctuation\">[</span>FMAX<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">;</span>\n\n     <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter first movie title:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> FMAX <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">s_gets</span><span class=\"token punctuation\">(</span>movies<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">,</span> TSIZE<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">&amp;&amp;</span>\n          movies<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter your rating &lt;0-10&gt;:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>movies<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>rating<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n               <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter next movie title (empty line to stop):\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n          <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"No data entered. \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">else</span>\n          <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Here is the movie list:\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n          <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Movie: %s  Rating: %d\\n\"</span><span class=\"token punctuation\">,</span> movies<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">,</span>movies<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>rating<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bye!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> <span class=\"token function\">s_gets</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> st<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> ret_val<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> find<span class=\"token punctuation\">;</span>\n\n     ret_val <span class=\"token operator\">=</span> <span class=\"token function\">fgets</span><span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> <span class=\"token constant\">stdin</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ret_val<span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n          find <span class=\"token operator\">=</span> <span class=\"token function\">strchr</span><span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">,</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 查找换行符</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>find<span class=\"token punctuation\">)</span>                   <span class=\"token comment\">// 如果地址不是 NULL,</span>\n               <span class=\"token operator\">*</span>find <span class=\"token operator\">=</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// 在此处放置一个空字符</span>\n          <span class=\"token keyword\">else</span>\n               <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// 处理剩余输入行</span>\n     <span class=\"token punctuation\">}</span>\n     <span class=\"token keyword\">return</span> ret_val<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">//因为我们事先不能确定看的电影的数量 所以我们使用了这个优化算法</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">TSIZE</span> <span class=\"token expression\"><span class=\"token number\">45</span>    </span><span class=\"token comment\">/*存储片名的数组大小*/</span></span>\n     <span class=\"token keyword\">struct</span> <span class=\"token class-name\">film</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">char</span> title<span class=\"token punctuation\">[</span>TSIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">int</span> rating<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">film</span> <span class=\"token operator\">*</span> movies<span class=\"token punctuation\">;</span>    <span class=\"token comment\">/* 指向结构的指针 */</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter the maximum number of movies you'll enter:\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmovies <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">film</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">film</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"172-从数组到链表\"><a class=\"markdownIt-Anchor\" href=\"#172-从数组到链表\">#</a> 17.2 从数组到链表</h4>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">TSIZE</span> <span class=\"token expression\"><span class=\"token number\">45</span>    </span><span class=\"token comment\">/* 存储片名的数组大小*/</span></span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">film</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">char</span> title<span class=\"token punctuation\">[</span>TSIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">int</span> rating<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">struct</span> <span class=\"token class-name\">film</span> <span class=\"token operator\">*</span> next<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>每个结构中都包含指向下一个结构的指针，当创建新的结构的时候可以把该结构的地址存储在上一个结构中，并将最后一个结构中的指针设置为 <code>NULL</code> , 表示该指针是最后一个指针</p>\n<p>还需要一个<strong>头指针</strong>存储第一项的地址</p>\n<h5 id=\"1721-使用链表\"><a class=\"markdownIt-Anchor\" href=\"#1721-使用链表\">#</a> 17.2.1 使用链表</h5>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">/* films2.c -- 使用结构链表 */</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h&gt;</span>        <span class=\"token comment\">/* 提供malloc()原型 */</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h&gt;</span>        <span class=\"token comment\">/* 提供strcpy()原型 */</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">TSIZE</span>    <span class=\"token expression\"><span class=\"token number\">45</span>        </span><span class=\"token comment\">/* 存储片名的数组大小 */</span></span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">film</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">char</span> title<span class=\"token punctuation\">[</span>TSIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">int</span> rating<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">struct</span> <span class=\"token class-name\">film</span> <span class=\"token operator\">*</span> next<span class=\"token punctuation\">;</span>    <span class=\"token comment\">/* 指向链表中的下一个结构 */</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> <span class=\"token function\">s_gets</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> st<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">struct</span> <span class=\"token class-name\">film</span> <span class=\"token operator\">*</span> head <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">struct</span> <span class=\"token class-name\">film</span> <span class=\"token operator\">*</span> prev<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>current<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">char</span> input<span class=\"token punctuation\">[</span>TSIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* 收集并存储信息 */</span>\n     <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter first movie title:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">s_gets</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">,</span> TSIZE<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">&amp;&amp;</span> input<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n          current <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">film</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">film</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>head <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>       <span class=\"token comment\">/* 第1个结构 */</span>\n               head <span class=\"token operator\">=</span> current<span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">else</span>                    <span class=\"token comment\">/* 后续的结构 */</span>\n               prev<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> current<span class=\"token punctuation\">;</span>\n          current<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>current<span class=\"token operator\">-&gt;</span>title<span class=\"token punctuation\">,</span> input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter your rating &lt;0-10&gt;:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>current<span class=\"token operator\">-&gt;</span>rating<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n               <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter next movie title (empty line to stop):\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          prev <span class=\"token operator\">=</span> current<span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n\n     <span class=\"token comment\">/* 显示电影列表 */</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>head <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n          <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"No data entered. \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">else</span>\n          <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Here is the movie list:\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     current <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>current <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Movie: %s  Rating: %d\\n\"</span><span class=\"token punctuation\">,</span>\n               current<span class=\"token operator\">-&gt;</span>title<span class=\"token punctuation\">,</span> current<span class=\"token operator\">-&gt;</span>rating<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          current <span class=\"token operator\">=</span> current<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n\n     <span class=\"token comment\">/* 完成任务，释放已分配的内存 */</span>\n     current <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>current <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n          head <span class=\"token operator\">=</span> current<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n          <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        \n          current <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bye!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> <span class=\"token function\">s_gets</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> st<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> ret_val<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> find<span class=\"token punctuation\">;</span>\n\n     ret_val <span class=\"token operator\">=</span> <span class=\"token function\">fgets</span><span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> <span class=\"token constant\">stdin</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ret_val<span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n          find <span class=\"token operator\">=</span> <span class=\"token function\">strchr</span><span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">,</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 查找换行符</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>find<span class=\"token punctuation\">)</span>                   <span class=\"token comment\">// 如果地址不是 NULL，</span>\n               <span class=\"token operator\">*</span>find <span class=\"token operator\">=</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// 在此处放置一个空字符</span>\n          <span class=\"token keyword\">else</span>\n               <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// 处理剩余输入行</span>\n     <span class=\"token punctuation\">}</span>\n     <span class=\"token keyword\">return</span> ret_val<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li>显示链表</li>\n<li>创建链表\n<ul>\n<li>使用 <code>malloc()</code>  分配足够的空间</li>\n<li>存储结构的地址</li>\n<li>把当前信息拷贝到结构中</li>\n</ul>\n</li>\n<li>释放链表</li>\n</ol>\n<h4 id=\"173-抽象数据类型\"><a class=\"markdownIt-Anchor\" href=\"#173-抽象数据类型\">#</a> 17.3 抽象数据类型</h4>\n<p><strong>类型</strong>：属性和操作</p>\n<p>定义抽象数据类型，通过 3 个步骤从抽象到具体:</p>\n<ul>\n<li>提供属性类型和相关操作的抽象描述</li>\n<li>开发一个实现 ADT 的编程接口</li>\n<li>编写代码实现接口</li>\n</ul>\n<h5 id=\"1731-建立抽象\"><a class=\"markdownIt-Anchor\" href=\"#1731-建立抽象\">#</a> 17.3.1 建立抽象</h5>\n<p>链表是一个能存储一系列项且可以对其进行所需操作的数据对象</p>\n<p><a href=\"https://imgtu.com/i/TsF4Og\"><img src=\"https://s4.ax1x.com/2021/12/28/TsF4Og.png\" alt=\"TsF4Og.png\"></a></p>\n<h5 id=\"1732-建立接口\"><a class=\"markdownIt-Anchor\" href=\"#1732-建立接口\">#</a> 17.3.2 建立接口</h5>\n<p>使用 <code>typedef</code>  来定义新的类型</p>\n<p>在链表的实现中 每一个链节叫做<strong>节点</strong>，每个节点包含形成链表内容的信息和指向下一个节点的指针</p>\n<p>使用 <code>InitializeList()</code>  函数来初始化列表</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">/* 操作：初始化一个链表            */</span>\n<span class=\"token comment\">/* 前提条件：plist指向一个链表    */</span>\n<span class=\"token comment\">/* 后置条件：该链表初始化为空        */</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">InitializeList</span><span class=\"token punctuation\">(</span>List <span class=\"token operator\">*</span> plist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\">//该函数的参数是一个指向链表的指针,需要将指针的地址放进去</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">/* list.h -- 简单链表类型的头文件 */</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">LIST_H_</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">LIST_H_</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdbool.h&gt;</span>    <span class=\"token comment\">/* C99特性            */</span></span>\n\n<span class=\"token comment\">/* 特定程序的声明 */</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">TSIZE</span>     <span class=\"token expression\"><span class=\"token number\">45</span>    </span><span class=\"token comment\">/* 存储电影名的数组大小    */</span></span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">film</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">char</span> title<span class=\"token punctuation\">[</span>TSIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">int</span> rating<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* 一般类型定义 */</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">film</span> Item<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">node</span>\n<span class=\"token punctuation\">{</span>\n     Item item<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">struct</span> <span class=\"token class-name\">node</span> <span class=\"token operator\">*</span> next<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> Node<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">typedef</span> Node <span class=\"token operator\">*</span> List<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* 函数原型 */</span>\n\n<span class=\"token comment\">/* 操作：        初始化一个链表                                                */</span>\n<span class=\"token comment\">/* 前提条件：    plist指向一个链表                                             */</span>\n<span class=\"token comment\">/* 后置条件：    链表初始化为空                                                */</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">InitializeList</span><span class=\"token punctuation\">(</span>List <span class=\"token operator\">*</span> plist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* 操作：        确定链表是否为空，plist指向一个已初始化的链表                   */</span>\n<span class=\"token comment\">/* 后置条件：    如果链表为空，该函数返回true；否则返回false                     */</span>\nbool <span class=\"token function\">ListIsEmpty</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> List <span class=\"token operator\">*</span>plist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* 操作：        确定链表是否已满，plist指向一个已初始化的链表                   */</span>\n<span class=\"token comment\">/* 后置条件：    如果链表已满，该函数返回真；否则返回假                          */</span>\nbool <span class=\"token function\">ListIsFull</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> List <span class=\"token operator\">*</span>plist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* 操作：        确定链表中的项数, plist指向一个已初始化的链表                   */</span>\n<span class=\"token comment\">/* 后置条件：    该函数返回链表中的项数                                         */</span>\n<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> <span class=\"token function\">ListItemCount</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> List <span class=\"token operator\">*</span>plist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* 操作：        在链表的末尾添加项                                            */</span>\n<span class=\"token comment\">/* 前提条件：    item是一个待添加至链表的项, plist指向一个已初始化的链表         */</span>\n<span class=\"token comment\">/* 后置条件：    如果可以，该函数在链表末尾添加一个项，且返回true；否则返回false  */</span>\nbool <span class=\"token function\">AddItem</span><span class=\"token punctuation\">(</span>Item item<span class=\"token punctuation\">,</span> List <span class=\"token operator\">*</span> plist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* 操作：        把函数作用于链表中的每一项                                     */</span>\n<span class=\"token comment\">/*              plist指向一个已初始化的链表                                    */</span>\n<span class=\"token comment\">/*              pfun指向一个函数，该函数接受一个Item类型的参数，且无返回值       */</span>\n<span class=\"token comment\">/* 后置条件：    pfun指向的函数作用于链表中的每一项一次                          */</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">Traverse</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> List <span class=\"token operator\">*</span>plist<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pfun<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>Item item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* 操作：        释放已分配的内存（如果有的话）                                 */</span>\n<span class=\"token comment\">/*              plist指向一个已初始化的链表                                    */</span>\n<span class=\"token comment\">/* 后置条件：    释放了为链表分配的所有内存，链表设置为空                         */</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">EmptyTheList</span><span class=\"token punctuation\">(</span>List <span class=\"token operator\">*</span> plist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"1733-使用接口\"><a class=\"markdownIt-Anchor\" href=\"#1733-使用接口\">#</a> 17.3.3 使用接口</h5>\n<p><a href=\"https://imgtu.com/i/TsZ35j\"><img src=\"https://s4.ax1x.com/2021/12/28/TsZ35j.png\" alt=\"TsZ35j.png\"></a></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">/* films3.c -- 使用抽象数据类型（ADT）风格的链表 */</span>\n<span class=\"token comment\">/* 与list.c一起编译                        */</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h&gt;</span>    <span class=\"token comment\">/* 提供exit()的原型 */</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"list.h\"</span>      <span class=\"token comment\">/* 定义List、Item   */</span></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">showmovies</span><span class=\"token punctuation\">(</span>Item item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> <span class=\"token function\">s_gets</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> st<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     List movies<span class=\"token punctuation\">;</span>\n     Item temp<span class=\"token punctuation\">;</span>\n\n     <span class=\"token comment\">/* 初始化       */</span>\n     <span class=\"token function\">InitializeList</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>movies<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">ListIsFull</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>movies<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"No memory available! Bye!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n\n     <span class=\"token comment\">/* 获取用户输入并存储 */</span>\n     <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter first movie title:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">s_gets</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">,</span> TSIZE<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">&amp;&amp;</span> temp<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter your rating &lt;0-10&gt;:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>temp<span class=\"token punctuation\">.</span>rating<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n               <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">AddItem</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>movies<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> false<span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">{</span>\n               <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Problem allocating memory\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n               <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">ListIsFull</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>movies<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">{</span>\n               <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The list is now full.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n               <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n          <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter next movie title (empty line to stop):\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n\n     <span class=\"token comment\">/* 显示          */</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">ListIsEmpty</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>movies<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n          <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"No data entered. \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">else</span>\n     <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Here is the movie list:\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">Traverse</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>movies<span class=\"token punctuation\">,</span> showmovies<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"You entered %d movies.\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ListItemCount</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>movies<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token comment\">/* 清理         */</span>\n     <span class=\"token function\">EmptyTheList</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>movies<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bye!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">showmovies</span><span class=\"token punctuation\">(</span>Item item<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Movie: %s  Rating: %d\\n\"</span><span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">,</span>\n          item<span class=\"token punctuation\">.</span>rating<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> <span class=\"token function\">s_gets</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> st<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> ret_val<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> find<span class=\"token punctuation\">;</span>\n\n     ret_val <span class=\"token operator\">=</span> <span class=\"token function\">fgets</span><span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> <span class=\"token constant\">stdin</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ret_val<span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n          find <span class=\"token operator\">=</span> <span class=\"token function\">strchr</span><span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">,</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 查找换行符</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>find<span class=\"token punctuation\">)</span>                   <span class=\"token comment\">// 如果地址不是NULL，</span>\n               <span class=\"token operator\">*</span>find <span class=\"token operator\">=</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// 在此处放置一个空字符</span>\n          <span class=\"token keyword\">else</span>\n               <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// 处理输入行的剩余内容</span>\n     <span class=\"token punctuation\">}</span>\n     <span class=\"token keyword\">return</span> ret_val<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"1734-实现接口\"><a class=\"markdownIt-Anchor\" href=\"#1734-实现接口\">#</a> 17.3.4 实现接口</h5>\n<h4 id=\"174-队列adt\"><a class=\"markdownIt-Anchor\" href=\"#174-队列adt\">#</a> 17.4 队列 ADT</h4>\n<ol>\n<li>以抽象的方式描述一个类型，包含该类型的操作</li>\n<li>设计一个函数接口实现这个新类型</li>\n<li>编写具体代码实现这个接口</li>\n</ol>\n<h5 id=\"1741-定义队列抽象数据类型\"><a class=\"markdownIt-Anchor\" href=\"#1741-定义队列抽象数据类型\">#</a> 17.4.1 定义队列抽象数据类型</h5>\n<ul>\n<li>新项只能添加到链表的末尾</li>\n<li>只能从链表的开头移除项</li>\n</ul>\n<h5 id=\"1742-定义一个接口\"><a class=\"markdownIt-Anchor\" href=\"#1742-定义一个接口\">#</a> 17.4.2 定义一个接口</h5>\n<h5 id=\"1743-实现接口数据表示\"><a class=\"markdownIt-Anchor\" href=\"#1743-实现接口数据表示\">#</a> 17.4.3 实现接口数据表示</h5>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">/* queue.c -- Queue类型的实现 */</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"queue.h\"</span></span>\n\n<span class=\"token comment\">/* 局部函数 */</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">CopyToNode</span><span class=\"token punctuation\">(</span>Item item<span class=\"token punctuation\">,</span> Node <span class=\"token operator\">*</span> pn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">CopyToItem</span><span class=\"token punctuation\">(</span>Node <span class=\"token operator\">*</span> pn<span class=\"token punctuation\">,</span> Item <span class=\"token operator\">*</span> pi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">InitializeQueue</span><span class=\"token punctuation\">(</span>Queue <span class=\"token operator\">*</span> pq<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     pq<span class=\"token operator\">-&gt;</span>front <span class=\"token operator\">=</span> pq<span class=\"token operator\">-&gt;</span>rear <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n     pq<span class=\"token operator\">-&gt;</span>items <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nbool <span class=\"token function\">QueueIsFull</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Queue <span class=\"token operator\">*</span> pq<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">return</span> pq<span class=\"token operator\">-&gt;</span>items <span class=\"token operator\">==</span> MAXQUEUE<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nbool <span class=\"token function\">QueueIsEmpty</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Queue <span class=\"token operator\">*</span> pq<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">return</span> pq<span class=\"token operator\">-&gt;</span>items <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">QueueItemCount</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Queue <span class=\"token operator\">*</span> pq<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">return</span> pq<span class=\"token operator\">-&gt;</span>items<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nbool <span class=\"token function\">EnQueue</span><span class=\"token punctuation\">(</span>Item item<span class=\"token punctuation\">,</span> Queue <span class=\"token operator\">*</span> pq<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     Node <span class=\"token operator\">*</span> pnew<span class=\"token punctuation\">;</span>\n\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">QueueIsFull</span><span class=\"token punctuation\">(</span>pq<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n          <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span>\n     pnew <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Node <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>Node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pnew <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Unable to allocate memory!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n     <span class=\"token function\">CopyToNode</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">,</span> pnew<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     pnew<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">QueueIsEmpty</span><span class=\"token punctuation\">(</span>pq<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n          pq<span class=\"token operator\">-&gt;</span>front <span class=\"token operator\">=</span> pnew<span class=\"token punctuation\">;</span>          <span class=\"token comment\">/* 项位于队列的首端        */</span>\n     <span class=\"token keyword\">else</span>\n          pq<span class=\"token operator\">-&gt;</span>rear<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> pnew<span class=\"token punctuation\">;</span>     <span class=\"token comment\">/* 链接到队列的尾端        */</span>\n     pq<span class=\"token operator\">-&gt;</span>rear <span class=\"token operator\">=</span> pnew<span class=\"token punctuation\">;</span>                <span class=\"token comment\">/* 记录队列尾端的位置    */</span>\n     pq<span class=\"token operator\">-&gt;</span>items<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>                    <span class=\"token comment\">/* 队列项数加1            */</span>\n\n     <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nbool <span class=\"token function\">DeQueue</span><span class=\"token punctuation\">(</span>Item <span class=\"token operator\">*</span> pitem<span class=\"token punctuation\">,</span> Queue <span class=\"token operator\">*</span> pq<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     Node <span class=\"token operator\">*</span> pt<span class=\"token punctuation\">;</span>\n\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">QueueIsEmpty</span><span class=\"token punctuation\">(</span>pq<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n          <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span>\n     <span class=\"token function\">CopyToItem</span><span class=\"token punctuation\">(</span>pq<span class=\"token operator\">-&gt;</span>front<span class=\"token punctuation\">,</span> pitem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     pt <span class=\"token operator\">=</span> pq<span class=\"token operator\">-&gt;</span>front<span class=\"token punctuation\">;</span>\n     pq<span class=\"token operator\">-&gt;</span>front <span class=\"token operator\">=</span> pq<span class=\"token operator\">-&gt;</span>front<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n     <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>pt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     pq<span class=\"token operator\">-&gt;</span>items<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pq<span class=\"token operator\">-&gt;</span>items <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n          pq<span class=\"token operator\">-&gt;</span>rear <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* 清空队列 */</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">EmptyTheQueue</span><span class=\"token punctuation\">(</span>Queue <span class=\"token operator\">*</span> pq<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     Item dummy<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">QueueIsEmpty</span><span class=\"token punctuation\">(</span>pq<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n          <span class=\"token function\">DeQueue</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>dummy<span class=\"token punctuation\">,</span> pq<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* 局部函数 */</span>\n\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">CopyToNode</span><span class=\"token punctuation\">(</span>Item item<span class=\"token punctuation\">,</span> Node <span class=\"token operator\">*</span> pn<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     pn<span class=\"token operator\">-&gt;</span>item <span class=\"token operator\">=</span> item<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">CopyToItem</span><span class=\"token punctuation\">(</span>Node <span class=\"token operator\">*</span> pn<span class=\"token punctuation\">,</span> Item <span class=\"token operator\">*</span> pi<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token operator\">*</span>pi <span class=\"token operator\">=</span> pn<span class=\"token operator\">-&gt;</span>item<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"1744-测试队列\"><a class=\"markdownIt-Anchor\" href=\"#1744-测试队列\">#</a> 17.4.4 测试队列</h5>\n<h4 id=\"175-用队列进行模拟\"><a class=\"markdownIt-Anchor\" href=\"#175-用队列进行模拟\">#</a> 17.5 用队列进行模拟</h4>\n<h4 id=\"176-链表和数组\"><a class=\"markdownIt-Anchor\" href=\"#176-链表和数组\">#</a> 17.6 链表和数组</h4>\n<p><a href=\"https://imgtu.com/i/Tysdzj\"><img src=\"https://s4.ax1x.com/2021/12/28/Tysdzj.png\" alt=\"Tysdzj.png\"></a></p>\n",
            "tags": [
                "C语言"
            ]
        }
    ]
}