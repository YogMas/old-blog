{
    "version": "https://jsonfeed.org/version/1",
    "title": "S1m • All posts by \"课内课程\" category",
    "description": "博客记录个人学习笔记,处于不断完善中",
    "home_page_url": "https://github.com/YogMas/YogMas.github.io",
    "items": [
        {
            "id": "https://github.com/YogMas/YogMas.github.io/2021/11/18/ji-suan-ji-zu-cheng-qi-mo-fu-xi/",
            "url": "https://github.com/YogMas/YogMas.github.io/2021/11/18/ji-suan-ji-zu-cheng-qi-mo-fu-xi/",
            "title": "计算机组成原理与结构",
            "date_published": "2021-11-17T16:00:00.000Z",
            "content_html": "<h1 id=\"计算机组成原理与结构重要知识点\"><a class=\"markdownIt-Anchor\" href=\"#计算机组成原理与结构重要知识点\">#</a> <strong>《计算机组成原理与结构》重要知识点</strong></h1>\n<h2 id=\"计算机结构\"><a class=\"markdownIt-Anchor\" href=\"#计算机结构\">#</a> 计算机结构</h2>\n<h3 id=\"第一章-概论\"><a class=\"markdownIt-Anchor\" href=\"#第一章-概论\">#</a> 第一章 概论</h3>\n<ol>\n<li>\n<p>冯。诺依曼体制</p>\n<ul>\n<li>数据以二进制的形式存储</li>\n<li>采用存储程序方式工作</li>\n<li>规定计算机由五大功能部件 (运算器，存储期，控制器，输入输出系统) 组成，并规定这五大功能部件的功能</li>\n</ul>\n</li>\n<li>\n<p>存储程序工作方式</p>\n<p>事先编制程序，存储程序，自动连续运行程序</p>\n</li>\n<li>\n<p>控制流？数据流？</p>\n<ul>\n<li>\n<p>控制流：控制计算机工作的信息</p>\n</li>\n<li>\n<p>数据流：计算机加工处理的对象</p>\n</li>\n</ul>\n</li>\n<li>\n<p>总线及其组成？</p>\n<p><strong>能为多个部件分时共享的一组信息传送线路及相应的控制逻辑</strong></p>\n</li>\n<li>\n<p>模拟信号？数字信号？数字信号有哪两种？</p>\n<ul>\n<li>模拟信号：<strong>随时间连续变化的电信号</strong></li>\n<li>数字信号:<strong> 在时间或空间上断续变化的电信号</strong>\n<ul>\n<li>电平：并行传送</li>\n<li>脉冲：串行传送</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>什么是接口？</p>\n<p><strong>部件与部件（指硬件或软件）之间的交接部分称为接口；</strong></p>\n<p>主机系统总线与 I/O 设备之间的交接部分称为 I/O 接口。</p>\n</li>\n<li>\n<p>基本字长？</p>\n<p><strong>参加一次定点运算的操作数的位数</strong></p>\n</li>\n<li>\n<p>CPU 主频？时钟频率？</p>\n<ul>\n<li><strong>是计算机的振荡器输出的脉冲序列的频率，是计算机中一切操作所依据的时间基准信号，其高低决定了计算机工做速度的快慢。</strong></li>\n<li><strong>是主频脉冲经分频后所形成的时钟脉冲序列的频率，两个相邻时钟脉冲之间的间隔时间是一个时钟周期时间，也称为节拍</strong></li>\n</ul>\n</li>\n<li>\n<p>数据通路宽度？数据传输率？</p>\n<ul>\n<li>数据总线一次能并行传送的数据位数</li>\n<li><strong>数据总线每秒传送的数据量，也称为数据总线的带宽。</strong></li>\n</ul>\n</li>\n</ol>\n<h3 id=\"第二章-计算机中的信息表示\"><a class=\"markdownIt-Anchor\" href=\"#第二章-计算机中的信息表示\">#</a> 第二章 计算机中的信息表示</h3>\n<ol>\n<li>\n<p>一个数值型数据的完整表示需三个方面？</p>\n<ul>\n<li>采用什么进位计数制，</li>\n<li>如何处理带符号的数，如何表示符号</li>\n<li>小数应该如何处理    定点和浮点表示</li>\n</ul>\n</li>\n<li>\n<p>权、基数</p>\n<ul>\n<li>基数：计数值所用到的数字符号的个数，逢 R 进 1</li>\n<li>权：表示不同数位上数值的大小的一个固定常数   12 中 2 的权为 1  1 的权为 10</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"第三章-指令系统\"><a class=\"markdownIt-Anchor\" href=\"#第三章-指令系统\">#</a> 第三章 指令系统</h3>\n<ol>\n<li>\n<p>数的定点表示与浮点表示？</p>\n<ul>\n<li>定点表示：约定机器中所有数据的小数点位置固定不变，通常将数据表示为纯小数和纯整数</li>\n<li>浮点表示:<strong> 把数的范围和精度分别表示的方法</strong>，小数点的位置随比例因子的不同而在一定范围内可以自由浮动</li>\n</ul>\n</li>\n<li>\n<p>指令？指令系统？</p>\n<ul>\n<li>指令：一系列按某种规律有序排列，能被 CPU 识别，执行的二进制代码</li>\n<li>指令系统：一台计算机所能执行的全部指令</li>\n</ul>\n</li>\n<li>\n<p>寻址方式</p>\n<p>① 立即寻址。在读取指令时也就从指令之中获得了操作数，即操作数包含在指令中。</p>\n<p>② 直接寻址类。直接给出主存地址或寄存器编号，从 CPU 内或主存单元内读取操作数。</p>\n<p>③ 间接寻址类。先从某寄存器中或主存中读取地址，再按这个地址访问主存以读取操作数。</p>\n<p>④ 变址类。指令给出的是形式地址（不是最终地址），经过某种变换（例如相加、相减、高低位地址拼接等），才获得有效地址，据此访问主存储器以读取操作数。</p>\n</li>\n<li>\n<p>何谓隐式 I/O 指令？其主要特点是什么？</p>\n<p>所谓隐式 I/O 指令，就是用传送指令实现 I/O 操作，即针对统一编址，用传送指令访问 I/O 端口。不设专用 I/O 指令。其主要特点是借用内存传输指令实现 IO 操作。</p>\n</li>\n</ol>\n<h3 id=\"第四章-中央处理器\"><a class=\"markdownIt-Anchor\" href=\"#第四章-中央处理器\">#</a> 第四章 中央处理器</h3>\n<ol>\n<li>\n<p>CPU 内部各寄存器的功能？</p>\n<ul>\n<li>\n<h3 id=\"数据寄存器mdr作为cpu和主存-外设之间信息传输的中转站用以弥补cpu和主存-外设之间操作速度上的差异\"><a class=\"markdownIt-Anchor\" href=\"#数据寄存器mdr作为cpu和主存-外设之间信息传输的中转站用以弥补cpu和主存-外设之间操作速度上的差异\">#</a> 数据寄存器 MDR: 作为 CPU 和主存、外设之间信息传输的中转站，用以弥补 CPU 和主存、外设之间操作速度上的差异。</h3>\n</li>\n<li>\n<p>指令寄存器（Instruction Register，IR）用来保存当前正在执行的一条指令。</p>\n</li>\n<li>\n<p>程序计数器（Program Counter，PC）用来指出下一条指令在主存储器中的地址。</p>\n</li>\n<li>\n<p>程序状态字（Program Status Word，PSW）用来表征当前运算的状态及程序的工作方式。</p>\n</li>\n<li>\n<h4 id=\"数据地址寄存器mar用来保存当前cpu所访问的数据单元的地址\"><a class=\"markdownIt-Anchor\" href=\"#数据地址寄存器mar用来保存当前cpu所访问的数据单元的地址\">#</a> 数据地址寄存器（MAR）: 用来保存当前 CPU 所访问的数据单元的地址</h4>\n</li>\n<li>\n<p>通用寄存器的功能是：当算术逻辑单元（ALU）执行算术或逻辑运算时，为 ALU 提供一个工作区。</p>\n</li>\n</ul>\n</li>\n<li>\n<p>数据通路结构</p>\n<ol>\n<li>单组内总线、分立寄存器结构</li>\n<li>单组内总线、集成寄存器结构</li>\n<li>多组内总线结构</li>\n</ol>\n<ul>\n<li>**CPU 总线和数据通路结构：**ALU 为内部数据传送通路的中心、寄存器采用分立结构、内总线采用单向数据总线，与系统总线的连接通过 MAR、MDR 实现</li>\n</ul>\n</li>\n<li>\n<p>何谓同步控制方式，何谓异步控制？有何主要特征？应用场合？</p>\n<ul>\n<li>同步控制：各项操作由统一的时序信号进行同步控制</li>\n<li>特点：时序关系比较简单，但在时间的利用上是不经济的</li>\n<li>异步控制：各项操作按不同需求安排时间，不受统一时序控制</li>\n</ul>\n</li>\n<li>\n<p>何谓主从设备，试举例说明</p>\n<p>主设备：申请并掌控总线的设备 否则为从设备</p>\n<p>当外设有信息传送后，DMA 申请并掌握总线线权后，DMA 则为主设备</p>\n</li>\n<li>\n<p>同步控制中如何引入异步应答的，试举例说明.</p>\n<p>以固定时钟周期作为时序基础，引入应答思想</p>\n<p>例如：8088 最大模式，用一根总线请求 / 应答实现总线权的转移</p>\n</li>\n<li>\n<p>微程序控制思想的基本要点是什么？</p>\n<p>微程序控制的基本思想是:</p>\n<p>一条机器指令对应一段微程序<br>\n一段微程序包含多条微指令<br>\n一条微指令包含机器指令一步操作所需要的微命令<br>\n将 CPU 工作流程对应的每个微操作命令序列编写成微程序 (微程序由若干微指令组成、每条微指令对应一个或几个微操作命令), 所有的微程序存放一个只读存储器中；控制器自动按照微程序的逻辑顺序，逐条取出微指令并执行，以实现 CPU 工作流程的控制</p>\n</li>\n<li>\n<p>判断下面叙述是否正确，说明理由：串行加法器中的进位链是串行进位链，并行加法器中的进位链只有并行进位链。</p>\n<p>并行加法器中的进位链可以并行串行结合</p>\n</li>\n<li>\n<p>常用的加法器进位链结构有哪几种</p>\n<p>串行进位、并行进位</p>\n</li>\n<li>\n<p>组合逻辑控制器、微程序控制器有何区别</p>\n<ul>\n<li>组合逻辑控制器：由硬连逻辑电路产生微命令的方式称为组合逻辑控制方式</li>\n<li>微程序控制器：由微指令译码产生微命令的方式称为微程序控制方式。它的基本思想如下：将若干微命令编制成一条微指令，控制实现一步操作；将若干微指令组成一段微程序，解释执行一条机器指令；将微程序事先存放在控制存储器中，执行机器指令时再取出。</li>\n</ul>\n</li>\n<li>\n<p>组合逻辑控制器、微程序控制器的时序系统是如何划分的？</p>\n<p>采用三级时序系统：工作周期、时钟周期 (节拍)、工作脉冲</p>\n<ul>\n<li>工作周期：FT、ST、DT、ET、DMAT、IT</li>\n<li>时钟周期（节拍）：以访存时间作为一步操作时间</li>\n<li>工作脉冲：同步定时脉冲控制定时操作，每个时钟周期结束时设置一个脉冲</li>\n</ul>\n</li>\n<li>\n<p>微命令、微操作、微指令、微指令周期、微程序？</p>\n<p><strong>微命令：各项操作所需要的控制命令</strong> /<strong> 控制各功能部件的电平和脉冲信号</strong></p>\n<p>一条机器指令的执行对应一段微程序</p>\n<p>一段微程序可包含多条微指令</p>\n<p>一条微指令包含机器指令一步所需要的微命令</p>\n</li>\n<li>\n<p>1 位全加器的结构及关系表达式</p>\n<p>Ci = (ab) 与 (a 异或 b) Ci-1</p>\n<p>三个输入量一个输出量</p>\n</li>\n<li>\n<p>并行加法器中的串行进位链结构：Cn = Gn + PnCn-1</p>\n<p>并行进位链结构：Cn = Gn + PnGn-1+ … + Pn…P1C0</p>\n</li>\n<li>\n<p>时序信号？时序系统？</p>\n<p>时序信号：周期、节拍、脉冲</p>\n<p>时序系统：产生时序信号的部件</p>\n</li>\n</ol>\n<h3 id=\"第五章-存储子系统\"><a class=\"markdownIt-Anchor\" href=\"#第五章-存储子系统\">#</a> 第五章 存储子系统</h3>\n<ol>\n<li>\n<p>主存、缓存、外存？</p>\n<p>主存：CPU 可直接访问，存放 CPU 当前使用的指令和数据。其特点是：能随机访问、工作速度快、容量有限。</p>\n<p>辅存（外存）：存放大量的后备程序和数据。特点：速度较慢、容量大。</p>\n</li>\n<li>\n<p>高速缓存 Cache 用来存放什么内容？设置它的主要目的是什么？</p>\n<p>高速缓冲存储器 (Cache)：存放 CPU 在当前一小段时间内多次使用的程序和数据，以缓解 CPU 和主存的速度差异。特点：速度很快、容量小。‘</p>\n</li>\n<li>\n<p>存储介质？</p>\n<p>（1）半导体存储器</p>\n<p>静态存储器：利用双稳态触发器存储信息，功耗较大，速度快，做 Cache。</p>\n<p>动态存储器：依靠电容上的电荷暂存信息，功耗较小，容量较大，速度较快适合做主存。</p>\n<p>（2）磁表面存储器：磁带、存盘、硬盘</p>\n<p>利用磁层上不同方向的磁化区域表示信息。特点：存储容量大；非破坏性读出、永久保存；读写速度比半导体存储器慢；适合用于外存。</p>\n<p>（3）光盘存储器</p>\n<p>利用光斑的有无存储信息，特点：容量大；非破坏性读出、永久保存；速度慢；适合用于外存。</p>\n</li>\n<li>\n<p>何谓随机存取？何谓顺序存取？何谓直接存取？请各试举一例。</p>\n<ul>\n<li>可按地址访问存储器中的任一单元，与访问时间和单元地址无关，SRAM、DRAM</li>\n<li>访问时读 / 写部件按顺序查找目标地址，访问时间与数据位置有关 - 磁带机</li>\n<li>访问时读 / 写部件先直接指向一个小区域，再在该区域内顺序查找。访问时间与数据位置有关，如磁盘、硬盘、光盘</li>\n</ul>\n</li>\n<li>\n<p>静态存储器 SRAM、动态存储器 DRAM 存储原理</p>\n<ul>\n<li>\n<p>静态存储器 SRAM (双极型、静态 MOS 型): 依靠双稳态电路内部交叉反馈机制，功耗较大，速度快，作 Cache、（六管单元构成 1 位，有 VCC 供电）非破坏性读出，读出后不需重写。</p>\n</li>\n<li>\n<p>动态存储器 DRAM：依靠电容存储电荷的原理存储信息，功耗较小，容量大，速度较快，作主存。（4 管单元、无 VCC 供电）四管单元是非破坏性读出，读出过程即实现刷新；需定期向电容补充电荷（动态刷新）</p>\n</li>\n<li>\n<p>（单管单元，无 VCC）：单管单元是破坏性读出，读出后需重写</p>\n</li>\n</ul>\n</li>\n<li>\n<p>动态刷新分为哪几种情况，各有什么特点？</p>\n<ul>\n<li>集中刷新：2ms 内集中安排所有刷新周期。用于实时要求不高的场合</li>\n<li>分散刷新：各刷新周期分散安排在存取周期中。造成主存利用率降低，用在低速系统中</li>\n<li>异步刷新：刷新周期分散安排在 2ms 内。</li>\n</ul>\n</li>\n<li>\n<p>全地址译码方式？部分地址译码方式？</p>\n<ul>\n<li><strong>全译码方式：将除了与芯片连接的地址以外的所有高位地址用于译码产生片选信号</strong></li>\n<li><strong>部分译码方式</strong>：将除了与芯片连接的地址外的部分高位地址用于译码产生片选信号（易出现地址重叠）</li>\n</ul>\n</li>\n<li>\n<p>刷新和重写的区别</p>\n<p><strong>刷新和重写的区别</strong>：刷新是动态存储芯片，需补充电荷以保持原信息；重写是破坏性读出后重写，以恢复原来的信息。</p>\n</li>\n</ol>\n<h3 id=\"第六章-io系统\"><a class=\"markdownIt-Anchor\" href=\"#第六章-io系统\">#</a> 第六章 I/O 系统</h3>\n<ol>\n<li>\n<p>系统总线上一般包含哪三组信息</p>\n<ul>\n<li>控制信息</li>\n<li>地址信息</li>\n<li>数据信息</li>\n</ul>\n<ol start=\"2\">\n<li>\n<p>中断方式定义、实质、特点？</p>\n<p>中断含义：CPU 暂时中止现行程序的执行，转去执行为某个随机事件服务的中断处理程序。处理完毕后自动恢复原程序的执行。</p>\n<p>实质：</p>\n<ul>\n<li>程序切换\n<ul>\n<li>方法：保存断点、保护现场、恢复现场、返回断点</li>\n<li>时间：一条指令结束时切换，保证程序的完整性<br>\n特点：</li>\n</ul>\n</li>\n<li>随机性\n<ul>\n<li>随机发生的事态（按键、故障）</li>\n<li>有意调用，随即请求与处理的事态（调用打印机）</li>\n<li>随机插入的事态 (软中断指令可插入程序任何位置)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>中断向量、中断向量表、向量地址？</p>\n<p>中断类型码：每个中断源对应的编号</p>\n<p>中断向量：中断服务程序入口地址</p>\n<p>中断向量表：存放各中断服务程序的入口地址的单元</p>\n<p>向量地址：访问中断向量表的地址码，可通过计算中断类型码得到</p>\n<p><strong>模型机中：向量地址 = 中断号 + 2</strong></p>\n<p><strong>IBM PC 向量表：向量地址 = 中断号 * 4</strong></p>\n</li>\n<li>\n<p>何谓向量中断？何谓非向量中断？各有何优点和缺点？</p>\n<p><strong>非向量中断：由软件查询提供服务程序入口地址</strong></p>\n<p><strong>向量中断：由硬件直接提供服务程序入口地址</strong></p>\n</li>\n<li>\n<p>单级中断，多级中断</p>\n<p>中断处理：主要任务：CPU 执行中断服务程序</p>\n<p>单级中断流程：</p>\n<ul>\n<li>保护现场、中断服务处理、恢复现场、开中断、返回</li>\n</ul>\n<p>多级中断流程：</p>\n<ul>\n<li>保护现场</li>\n<li>送新屏蔽字、开中断（禁止同级别或更低级别的请求，开发更高级别的请求）</li>\n<li>中断服务处理</li>\n<li>关中断</li>\n<li>恢复现场及原屏蔽字</li>\n<li>开中断</li>\n<li>返回</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>\n<p>程序直传方式定义、实质、特点？</p>\n<p>依靠 CPU 直接执行相关的 IO 程序来实现数据的输入和输出的控制</p>\n<p>优缺点：硬件开销小、并行程度低，实时性差</p>\n</li>\n<li>\n<p>程序直传方式，中断方式，DMA 方式之间的区别？</p>\n<ul>\n<li>直接程序传送：依靠 CPU 直接执行相关的 IO 程序来实现数据的输入和输出控制</li>\n<li>中断方式：设备提出中断请求，主机响应后与设备交换信息，接口中包含中断控制请求</li>\n<li>DMA 方式：直接依靠硬件系统来控制主存和设备之间的数据传送，传送期间无需 CPU 干预，传送结束后通常通过中断方式通知 CPU, 支持高速外设与主存之间进行 DMA 方式交换数据</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"微型计算机原理与接口技术\"><a class=\"markdownIt-Anchor\" href=\"#微型计算机原理与接口技术\">#</a> 微型计算机原理与接口技术</h2>\n<h3 id=\"第二章-微处理器与总线\"><a class=\"markdownIt-Anchor\" href=\"#第二章-微处理器与总线\">#</a> 第二章 微处理器与总线</h3>\n<ol>\n<li>\n<p>微处理器主要由哪几部分构成？</p>\n<p><strong>总线接口单元和执行单元</strong></p>\n<ul>\n<li>总线接口部件由下列各部分组成：4 个段地址<a href=\"https://zhidao.baidu.com/search?word=%BC%C4%B4%E6%C6%F7&amp;fr=iknow_pc_qb_highlight\">寄存器</a>：CS——16 位的代码段寄存器；DS16 位的数据段寄存器；ES——16 位的扩展段寄存器；SS16 位的堆栈段寄存器；16 位的指令指针寄存器 IP；20 位的地址加法器；6 字节的指令队列缓冲器。</li>\n<li>执行部件由下列几个部分组成：8 个通用寄存器：即 AX、BX、CX、DX,BP,SP,SI,DI ；其中，4 个数据寄存器：AX、BX、CX、DX；2 个地址指针寄存器：BP,SP；2 个变址寄存器：SI,DI ；标志寄存器 FR (flags register)；<a href=\"https://zhidao.baidu.com/search?word=%CB%E3%CA%F5%C2%DF%BC%AD%B5%A5%D4%AA&amp;fr=iknow_pc_qb_highlight\">算术逻辑单元</a> ALU。</li>\n</ul>\n</li>\n<li>\n<p>说明 8088CPU 中 EU 和 BIU 的主要功能。在执行指令时，EU 能直接访问存储器吗？</p>\n<p>CPU 内部结构由两部分组成：执行单元（EU）、总线接口单元（BIU）</p>\n<ul>\n<li>执行单元 EU：包括 ALU、8 个通用寄存器、标志寄存器 FLAGS 和 EU 控制部件从指令队列不断取出指令代码，译码后产生执行指令的控制信号。ALU 完成算术和逻辑运算，通用寄存器存放操作数和运算结果，而运算结果的状态特征则保存到标志寄存器中</li>\n<li>总线接口单元 BIU：包括四个段寄存器、程序计数器、指令队列、地址加法器、总线控制逻辑，负责 CPU 与存储器和 IO 接口之间的信息传送。由于 8086/8088CPU 中的寄存器均为 16 位，而 CPU 外部地址线为 20 根，因此 BIU 中采用地址加法器得到 20 位的物理地址，可以寻址的存储单元为 1M。</li>\n</ul>\n</li>\n<li>\n<p>8086/8088CPU 中，有哪些通用寄存器和专用寄存器？说明他们的作用。</p>\n<p>内部由 8 个通用寄存器、4 个段寄存器、2 个控制寄存器</p>\n<ul>\n<li>通用寄存器包括\n<ul>\n<li>数据类寄存器：AX、BX、CX、DX，常用于存放操作数或运算结果</li>\n<li>地址指针寄存器：包括堆栈指针寄存器 SP 和基址指针寄存器 BP。处理可以存放操作数外，还可以作为地址指针，常用于在堆栈操作中存放偏移地址。\n<ul>\n<li>SP：在堆栈操作中用来存放栈顶单元的偏移地址，永远指向堆栈的栈顶</li>\n<li>BP：默认用于存放当前堆栈内某个单元的偏移地址，即可以对堆栈内任意单元的数据进行操作。</li>\n</ul>\n</li>\n<li>变址寄存器：包括源变址寄存器 SI 和目的变址寄存器 DI，处理可以存放操作数和作为地址指针外，还分别固定应用于数据的串操作指令中，提供串操作数的索引地址。\n<ul>\n<li>SI：串操作指令中隐含作为源操作数偏移地址</li>\n<li>DI：串操作指令中隐含作为目的操作数的偏移地址</li>\n</ul>\n</li>\n<li>段寄存器：\n<ul>\n<li>CS，代码段寄存器</li>\n<li>DS：数据段寄存器</li>\n<li>ES：附加段寄存器</li>\n<li>SS：堆栈段寄存器</li>\n</ul>\n</li>\n<li>控制寄存器：\n<ul>\n<li>IP：指令指针寄存器，用以存放预取指令的偏移地址</li>\n<li>FLAGS：标志寄存器或程序状态字\n<ul>\n<li>算术或逻辑运算结果的特征位</li>\n<li>控制标志位</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>8086/8088 系统中，存储器为什么要分段？一个段最大为多少字节？最小为多少字节？</p>\n<p>分段的主要目的是便于存储器的管理，使得可以用 16 位<a href=\"https://zhidao.baidu.com/search?word=%BC%C4%B4%E6%C6%F7&amp;fr=iknow_pc_qb_highlight\">寄存器</a>来寻址 20 位的内存空间。</p>\n<p>一个段最大为 64KB，最小为 16B。</p>\n</li>\n<li>\n<p>8086/8088 系统中，物理地址和逻辑地址是指什么？</p>\n<ul>\n<li>\n<p>物理地址:</p>\n<ul>\n<li>\n<p>指每个内存单元在整个内存空间中具有的唯一的地址</p>\n</li>\n<li>\n<p>8086/8088CPU 有 20 根地址线，它可以产生 20 位的地址码，寻址范围为 220. 同时存储器按字节进行编制，索引存储器最大容量为 1MB</p>\n</li>\n</ul>\n</li>\n<li>\n<p>逻辑地址：</p>\n<ul>\n<li>是指由程序产生的与段相关的偏移地址部分</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>8088/8086 CPU 的特点？</p>\n<p><strong>指令流水线：8088/8085CPU 并行完成程序的执行，假设不考虑存储器操作数</strong></p>\n<p><strong>内存分段管理：</strong></p>\n<ul>\n<li>8088/8086CPU 的内部结构为 16 位【内部 1M 的存储单元，但寄存器只有 16 位】</li>\n<li>作为地址时，则只能访问 64k 存储单元</li>\n<li>采用分段管理的方法，将内存空间分为多个逻辑段，每个逻辑段最大 64k 存储单元，段内每个单元的相对地址码用 16 位表示</li>\n<li>每个段设置段地址用 16 位寄存器存储，以区分不同的逻辑段</li>\n</ul>\n<p><strong>支持多处理器系统：</strong></p>\n<ul>\n<li>8086 8088 具有最小与最大两种工作模式：</li>\n<li>最小模式，也称为单处理器模式，系统控制总线的信号由 CPU 直接产生</li>\n<li>最大模式，也称为多处理器模式，由总线控制器 8288 提供所有总线信号</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"第四章-汇编语言程序设计\"><a class=\"markdownIt-Anchor\" href=\"#第四章-汇编语言程序设计\">#</a> 第四章 汇编语言程序设计</h3>\n<ol>\n<li>\n<p>指令与伪指令区别？</p>\n<p>指令汇编后生成可被 CPU 执行的代码</p>\n<p>伪指令不生产目标代码，只是用于告诉汇编程序如何对源程序进行汇编</p>\n<p><strong>伪指令在汇编过程中由汇编程序执行，如定义数据、分配存储区、定义段以及定义过程等</strong></p>\n</li>\n<li>\n<p>伪指令：段定义伪指令、数据定义伪指令：常数 (字符串的使用 DB、DW、DD)、变量和标号，当前位置计数器（ （（! 作变量使用，是 16 位偏移量）与定位伪指令 ORG 等伪指令。</p>\n</li>\n</ol>\n<h3 id=\"第六章-输入输出和中断技术\"><a class=\"markdownIt-Anchor\" href=\"#第六章-输入输出和中断技术\">#</a> 第六章 <strong>输入输出和中断技术</strong></h3>\n<ol>\n<li>\n<p>输人 / 输出系统主要由哪几个部分组成？主要有哪些特点？</p>\n<p>输入输出系统主要由三个部分组成，即输入输出接口、输入输出设备、输入输出软件。</p>\n<p>输入输出系统主要有 4 个特点：复杂性、异步性、实时性、与设备无关性</p>\n</li>\n<li>\n<p>I/0 接口的主要功能有哪些？有哪两种编址方式？在 8088/8086 系统中采用哪一种编址方式？</p>\n<p>一般来说，I/O 接口应具有以下功能:</p>\n<ul>\n<li>寻址</li>\n<li>数据缓冲</li>\n<li>数据格式变换</li>\n<li>控制逻辑</li>\n</ul>\n<p>有统一和独立编址</p>\n<p>8086 中采用独立编址方式</p>\n</li>\n<li>\n<p>试比较 4 种基本输人 / 输出方法的特点。</p>\n<p>在微型计算机系统中，主机与外设之间的数据传送有 4 种基本的输入输出方式：<br>\n无条件传送方式、查询工作方式、中断工作方式、直接存储器存取（DMA. 方式。它们各自具有以下特点：<br>\n（1）无条件传送方式适合于简单的、慢速的、随时处于 “准备好” 接收或发送数据的外部设备，数据交换与指令的执行同步，控制方式简单。<br>\n（2）查询工作方式针对并不随时 “准备好”、且满足一定状态才能实现数据的输入 / 输出的简单外部设备，其控制方式也比较简单，但 CPU 的效率比较低。<br>\n（3）中断工作方式是由外部设备作为主动的一方，在需要时向 CPU 提出工作请求，CPU 在满足响应条件时响应该请求并执行相应的中断处理程序。这种工作方式使 CPU 的效率提高，但控制方式相对较复杂。<br>\n（4）DMA 方式适合于高速外设，是 4 种基本输入 / 输出方式中速度最高的一种。</p>\n</li>\n<li>\n<p>主机与外部设备进行数据传送时，采用哪一种传送方式 CPU 的效率最高？DMA</p>\n</li>\n</ol>\n",
            "tags": [
                "课内课程"
            ]
        },
        {
            "id": "https://github.com/YogMas/YogMas.github.io/2021/11/18/ruan-jian-gong-cheng/",
            "url": "https://github.com/YogMas/YogMas.github.io/2021/11/18/ruan-jian-gong-cheng/",
            "title": "软件工程",
            "date_published": "2021-11-17T16:00:00.000Z",
            "content_html": "<h1 id=\"软件工程\"><a class=\"markdownIt-Anchor\" href=\"#软件工程\">#</a> 软件工程</h1>\n<h2 id=\"三张概念\"><a class=\"markdownIt-Anchor\" href=\"#三张概念\">#</a> 三张概念</h2>\n<h3 id=\"软件工程概述\"><a class=\"markdownIt-Anchor\" href=\"#软件工程概述\">#</a> 软件工程概述</h3>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/C3E00849B22E3F8293BB39509B22A521.png\" alt=\"软件工程概述\"></p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/1556EBAF262471A4230C157472597C91.png\" alt=\"img\"></p>\n<h4 id=\"软件的概念和特点\"><a class=\"markdownIt-Anchor\" href=\"#软件的概念和特点\">#</a> 软件的概念和特点</h4>\n<p>软件 = 程序 + 数据 + 文档</p>\n<p>软件测试，系统维护将占据工程的很大一部分成本</p>\n<ul>\n<li>软件是一种产品</li>\n<li>软件是开发其他软件产品的工具</li>\n</ul>\n<p>软件的分类</p>\n<ul>\n<li>系统软件</li>\n<li>支撑软件</li>\n<li>应用软件</li>\n</ul>\n<p>为什么软件发展如此之快</p>\n<ul>\n<li>计算需求：软件必须适应新的计算环境或技术</li>\n<li>嵌入需求：软件必须扩展，以满足和新一代系统或数据库之间的互操作性</li>\n<li>业务需求：软件必须改善，以实现新的业务需求</li>\n<li>架构需求：软件必须重新设计，使其在新的网络环境可用</li>\n</ul>\n<h4 id=\"软件危机的产生\"><a class=\"markdownIt-Anchor\" href=\"#软件危机的产生\">#</a> 软件危机的产生</h4>\n<p>软件工程概念的产生：目的是倡导以<strong>工程</strong>的原理，原则和方法进行软件开发，以解决软件危机</p>\n<p>软件危机：在计算机软件的开发和维护过程中所遇到的一系列严重问题 (效率和质量下降)</p>\n<p>产生软件危机的原因</p>\n<ul>\n<li>客观：软件本身特点：成本日益增加，规模庞大</li>\n<li>客观：忽视需求分析，轻视软件维护，错误认为软件开发 = 程序编写</li>\n</ul>\n<h4 id=\"软件工程的概念与发展过程\"><a class=\"markdownIt-Anchor\" href=\"#软件工程的概念与发展过程\">#</a> 软件工程的概念与发展过程</h4>\n<p>概念：建立和使用合理的工程原则，以经济地获取可靠的，且在真实机器上可高效工作的软件</p>\n<p>软件工程框架：目的，原则，活动</p>\n<ul>\n<li>目的：给出了软件所涉及软件工程的工程要素</li>\n<li>原则：给出了各要素之间的关系</li>\n<li>活动：给出了软件工程学科所研究的主要内容</li>\n</ul>\n<p>软件开发模型：是软件开发全部过程，活动和任务的框架</p>\n<p>软件开发方法：为构造软件提供技术上的解决方法，包括沟通，需求分析，设计建模</p>\n<p>软件过程：为建造高质量的软件所需完成任务的框架</p>\n<p>软件工程目标：生产具有正确性，可用性以及开销合宜的产品</p>\n<ul>\n<li>正确性：产品达到预期功能</li>\n<li>可用性：软件基本结构，实现及文档为用户可用</li>\n<li>开销事宜，软件开发运行整个过程开销满足用户要求的程度</li>\n</ul>\n<h2 id=\"四张图\"><a class=\"markdownIt-Anchor\" href=\"#四张图\">#</a> 四张图</h2>\n<h3 id=\"顺序图\"><a class=\"markdownIt-Anchor\" href=\"#顺序图\">#</a> 顺序图</h3>\n<h3 id=\"类图\"><a class=\"markdownIt-Anchor\" href=\"#类图\">#</a> 类图</h3>\n",
            "tags": [
                "课内课程"
            ]
        }
    ]
}