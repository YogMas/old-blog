<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://github.com/YogMas/YogMas.github.io</id>
    <title>S1m • Posts by &#34;语言&#34; category</title>
    <link href="https://github.com/YogMas/YogMas.github.io" />
    <updated>2022-09-12T16:00:00.000Z</updated>
    <category term="C语言" />
    <category term="Latex" />
    <category term="操作系统" />
    <category term="Css" />
    <category term="vue" />
    <category term="python" />
    <category term="Git" />
    <category term="Html" />
    <category term="java" />
    <category term="机器学习" />
    <category term="Javascript" />
    <category term="icoding答案" />
    <category term="算法啊" />
    <category term="计算机组成原理" />
    <category term="课内课程" />
    <entry>
        <id>https://github.com/YogMas/YogMas.github.io/2022/09/13/java/</id>
        <title>java</title>
        <link rel="alternate" href="https://github.com/YogMas/YogMas.github.io/2022/09/13/java/"/>
        <content type="html">&lt;h1 id=&#34;java&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#java&#34;&gt;#&lt;/a&gt; Java&lt;/h1&gt;
&lt;p&gt;软件工程课程中 java 学习的记录&lt;/p&gt;
&lt;h2 id=&#34;java开发&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#java开发&#34;&gt;#&lt;/a&gt; Java 开发&lt;/h2&gt;
&lt;p&gt;java 是面向对象语言&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/javajava%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86.png&#34; alt=&#34;java编译原理&#34;&gt;&lt;/p&gt;
&lt;p&gt;java 语言具有两种机制:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;虚拟机机制 (JVM): 保证 java 程序的跨平台特性&lt;/li&gt;
&lt;li&gt;垃圾回收机制：保证 java 更安全，更高效&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;java虚拟机&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#java虚拟机&#34;&gt;#&lt;/a&gt; java 虚拟机&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/javajava%E8%99%9A%E6%8B%9F%E6%9C%BA.png&#34; alt=&#34;java虚拟机&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;java(&lt;strong&gt;j&lt;/strong&gt;ava &lt;strong&gt;v&lt;/strong&gt;isual &lt;strong&gt;M&lt;/strong&gt;achine) 虚拟机是可运行 java 字节码的虚拟计算机系统&lt;/li&gt;
&lt;li&gt;使用 java 语言编写的程序，实际上是运行在 JVM 之上&lt;/li&gt;
&lt;li&gt;JVM 有一个解释器组件，可以实现 Java 字节码和操作系统的通信&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/javajava%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%BF%90%E8%A1%8C%E8%BF%87%E7%A8%8B.png&#34; alt=&#34;java虚拟机运行过程&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;运行环境&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#运行环境&#34;&gt;#&lt;/a&gt; 运行环境&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;下载 JDK 包，并配置系统环境&lt;/li&gt;
&lt;li&gt;Eclipse 开发环境&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;java程序基本结构&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#java程序基本结构&#34;&gt;#&lt;/a&gt; Java 程序基本结构&lt;/h2&gt;
&lt;pre class=&#34;line-numbers language-java&#34; data-language=&#34;java&#34;&gt;&lt;code class=&#34;language-java&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;token namespace&#34;&gt;database&lt;/span&gt;   &lt;span class=&#34;token comment&#34;&gt;//包声明语句&lt;/span&gt;

&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token namespace&#34;&gt;java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;applet&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;App&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;//任意数量的引入语句&lt;/span&gt;
    
&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;HelloWorld&lt;/span&gt;    &lt;span class=&#34;token comment&#34;&gt;//一个源文件至多有一个public的class声明 且public类名要与文件名相同&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; args&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;HelloWorld&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;包声明package&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#包声明package&#34;&gt;#&lt;/a&gt; 包声明:package&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;包是类和接口的集合，即为类库&lt;/li&gt;
&lt;li&gt;在一个源程序中，只能有一个包声明语句，且是程序的第一条语句&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;引入语句import&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#引入语句import&#34;&gt;#&lt;/a&gt; 引入语句:import&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;程序编译时，会将需要的在引入语句中的类引入到程序中&lt;/li&gt;
&lt;li&gt;import 的两种形式
&lt;ol&gt;
&lt;li&gt;import 包名。类名&lt;/li&gt;
&lt;li&gt;import 包名.*    * 表示全部&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;类和接口声明&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#类和接口声明&#34;&gt;#&lt;/a&gt; 类和接口声明&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;类和接口是程序的基本组成单元&lt;/li&gt;
&lt;li&gt;类是由成员变量和成员方法组成，表示了对象的基本属性和行为&lt;/li&gt;
&lt;li&gt;接口表现了对象所具有的行为规范&lt;/li&gt;
&lt;li&gt;源程序中至少有一个类或接口创建&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;注释&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#注释&#34;&gt;#&lt;/a&gt; 注释&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;//&lt;/code&gt; ：由 &lt;code&gt;//&lt;/code&gt;  开始到行末为注释内容&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/*  */&lt;/code&gt; ：两者之间为注释内容，可以多行注释&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/**    */&lt;/code&gt; ：文档注释&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/java%E6%96%87%E6%A1%A3%E6%B3%A8%E9%87%8A.png&#34; alt=&#34;文档注释&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;java基础语法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#java基础语法&#34;&gt;#&lt;/a&gt; Java 基础语法&lt;/h2&gt;
&lt;h3 id=&#34;数据类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数据类型&#34;&gt;#&lt;/a&gt; 数据类型&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/java%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B1.png&#34; alt=&#34;数据类型1&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;简单数据类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#简单数据类型&#34;&gt;#&lt;/a&gt; 简单数据类型&lt;/h4&gt;
&lt;h4 id=&#34;简单数据类型-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#简单数据类型-2&#34;&gt;#&lt;/a&gt; &lt;img src=&#34;https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/java%E7%AE%80%E5%8D%95%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.png&#34; alt=&#34;简单数据类型&#34;&gt;&lt;/h4&gt;
&lt;p&gt;Java 中的数值类型都是有符号的，使用最高位来表示数据的正负号&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-java&#34; data-language=&#34;java&#34;&gt;&lt;code class=&#34;language-java&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;boolean&lt;/span&gt; b &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;    &lt;span class=&#34;token comment&#34;&gt;//基本数据类型声明&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;short&lt;/span&gt; si &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;128&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; i&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;j&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;k &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;99&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;long&lt;/span&gt; l &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;123456789&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; ch &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;J&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; chc &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;中&#39;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;float&lt;/span&gt; f &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3.1415926f&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;double&lt;/span&gt; d &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1.04E-5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; s &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; “信息工程”&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;整数数据类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#整数数据类型&#34;&gt;#&lt;/a&gt; 整数数据类型&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;int 是经常使用的，碰见较大的数用 long&lt;/li&gt;
&lt;li&gt;byte,shrot 主要用于特定的场合，如占用大量存储空间的大数组或者底层的 文件处理等&lt;/li&gt;
&lt;li&gt;java 中有三种进制表示整数:
&lt;ol&gt;
&lt;li&gt;十进制:  x = 678&lt;/li&gt;
&lt;li&gt;八进制:   x = &lt;strong&gt;0&lt;/strong&gt;456   前面加&lt;strong&gt; 0&lt;/strong&gt; 表示为八进制&lt;/li&gt;
&lt;li&gt;十六进制: x = &lt;strong&gt;0x&lt;/strong&gt;a9b1   前面加&lt;strong&gt; 0x&lt;/strong&gt; 表示为十六进制&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;浮点数据类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#浮点数据类型&#34;&gt;#&lt;/a&gt; 浮点数据类型&lt;/h5&gt;
&lt;p&gt;浮点型表示有小数部分的数值，包括 float 型和 double 型。这两种数据类型全部为有符号数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;浮点型默认为 double 型&lt;/li&gt;
&lt;li&gt;使用 float 型，必须添加后缀 F 或者 f&lt;/li&gt;
&lt;li&gt;double 型，可以添加后缀 D 或者 d, 也可以不添加&lt;/li&gt;
&lt;li&gt;没有后缀时，默认为 double 型&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;char型数据类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#char型数据类型&#34;&gt;#&lt;/a&gt; char 型数据类型&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;char 型用来表示字符。每个 char 型变量占两个字节。在 Java 中，字符的编码是采用 Unicode 编码。&lt;/li&gt;
&lt;li&gt;Unicode 编码字符是用 16 位无符号整数表示，有 216 个可能值，即 0～65 535。可以表示世界上的大部分文字语言中的字符。&lt;/li&gt;
&lt;li&gt;char 类型数据被表示为用一对单引号包含的单个字符 例:  &lt;code&gt;char ch = &#39;a&#39;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;boolean型数据类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#boolean型数据类型&#34;&gt;#&lt;/a&gt; boolean 型数据类型&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;boolean 只有两个取值 true 和 false 即 真和假&lt;/li&gt;
&lt;li&gt;在 C++ 中用数值或指针可以代替 boolean 值，0 相当于 false，非 0 相当于 true。&lt;/li&gt;
&lt;li&gt;在 Java 中没有这样的规定，&lt;strong&gt;boolean 型的值不能与任何其他基本类型的值进行转换代替&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;引用数据类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#引用数据类型&#34;&gt;#&lt;/a&gt; 引用数据类型&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;引用数据类型声明变量时，不会为变量分配存储空间，因为他们声明的是数据的引用，不是数据本身，需要用&lt;strong&gt; new 运算符&lt;/strong&gt;来为引用类型的变量分配存储空间&lt;/li&gt;
&lt;li&gt;引用：类似与 C++ 中的指针，又不同与指针&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;基本数据类型值间的转换&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#基本数据类型值间的转换&#34;&gt;#&lt;/a&gt; 基本数据类型值间的转换&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;自动转换&lt;/li&gt;
&lt;li&gt;强制类型转换&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;自动转换&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#自动转换&#34;&gt;#&lt;/a&gt; 自动转换&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;从低到高的顺序转换&lt;/li&gt;
&lt;li&gt;优先关系为:byte,short,char-&amp;gt; int -&amp;gt; long -&amp;gt; float -&amp;gt; double&lt;/li&gt;
&lt;li&gt;不同数据类型先转换成同一数据类型，再进行运算&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/java%E8%87%AA%E5%8A%A8%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2.png&#34; alt=&#34;自动类型转换&#34;&gt;&lt;/p&gt;
&lt;h5 id=&#34;强制类型转换&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#强制类型转换&#34;&gt;#&lt;/a&gt; 强制类型转换&lt;/h5&gt;
&lt;pre class=&#34;line-numbers language-java&#34; data-language=&#34;java&#34;&gt;&lt;code class=&#34;language-java&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Demo&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; args&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; x&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
	&lt;span class=&#34;token keyword&#34;&gt;double&lt;/span&gt; y&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
	x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;34.56&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;11.2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 丢失精度&lt;/span&gt;
	y &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;double&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;x &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;double&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 提高精度&lt;/span&gt;
	&lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;x=&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
	&lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;y=&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; y&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
	&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;变量类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#变量类型&#34;&gt;#&lt;/a&gt; 变量类型&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;局部变量&lt;/li&gt;
&lt;li&gt;实例变量 (全局变量)&lt;/li&gt;
&lt;li&gt;类变量 (静态变量):  &lt;code&gt;static&lt;/code&gt;  关键字声明&lt;/li&gt;
&lt;li&gt;实例变量和类变量统称为成员变量&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;与 C++ 变量类似 略&lt;/p&gt;
&lt;h3 id=&#34;运算符&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#运算符&#34;&gt;#&lt;/a&gt; 运算符&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/javajava%E8%BF%90%E7%AE%97%E7%AC%A6.png&#34; alt=&#34;java运算符&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;位运算符&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#位运算符&#34;&gt;#&lt;/a&gt; 位运算符&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/javajava%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6.png&#34; alt=&#34;java位运算符&#34;&gt;&lt;/p&gt;
&lt;h5 id=&#34;右移位&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#右移位&#34;&gt;#&lt;/a&gt; 右移位&lt;/h5&gt;
&lt;p&gt;&lt;img src=&#34;https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/java%E5%8F%B3%E7%A7%BB%E4%BD%8D.png&#34; alt=&#34;右移位&#34;&gt;&lt;/p&gt;
&lt;h5 id=&#34;左移位&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#左移位&#34;&gt;#&lt;/a&gt; 左移位&lt;/h5&gt;
&lt;p&gt;&lt;img src=&#34;https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/java%E5%B7%A6%E7%A7%BB%E4%BD%8D.png&#34; alt=&#34;左移位&#34;&gt;&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-java&#34; data-language=&#34;java&#34;&gt;&lt;code class=&#34;language-java&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Test&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; args&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; a &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;60&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* 60 = 0011 1100 */&lt;/span&gt; 
&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; b &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* 13 = 0000 1101 */&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; c &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
c &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; a &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt; b&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* 12 = 0000 1100 */&lt;/span&gt;
&lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;a &amp;amp; b = &#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; c &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
c &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; a &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; b&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* 61 = 0011 1101 */&lt;/span&gt;
&lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;a | b = &#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; c &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
c &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; a &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; b&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* 49 = 0011 0001 */&lt;/span&gt;
&lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;a ^ b = &#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; c &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
c &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;~&lt;/span&gt;a&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/*-61 = 1100 0011 */&lt;/span&gt;
&lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;~a = &#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; c &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
c &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; a &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* 240 = 1111 0000 */&lt;/span&gt;
&lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;a &amp;lt;&amp;lt; 2 = &#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; c &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
c &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; a &lt;span class=&#34;token operator&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* 15 = 1111 */&lt;/span&gt;
&lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;a &amp;gt;&amp;gt; 2 = &#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; c &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
c &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; a &lt;span class=&#34;token operator&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* 15 = 0000 1111 */&lt;/span&gt;
&lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;a &amp;gt;&amp;gt;&amp;gt; 2 = &#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; c &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;/*
编译结果
a &amp;amp; b = 12
a | b = 61
a ^ b = 49
~a = -61
a &amp;lt;&amp;lt; 2 = 240
a &amp;gt;&amp;gt; 15
a &amp;gt;&amp;gt;&amp;gt; 15
*/&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;条件运算符&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#条件运算符&#34;&gt;#&lt;/a&gt; 条件运算符&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;variable x = (expression) ? value if true : value if false&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;流程控制语句&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#流程控制语句&#34;&gt;#&lt;/a&gt; 流程控制语句&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;if switch while for do while&lt;/code&gt;  与 C++ 类似 略&lt;/p&gt;
&lt;h3 id=&#34;数组&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数组&#34;&gt;#&lt;/a&gt; 数组&lt;/h3&gt;
&lt;p&gt;原理与 C++ 类似，声明方法不同&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;声明数组  &lt;code&gt;int[] a;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;分配空间   &lt;code&gt;a = new int[5];&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;赋值:  &lt;code&gt;a[0] = 3;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;处理数据:  &lt;code&gt;a[0] = a[0] * 10;&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;1，2 步可以合并为  &lt;code&gt;数据类型[ ] 数组名 = new 数据类型[大小] ;&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;赋值&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#赋值&#34;&gt;#&lt;/a&gt; 赋值&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;边声明边赋值 (静态初始化)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/java%E6%95%B0%E7%BB%84%E9%9D%99%E6%80%81%E8%B5%8B%E5%80%BC.png&#34; alt=&#34;数组静态赋值&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;动态从键盘边录入边赋值&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;数组边界&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数组边界&#34;&gt;#&lt;/a&gt; 数组边界&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;数组类中有唯一的成员变量：length，用来表示数组的长度，即数组元素的个数。&lt;/li&gt;
&lt;li&gt;与 C、C++ 中不同，Java 对数组元素要进行越界检查，若发生越界访问，则会抛出一个异常&lt;/li&gt;
&lt;li&gt;使用 new 创建数组对象时，自动给 length 赋值，数组一旦创建完毕，length 就确定下来， 除非重新使用 new 创建新的数组对象。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;二维数组&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二维数组&#34;&gt;#&lt;/a&gt; 二维数组&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;类型名[][] 数组名=new 类型名[][]；&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;二维数组的每一维大小允许不同&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-java&#34; data-language=&#34;java&#34;&gt;&lt;code class=&#34;language-java&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; intArray&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; a&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
a&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
a&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;数组变量是引用变量，简单的用 = 复制数组，只是将引用进行了复制，并没有对数组的元素进行复制&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/java%E6%95%B0%E7%BB%84%E5%BC%95%E7%94%A8%E6%8B%B7%E8%B4%9D.png&#34; alt=&#34;数组引用拷贝&#34;&gt;&lt;/p&gt;
&lt;p&gt;使用 clone () 方法进行深拷贝&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-java&#34; data-language=&#34;java&#34;&gt;&lt;code class=&#34;language-java&#34;&gt;&lt;span class=&#34;token comment&#34;&gt;//使用clone方法&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; group1 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;170&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;60&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; group2&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; group1&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;clone&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
…&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;对于二位数组 clone 方法也无法深拷贝，只有对二维数组中的每一个元素使用 clone 才能进行深拷贝&lt;/p&gt;
&lt;h3 id=&#34;字符串&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#字符串&#34;&gt;#&lt;/a&gt; 字符串&lt;/h3&gt;
&lt;p&gt;JAVA 字符串分为两类&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;String: 在程序中不会被改变长度的不变字符串&lt;/li&gt;
&lt;li&gt;StringBuffer: 是在程序中会被 改变长度的可变字符串&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;创建字符串&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#创建字符串&#34;&gt;#&lt;/a&gt; 创建字符串&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;String str=new（&#34;This is a String&#34;);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;String str=&#34;This is a String&#34;;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;line-numbers language-java&#34; data-language=&#34;java&#34;&gt;&lt;code class=&#34;language-java&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;StringDemo&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; args&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; site &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;www.uestc.edu.cn&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
	&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; len &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; site&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
	&lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;电子科大域名长度 : &#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; len &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
	&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;创建格式化字符串&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#创建格式化字符串&#34;&gt;#&lt;/a&gt; 创建格式化字符串&lt;/h5&gt;
&lt;p&gt;采用 &lt;code&gt;printf()&lt;/code&gt;  和  &lt;code&gt;format()&lt;/code&gt;  方法&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-java&#34; data-language=&#34;java&#34;&gt;&lt;code class=&#34;language-java&#34;&gt;&lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;浮点型变量的值为 &#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;%f, 整型变量的值为 &#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;
&lt;span class=&#34;token string&#34;&gt;&#34; %d, 字符串变量的值为 &#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;is %s&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; floatVar&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; intVar&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; stringVar&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; fs &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;浮点型变量的值为 &#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;%f, 整型变量的值为 &#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; 
&lt;span class=&#34;token string&#34;&gt;&#34; %d, 字符串变量的值为 &#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34; %s&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; floatVar&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; intVar&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; stringVar&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;静态方法 &lt;code&gt;format()&lt;/code&gt;  返回一个 String 对象而不是 PrintStream 对象。&lt;/p&gt;
&lt;p&gt;所以 &lt;code&gt;format()&lt;/code&gt;  能用来创建可复用的格式化字符串，而不仅仅是用于 一次打印输出。&lt;/p&gt;
&lt;h4 id=&#34;字符串的连接&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#字符串的连接&#34;&gt;#&lt;/a&gt; 字符串的连接&lt;/h4&gt;
&lt;p&gt;字符串可以通过 “+” 连接，基本数据类型与字符串进行 “+” 操作，一般也会自动转换为字符串。&lt;/p&gt;
&lt;h4 id=&#34;函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#函数&#34;&gt;#&lt;/a&gt; 函数&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;str.length()&lt;/code&gt; : 得到 string 的长度&lt;/li&gt;
&lt;li&gt;&lt;code&gt;str.indexof(subString,startIndex)&lt;/code&gt; : 确定字符串中指定字符或子字符串在给定字符串的位置，substring 为子字符串，从下标 startIndex 开始查找，返回 substring 首字母的在 str 中的下标&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lastIndexOf(subString)&lt;/code&gt; : 从后往前查找&lt;/li&gt;
&lt;li&gt;&lt;code&gt;str.equals(String)&lt;/code&gt; : 判断两个字符串是否相等&lt;/li&gt;
&lt;li&gt;&lt;code&gt;str.charAt(索引值)&lt;/code&gt; : 得到指定位置的字符&lt;/li&gt;
&lt;li&gt;&lt;code&gt;str.getChars(int a,int b,char s[],startindex)&lt;/code&gt; : 得到字符串的一部字符串，下标 [a,b) 中的字符串复制到 s 数组中，从 s 数组中的 startindex 开始记录&lt;/li&gt;
&lt;li&gt;&lt;code&gt;str.substring(start,end)&lt;/code&gt; : 截取下标索引为 [start,end) 内的子字符串&lt;/li&gt;
&lt;li&gt;&lt;code&gt;str.replace(a,b)&lt;/code&gt; : 将字符串中的 a 用 b 来代替&lt;/li&gt;
&lt;li&gt;&lt;code&gt;str.concat(string)&lt;/code&gt; : 将两个字符串合并&lt;/li&gt;
&lt;li&gt;&lt;code&gt;str.toUpperCase()&lt;/code&gt; : 字符串全部转换成大写&lt;/li&gt;
&lt;li&gt;&lt;code&gt;str.toLowerCase()&lt;/code&gt; : 字符串全部转换成小写&lt;/li&gt;
&lt;li&gt;&lt;code&gt;str.trim()&lt;/code&gt; : 将开头和结尾处的空格去掉&lt;/li&gt;
&lt;li&gt;&lt;code&gt;String.valueOf(x)&lt;/code&gt; : 将任何类型的数据对象 x 转换成字符串&lt;/li&gt;
&lt;li&gt;&lt;code&gt;String strArr[] = str.split(&#34;_&#34;);&lt;/code&gt; : 将字符串进行分隔，分隔结果储存在数组中&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;可变字符串&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#可变字符串&#34;&gt;#&lt;/a&gt; 可变字符串&lt;/h4&gt;
&lt;p&gt;修改可变字符串的方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在字符串后面追加：用 append () 方法将各种对象加入到字符串中。&lt;/li&gt;
&lt;li&gt;在字符串中间插入：用 insert () 方法。&lt;/li&gt;
&lt;li&gt;改变某个位置所在的字符，用 setCharAt () 方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;line-numbers language-java&#34; data-language=&#34;java&#34;&gt;&lt;code class=&#34;language-java&#34;&gt;&lt;span class=&#34;token class-name&#34;&gt;StringBuffer&lt;/span&gt; str&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;StringBuffer&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Thisis a String&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
str&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;insert&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;test &#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;str&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;//输出： Thisis a test String&lt;/span&gt;
&lt;span class=&#34;token class-name&#34;&gt;StringBuffer&lt;/span&gt; sb &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;StringBuffer&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;aaaaaa&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
sb&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;setCharAt&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;‘b’&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// sb 的值 aabaaa&lt;/span&gt;
&lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;sb&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;日期和时间&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#日期和时间&#34;&gt;#&lt;/a&gt; 日期和时间&lt;/h3&gt;
&lt;p&gt;java.util 包提供了 Date 类来封装当前的日期和时间。 Date 类提供两个构造函数 来实例化 Date 对象。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一个构造函数使用当前日期和时间来初始化对象。 &lt;code&gt;Date()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;第二个构造函数接收一个参数，该参数是从 1970 年 1 月 1 日起的毫秒数。 &lt;code&gt;Date(long millisec)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;获取当前时间&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#获取当前时间&#34;&gt;#&lt;/a&gt; 获取当前时间&lt;/h4&gt;
&lt;pre class=&#34;line-numbers language-java&#34; data-language=&#34;java&#34;&gt;&lt;code class=&#34;language-java&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token namespace&#34;&gt;java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;util&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Date&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;DateDemo&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; args&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;token comment&#34;&gt;// 初始化 Date 对象&lt;/span&gt;
	&lt;span class=&#34;token class-name&#34;&gt;Date&lt;/span&gt; date &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Date&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
	&lt;span class=&#34;token comment&#34;&gt;// 使用 toString() 函数显示日期时间&lt;/span&gt;
	&lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;date&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;格式化日期&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#格式化日期&#34;&gt;#&lt;/a&gt; 格式化日期&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;使用 SimpleDateFormat 格式化日期&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;line-numbers language-java&#34; data-language=&#34;java&#34;&gt;&lt;code class=&#34;language-java&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token namespace&#34;&gt;java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;util&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token namespace&#34;&gt;java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;text&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; 
&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;DateDemo&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; args&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;token class-name&#34;&gt;Date&lt;/span&gt; dNow &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Date&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
		&lt;span class=&#34;token class-name&#34;&gt;SimpleDateFormat&lt;/span&gt; ft &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;SimpleDateFormat&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;E yyyy.MM.dd &#39;at&#39; hh:mm:ss a zzz&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
		&lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Current Date: &#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; ft&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;dNow&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; 		&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;token comment&#34;&gt;//yyyy 是公元年，MM 是月份，dd 是日期，HH:mm:ss 是时、分、秒。&lt;/span&gt;
        &lt;span class=&#34;token comment&#34;&gt;//SimpleDateFormat 允许选择任何自定义日期时间格式.&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;
&lt;p&gt;使用 printf 格式化日期&lt;br&gt;
 printf 方法可以很轻松地格式化时间和日期。使用两个字母格式，它以 % t 开头并且 以下面表格中的一个字母结尾&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/javaprintf%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%97%A5%E6%9C%9F.png&#34; alt=&#34;printf格式化日期&#34;&gt;&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-java&#34; data-language=&#34;java&#34;&gt;&lt;code class=&#34;language-java&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token namespace&#34;&gt;java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;util&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Date&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;DateDemo&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; args&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;token class-name&#34;&gt;Date&lt;/span&gt; date &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Date&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 初始化 Date 对象&lt;/span&gt;
&lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;全部日期和时间信息: %tc%n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;date&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;//c的使用&lt;/span&gt;
&lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;年-月-日格式: %tF%n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;date&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;//f的使用&lt;/span&gt;
&lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;月/日/年格式: %tD%n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;date&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;//d的使用&lt;/span&gt;
&lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;HH:MM:SS PM格式(12时制):%tr%n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;date&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;//r的使用&lt;/span&gt;
&lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;HH:MM:SS格式(24时制): %tT%n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;date&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;//t的使用&lt;/span&gt;
&lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;HH:MM格式(24时制): %tR&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;date&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;//R的使用&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/javaprintf%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%97%A5%E6%9C%9F%E7%BB%93%E6%9E%9C.png&#34; alt=&#34;printf格式化日期结果&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;面向对象设计&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#面向对象设计&#34;&gt;#&lt;/a&gt; 面向对象设计&lt;/h2&gt;
&lt;h3 id=&#34;类的创建&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#类的创建&#34;&gt;#&lt;/a&gt; 类的创建&lt;/h3&gt;
&lt;p&gt;三个特征:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;封装性&lt;/li&gt;
&lt;li&gt;多态性&lt;/li&gt;
&lt;li&gt;继承性&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;类的体包含&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;成员变量&lt;/li&gt;
&lt;li&gt;成员方法&lt;/li&gt;
&lt;li&gt;类的构造器&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;类的创建&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-java&#34; data-language=&#34;java&#34;&gt;&lt;code class=&#34;language-java&#34;&gt;&lt;span class=&#34;token comment&#34;&gt;// [public] class &amp;lt;className&amp;gt; extends &amp;lt;superClass&amp;gt; implements &amp;lt;interface&amp;gt;&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;//[public]为可选项 可以有public abstract final等等 表示类的种类&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;//extends表示继承 继承父类&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;// implements 表示接口 &lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;成员变量&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#成员变量&#34;&gt;#&lt;/a&gt; 成员变量&lt;/h4&gt;
&lt;p&gt;在类中创建的变量，表示类的属性&lt;/p&gt;
&lt;p&gt;作用域是全局的，能被类中所有方法所访问&lt;/p&gt;
&lt;p&gt;创建时具有初始化值&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;访问修饰符:public,protected,private 等等&lt;/li&gt;
&lt;li&gt;使用限制的修饰符:final,abstract,static,synchronized,transient,volatile 等&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;初始化
&lt;ul&gt;
&lt;li&gt;创建变量时初始化：不进行赋值就会自动初始化一个 java 里默认的数值&lt;/li&gt;
&lt;li&gt;创建时赋初值&lt;/li&gt;
&lt;li&gt;构造器中对成员变量赋初值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;常量
&lt;ul&gt;
&lt;li&gt;使用 final 修饰的变量，因为不能更改，就可以像常量一样使用&lt;/li&gt;
&lt;li&gt;常量符号数据只能读取，不能改变，全用大写字母，单词间用 &#34;_&#34; 分隔 eg:MAX_MONTH&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/java%E5%88%9D%E5%A7%8B%E5%80%BC.png&#34; alt=&#34;成员变量初始化值&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;成员方法与c的函数类似&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#成员方法与c的函数类似&#34;&gt;#&lt;/a&gt; 成员方法 (与 C 的函数类似)&lt;/h4&gt;
&lt;p&gt;方法的创建分为 方法声明和方法体&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[修饰符l] 返回类型 方法名称(形式参数) {方法体}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;方法体中包含&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;局部变量&lt;/li&gt;
&lt;li&gt;流程控制语句&lt;/li&gt;
&lt;li&gt;语句块&lt;/li&gt;
&lt;li&gt;return 语句&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有返回类型，必须有 return 语句和返回值，为 void 无返回类型 可以有 return 语句 但是不能带表达式&lt;/p&gt;
&lt;h5 id=&#34;参数传递&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#参数传递&#34;&gt;#&lt;/a&gt; 参数传递&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;简单数据类型：将数据赋值给形式参数，由形式参数传入方法内部&lt;/li&gt;
&lt;li&gt;引用类型：传入的是引用，所有方法内部对于引用中变量值的改变会影响到实际参数引用中变量的值，当在方法内部改变了引用，其值不受影响&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;方法过载&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#方法过载&#34;&gt;#&lt;/a&gt; 方法过载&lt;/h4&gt;
&lt;p&gt;同一个类中创建具有相同方法名，但是参数不同（数量，对应类型）不同的方法&lt;/p&gt;
&lt;p&gt;方法重载中方法由调用时的形参决定调用的方法是哪个&lt;/p&gt;
&lt;h4 id=&#34;类的构造器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#类的构造器&#34;&gt;#&lt;/a&gt; 类的构造器&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;以类名作为构造方法名&lt;/li&gt;
&lt;li&gt;没有返回类型，具有参数和预聚体&lt;/li&gt;
&lt;li&gt;不是类的成员方法，所以不能用对象调用他&lt;/li&gt;
&lt;li&gt;由 new 运算符调用构造方法&lt;/li&gt;
&lt;li&gt;构造方法可以运用方法过载从而实现多个构造方法&lt;/li&gt;
&lt;li&gt;构造方法返回的是这个类的实例引用&lt;/li&gt;
&lt;li&gt;构造方法中的语句实现对成员变量的初始化&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;构造方法之间通过 this () 相互调用&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;类的构造器分为默认构造方法和非默认构造方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;默认构造方法：不带参数的构造方法&lt;/li&gt;
&lt;li&gt;非构造方法：带参数的构造方法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;类创建时，如果没有创建构造器，编译器会自动添加一个默认构造器&lt;/p&gt;
&lt;h3 id=&#34;类成员和实例成员&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#类成员和实例成员&#34;&gt;#&lt;/a&gt; 类成员和实例成员&lt;/h3&gt;
&lt;h4 id=&#34;实例成员&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#实例成员&#34;&gt;#&lt;/a&gt; 实例成员&lt;/h4&gt;
&lt;p&gt;创建实例才能访问和使用的成员，通过创建实例对象，由对象访问 (不能由类名直接访问)&lt;/p&gt;
&lt;p&gt;无 static 修饰的成员为实例成员&lt;/p&gt;
&lt;h4 id=&#34;static关键字&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#static关键字&#34;&gt;#&lt;/a&gt; static 关键字&lt;/h4&gt;
&lt;p&gt;一旦将成员设为 static, 数据或者方法就不会同类的任何实例对象联系在一起&lt;/p&gt;
&lt;p&gt;即使从未创建那个类的一个对象，仍然能调用一个 static 方法，或访问一些 static 数据&lt;/p&gt;
&lt;h5 id=&#34;类成员静态成员&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#类成员静态成员&#34;&gt;#&lt;/a&gt; 类成员（静态成员）&lt;/h5&gt;
&lt;p&gt;类成员提供了事实上的&lt;strong&gt;全局变量和全局方法&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;类成员：可以由类名直接访问&lt;/li&gt;
&lt;li&gt;类成员也可以通过对象名访问，但是该类所有对象都共享类成员变量&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;static方法和static块&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#static方法和static块&#34;&gt;#&lt;/a&gt; static 方法和 static 块&lt;/h5&gt;
&lt;p&gt;声明为 static 的方法的限制&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;仅能调用其他的 static 方法&lt;/li&gt;
&lt;li&gt;只能访问 static 数据&lt;/li&gt;
&lt;li&gt;不能以任何方式引用 this 或 super&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;static 块:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果你需要通过计算来初始化你的 static 变量，你可以声明一个 static 块&lt;/li&gt;
&lt;li&gt;static 块仅在该类被加载时执行一次&lt;/li&gt;
&lt;li&gt;static 块是最早执行的代码块&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;对象创建和使用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#对象创建和使用&#34;&gt;#&lt;/a&gt; 对象创建和使用&lt;/h4&gt;
&lt;p&gt;对象，实例，引用之间的关系：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/java%E5%AF%B9%E8%B1%A1,%E5%AE%9E%E4%BE%8B,%E5%BC%95%E7%94%A8.png&#34; alt=&#34;对象,实例,引用&#34;&gt;&lt;/p&gt;
&lt;p&gt;创建属于某类的对象：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;声明指向 &#34;由类所创建的对象&#34; 的变量&lt;/li&gt;
&lt;li&gt;利用 new 创建新的对象，并指派给先前所创建的变量&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;line-numbers language-java&#34; data-language=&#34;java&#34;&gt;&lt;code class=&#34;language-java&#34;&gt;person p &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;person&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;//声明person对象p并实例化此对象&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;//对象只有实例化之后才能被使用，而实例化对象的关键字就是new&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/java%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E5%9C%A8%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%86%85%E7%9A%84%E9%80%94%E5%BE%84.png&#34; alt=&#34;创建对象在计算机内的途径&#34;&gt;&lt;/p&gt;
&lt;p&gt;对象的生命周期分为&lt;strong&gt;创建，使用和销毁&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过声明，实例化进行创建&lt;/li&gt;
&lt;li&gt;通过垃圾回收进行实例开销的回收 由 JVM 自动完成&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;java 程序运行时，系统通过垃圾收集，周期性地释放不再被对象引用所占用的内存，完成对象的清除&lt;/p&gt;
&lt;h4 id=&#34;封装&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#封装&#34;&gt;#&lt;/a&gt; 封装&lt;/h4&gt;
&lt;p&gt;OOP (面向对象设计) 的好处之一是对数据和操作该数据的代码的封装，通过类来封装不用担心类的实现细节和在内部数据实际上是如何管理的，我们只需要通过类的方法使用它&lt;/p&gt;
&lt;h3 id=&#34;超类子类和继承性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#超类子类和继承性&#34;&gt;#&lt;/a&gt; 超类，子类和继承性&lt;/h3&gt;
&lt;h4 id=&#34;类的继承性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#类的继承性&#34;&gt;#&lt;/a&gt; 类的继承性&lt;/h4&gt;
&lt;p&gt;类继承一个类，这个类除了创建自己的成员外，还能够继承或扩展另外一个类的成员&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;超类：被继承的类&lt;/li&gt;
&lt;li&gt;子类：继承超类的类&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;继承的特性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单一继承性：子类只能有一个超类，超类可以有多个子类&lt;/li&gt;
&lt;li&gt;子类继承超类的所有成员，子类可以创建自己的成员.&lt;/li&gt;
&lt;li&gt;子类不能继承超类的构造器，子类的构造器要首先调用超类的构造器&lt;/li&gt;
&lt;li&gt;多态性之一：子类的成员隐藏和覆盖超类中相同的成员&lt;/li&gt;
&lt;li&gt;多态性之二：超类的对象可以对子类的实例引用&lt;/li&gt;
&lt;li&gt;由 abstract 修饰的类只能被继承&lt;/li&gt;
&lt;li&gt;由 final 修饰的类不能被继承&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;[abstract|final] class Subclass extends Superclass {SubClassBody}&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;abstract 修饰的是抽象类，其对象引用的必须是子类实例&lt;/li&gt;
&lt;li&gt;final 修饰的是终结类，其类不能被继承，不能有子类&lt;/li&gt;
&lt;li&gt;extends 为继承关键字，指示两个类存在的继承关系 &lt;strong&gt;子类 exteds 超类&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;创建类时，如缺省 extends, 该类就会 ovject 类的直接子类&lt;/p&gt;
&lt;p&gt;子类继承了超类的所有成员，但是无法访问某些受限的成员 (但是可以使用超类 public 访问对超类受限的成员进行访问)&lt;/p&gt;
&lt;p&gt;超类中，由 &lt;code&gt;private&lt;/code&gt;  修饰的访问权限的成员变量和方法，虽然被子类继承，但是子类不能访问&lt;/p&gt;
&lt;p&gt;子类中可以访问从超类继承下来的三种访问权限设定的成员&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;public&lt;/li&gt;
&lt;li&gt;protected&lt;/li&gt;
&lt;li&gt;缺省&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;成员变量的隐藏和方法覆盖&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#成员变量的隐藏和方法覆盖&#34;&gt;#&lt;/a&gt; 成员变量的隐藏和方法覆盖&lt;/h4&gt;
&lt;p&gt;在子类的创建中，如果出现了与超类中相同的成员变量，则超类中的成员变量被子类中的成员变量所&lt;strong&gt;隐藏&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果出现了与超类中有相同名，同参数以及同返回类型的成员方法，则超类中的成员方法被子类中的成员方法所&lt;strong&gt;覆盖&lt;/strong&gt;&lt;/p&gt;
&lt;h5 id=&#34;方法覆盖&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#方法覆盖&#34;&gt;#&lt;/a&gt; 方法覆盖&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;子类的创建中，具有与超类相同的方法名，相同的参数以及相同的返回类型&lt;/li&gt;
&lt;li&gt;具有比超类中覆盖方法更大的可访问性&lt;/li&gt;
&lt;li&gt;不同于方法过载，方法过载是在一个类中具有相同方法名的方法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;方法覆盖的条件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有&lt;strong&gt;继承关系&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;重写的方法和之前的方法具有与超类相同的方法名，相同的参数以及相同的返回类型&lt;/li&gt;
&lt;li&gt;重写的方法的访问权限不能比之前的方法权限更低&lt;/li&gt;
&lt;li&gt;重写方法的抛出异常数不能比之前放的抛出异常数更多&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意事项:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;父类的私有方法无法覆盖&lt;/li&gt;
&lt;li&gt;覆盖只是针对方法，与成员变量无关&lt;/li&gt;
&lt;li&gt;构造方法不能被继承也不能被覆盖&lt;/li&gt;
&lt;li&gt;方法覆盖只是针对实例方法，静态方法覆盖没有意义&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;nullthis和super&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#nullthis和super&#34;&gt;#&lt;/a&gt; null,this 和 super&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;null&lt;/code&gt; : 表示空，用于表示对象或数组还没有相应的实例引用，注意大小写，null 是任何引用类型的默认值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;this&lt;/code&gt; : 表示对类的实例访问，在类中可以指向成员变量与非成员变量区分，构造器中使用 this () 对另一个构造器的调用，类的创建中需要表示对自身实例的访问时，用 this 表示&lt;/li&gt;
&lt;li&gt;&lt;code&gt;super&lt;/code&gt; : 在子类中用于访问被隐藏的超类变量，被覆盖的超类方法&lt;/li&gt;
&lt;li&gt;super () 必须是子类构造函数的第一个执行语句，如果 super () 没有被用到，每个超类的默认的或五参数的构造函数将执行&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;运行时的多态&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#运行时的多态&#34;&gt;#&lt;/a&gt; 运行时的多态&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;超类的对象可以引用子类的实例&lt;/li&gt;
&lt;li&gt;该对象仍然只能够调用超类中定义的方法和变量&lt;/li&gt;
&lt;li&gt;对于覆盖或继承的方法，java 运行时系统根据调用该方法的实参的类型来决定选择哪个方法调用&lt;/li&gt;
&lt;li&gt;对子类的一个实例，如果覆盖了超类的方法，则运行时系统调用子类的方法&lt;/li&gt;
&lt;li&gt;如果子类继承了超类的方法，则运行时系统调用超类的 l 方法&lt;/li&gt;
&lt;li&gt;当超类的对象对子类实例引用时，这个对象所访问的成员必须是超类中所具有的&lt;/li&gt;
&lt;li&gt;这个对象不能访问子类自己创建的成员&lt;/li&gt;
&lt;li&gt;当这个对象访问的是&lt;strong&gt;被覆盖的方法&lt;/strong&gt;，则调用的是子类中覆盖方法&lt;/li&gt;
&lt;li&gt;只有当这个对象被强制转换成子类类型时，这个子类的所有成员才有可能被访问&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;final和abstract&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#final和abstract&#34;&gt;#&lt;/a&gt; final 和 abstract&lt;/h4&gt;
&lt;h5 id=&#34;final关键字&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#final关键字&#34;&gt;#&lt;/a&gt; final 关键字&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;final 修饰的类不能被继承&lt;/li&gt;
&lt;li&gt;final 修饰的方法不能被子类重写&lt;/li&gt;
&lt;li&gt;final 修饰的变量是常量，初始化后不能再修改&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在编译时，如果 final 变量是&lt;strong&gt;基本类型或 String 类型&lt;/strong&gt;，则编译器会把它当成&lt;strong&gt;编译器常量&lt;/strong&gt;，其他类型会成为&lt;strong&gt;运行时常量&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;空白 final&lt;/p&gt;
&lt;h2 id=&#34;输入输出流&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#输入输出流&#34;&gt;#&lt;/a&gt; 输入输出流&lt;/h2&gt;
&lt;h3 id=&#34;file类&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#file类&#34;&gt;#&lt;/a&gt; File 类&lt;/h3&gt;
&lt;p&gt;具有查询文件属性、状态和文件名等功能，但不能 访问文件内容&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boolean createNewFile()&lt;/code&gt;  不存在返回 true 存在返回 false&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boolean mkdir()&lt;/code&gt;  创建目录&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boolean mkdirs()&lt;/code&gt;  创建多级目录&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boolean delete()&lt;/code&gt;  用于删除文件或删除空目录&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boolean deleteOnExit()&lt;/code&gt;  文件使用完成后删除&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;line-numbers language-java&#34; data-language=&#34;java&#34;&gt;&lt;code class=&#34;language-java&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token namespace&#34;&gt;java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;io&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;File&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token namespace&#34;&gt;java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;io&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;IOException&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;FileDemo2&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; args&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;token class-name&#34;&gt;File&lt;/span&gt; f &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;File&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;d:\\1.txt&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
	&lt;span class=&#34;token keyword&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;f&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;createNewFile&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;//当文件存在时返回false&lt;/span&gt;
		&lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;f&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;delete&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;//当文件不存在时返回false&lt;/span&gt;
	&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;catch&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;IOException&lt;/span&gt; e&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;token comment&#34;&gt;// TODO Auto-generated catch block&lt;/span&gt;
		e&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;printStackTrace&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
		&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;查询文件状态和属性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#查询文件状态和属性&#34;&gt;#&lt;/a&gt; 查询文件状态和属性&lt;/h5&gt;
&lt;p&gt;&lt;img src=&#34;https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/java%E6%9F%A5%E8%AF%A2%E6%96%87%E4%BB%B6%E5%B1%9E%E6%80%A7.png&#34; alt=&#34;查询文件属性&#34;&gt;&lt;/p&gt;
&lt;h5 id=&#34;查询文件目录管理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#查询文件目录管理&#34;&gt;#&lt;/a&gt; 查询文件目录管理&lt;/h5&gt;
&lt;p&gt;&lt;img src=&#34;https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/java%E6%9F%A5%E8%AF%A2%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95%E7%AE%A1%E7%90%86.png&#34; alt=&#34;查询文件目录管理&#34;&gt;&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-java&#34; data-language=&#34;java&#34;&gt;&lt;code class=&#34;language-java&#34;&gt;&lt;span class=&#34;token comment&#34;&gt;//列出磁盘下文件或文件夹的例子&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token namespace&#34;&gt;java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;io&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;File&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;FileDemo3&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; args&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;token class-name&#34;&gt;File&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; files &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;File&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;listRoots&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;//列出的磁盘盘符&lt;/span&gt;
	&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;File&lt;/span&gt; file&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;files&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;file&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
		&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;file&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
			&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; filenames &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;file&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;//列出磁盘文件&lt;/span&gt;
			&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; filename&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;filenames&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;filename&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
		&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
		&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
		&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;randomaccessfile类&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#randomaccessfile类&#34;&gt;#&lt;/a&gt; RandomAccessFile 类&lt;/h3&gt;
&lt;p&gt;在 java.io 包中 RandomAccessFile 类和输入输出流类具有&lt;strong&gt;读写文件&lt;/strong&gt;的功能&lt;/p&gt;
&lt;p&gt;提供了两个构造函数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;public RandomAccessFile(String name, String &lt;strong&gt;mode&lt;/strong&gt;) throws IOException;&lt;/li&gt;
&lt;li&gt;public RandomAccessFile(File file, String &lt;strong&gt;mode&lt;/strong&gt;) throws IOException;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;name 表示文件名，file 为 File 类对象，mode 为读写方式 w (write),r (read)&lt;/p&gt;
&lt;p&gt;当以读写方式生成 randomAccessFile 对象时&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;文件不存在，就创建该文件，进行读写&lt;/li&gt;
&lt;li&gt;如果文件存在，就对文件进行覆盖 (有文件指针从文件头开始，当写入一个文件指针往后指，直接写入操作结果)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;RandomAccessFile 对象生成的时候，文件就相当于被打开了，文件指针位于开头&lt;/p&gt;
&lt;h4 id=&#34;randomaccessfile的成员方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#randomaccessfile的成员方法&#34;&gt;#&lt;/a&gt; RandomAccessFile 的成员方法&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/javaRandomAccessFile%E7%B1%BB%E6%88%90%E5%91%98%E6%96%B9%E6%B3%95.png&#34; alt=&#34;RandomAccessFile类成员方法&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/javaRandomAccessFile%E7%B1%BB%E6%88%90%E5%91%98%E6%96%B9%E6%B3%95(1).png&#34; alt=&#34;RandomAccessFile类成员方法(1)&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/javaRandomAccessFile%E7%B1%BB%E6%88%90%E5%91%98%E6%96%B9%E6%B3%95%20(2).png&#34; alt=&#34;RandomAccessFile类成员方法 (2)&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/javaRandomAccessFile%E7%B1%BB%E6%88%90%E5%91%98%E6%96%B9%E6%B3%95%20(3).png&#34; alt=&#34;RandomAccessFile类成员方法 (3)&#34;&gt;&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-java&#34; data-language=&#34;java&#34;&gt;&lt;code class=&#34;language-java&#34;&gt;&lt;span class=&#34;token comment&#34;&gt;// RandomAccessFile 写出文件&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;token namespace&#34;&gt;stream&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token namespace&#34;&gt;java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;io&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;RandomAccessFile&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token namespace&#34;&gt;java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;io&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;File&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;TestStream&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; args&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Exception&lt;/span&gt;
	&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;token class-name&#34;&gt;File&lt;/span&gt; f &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;File&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;F:\\javatest\\1.text&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
		&lt;span class=&#34;token class-name&#34;&gt;RandomAccessFile&lt;/span&gt; rf &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;RandomAccessFile&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;f&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;rw&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
		&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; name &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
		&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; age &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
		name &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;zhangsan&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; age &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;18&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
		rf&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;writeBytes&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;name&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
		rf&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;writeInt&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;age&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
		name &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;lisi    &#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; age &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;31&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
		rf&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;writeBytes&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;name&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
		rf&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;writeInt&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;age&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
		rf&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
	&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;line-numbers language-java&#34; data-language=&#34;java&#34;&gt;&lt;code class=&#34;language-java&#34;&gt;&lt;span class=&#34;token comment&#34;&gt;//RandomAccessFile 读出文件中的内容&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token namespace&#34;&gt;java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;io&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;File&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token namespace&#34;&gt;java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;io&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;RandomAccessFile&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;RandomAccessFileDemo02&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 所有的异常直接抛出，程序中不再进行处理&lt;/span&gt;
	&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; args&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Exception&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;token class-name&#34;&gt;File&lt;/span&gt; f &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;File&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;d:&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;File&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;separator &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;test.dat&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 指定要操作的文件&lt;/span&gt;
		&lt;span class=&#34;token class-name&#34;&gt;RandomAccessFile&lt;/span&gt; rdf &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;null&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 声明RandomAccessFile类的对象&lt;/span&gt;
		rdf &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;RandomAccessFile&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;f&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;r&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 以只读的方式打开文件&lt;/span&gt;
		&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; name &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;null&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; age &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
		&lt;span class=&#34;token keyword&#34;&gt;byte&lt;/span&gt; b&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 开辟byte数组&lt;/span&gt;
		&lt;span class=&#34;token comment&#34;&gt;/* 读取第二个人的信息，意味着要空出第一个人的信息*/&lt;/span&gt;
		rdf&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;skipBytes&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 跳过第一个人的信息&lt;/span&gt;
		&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; i&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;i&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;b&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;length&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;i&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
			b&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; rdf&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;readByte&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 读取一个字节&lt;/span&gt;
		&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
		name &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;b&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 将读取出来的byte数组变为字符串&lt;/span&gt;
		age &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; rdf&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;readInt&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 读取数字&lt;/span&gt;
		&lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;第二个人的信息 --&amp;gt; 姓名：&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; name &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;；年龄：&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; age&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
		rdf&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;seek&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 指针回到文件的开头，读取第一个人的信息&lt;/span&gt;
		&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; i&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;i&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;b&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;length&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;i&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
			b&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; rdf&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;readByte&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 读取一个字节&lt;/span&gt;
		&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
		name &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;b&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 将读取出来的byte数组变为字符串&lt;/span&gt;
		age &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; rdf&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;readInt&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 读取数字&lt;/span&gt;
		&lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;第一个人的信息 --&amp;gt; 姓名：&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; name &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;；年龄：&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; age&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
		rdf&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;skipBytes&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 空出第二个人的信息&lt;/span&gt;
		&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; i&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;i&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;b&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;length&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;i&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
			b&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; rdf&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;readByte&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 读取一个字节&lt;/span&gt;
		&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
		name &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;b&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 将读取出来的byte数组变为字符串&lt;/span&gt;
		age &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; rdf&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;readInt&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 读取数字&lt;/span&gt;
		&lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;第三个人的信息 --&amp;gt; 姓名：&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; name &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;；年龄：&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; age&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
		rdf&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 关闭&lt;/span&gt;
	&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;字节流&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#字节流&#34;&gt;#&lt;/a&gt; 字节流&lt;/h3&gt;
&lt;h5 id=&#34;inputstream-和-outputstream&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#inputstream-和-outputstream&#34;&gt;#&lt;/a&gt; &lt;strong&gt;InputStream&lt;/strong&gt; 和 &lt;strong&gt;OutputStream&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;字节流由两个类层次结构定义，在顶层有两个抽象类： &lt;strong&gt;InputStream&lt;/strong&gt; 和 &lt;strong&gt;OutputStream&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;每个抽象楼都有多个具体的子类，这些子类对不同的外设进行处理&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;抽象类 InputStream 和 OutputStream 定义了实现其他流类的关键方法。&lt;/li&gt;
&lt;li&gt;最重要的两种方法是&lt;strong&gt; read ()&lt;strong&gt; 和&lt;/strong&gt; write ()&lt;/strong&gt;，它们分别对数据以字节为单位进行读写。&lt;/li&gt;
&lt;li&gt;两种方法都在 InputStream 和 OutputStream 中被定义为&lt;strong&gt;抽象方法&lt;/strong&gt;，它们被派生的流类&lt;strong&gt;重载&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;InputSteam 类有关读入数据的方法&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/javainput%E7%B1%BB%E8%AF%BB%E5%85%A5%E6%95%B0%E6%8D%AE%E7%9A%84%E6%96%B9%E6%B3%95.png&#34; alt=&#34;input类读入数据的方法&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/javainputstream%E7%B1%BB%E7%9A%84%E5%85%B6%E4%BB%96%E6%96%B9%E6%B3%95.png&#34; alt=&#34;inputstream类的其他方法&#34;&gt;&lt;/p&gt;
&lt;p&gt;所有 InputStream 的子类都是针对不同的输入数据源，其类名的 前缀清楚地表示出输入数据源，FileInputStream 类的数据源是文 件，PipedInputStream 类的数据源是管道等等&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/javaInputStream%E8%AF%BB%E5%85%A5%E7%B1%BB%E5%B1%82%E6%AC%A1.png&#34; alt=&#34;InputStream读入类层次&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;
&lt;p&gt;output 类&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;int write (int)&lt;/code&gt;  向流的末尾写入一个字节的数据。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;int write (byte[])&lt;/code&gt;  将数组 b 中的数据依次写入当前的流对象中&lt;/li&gt;
&lt;li&gt;&lt;code&gt;int write (byte[],int,int)&lt;/code&gt;  将数组中从开始下标 (包含)，后续长度的数据依次写入到流对象中&lt;/li&gt;
&lt;li&gt;&lt;code&gt;void close()&lt;/code&gt;  关闭当前流对象，并释放该流对象占用的资源&lt;/li&gt;
&lt;li&gt;&lt;code&gt;void flush()&lt;/code&gt;  将当前流对象中的缓冲数据强制输出出去。使用该方法可以实现立 即输出&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所有 OutputStream 的子类与 InputStream 的子类相似，针对不同 的输出数据源，其类名的前缀清楚地表示出输出数据源&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/javaoutput%E8%BE%93%E5%87%BA%E7%B1%BB%E5%B1%82%E6%AC%A1.png&#34; alt=&#34;output输出类层次&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;fileinputstream和outinputstream&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#fileinputstream和outinputstream&#34;&gt;#&lt;/a&gt; &lt;strong&gt;FileInputStream&lt;/strong&gt; 和&lt;strong&gt; OutInputStream&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;这两个类属于节点流，分别完成对文件的输入输出（读写）操作&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;FileInputStream&lt;/p&gt;
&lt;p&gt;构造器：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;FileInputStream (String) 参数 String 对象表示文件名&lt;/li&gt;
&lt;li&gt;FileInputStream (File) 参数 File 对象表示文件名&lt;/li&gt;
&lt;li&gt;FileInputStream (FileDescriptor) 参数 FileDescriptor 定义一个本地文件系统对象表示的文件名。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;line-numbers language-java&#34; data-language=&#34;java&#34;&gt;&lt;code class=&#34;language-java&#34;&gt;&lt;span class=&#34;token comment&#34;&gt;//FileInputStream类显示文件内容的程序的示例&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token namespace&#34;&gt;java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;io&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;File&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token namespace&#34;&gt;java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;io&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;FileInputStream&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token namespace&#34;&gt;java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;io&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;IOException&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;FileInputStreamDemo01&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; args&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;token class-name&#34;&gt;File&lt;/span&gt; file &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;File&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;d:/javaFileIO.java&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
		&lt;span class=&#34;token keyword&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;FileInputStream&lt;/span&gt; fis &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;FileInputStream&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;file&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
			&lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Total file size to read (in bytes) : &#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; fis&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;available&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
			&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; content&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
			&lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;content &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; fis&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
				&lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; content&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// convert to char and display it&lt;/span&gt;
			&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
		&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;catch&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;IOException&lt;/span&gt; e&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt; e&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;printStackTrace&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;FileOutputStream&lt;/p&gt;
&lt;p&gt;构造器:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;FileOutputStream(String)&lt;/li&gt;
&lt;li&gt;FileOutputStream(String,boolean)&lt;/li&gt;
&lt;li&gt;FileOutputStream(File)&lt;/li&gt;
&lt;li&gt;FileOutputStream(FileDescriptor)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;生成 FileOutputStream 对象时，如果文件不存在，则创建该文件供 程序输出数据&lt;/p&gt;
&lt;p&gt;如果文件已经存在，则有改写和附加两种输出数据的方式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;改写的含义是先把原文件长度截为零，原文件数据被丢弃， 然后再输出数据。(第二个构造器的 boolean 参数为 false 值和其 它构造器的对象)&lt;/li&gt;
&lt;li&gt;附加的含义是在原文件末尾追加输出数据，原文件数据仍然 存在。(第二个构造器的 boolean 参数为 true)&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;import java.io.FileOutputStream;
import java.io.IOException;
public class FileOutputStreamDemo2 {
	public static void main(String[] args) throws IOException { //创建字节输出流对象
		FileOutputStream fos = new FileOutputStream(&#34;d:\\testfout.txt&#34;);
		//如果没有testfout.txt文件则会自动创建这个文件
		fos.write(97); //调用write()方法
		fos.write(57); //调用write()方法
		fos.write(55); //调用write()方法
		byte[] bys = {97,98,99,100,101};
		fos.write(bys); //public void write(byte[] b):写一个字节数组
		fos.write(bys,1,3); //public void write(byte[] b,int off,int len)
		fos.close(); //释放资源
}
}
&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;dateinputstream和dataoutstream&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#dateinputstream和dataoutstream&#34;&gt;#&lt;/a&gt; DateInputStream 和 DataOutStream&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;这两个类创建对象分别被称为数据输入流和数据输出流。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;它们分别实现了 DataInput 接口和 DataOutput 接口。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;它们允许程序按与机器无关的风格读写 Java 数据。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;这两个流也是过滤器流，常以其它流如 InputStream 或 OutputStream 作为它们的输入或输出。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;它们输入和输出几乎是对应的，每种基本数据类型的读写方法可以从 其后缀名字识别。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;readInt() writeInt() readBoolean() writeBoolean() readChar() writeChar() readDouble() writeDouble()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;字符流&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#字符流&#34;&gt;#&lt;/a&gt; 字符流&lt;/h3&gt;
&lt;p&gt;字符流主要是用来&lt;strong&gt;处理字符&lt;/strong&gt;的。它们在读写流内数据时是&lt;strong&gt;以字符为单位&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;字符流类由两个类层次结构定义。顶层有两个&lt;strong&gt;抽象&lt;/strong&gt;类：&lt;strong&gt;Reader 和 Writer&lt;/strong&gt;。 这些抽象类处理统一编码的字符流。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;抽象类 Reader 和 Writer 定义了实现其他流类的关键方法。其中两 个最重要的是 read () 和 write ()，它们分别进行字符数据的读和写。 &lt;strong&gt;这些方法被派生流类重载&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Reader 及 Writer 类&lt;/strong&gt;和它们子类的方法，与&lt;strong&gt; InputStream 及 OutputStream 类&lt;/strong&gt;及它们子类的使用方法非常类似。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/javaReader%E7%9A%84%E7%B1%BB%E5%B1%82%E6%AC%A1.png&#34; alt=&#34;Reader的类层次&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/javaWrite%E7%9A%84%E7%B1%BB%E5%B1%82%E6%AC%A1.png&#34; alt=&#34;Write的类层次&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;InputStreamReader&lt;/strong&gt; 类和&lt;strong&gt; OutputStreamWriter&lt;/strong&gt; 类&lt;/p&gt;
&lt;p&gt;在构造这两个类对应的流时，它们会自动进行转换，将平台缺 省的编码集编码的字节转换为 Unicode 字符。对英语环境，其缺 省的编码集一般为 ISO8859-1。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;BufferedReader&lt;/strong&gt; 类和&lt;strong&gt; BufferedWriter&lt;/strong&gt; 类&lt;/p&gt;
&lt;p&gt;这两个类对应的流使用了缓冲，能大大提高输入输出效率。这 两个也是过滤器流，常用来对 InputStreamReader 和 OutputStreamWriter 进行处理。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;line-numbers language-java&#34; data-language=&#34;java&#34;&gt;&lt;code class=&#34;language-java&#34;&gt;&lt;span class=&#34;token comment&#34;&gt;//字节流和字符流示例&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token namespace&#34;&gt;java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;io&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;BufferedReader&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token namespace&#34;&gt;java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;io&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;FileNotFoundException&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token namespace&#34;&gt;java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;io&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;FileReader&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token namespace&#34;&gt;java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;io&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;IOException&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;BufferedReaderDemo01&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; args&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; fileName &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;d:\\javaFileIO.java&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
		&lt;span class=&#34;token class-name&#34;&gt;BufferedReader&lt;/span&gt; fromFile &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
		&lt;span class=&#34;token keyword&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
			&lt;span class=&#34;token class-name&#34;&gt;FileReader&lt;/span&gt; fr &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;FileReader&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;fileName&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
			fromFile &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;BufferedReader&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;fr&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
			&lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;The file &#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; fileName&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34; contains the following lines:&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
			&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; line &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; fromFile&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;readLine&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
			&lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;line &lt;span class=&#34;token operator&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
				&lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;line&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; line &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; fromFile&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;readLine&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// throw IOException&lt;/span&gt;
				&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
			&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;catch&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;FileNotFoundException&lt;/span&gt; e&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
				&lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Error opening the file &#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; fileName&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;exit&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
				&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;catch&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;IOException&lt;/span&gt; e&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
					&lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Error reading the file &#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; fileName&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
		&lt;span class=&#34;token keyword&#34;&gt;finally&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
				&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;fromFile &lt;span class=&#34;token operator&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; fromFile&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// throw IOException&lt;/span&gt;
		&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;catch&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;IOException&lt;/span&gt; e&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
					&lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Error closing the file &#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; fileName&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;exit&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
			&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
		&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;pipedinputstream和pipedoutputstream管道输入输出流类&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#pipedinputstream和pipedoutputstream管道输入输出流类&#34;&gt;#&lt;/a&gt; PipedInputStream 和 PipedOutputStream 管道输入输出流类&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;管道是 UNIX 的发明，它大大增强了流的概念。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;管道 (pipe) 提供一种线程之间的通信方法，可用于 IPC (进程间通信) 或是 ITC (线程间通信)。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;输入管道是用来接收输出管道所写出的数据。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;这两个类必须同时使用，所以它们除了不带参数的构造器外，互为构 造器中的参数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PipedInputStream(PipedOutputStream)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PipedOutputStream(PipedInputStream)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;io流链接及处理流&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#io流链接及处理流&#34;&gt;#&lt;/a&gt; I/O 流链接及处理流&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/java%E5%A4%84%E7%90%86%E6%B5%81.png&#34; alt=&#34;处理流&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/java%E5%AD%97%E7%AC%A6%E6%B5%81%E5%92%8C%E5%AD%97%E8%8A%82%E6%B5%81%E5%A4%84%E7%90%86%E5%AF%B9%E5%BA%94%E8%A1%A8.png&#34; alt=&#34;字符流和字节流处理对应表&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;对象序列化处理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#对象序列化处理&#34;&gt;#&lt;/a&gt; 对象序列化处理&lt;/h3&gt;
&lt;p&gt;“对象序列化”（Object Serialization）是 Java 一种特性。类实现 &lt;strong&gt;Serializable 接口&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;实现了 Serializable 接口的对象，可将它们转换成&lt;strong&gt;一系列字节&lt;/strong&gt;，并可在以后完全恢复回原来的样子。&lt;/p&gt;
&lt;p&gt;网络传输时进行序列化，能自动弥补操作系统间的差异。&lt;/p&gt;
&lt;p&gt;可以实现 “有限持久化” ，意味着对象的 “生存时间” 取决于程序的每一次调用之间。&lt;/p&gt;
&lt;p&gt;首先要创建某些 OutputStream 对象，然后将其封装到 ObjectOutputStream 对象内。&lt;/p&gt;
&lt;p&gt;再需调用 writeObject () 即可完成对象的序列化，并将其发送给 OutputStream。&lt;/p&gt;
&lt;p&gt;相反将一个 InputStream 封装到 ObjectInputStream 内，然后调用 readObject ()。&lt;/p&gt;
&lt;p&gt;最后获得的是一个 Object 对象的引用，以便能够直接设置。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-java&#34; data-language=&#34;java&#34;&gt;&lt;code class=&#34;language-java&#34;&gt;&lt;span class=&#34;token comment&#34;&gt;//对象序列化例子&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token namespace&#34;&gt;java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;io&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Serializable&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Student&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Serializable&lt;/span&gt;
	&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt; 		&lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; name&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
		&lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; sex&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
		&lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; year&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
		&lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;double&lt;/span&gt; gpa&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
		&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Student&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
		&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Student&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; name&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; sex&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; year&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;double&lt;/span&gt; gpa&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
			&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;name &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; name&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
			&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sex &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; sex&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
			&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;year &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; year&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
			&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;gpa &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; gpa&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
			&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
		&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;setName&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; name&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;name &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; name&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
		&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;setSex&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; sex&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sex &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; sex&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
		&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;setYear&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; year&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;year &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; year&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
		&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;setGpa&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;double&lt;/span&gt; gpa&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;gpa &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; gpa&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
		&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;getName&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;name&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
    	&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;getSex&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sex&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
		&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;getYear&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;year&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
		&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;getGpa&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;gpa&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token namespace&#34;&gt;java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;io&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;UseStudent&lt;/span&gt;
	&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt; 	
    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; args&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
		&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Student&lt;/span&gt; st &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Student&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Tom&#34;&lt;/span&gt;
		&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
		&lt;span class=&#34;token string&#34;&gt;&#39;M&#39;&lt;/span&gt;
		&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3.6&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
		&lt;span class=&#34;token class-name&#34;&gt;File&lt;/span&gt; file &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;File&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;d:\\student.txt&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
		&lt;span class=&#34;token keyword&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt; file&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;createNewFile&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
		&lt;span class=&#34;token keyword&#34;&gt;catch&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;IOException&lt;/span&gt; e&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt; e&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;printStackTrace&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
		&lt;span class=&#34;token keyword&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;//Student对象序列化过程&lt;/span&gt;
		&lt;span class=&#34;token class-name&#34;&gt;FileOutputStream&lt;/span&gt; fos &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;FileOutputStream&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;file&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
		&lt;span class=&#34;token class-name&#34;&gt;ObjectOutputStream&lt;/span&gt; oos &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ObjectOutputStream&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;fos&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
		oos&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;writeObject&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;st&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
		oos&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;flush&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
		oos&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
		fos&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;//Student对象反序列化过程&lt;/span&gt;
		&lt;span class=&#34;token class-name&#34;&gt;FileInputStream&lt;/span&gt; fis &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;FileInputStream&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;file&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
		&lt;span class=&#34;token class-name&#34;&gt;ObjectInputStream&lt;/span&gt; ois &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ObjectInputStream&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;fis&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
		&lt;span class=&#34;token class-name&#34;&gt;Student&lt;/span&gt; st1 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Student&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; ois&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;readObject&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
		&lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;name = &#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; st1&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getName&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
		&lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;sex = &#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; st1&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getSex&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
		&lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;year = &#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; st1&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getYear&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
		&lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;gpa = &#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; st1&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getGpa&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
		ois&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
		fis&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
		&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;catch&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;ClassNotFoundException&lt;/span&gt; e&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt; e&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;printStackTrace&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
			&lt;span class=&#34;token keyword&#34;&gt;catch&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;IOException&lt;/span&gt; e&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt; e&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;printStackTrace&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="java" />
        <updated>2022-09-12T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>https://github.com/YogMas/YogMas.github.io/2022/07/10/python/</id>
        <title>python</title>
        <link rel="alternate" href="https://github.com/YogMas/YogMas.github.io/2022/07/10/python/"/>
        <content type="html">&lt;h1 id=&#34;python&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#python&#34;&gt;#&lt;/a&gt; Python&lt;/h1&gt;
&lt;p&gt;The article made by  &lt;code&gt;Yogmas&lt;/code&gt;  on 2022/7/08&lt;/p&gt;
&lt;h2 id=&#34;变量和字符串&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#变量和字符串&#34;&gt;#&lt;/a&gt; 变量和字符串&lt;/h2&gt;
&lt;h3 id=&#34;变量&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#变量&#34;&gt;#&lt;/a&gt; 变量&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;变量名由字母，数字和下划线组成&lt;/li&gt;
&lt;li&gt;不能以数字开头&lt;/li&gt;
&lt;li&gt;区分大小写&lt;/li&gt;
&lt;li&gt;python3 变量名支持中文字符&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;变量值交换:  &lt;code&gt;x,y = y,x&lt;/code&gt; (python)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;_&lt;/code&gt; 单独一个下划线可以用来表示临时变量&lt;/p&gt;
&lt;h3 id=&#34;字符串&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#字符串&#34;&gt;#&lt;/a&gt; 字符串&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;单引号模式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;双引号模式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;三引号模式 (三单或三双都可)- 长字符串&lt;/p&gt;
&lt;p&gt;在长字符串中不需要运用换行符进行换行，代码中的换行就相当于换行符&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;单引号和双引号互相灵活应用，防止冲突&lt;/p&gt;
&lt;p&gt;冲突不可避免的时候可以使用转义字符&lt;/p&gt;
&lt;h4 id=&#34;转义字符&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#转义字符&#34;&gt;#&lt;/a&gt; 转义字符&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/j0bPlq&#34;&gt;&lt;img src=&#34;https://s1.ax1x.com/2022/07/08/j0bPlq.png&#34; alt=&#34;转义字符&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;原始字符串：在字符串前面加上一个 &lt;code&gt;r&lt;/code&gt;  表示该字符串是原始字符串，这样在此字符串中就不会产生转义字符&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;D:\three\two\one\now&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#\t \t \o \n 将会被当成转义字符输出&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;r&#34;D:\three\two\one\now&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#将会按照原始字符串输出&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;\&lt;/code&gt;  不能放在字符串的末尾&lt;/p&gt;
&lt;h4 id=&#34;字符串的加法和乘法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#字符串的加法和乘法&#34;&gt;#&lt;/a&gt; 字符串的加法和乘法&lt;/h4&gt;
&lt;p&gt;字符串是&lt;strong&gt;文本&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;字符串的加法就是对文本进行拼接&lt;/li&gt;
&lt;li&gt;字符串的乘法就是对文本就行复制粘贴&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;运算符&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#运算符&#34;&gt;#&lt;/a&gt; 运算符&lt;/h3&gt;
&lt;h4 id=&#34;比较运算符&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#比较运算符&#34;&gt;#&lt;/a&gt; 比较运算符&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/j0bHN4&#34;&gt;&lt;img src=&#34;https://s1.ax1x.com/2022/07/08/j0bHN4.png&#34; alt=&#34;比较运算符&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;逻辑运算符&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#逻辑运算符&#34;&gt;#&lt;/a&gt; 逻辑运算符&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/jfd6KO&#34;&gt;&lt;img src=&#34;https://s1.ax1x.com/2022/07/14/jfd6KO.png&#34; alt=&#34;逻辑运算符&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;python 的操作数支持真值运算，如果给到的是两个数，那么最后得到的就不会是 &lt;code&gt;True&lt;/code&gt;  和 &lt;code&gt;False&lt;/code&gt;  而是一个数&lt;/p&gt;
&lt;h4 id=&#34;运算符优先级&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#运算符优先级&#34;&gt;#&lt;/a&gt; 运算符优先级&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/jfwlee&#34;&gt;&lt;img src=&#34;https://s1.ax1x.com/2022/07/14/jfwlee.png&#34; alt=&#34;运算符优先级&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;短路逻辑运算&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#短路逻辑运算&#34;&gt;#&lt;/a&gt; 短路逻辑运算&lt;/h4&gt;
&lt;p&gt;从左往右，当第一个操作数的值无法确定逻辑运算的结果时，才对第二个操作数进行求值&lt;/p&gt;
&lt;p&gt;eg: 3 or 4 = 3     3 and 4 = 4          0 and 3 = 0&lt;/p&gt;
&lt;h4 id=&#34;is运算符同一性运算符&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#is运算符同一性运算符&#34;&gt;#&lt;/a&gt; is 运算符 (同一性运算符)&lt;/h4&gt;
&lt;p&gt;检验两个元素是否指向同一个对象&lt;/p&gt;
&lt;h4 id=&#34;in运算符&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#in运算符&#34;&gt;#&lt;/a&gt; in 运算符&lt;/h4&gt;
&lt;p&gt;判断某个元素是否包含在序列中&lt;/p&gt;
&lt;h4 id=&#34;del语句&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#del语句&#34;&gt;#&lt;/a&gt; del 语句&lt;/h4&gt;
&lt;p&gt;用于删除一个或多个指定的对象&lt;/p&gt;
&lt;h2 id=&#34;python模块&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#python模块&#34;&gt;#&lt;/a&gt; python 模块&lt;/h2&gt;
&lt;h3 id=&#34;随机数-random&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#随机数-random&#34;&gt;#&lt;/a&gt; 随机数 random&lt;/h3&gt;
&lt;p&gt;import random&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;random.randint(x,y)&lt;/li&gt;
&lt;li&gt;random.getstate () 获取随机数种子&lt;/li&gt;
&lt;li&gt;random.setstate (x) 设置随机数种子&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;十进制-decimal&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#十进制-decimal&#34;&gt;#&lt;/a&gt; 十进制 decimal&lt;/h3&gt;
&lt;p&gt;用于精确计算浮点数的相加&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a = decimal.Decimal(’ 0.1 &#39;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;数字类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数字类型&#34;&gt;#&lt;/a&gt; 数字类型&lt;/h2&gt;
&lt;h3 id=&#34;整数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#整数&#34;&gt;#&lt;/a&gt; 整数&lt;/h3&gt;
&lt;p&gt;python 的整数长度不受限制有&lt;strong&gt;无限大的精度&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;整数相除会产生浮点数的结果&lt;/p&gt;
&lt;h3 id=&#34;浮点数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#浮点数&#34;&gt;#&lt;/a&gt; 浮点数&lt;/h3&gt;
&lt;p&gt;浮点数具有精度上的误差  精确计算查看上文&lt;strong&gt; decimal&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;eg. 0.1 + 0.2 != 0.3&lt;/p&gt;
&lt;p&gt;浮点数也可以用可以用科学计数法来表示&lt;/p&gt;
&lt;p&gt;eg 5e-05&lt;/p&gt;
&lt;h3 id=&#34;复数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#复数&#34;&gt;#&lt;/a&gt; 复数&lt;/h3&gt;
&lt;p&gt;x + yj&lt;/p&gt;
&lt;p&gt;x 是实部，y 是虚部&lt;/p&gt;
&lt;p&gt;复数的实部和虚部都是以浮点数的形式存储的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;x.real 获取实部数值&lt;/li&gt;
&lt;li&gt;x.imag 获取虚部数值&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;数字运算&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数字运算&#34;&gt;#&lt;/a&gt; 数字运算&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/jgpCct&#34;&gt;&lt;img src=&#34;https://s1.ax1x.com/2022/07/12/jgpCct.png&#34; alt=&#34;数字运算&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;//&lt;/code&gt; (地板除): 将除法的结果向下取整&lt;/li&gt;
&lt;li&gt;&lt;code&gt;divmod&lt;/code&gt;  (内置函数): &lt;code&gt;divmod(x,y)&lt;/code&gt;  返回 &lt;code&gt;x//y&lt;/code&gt; , &lt;code&gt;x%y&lt;/code&gt; , 等于求出商和 余数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;abs()&lt;/code&gt; : 返回绝对值，传入复数，返回&lt;strong&gt;复数的模&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pow(x,y,z)&lt;/code&gt; : &lt;code&gt;pow(x,y,z)&lt;/code&gt; =x**y %z&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;布尔类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#布尔类型&#34;&gt;#&lt;/a&gt; 布尔类型&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;空字符串是 False, 其他全是 True&lt;/li&gt;
&lt;li&gt;0 是 False 其他都是 True&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/jfdmDg&#34;&gt;&lt;img src=&#34;https://s1.ax1x.com/2022/07/14/jfdmDg.png&#34; alt=&#34;布尔&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Fraction(0,1)&lt;/code&gt;  表示分子是 0, 分母是 1 的分数&lt;/p&gt;
&lt;p&gt;布尔类型就是特殊的整数类型&lt;/p&gt;
&lt;p&gt;True = 1,False = 0&lt;/p&gt;
&lt;h2 id=&#34;分支与循环&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#分支与循环&#34;&gt;#&lt;/a&gt; 分支与循环&lt;/h2&gt;
&lt;h3 id=&#34;分支&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#分支&#34;&gt;#&lt;/a&gt; 分支&lt;/h3&gt;
&lt;h4 id=&#34;if语句&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#if语句&#34;&gt;#&lt;/a&gt; if 语句&lt;/h4&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; 判断语句&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    执行语句
&lt;span class=&#34;token keyword&#34;&gt;elif&lt;/span&gt; 判断语句&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    执行语句
&lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    执行语句&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;条件表达式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#条件表达式&#34;&gt;#&lt;/a&gt; 条件表达式&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;执行语句 if 判断语句 else 执行语句&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;可以用小括号将多行的代码括起来表示这是一行代码&lt;/p&gt;
&lt;h3 id=&#34;循环&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#循环&#34;&gt;#&lt;/a&gt; 循环&lt;/h3&gt;
&lt;h4 id=&#34;while循环&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#while循环&#34;&gt;#&lt;/a&gt; while 循环&lt;/h4&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt; condition&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 
    statement
&lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
   &lt;span class=&#34;token comment&#34;&gt;#else可以不用,else在while条件不成立的时候执行,当while是由于break语句跳出的时候不执行,适用于区分任务连续完成和中断的情况&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;break&lt;/code&gt;  语句用于跳出循环&lt;/li&gt;
&lt;li&gt;&lt;code&gt;continue&lt;/code&gt;  用于结束本次循环，继续判断下一次循环的条件，相当于直接跳到本次循环体的最后一句代码的后面&lt;/li&gt;
&lt;li&gt;&lt;code&gt;break&lt;/code&gt;  和 &lt;code&gt;continue&lt;/code&gt;  都只能跳出一层循环体&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;for循环&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#for循环&#34;&gt;#&lt;/a&gt; for 循环&lt;/h4&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; 变量 &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; 可迭代对象&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    statement&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;s&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;range函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#range函数&#34;&gt;#&lt;/a&gt;  &lt;code&gt;range&lt;/code&gt;  函数&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;range(stop)&lt;/code&gt;  生成从 **[0,stop)** 的整数序列&lt;/li&gt;
&lt;li&gt;&lt;code&gt;range(start,stop)&lt;/code&gt;  生成从 **[start,stop)** 的整数数列&lt;/li&gt;
&lt;li&gt;&lt;code&gt;range(start,stop,step)&lt;/code&gt;  生成从 **[start,stop)&lt;strong&gt; 的整数数列，可以指定&lt;/strong&gt; step** 跨度&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;列表&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#列表&#34;&gt;#&lt;/a&gt; 列表&lt;/h2&gt;
&lt;p&gt;python 的列表可以容纳不同数据类型的数据&lt;/p&gt;
&lt;p&gt;列表是可变的，字符串是不可变的&lt;/p&gt;
&lt;h3 id=&#34;创建列表&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#创建列表&#34;&gt;#&lt;/a&gt; 创建列表&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[1,2,3,4,5,&#34;勇敢的sam&#34;]&lt;/code&gt;  使用中括号创建列表&lt;/li&gt;
&lt;li&gt;利用列表推导式:  &lt;code&gt;S = [ [0] * 3 for i in range(3)]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;访问列表&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#访问列表&#34;&gt;#&lt;/a&gt; 访问列表&lt;/h3&gt;
&lt;p&gt;采用&lt;strong&gt;下标索引&lt;/strong&gt;访问列表，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;正向访问:python 的下标索引从&lt;strong&gt; 0&lt;/strong&gt; 开始，依次递增&lt;/li&gt;
&lt;li&gt;逆向访问:python 下标索引可以从后往前访问，从 **-1** 开始依次递减&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;列表切片&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#列表切片&#34;&gt;#&lt;/a&gt; 列表切片&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Name[start:end]&lt;/code&gt;  从 &lt;code&gt;Name[start]&lt;/code&gt;  到 &lt;code&gt;Name[end-1]&lt;/code&gt;  的列表元素&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Name[:end]&lt;/code&gt;  从头到 &lt;code&gt;Name[end -1]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Name[start:]&lt;/code&gt;  从 &lt;code&gt;Name[start]&lt;/code&gt;  到列表末尾&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Name[:]&lt;/code&gt;  表示列表中的全部元素&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Name[start:end:step]&lt;/code&gt;  可以设置 step 跨度值，当 step 为负值的时候，表示从列表最后一个元素开始倒着输出&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Name[::-1]&lt;/code&gt; : 直接将列表反转&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;列表的多种方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#列表的多种方法&#34;&gt;#&lt;/a&gt; 列表的多种方法&lt;/h3&gt;
&lt;h4 id=&#34;增加&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#增加&#34;&gt;#&lt;/a&gt; 增加&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Name.append()&lt;/code&gt; : 在列表的末尾添加指定元素，但是每次只能添加一个元素&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Name.extend()&lt;/code&gt; : 在列表的末尾添加一个可迭代对象，与 &lt;code&gt;append&lt;/code&gt;  相比可以同时添加多个元素&lt;/li&gt;
&lt;li&gt;通过切片实现:
&lt;ul&gt;
&lt;li&gt;实现 &lt;code&gt;append()&lt;/code&gt; : Name[len(Name):] = XXX&lt;/li&gt;
&lt;li&gt;实现  &lt;code&gt;extend()&lt;/code&gt; :Name[len(Name):] = [x,y,z]&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Name.insert(x,y)&lt;/code&gt; :x 为待插入的位置，y 为待插入的元素&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;删除&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#删除&#34;&gt;#&lt;/a&gt; 删除&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Name.remove(元素值)&lt;/code&gt; : 指定删除一个元素
&lt;ol&gt;
&lt;li&gt;如果列表中有多个相同元素 只会删除第一个元素&lt;/li&gt;
&lt;li&gt;如果元素不存在，程序则会报错&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Name.pop(下标索引值)&lt;/code&gt; : 删除下标索引值上的元素&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Name.clear()&lt;/code&gt; : 直接清空列表中的所有元素&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;修改&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#修改&#34;&gt;#&lt;/a&gt; 修改&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Name[下标索引值] = X&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Name.sort()&lt;/code&gt; : 将列表从小到大进行排序 在括号中加上 &lt;code&gt;reverse = True&lt;/code&gt; , 就可以实现从大到下排序&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Name.reverse()&lt;/code&gt; : 将列表中的元素顺序进行翻转&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;查找&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#查找&#34;&gt;#&lt;/a&gt; 查找&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Name.count(元素值)&lt;/code&gt; : 查找某个元素值在列表中有多少个&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Name.index(元素值,start,end)&lt;/code&gt; : 查找 start 到 end 区间某个元素的下标索引值，有多个值时返回第一个&lt;/p&gt;
&lt;p&gt;eg:  &lt;code&gt;Name[Name.index(&#34;zzz&#34;)] = &#34;zgg&#34;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Name.copy()&lt;/code&gt; : 对列表进行拷贝&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;计算&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#计算&#34;&gt;#&lt;/a&gt; 计算&lt;/h4&gt;
&lt;p&gt;加法：将两个列表中的元素进行拼接&lt;/p&gt;
&lt;p&gt;乘法：将一个列表中的元素重复若干次&lt;/p&gt;
&lt;h3 id=&#34;嵌套列表多维列表&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#嵌套列表多维列表&#34;&gt;#&lt;/a&gt; 嵌套列表 (多维列表)&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;[[x,y,z],[a,b,c],[e,f,d]]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;相同的列表元素，python 也会开辟不同的空间来存储列表元素，因为列表是可变的&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;A  &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    A&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;深拷贝与浅拷贝&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#深拷贝与浅拷贝&#34;&gt;#&lt;/a&gt; 深拷贝与浅拷贝&lt;/h3&gt;
&lt;p&gt;变量的赋值 仅仅是将存储内容的地址引用到变量上&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;a &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
b &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; a 
a&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;
b &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; ? &lt;span class=&#34;token comment&#34;&gt;#b会等于[1,1,3] 并不是将数据复制了过去,而是将这一团数据的引用给了b,本质上还是同一个存储数据的地方&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;浅拷贝&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#浅拷贝&#34;&gt;#&lt;/a&gt; 浅拷贝&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Name.copy()&lt;/code&gt; : 列表的 copy 方法&lt;/li&gt;
&lt;li&gt;先导入 copy 模块  &lt;code&gt;y = copy.copy(x)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;应用列表切片&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;深拷贝&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#深拷贝&#34;&gt;#&lt;/a&gt; 深拷贝&lt;/h4&gt;
&lt;p&gt;浅拷贝只会拷贝最外层，拷贝内层数据的时候也只会拷贝引用，所以对于嵌套列表等等就需要深拷贝来进行拷贝&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;先导入 copy 模块  &lt;code&gt;y = copy.deepcopy(x)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;列表推导式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#列表推导式&#34;&gt;#&lt;/a&gt; 列表推导式&lt;/h3&gt;
&lt;p&gt;列表推导式的效率比循环语句一般会快上一倍左右&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;[expression for target in iterable]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[expresssion for target in iterable if condition]&lt;/code&gt;  先执行 for 语句，然后进行 if 语句的判断，最后进行插入&lt;/li&gt;
&lt;li&gt;列表推导式的嵌套: &lt;code&gt;[expression for target in iterable1 for target in iterable2 for target in iterable3]&lt;/code&gt;  嵌套中放在前面的是外层前套，从前往后依次嵌套&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;ord()&lt;/code&gt; : 内置函数，将字符转化为对应的编码&lt;/p&gt;
&lt;h2 id=&#34;元组&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#元组&#34;&gt;#&lt;/a&gt; 元组&lt;/h2&gt;
&lt;p&gt;元组拥有列表的性质，且元组不可修改、&lt;/p&gt;
&lt;p&gt;元组中的元素不可变，但是元组的元素如果是可变的列表，我们可以修改列表中的值&lt;/p&gt;
&lt;p&gt;&lt;code&gt;a = (1,2,3,4,5)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;没有元组推导式的存在&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;520&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#此时x是int变量&lt;/span&gt;
x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;520&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#此时x是只有一个元素的元组&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;打包和解包&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#打包和解包&#34;&gt;#&lt;/a&gt; 打包和解包&lt;/h3&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;code &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;sam&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;zgg&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#打包&lt;/span&gt;
x&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;y&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;z &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; code &lt;span class=&#34;token comment&#34;&gt;#解包 左侧变量数量必须等于右侧的元素数量&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;字符串-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#字符串-2&#34;&gt;#&lt;/a&gt; 字符串&lt;/h2&gt;
&lt;p&gt;字符串是不可改变的&lt;/p&gt;
&lt;h3 id=&#34;字符串方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#字符串方法&#34;&gt;#&lt;/a&gt; 字符串方法&lt;/h3&gt;
&lt;p&gt;因为字符串不可变，所以下列方法的实质是按照规则生成新的字符串再重新赋值&lt;/p&gt;
&lt;h4 id=&#34;更改大小写字母&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#更改大小写字母&#34;&gt;#&lt;/a&gt; 更改大小写字母&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;x.capitalize()&lt;/code&gt; : 首字母变成大写，其他变成小写&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x.casefold()&lt;/code&gt; : 将所有字符串变成小写，可以处理多语言&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x.title()&lt;/code&gt; : 字符串中&lt;strong&gt;每个单词&lt;/strong&gt;的首字母变成大写，其他的变成小写&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x.swapcase()&lt;/code&gt; : 进行大小写字母的翻转&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x.upper()&lt;/code&gt; : 所有字母变成大写&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x.lower()&lt;/code&gt; : 所有字母变成小写，只能处理英语&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;左中右对齐&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#左中右对齐&#34;&gt;#&lt;/a&gt; 左中右对齐&lt;/h4&gt;
&lt;p&gt;拥有参数 &lt;code&gt;width&lt;/code&gt;  代表填充过后的字符串长度，如果该参数小于原字符串的长度，就会输出原字符串&lt;/p&gt;
&lt;p&gt;&lt;code&gt;fillchar&lt;/code&gt; : 填充字符&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;x.center(width,fillchar):&lt;/code&gt;  实现居中，默认用空格填充&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x.ljust(width,fillchar)&lt;/code&gt; : 实现左对齐，默认用空格填充&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x.rjust(width,fillchar)&lt;/code&gt; : 实现右对齐，默认用空格填充&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x.zfill(width,fillchar)&lt;/code&gt; : 实现左对齐，默认用 &lt;code&gt;0&lt;/code&gt;  填充&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;查找-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#查找-2&#34;&gt;#&lt;/a&gt; 查找&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;x.count(sub[],start,end)&lt;/code&gt; : 在 x 字符串的 start~end 段查找 sub 字符串出现的次数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x.find(sub[],start,end)&lt;/code&gt; : 查找目标字符串在 x 字符串的 start 到 end 段的下标索引值，&lt;strong&gt; 从左到右查找&lt;/strong&gt;，找不到目标字符串返回 **-1**&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x.rfind(sub[],start,end)&lt;/code&gt; : 查找目标字符串在 x 字符串的 start 到 end 段的下标索引值，&lt;strong&gt; 从右到左查找&lt;/strong&gt;，找不到目标字符串返回 **-1**&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x.index(sub[],start,end)&lt;/code&gt; ：与 &lt;code&gt;find&lt;/code&gt;  的用法相同，找不到目标字符串报错&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x.rindex(sub[],start,end)&lt;/code&gt; : 与 &lt;code&gt;rfind&lt;/code&gt;  的用法相同，找不到目标字符串报错&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;替换&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#替换&#34;&gt;#&lt;/a&gt; 替换&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;x.expandtabs(X)&lt;/code&gt; : 将字符串中的 &lt;code&gt;tab&lt;/code&gt;  替换成&lt;strong&gt;空格&lt;/strong&gt;，X 为指定的空格数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x.replace(old,new,count = -1)&lt;/code&gt; : 将 &lt;code&gt;old&lt;/code&gt;  字符串替换成 &lt;code&gt;new&lt;/code&gt;  字符串 count 为替换次数 默认为无限次&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x.translate(table)&lt;/code&gt; : 按照转换表格进行替换&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x.str.maketrans(待转换字符串,目标字符串,需要忽略的字符串)&lt;/code&gt; : 生成转换表格 &lt;code&gt;table&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;判断&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#判断&#34;&gt;#&lt;/a&gt; 判断&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;x.startswith(prefix[],start,end)&lt;/code&gt; : 判断 prefix 字符串是否出现在目标字符串 start~end 的起始位置，可以通过&lt;strong&gt;元组&lt;/strong&gt;传入多个待匹配字符串，只要有一个成功返回 True&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x.endswith(suffix[],start,end)&lt;/code&gt; : 判断 prefix 字符串是否出现在目标字符串 start~end 的终止位置，可以通过&lt;strong&gt;元组&lt;/strong&gt;传入多个待匹配字符串，只要有一个成功返回 True&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x.istitle()&lt;/code&gt;  判断字符串中是否每个单词的首字母都大写&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x.isupper()&lt;/code&gt; : 判断字符串中是否每个字母都大写&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x.islower()&lt;/code&gt; : 判断字符串中是否每个字母都小写&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x.isalpha()&lt;/code&gt; : 判断该字符串是否全部由字母构成，&lt;strong&gt; 空格不算字母&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x.isspace()&lt;/code&gt; : 判断该字符串是否是&lt;strong&gt;空白字符串&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x.isprintable()&lt;/code&gt; : 判断字符串中是否都是可打印的，&lt;strong&gt; 转义字符是不可打印的&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x.isdecimal()&lt;/code&gt; ：判断是否为数字，必须是纯数字&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x.isdigit()&lt;/code&gt; ：判断是否为数字，可以是 2² 这种计算式&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x.isnumeric()&lt;/code&gt; ：判断是否为数字，支持多种语言的数字&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x.isalnum()&lt;/code&gt; : &lt;code&gt;x.isalpha()&lt;/code&gt; , &lt;code&gt;x.isdecimal()&lt;/code&gt; , &lt;code&gt;x.isdigit()&lt;/code&gt; , &lt;code&gt;x.isnumeric()&lt;/code&gt; , 四者有一个返回 True, 该函数就返回 True&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x.isidentifier()&lt;/code&gt; : 判断字符串是否为一个合法的 python 标识符&lt;/li&gt;
&lt;li&gt;keyword 模块中的 &lt;code&gt;iskeyword()&lt;/code&gt; : 判断该字符串是否为 python 的&lt;strong&gt;保留标志符&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;截取&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#截取&#34;&gt;#&lt;/a&gt; 截取&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;x.lstrip(chars =None)&lt;/code&gt; : 去除左侧的字符（默认为空格）, 逐一匹配字符串中的字符&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x.rstrip(chars =None)&lt;/code&gt; : 去除右侧的字符（默认为空格）, 逐一匹配字符串中的字符&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x.strip(chars =None)&lt;/code&gt; : 去除左右的字符（默认为空格）, 逐一匹配字符串中的字符&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x.removeprefix(prefix)&lt;/code&gt; : 指定删除前缀，匹配整个字符串而不是单个字符&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x.removesuffix(suffix)&lt;/code&gt; : 指定删除后缀，匹配整个字符串而不是单个字符&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;      zylzhuyilong&#34;&lt;/span&gt;
x&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;strip&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34; z&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#逐一匹配 答案为ylzhuyilong&lt;/span&gt;
x&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;strip&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;#默认为空格答案为zylzhuyilong&lt;/span&gt;
x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;www.wbaidu.com&#34;&lt;/span&gt;
x&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;removeprefix&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;www.&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#不逐一匹配字符,直接匹配字符串 答案为wbaidu.com&lt;/span&gt;
x&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;removesuffix&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;.com&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#同理 答案是www.wbaidu&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;拆分和拼接&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#拆分和拼接&#34;&gt;#&lt;/a&gt; 拆分和拼接&lt;/h4&gt;
&lt;h5 id=&#34;拆分&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#拆分&#34;&gt;#&lt;/a&gt; 拆分&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;x.partition(seq)&lt;/code&gt; : 将字符串指定字符为分割切割字符串 返回一个&lt;strong&gt;三元组&lt;/strong&gt;，从&lt;strong&gt;左到右&lt;/strong&gt;寻找指定字符，以第一个为准&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x.rpartition(seq)&lt;/code&gt; : 将字符串指定字符为分割切割字符串 返回一个&lt;strong&gt;三元组&lt;/strong&gt;，从&lt;strong&gt;右到左&lt;/strong&gt;寻找指定字符，以第一个为准&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x.split(seq = None,maxsplit = -1)&lt;/code&gt; : 以指定字符为分割进行拆分，以列表形式返回&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x.rsplit(seq = None,maxsplit = -1)&lt;/code&gt; : 与 &lt;code&gt;split&lt;/code&gt;  相同，为&lt;strong&gt;从右往左&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x.splitlines(keepend = False)&lt;/code&gt;  将字符串进行分行，以列表形式返回， &lt;code&gt;keepend&lt;/code&gt;  指定结果是否包含换行符&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;拼接&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#拼接&#34;&gt;#&lt;/a&gt; 拼接&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;join(iterable)&lt;/code&gt; : 用于字符串拼接， &lt;code&gt;join&lt;/code&gt;  方法拼接的效率大于 &lt;code&gt;+&lt;/code&gt;  拼接&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token string&#34;&gt;&#34;.&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;join&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;A&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;F&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;C&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#结果为A.F.C 可以使用列表也可以使用元组&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;格式化字符串&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#格式化字符串&#34;&gt;#&lt;/a&gt; 格式化字符串&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;{关键字索引:格式化选项}.format()&lt;/code&gt; : 在原字符串中使用 &lt;code&gt;{}&lt;/code&gt;  来表示替换部分，使用 &lt;code&gt;format&lt;/code&gt;  方法来替换&lt;/p&gt;
&lt;p&gt;格式化选项: &lt;code&gt;[[fill]align][sign][#][0][width][grouping_option][.precision][type]&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fill&lt;/code&gt; : 填充字符&lt;/li&gt;
&lt;li&gt;&lt;code&gt;align&lt;/code&gt; : 对齐方式&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sign&lt;/code&gt; : 前面添加的符号&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#&lt;/code&gt; ：在显示进制时，会在数前面追加一个前缀&lt;strong&gt; 0x&lt;/strong&gt; 类似的来提醒这是什么进制的数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0&lt;/code&gt; : 以 0 填充&lt;/li&gt;
&lt;li&gt;&lt;code&gt;width&lt;/code&gt; : 格式化宽度&lt;/li&gt;
&lt;li&gt;&lt;code&gt;grouping_option&lt;/code&gt; : 使用什么符号来做千位的分隔符 (逗号和下划线两个选项)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.precision&lt;/code&gt; : 精度&lt;/li&gt;
&lt;li&gt;&lt;code&gt;type&lt;/code&gt; : 以什么形式输出值&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;age &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;eval&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;你的年龄是&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
name &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;你的名字是&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;你的年龄是{},你的名字是{}&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;age&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;name&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;你的年龄是{1},你的名字是{0}&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;name&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;age&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;我叫{name},我爱{people}.format(name = &#34;&lt;/span&gt;wxl&lt;span class=&#34;token string&#34;&gt;&#34;,people = &#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&#34;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/jIyhAP&#34;&gt;&lt;img src=&#34;https://s1.ax1x.com/2022/07/18/jIyhAP.png&#34; alt=&#34;align.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/jIy4tf&#34;&gt;&lt;img src=&#34;https://s1.ax1x.com/2022/07/18/jIy4tf.png&#34; alt=&#34;sign.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/jIy5h8&#34;&gt;&lt;img src=&#34;https://s1.ax1x.com/2022/07/18/jIy5h8.png&#34; alt=&#34;精度&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/jIyT1g&#34;&gt;&lt;img src=&#34;https://s1.ax1x.com/2022/07/18/jIyT1g.png&#34; alt=&#34;type1&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/jIyqns&#34;&gt;&lt;img src=&#34;https://s1.ax1x.com/2022/07/18/jIyqns.png&#34; alt=&#34;type2.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token string&#34;&gt;&#34;{:^10}&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;250&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#输出为&#39;     250    &#39;&lt;/span&gt;
&lt;span class=&#34;token string&#34;&gt;&#34;{left:&amp;gt;10}{right:&amp;lt;10}&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;left &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;250&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;right &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;250&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#输出为 &#39;    250250     &#39;&lt;/span&gt;
&lt;span class=&#34;token string&#34;&gt;&#34;{:.2f}&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3.1415&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 显示结果为3.14&lt;/span&gt;
&lt;span class=&#34;token string&#34;&gt;&#34;{:.2g}&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3.1415&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 显示结果为3.1&lt;/span&gt;
&lt;span class=&#34;token string&#34;&gt;&#34;{:b}&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;80&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;   &lt;span class=&#34;token comment&#34;&gt;#结果以二进制输出为1010000&lt;/span&gt;
&lt;span class=&#34;token string&#34;&gt;&#34;{:.{prec}f}&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3.1415&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;prec &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#输出为3.14 更加地灵活&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;f-字符串&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#f-字符串&#34;&gt;#&lt;/a&gt; f - 字符串&lt;/h3&gt;
&lt;p&gt;python3.6 以上可以使用&lt;/p&gt;
&lt;p&gt;进一步简化了格式化字符串&lt;/p&gt;
&lt;p&gt;在字符串前面加上 f 或者 F 将 format 去掉，将 format 的数值放在:&lt;strong&gt; 左侧&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token string&#34;&gt;&#34;我今天{}岁了&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;age&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token string-interpolation&#34;&gt;&lt;span class=&#34;token string&#34;&gt;f&#34;我今天&lt;/span&gt;&lt;span class=&#34;token interpolation&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;age&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;岁了&#34;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token string&#34;&gt;&#34;{:.2f}&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3.1415&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token string-interpolation&#34;&gt;&lt;span class=&#34;token string&#34;&gt;f&#34;&lt;/span&gt;&lt;span class=&#34;token interpolation&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3.1415&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token format-spec&#34;&gt;.2f&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;序列&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#序列&#34;&gt;#&lt;/a&gt; 序列&lt;/h2&gt;
&lt;p&gt;列表，元组，字符串统称为&lt;strong&gt;序列&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;运用在序列中的运算符: &lt;code&gt;+&lt;/code&gt; ， &lt;code&gt;*&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;与序列相关的函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#与序列相关的函数&#34;&gt;#&lt;/a&gt; 与序列相关的函数&lt;/h3&gt;
&lt;h4 id=&#34;列表元组字符串相互转换&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#列表元组字符串相互转换&#34;&gt;#&lt;/a&gt; 列表元组字符串相互转换&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;list()&lt;/code&gt; : 将可迭代对象变为列表&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tuple()&lt;/code&gt; : 将可迭代对象变为元组&lt;/li&gt;
&lt;li&gt;&lt;code&gt;str()&lt;/code&gt; : 将可迭代对象变为字符串&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token builtin&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;sam&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;   &lt;span class=&#34;token comment&#34;&gt;#结果为[&#39;s&#39;,&#39;a&#39;,&#39;m&#39;]&lt;/span&gt;
&lt;span class=&#34;token builtin&#34;&gt;tuple&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;sam&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# (&#39;s&#39;,&#39;a&#39;,&#39;m&#39;)&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;minmax函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#minmax函数&#34;&gt;#&lt;/a&gt; min&amp;amp;max 函数&lt;/h4&gt;
&lt;p&gt;对比传入的参数返回最大最小值&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;min(可迭代对象,default = &#34;&#34;)&lt;/code&gt; : 当没有参数传入时，返回 default 也可以直接传入参数&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;len和sum&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#len和sum&#34;&gt;#&lt;/a&gt; len 和 sum&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;len()&lt;/code&gt; : 检测长度 有最大值限制&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sum(，start = )&lt;/code&gt; : 求和函数，start 可以传入初始值&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;sorted-reversed&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#sorted-reversed&#34;&gt;#&lt;/a&gt; sorted() &amp;amp; reversed()&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sorted(x，key,reverse)&lt;/code&gt; : 排序，返回的是一个全新的列表，.sort () 返回会改变原列表&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reversed()&lt;/code&gt; : 返回的是一个迭代器&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;t &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;a&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;ab&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;abcd&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;ab&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;token builtin&#34;&gt;sorted&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;t&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;key &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#比较的是len()函数的返回结果&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;all和any&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#all和any&#34;&gt;#&lt;/a&gt; all () 和 any ()&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;all()&lt;/code&gt; : 判断可迭代对象中是否&lt;u&gt;所有&lt;/u&gt;的值都为真&lt;/li&gt;
&lt;li&gt;&lt;code&gt;any()&lt;/code&gt; : 判断可迭代对象中是否存在&lt;u&gt;某个元素&lt;/u&gt;的值为真&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;enumerate&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#enumerate&#34;&gt;#&lt;/a&gt; enumerate()&lt;/h4&gt;
&lt;p&gt;返回一个枚举对象，将可迭代对象中的每个元素及从 0 开始的序号共同构成一个二元组的列表&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;seasons &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;spring&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;summer&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Fall&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Winter&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;token builtin&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;enumerate&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;seasons&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#返回的结果为 [(0, &#39;spring&#39;), (1, &#39;summer&#39;), (2, &#39;Fall&#39;), (3, &#39;Winter&#39;)]&lt;/span&gt;
&lt;span class=&#34;token builtin&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;enumerate&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;seasons&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#返回的结果为[(10, &#39;spring&#39;), (11, &#39;summer&#39;), (12, &#39;Fall&#39;), (13, &#39;Winter&#39;)]&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;zip&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#zip&#34;&gt;#&lt;/a&gt; zip()&lt;/h4&gt;
&lt;p&gt;创建一个聚合多个可迭代对象的&lt;strong&gt;迭代器&lt;/strong&gt;，它会将作为参数传入的每个可迭代对象的每个元素依次组合成元组，即第 i 个元组包含来自每个参数的第 i 个元素&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
y &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;token builtin&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;zip&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;y&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# 返回的结果是[(1,4),(2,5),(3,6)]&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;当传入的列表长度不一致时，zip 函数以最短的列表长度为准&lt;/p&gt;
&lt;h4 id=&#34;map&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#map&#34;&gt;#&lt;/a&gt; map()&lt;/h4&gt;
&lt;p&gt;根据提供的函数对指定的可迭代对象的每个元素进行运算，并将返回运算结果的&lt;strong&gt;迭代器&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token builtin&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;ord&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Sam&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;#会将sam字符串(可迭代对象)中的每个字符运用ord()函数转换成编码值&lt;/span&gt;
&lt;span class=&#34;token builtin&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;pow&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#结果为[32,9,1000]&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;#因为pow()函数需要两个参数&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;#传入的可迭代对象长度不一致时,按最短的为准&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;filter过滤器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#filter过滤器&#34;&gt;#&lt;/a&gt; filter () 过滤器&lt;/h4&gt;
&lt;p&gt;根据提供的函数对指定的可迭代对象的每个元素进行运算，并将运算结果为真的元素，以&lt;strong&gt;迭代器&lt;/strong&gt;的形式返回&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token builtin&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;islower&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Sam&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#islower判断是否为小写字母,返回为真的结果 为[&#39;a&#39;,&#39;m]&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;iter&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#iter&#34;&gt;#&lt;/a&gt; iter()&lt;/h4&gt;
&lt;p&gt;将可迭代函数转化成迭代器&lt;/p&gt;
&lt;h4 id=&#34;nextx&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#nextx&#34;&gt;#&lt;/a&gt; next(x,&#34;    &#34;)&lt;/h4&gt;
&lt;p&gt;逐渐将迭代器中的元素提取出来，可以传入第二个参数，当迭代器中的元素被提取完了之后将会返回第二个参数字符串&lt;/p&gt;
&lt;h3 id=&#34;迭代器与可迭代对象&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#迭代器与可迭代对象&#34;&gt;#&lt;/a&gt; 迭代器与可迭代对象&lt;/h3&gt;
&lt;p&gt;迭代器是一次性的，可迭代对象可以重复使用&lt;/p&gt;
&lt;h2 id=&#34;字典&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#字典&#34;&gt;#&lt;/a&gt; 字典&lt;/h2&gt;
&lt;p&gt;映射类型数据的获取上，字典的数据远远快于列表&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;吕布&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;口口布&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;关羽&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;关习习&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
x&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;吕布&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#得到&#34;口口布&#34;结果&lt;/span&gt;
x&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;abc&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;AA&#34;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;#之后x就变成{&#34;吕布&#34;:&#34;口口布&#34;,&#34;关羽&#34;:&#34;关习习&#34;,&#34;abc&#34;:&#34;AA&#34;}&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;创建字典的方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#创建字典的方法&#34;&gt;#&lt;/a&gt; 创建字典的方法&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;{x:y} 直接创建&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;dict () 函数创建&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;y &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;dict&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;吕布&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;口口布&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;#需要注意的是 键值对的键不能加引号&lt;/span&gt;
y &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;dict&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;吕布&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;口口布&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;关羽&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;关习习&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#两者可以混合使用&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用 zip () 和 dict () 函数结合&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;增&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#增&#34;&gt;#&lt;/a&gt; 增&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;fromkeys(iterable[,values])&lt;/code&gt;  : 创建一个所有键的值都相同的字典&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;a &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;dict&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;fromkeys&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Sam&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;666&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#得到的结果为{&#39;s&#39;: 666, &#39;a&#39;: 666, &#39;m&#39;: 666}&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;删&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#删&#34;&gt;#&lt;/a&gt; 删&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Name.pop(,default = )&lt;/code&gt; : 返回值为键所对应的值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Name.popitem()&lt;/code&gt; : 删除最后一个加入字典的键值对&lt;/li&gt;
&lt;li&gt;&lt;code&gt;del()&lt;/code&gt;  关键字:&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Name.clear()&lt;/code&gt; : 清除整个字典&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;s&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;666&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;a&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;666&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;m&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;666&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
x&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;pop&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;s&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#&#39;s&#39;键被删除并返回&#39;s&#39;键的值666&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;#当没有该键时返回default参数 default没有指定时报错&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;del&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;s&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#也能删除x中的键&#39;s&#39;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;改&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#改&#34;&gt;#&lt;/a&gt; 改&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;直接修改&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Name.update()&lt;/code&gt; : 同时处理多个函数&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;a &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;dict&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;fromkeys&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;sam&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;666&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
a&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;update&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;s&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;111&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;a&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#返回{&#39;s&#39;: 111, &#39;a&#39;: 123, &#39;m&#39;: 666}&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;#同样 键不能加引号&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;查&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#查&#34;&gt;#&lt;/a&gt; 查&lt;/h3&gt;
&lt;p&gt;1. 直接查找&lt;/p&gt;
&lt;p&gt;2. &lt;code&gt;Name.get(,default)&lt;/code&gt; : 与第一种方法相比可以给 default 赋值，这样当值不存在时不会报错，会返回 default&lt;/p&gt;
&lt;p&gt;3. &lt;code&gt;Name.setdefault(x,y)&lt;/code&gt; : 查找 x 键，当 x 不存在时，将 x 作为键，y 作为值加入字典并且返回 y&lt;/p&gt;
&lt;p&gt;4. &lt;code&gt;items(),keys(),values()&lt;/code&gt; : 三个方法，分别获取键值对，键，值的&lt;strong&gt;视图对象&lt;/strong&gt; (当字典发生改变时，视图对象也会跟着改变)&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;吕布&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;口口布&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;关羽&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;关习习&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;abc&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;AA&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
a &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; x&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;items&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;#dict_items([(&#39;吕布&#39;, &#39;口口布&#39;), (&#39;关羽&#39;, &#39;关习习&#39;), (&#39;abc&#39;, &#39;AA&#39;)])&lt;/span&gt;
b &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; x&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;keys&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;#dict_keys([&#39;吕布&#39;, &#39;关羽&#39;, &#39;abc&#39;])&lt;/span&gt;
c &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; x&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;values&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#dict_values([&#39;口口布&#39;, &#39;关习习&#39;, &#39;AA&#39;])&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;5. &lt;code&gt;Name.copy()&lt;/code&gt; : 浅拷贝&lt;/p&gt;
&lt;h3 id=&#34;嵌套&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#嵌套&#34;&gt;#&lt;/a&gt; 嵌套&lt;/h3&gt;
&lt;p&gt;与列表的嵌套相似&lt;/p&gt;
&lt;h3 id=&#34;字典推导式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#字典推导式&#34;&gt;#&lt;/a&gt; 字典推导式&lt;/h3&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;s&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;666&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;a&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;m&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
y &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;v&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;k &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; k&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;v &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; x&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;items&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;#输出的y为{666: &#39;s&#39;, 1: &#39;a&#39;, 2: &#39;m&#39;}&lt;/span&gt;
y &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;v&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;k &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; k&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;v &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; x&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;items&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; v&lt;span class=&#34;token operator&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;#输入的y为{666: &#39;s&#39;}&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;集合&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#集合&#34;&gt;#&lt;/a&gt; 集合&lt;/h2&gt;
&lt;h3 id=&#34;三种方法创建集合&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#三种方法创建集合&#34;&gt;#&lt;/a&gt; 三种方法创建集合&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;{}&lt;/code&gt;  创建&lt;/li&gt;
&lt;li&gt;集合推导式  &lt;code&gt;{i for i in &#34;Sam&#34;}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;类型构造器 &lt;code&gt;set()&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;集合是无序的  无法使用下标索引进行访问 使用 in 来判断是否在集合中&lt;/p&gt;
&lt;p&gt;可以使用集合的唯一性来去重和检测重复值&lt;/p&gt;
&lt;h3 id=&#34;集合方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#集合方法&#34;&gt;#&lt;/a&gt; 集合方法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Name.copy()&lt;/code&gt; : 浅拷贝&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Name.isdisjoint(可迭代对象)&lt;/code&gt; : 检测集合是否没有交集&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a.issubset(b)&lt;/code&gt; :a 集合是否是 b 集合的子集&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a.issuperset(b)&lt;/code&gt; ：b 集合是否是 a 集合的子集&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a.union(b)&lt;/code&gt; : 返回 a,b 的并集&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a.intersection(b)&lt;/code&gt; : 返回 a,b 的交集&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a.difference(b)&lt;/code&gt; : 返回属于 a 集合不属于 b 集合的元素&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上述方法可以多参数，同时也可以使用运算符号来进行比较和计算 (&amp;lt;&amp;lt;=&amp;gt; &amp;gt;= | &amp;amp; -  ^(对称差集))&lt;/p&gt;
&lt;p&gt;方法可以直接传入可迭代对象，而运算符只能进行集合的比较&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;a.symmetric_difference()&lt;/code&gt; : 返回 a,b 的并集减去 a,b 的交集&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Name.update(可迭代对象)&lt;/code&gt; : 往集合中添加元素&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Name.intersection_update()&lt;/code&gt; : 先求交集在更新，同理 diffrence_update 等相同&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Name.add()&lt;/code&gt; : 往集合中传入元素，此时如果传入的是可迭代对象 例如字符串，整个字符串会被看成一个元素&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Name.remove() Name.discard()&lt;/code&gt; : 从集合中删除元素，如果元素不存在 remove 方法会报错 discard () 方法会&lt;strong&gt;静默处理&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Name.pop()&lt;/code&gt; : 随机获取集合中的一个元素&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Name.clear()&lt;/code&gt; : 清楚集合&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;可变和不可变&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#可变和不可变&#34;&gt;#&lt;/a&gt; 可变和不可变&lt;/h3&gt;
&lt;p&gt;set () 创建可变的集合 frozenset () 创建不可变的集合&lt;/p&gt;
&lt;h3 id=&#34;可哈希&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#可哈希&#34;&gt;#&lt;/a&gt; 可哈希&lt;/h3&gt;
&lt;p&gt;通过 hash () 获取哈希值&lt;/p&gt;
&lt;p&gt;python 中大多数不可变对象都是可哈希的，可变对象都是不可哈希的&lt;/p&gt;
&lt;p&gt;只有可哈希的对象才能作为字典的键和集合的元素&lt;/p&gt;
&lt;p&gt;所以为了实现集合的嵌套 只能使用 frozenset () 生成的不可变集合 才能实现集合的嵌套&lt;/p&gt;
&lt;h3 id=&#34;额外&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#额外&#34;&gt;#&lt;/a&gt; 额外&lt;/h3&gt;
&lt;p&gt;实现查找的时候可以将列表转换成集合，会节约大量的时间，但是同时也会消耗掉大量的空间&lt;/p&gt;
&lt;h2 id=&#34;函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#函数&#34;&gt;#&lt;/a&gt; 函数&lt;/h2&gt;
&lt;p&gt;def Name(): / sth&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;形式参数：占位置&lt;/li&gt;
&lt;li&gt;实际参数：传递数据&lt;/li&gt;
&lt;li&gt;返回值：通过 &lt;code&gt;return&lt;/code&gt;  返回函数的结果 没有 return 语句 返回 None 值&lt;/li&gt;
&lt;li&gt;位置参数：位置固定的参数&lt;/li&gt;
&lt;li&gt;关键字参数：通过关键字传递 参数 = “”  &lt;strong&gt;位 0 置参数只能在关键字参数之前&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;python 允许函数在定义时给参数指定默认值，如果没有传递参数，函数将会使用默认值，默认参数需要放在形参的最后&lt;/p&gt;
&lt;p&gt;形参中可以使用 &lt;code&gt;/&lt;/code&gt; ， &lt;code&gt;/&lt;/code&gt;  左侧的参数不能使用关键字传递， &lt;code&gt;*&lt;/code&gt;  的右侧只能使用关键字参数&lt;/p&gt;
&lt;h3 id=&#34;收集参数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#收集参数&#34;&gt;#&lt;/a&gt; 收集参数&lt;/h3&gt;
&lt;p&gt;在参数前面加入 &lt;code&gt;*&lt;/code&gt; , 表示不确定参数的数量，这种参数叫收集参数&lt;/p&gt;
&lt;p&gt;收集参数，实际是将参数打包成元组传入函数，当返回多个返回值时，返回的也是元组&lt;/p&gt;
&lt;p&gt;函数中除了收集参数，如果还要传入其他参数，应该使用关键字参数&lt;/p&gt;
&lt;p&gt;在参数前面加入 &lt;code&gt;**&lt;/code&gt; , 函数会将参数打包成字典传入函数&lt;/p&gt;
&lt;h3 id=&#34;作用域&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#作用域&#34;&gt;#&lt;/a&gt; 作用域&lt;/h3&gt;
&lt;p&gt;局部作用域与全局作用域，局部变量与全局变量&lt;/p&gt;
&lt;p&gt;全局变量可以在函数内部访问，但是不会改变&lt;/p&gt;
&lt;h4 id=&#34;global语句&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#global语句&#34;&gt;#&lt;/a&gt; global 语句&lt;/h4&gt;
&lt;p&gt;在函数内部使用 global 定义，表示函数内部的变量就是全部变量&lt;/p&gt;
&lt;h4 id=&#34;嵌套函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#嵌套函数&#34;&gt;#&lt;/a&gt; 嵌套函数&lt;/h4&gt;
&lt;p&gt;外部无法调用嵌套函数，只有在函数内部才能调用嵌套函数&lt;/p&gt;
&lt;h4 id=&#34;nonlocal语句&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#nonlocal语句&#34;&gt;#&lt;/a&gt; nonlocal 语句&lt;/h4&gt;
&lt;p&gt;使用 nonlocal 语句定义变量，可以在嵌套函数内部，修改外部变量的值&lt;/p&gt;
&lt;h4 id=&#34;legb规则&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#legb规则&#34;&gt;#&lt;/a&gt; LEGB 规则&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Local: 局部作用域&lt;/li&gt;
&lt;li&gt;Enclosed: 嵌套函数的外层函数作用域&lt;/li&gt;
&lt;li&gt;Global: 全局作用域&lt;/li&gt;
&lt;li&gt;Building: 内置作用域&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;局部作用域与全局作用域发生冲突，python 会优先使用局部作用域&lt;/p&gt;
&lt;p&gt;嵌套函数发生 局部作用域会覆盖外层函数作用域&lt;/p&gt;
&lt;h3 id=&#34;闭包&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#闭包&#34;&gt;#&lt;/a&gt; 闭包&lt;/h3&gt;
&lt;p&gt;利用嵌套函数的外层作用域会被保存下来，将数据保存在外层函数的参数或者变量中，将内层函数作为返回值返回，就能从外部简介调用内层函数&lt;/p&gt;
&lt;p&gt;将函数作为返回值返回时，只需要给出函数名称即可&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;exp_of&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;exp&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
     &lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;exp_in&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;number&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;number &lt;span class=&#34;token operator&#34;&gt;**&lt;/span&gt; exp&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
     &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; exp_in
&lt;span class=&#34;token comment&#34;&gt;#&amp;gt;&amp;gt;&amp;gt; move1 = exp_of(2)&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;#&amp;gt;&amp;gt;&amp;gt; move2 = exp_of(3)&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;#&amp;gt;&amp;gt;&amp;gt; move1(3)&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;#9&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;#&amp;gt;&amp;gt;&amp;gt; move2(3)&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;#27&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;装饰器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#装饰器&#34;&gt;#&lt;/a&gt; 装饰器&lt;/h3&gt;
&lt;p&gt;函数可以作为参数传给另外一个函数&lt;/p&gt;
&lt;p&gt;@装饰器 ID  隔行 函数&lt;/p&gt;
&lt;p&gt;表示并不是调用函数 而是将函数作为参数传入装饰器&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt; &lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;time_master&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;func&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; call_fun&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
             start &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; time&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;time&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
    		func&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
    		end &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; time&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;time&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
    		&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string-interpolation&#34;&gt;&lt;span class=&#34;token string&#34;&gt;f&#34;一共耗费了&lt;/span&gt;&lt;span class=&#34;token interpolation&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;end&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;start&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token format-spec&#34;&gt;.2f&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;秒&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
         &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; call_fun
    
 &lt;span class=&#34;token comment&#34;&gt;#装饰器&lt;/span&gt;
&lt;span class=&#34;token decorator annotation punctuation&#34;&gt;@time_master&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;myfunc&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;开始调用函数&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
    
&lt;span class=&#34;token comment&#34;&gt;#装饰器本质 &lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;myfunc&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;开始调用函数&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
myfunc &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; time_master&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;myfunc&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

myfunc&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;同时使用多个装饰器时，从函数头上距离函数最近的开始运行，依次往上运行&lt;/p&gt;
&lt;h3 id=&#34;lambda表达式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#lambda表达式&#34;&gt;#&lt;/a&gt; lambda 表达式&lt;/h3&gt;
&lt;p&gt;lambda arg1,arg2 … argN : expression&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;squareX&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; x &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; x
squareY &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;lambda&lt;/span&gt; y &lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; y &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; y&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;生成器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#生成器&#34;&gt;#&lt;/a&gt; 生成器&lt;/h3&gt;
&lt;p&gt;使用 yield 表达式来代替 return 语句&lt;/p&gt;
&lt;p&gt;生成器即每次在调用时，执行到 yield 时，暂停并保存状态，返回一个值，下一次调用则从下一个语句开始执行&lt;/p&gt;
&lt;p&gt;可以理解为生成器是函数中 field 的所有返回值所组成的一个连续数据，但是只能一个一个查看且无法使用下标索引 (可能不准确)&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;counter&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
     i &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;
     &lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
             &lt;span class=&#34;token keyword&#34;&gt;yield&lt;/span&gt; i
             i&lt;span class=&#34;token operator&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;生成器表达式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#生成器表达式&#34;&gt;#&lt;/a&gt; 生成器表达式&lt;/h4&gt;
&lt;p&gt;(i ** 2 for i in range())&lt;/p&gt;
&lt;h3 id=&#34;递归&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#递归&#34;&gt;#&lt;/a&gt; 递归&lt;/h3&gt;
&lt;p&gt;利用函数自己可以调用自身&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;facRecur&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;n&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
	&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; n &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
		&lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;
	&lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
		&lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; n &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; facRecur&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;n&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;永久存储&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#永久存储&#34;&gt;#&lt;/a&gt; 永久存储&lt;/h2&gt;
&lt;h3 id=&#34;创建文件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#创建文件&#34;&gt;#&lt;/a&gt; 创建文件&lt;/h3&gt;
&lt;p&gt;f = open (“文件路径和文件名”,“打开的模式”)   返回值为一个文件对象&lt;/p&gt;
&lt;p&gt;f.write (“字符串”): 将字符串写入文件，返回的是写入的数量&lt;/p&gt;
&lt;p&gt;f.writeless (&#34;&#34;): 将字符串写入文件，不会自动添加换行符，且不会返回写入的数量&lt;/p&gt;
&lt;p&gt;文件内部具有文件指针，当文件不断被读取时，文件指针不断后移，直到末尾的 EOF&lt;/p&gt;
&lt;p&gt;f.tell (): 返回文件指针的位置&lt;/p&gt;
&lt;p&gt;f.seek (位置)：移动文件指针的位置&lt;/p&gt;
&lt;p&gt;f.read (): 读取文件&lt;/p&gt;
&lt;p&gt;f.flush (): 将缓存区内的数据写入文件&lt;/p&gt;
&lt;p&gt;f.truncate (pos): 将文件对象截取到 pos 位置，如果没有 pos 值则截取到文件指针当前指定的位置&lt;/p&gt;
&lt;h3 id=&#34;路径处理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#路径处理&#34;&gt;#&lt;/a&gt; 路径处理&lt;/h3&gt;
&lt;h2 id=&#34;类和对象&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#类和对象&#34;&gt;#&lt;/a&gt; 类和对象&lt;/h2&gt;
</content>
        <category term="python" />
        <updated>2022-07-09T16:00:00.000Z</updated>
    </entry>
</feed>
