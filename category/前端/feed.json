{
    "version": "https://jsonfeed.org/version/1",
    "title": "S1m • All posts by \"前端\" category",
    "description": "博客记录个人学习笔记,处于不断完善中",
    "home_page_url": "https://github.com/YogMas/YogMas.github.io",
    "items": [
        {
            "id": "https://github.com/YogMas/YogMas.github.io/2022/09/10/vue/",
            "url": "https://github.com/YogMas/YogMas.github.io/2022/09/10/vue/",
            "title": "vue",
            "date_published": "2022-09-09T16:00:00.000Z",
            "content_html": "<h1 id=\"vue\"><a class=\"markdownIt-Anchor\" href=\"#vue\">#</a> Vue</h1>\n<h2 id=\"vue2\"><a class=\"markdownIt-Anchor\" href=\"#vue2\">#</a> Vue2</h2>\n<h3 id=\"vue核心\"><a class=\"markdownIt-Anchor\" href=\"#vue核心\">#</a> Vue 核心</h3>\n<h4 id=\"初识vue\"><a class=\"markdownIt-Anchor\" href=\"#初识vue\">#</a> 初识 Vue</h4>\n<p>Vue 通过创造一个<strong> Vue 实例</strong>来进行工作，其中需要传入一个<strong>配置对象</strong></p>\n<ul>\n<li><code>el</code> : 表示 Vue 实例为哪一个<strong>容器</strong>服务</li>\n<li><code>data</code> : 存储数据供 el 中的容器使用</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>     <span class=\"token comment\">//创建一个Vue实例  传入配置对象</span>\n    el<span class=\"token operator\">:</span> <span class=\"token string\">'#root'</span><span class=\"token punctuation\">,</span>    <span class=\"token comment\">//Vue为哪个容器服务  这里为ID为root的容器服务</span>\n    data<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        name<span class=\"token operator\">:</span> <span class=\"token string\">'s1m'</span><span class=\"token punctuation\">,</span>    <span class=\"token comment\">//存储的数据</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>容器中的代码仍然符合 html 规范，只不过引入了一些特殊的 Vue 语法</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span> <span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span> <span class=\"token punctuation\">\"</span>root<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n           \t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span>\n                hello {{name}}  <span class=\"token comment\">&lt;!-- 此时就去调用了Vue中name数据--&gt;</span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">&gt;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li><code>{{}}`内的内容并不是只能写Vue实例中存在的数据,可以写**js表达式**(表达式:一个表达式会产生一个值,可以放在任何一个需要值的地方)\n- 一个容器只能由一个实例接管  必须**一对一**,真实开发中只有一个Vue实例,配合着Vue中的组件进行使用\n\n#### 模板语法\n\n##### 插值语法\n\n`{{}}</code> : 用在<strong>标签体</strong>中，也就是放在标签内，用于读取 data 中的内容，会将其内的内容转化成<strong> js 表达式</strong></li>\n</ul>\n<h5 id=\"指令语法\"><a class=\"markdownIt-Anchor\" href=\"#指令语法\">#</a> 指令语法</h5>\n<p>用于解析<strong>标签</strong> 属性 内容 绑定事件等等</p>\n<p>Vue 中的指令语法 一般都是 <code>v-xxx:</code></p>\n<h4 id=\"数据绑定\"><a class=\"markdownIt-Anchor\" href=\"#数据绑定\">#</a> 数据绑定</h4>\n<ul>\n<li>单向数据绑定:  <code>v-bind:</code> Vue 实例中的数据发生改变，页面中的数据也发生改变，但是发过来不改变</li>\n<li>双向数据绑定: <code>v-model:</code>  页面中的数据和 Vue 实例中的数据双向绑定，一个改变另一个就发生改变</li>\n</ul>\n<p><u><strong>并不是所有支持单向数据绑定的就能双向绑定</strong></u></p>\n<p><code>v-model</code>  只能应用在<strong>表单类</strong>元素上面，即有 <code>value</code>  属性，</p>\n<p>显然 <code>v-model</code>  是用来与用户产生交互的，不是表单类元素，无法捕获到用户的输入，根本没有必要进行双向绑定</p>\n<h5 id=\"简写\"><a class=\"markdownIt-Anchor\" href=\"#简写\">#</a> 简写</h5>\n<p><code>v-bind:</code>  可以<strong>简写</strong>为 <code>:</code></p>\n<p><code>v-model:value</code>  可以<strong>简写</strong>为 <code>v-model</code>  因为 <code>v-model</code>  本来就是对 <code>value</code>  属性进行捕获</p>\n<h4 id=\"el和data的两种写法\"><a class=\"markdownIt-Anchor\" href=\"#el和data的两种写法\">#</a> el 和 data 的两种写法</h4>\n<h5 id=\"el的写法\"><a class=\"markdownIt-Anchor\" href=\"#el的写法\">#</a> el 的写法</h5>\n<ol>\n<li>在初始化 Vue 实例中传入配置化对象，配置化对象中包含 <code>el:''</code>  来指定挂载对象</li>\n<li>通过对 Vue 实例进行挂载</li>\n</ol>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//第一种写法</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    el<span class=\"token operator\">:</span><span class=\"token string\">\"#root\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> \n\n<span class=\"token comment\">//第二种写法</span>\n<span class=\"token keyword\">const</span> v <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv<span class=\"token punctuation\">.</span><span class=\"token function\">$mount</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#root'</span><span class=\"token punctuation\">)</span>进行挂载<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"data的写法\"><a class=\"markdownIt-Anchor\" href=\"#data的写法\">#</a> data 的写法</h5>\n<ol>\n<li>对象式：通过 <code>data:{}</code></li>\n<li>函数式: <code>data:function() {return {}}</code>  通过函数的返回值返回数据</li>\n</ol>\n<p>写项目组件时，必须得使用函数式</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//第一种写法 对象式</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//对象式</span>\n    data<span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token punctuation\">}</span>\n    \n    \n    <span class=\"token comment\">//函数式</span>\n    <span class=\"token function-variable function\">data</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//此处的this是Vue对象</span>\n    <span class=\"token comment\">//此处的函数不能使用箭头函数 因为箭头函数没有自己的this 他会往外找 然后找到window全局对象   所以此处只能写成普通函数</span>\n    \t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token comment\">//数据  </span>\n        <span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">//在对象里面写函数 一般会写成这种简写形式</span>\n\t<span class=\"token function\">data</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        \n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><u><strong>由 Vue 所管理的函数，一定不要写成箭头函数，一旦写成箭头函数，this 就不再是 Vue 实例了，就变成 window 全局对象了</strong></u></p>\n<h4 id=\"mvvm模型\"><a class=\"markdownIt-Anchor\" href=\"#mvvm模型\">#</a> MVVM 模型</h4>\n<p><strong>Vue 设计受 MVVM 模型的启发</strong></p>\n<ol>\n<li>M: 模型 (Model): 对应 data 中的数据</li>\n<li>V: 视图 (View): 模板</li>\n<li>VM: 视图模型 (ViewModel): Vue 实例对象</li>\n</ol>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/C0DE41AAD7ED441C2C288D4E7A7AA07E.png\" alt=\"img\"></p>\n<p>将 Dom 结构和数据进行链接</p>\n<p>Vue 中通常使用<strong> vm</strong> 来作为 Vue 实例的名称</p>\n<p>插值语法可以获取到所有<strong> VM 中的数据</strong> (data 数据也在 VM 中)</p>\n<h4 id=\"数据代理\"><a class=\"markdownIt-Anchor\" href=\"#数据代理\">#</a> 数据代理</h4>\n<h5 id=\"defineproperty-方法\"><a class=\"markdownIt-Anchor\" href=\"#defineproperty-方法\">#</a> defineproperty 方法</h5>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//js代码</span>\n<span class=\"token keyword\">let</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    name： <span class=\"token string\">\"s1m\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineproperty</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">,</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span>\n    value<span class=\"token operator\">:</span><span class=\"token number\">18</span><span class=\"token punctuation\">,</span>\n    enumerable<span class=\"token operator\">:</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//属性是否可以被枚举 默认为false</span>\n    writable<span class=\"token operator\">:</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//属性是否可以被修改 默认为false</span>\n    configurable<span class=\"token operator\">:</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//属性是否可以被修改 默认为false</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//传入三个参数 第一个为修改对象,第二个为添加的key值 第三个为参数</span>\n\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineproperty</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">,</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">get</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//当有人获取 age的值的时候进行调用 且返回值为age的value</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">set</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    \t<span class=\"token comment\">//当有人 修改 age的值的时候调用</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"什么是数据代理\"><a class=\"markdownIt-Anchor\" href=\"#什么是数据代理\">#</a> 什么是数据代理</h5>\n<p>数据代理：通过一个对象代理对另一个对象中属性的操作 (读 / 写)</p>\n<p>通过修改一个对象的属性可以对另一个对象的属性同样进行修改</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">        <span class=\"token keyword\">let</span> obj1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>x<span class=\"token operator\">:</span><span class=\"token number\">100</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> obj2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>y<span class=\"token operator\">:</span><span class=\"token number\">200</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>obj2<span class=\"token punctuation\">,</span><span class=\"token string\">'x'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span>\n            <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> obj1<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>   <span class=\"token comment\">//当访问obj2的x的属性时候 返回的是obj1的属性</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token function\">set</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                obj1<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span> <span class=\"token comment\">//当对obj2的x改的时候,修改的obj1的x</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> \n<span class=\"token comment\">//当对obj2的x值更改的时候 更改的是obj1的x值</span>\n<span class=\"token comment\">//获取obj2的x值的时候,获取的是obj1的值</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"vue中的数据代理\"><a class=\"markdownIt-Anchor\" href=\"#vue中的数据代理\">#</a> Vue 中的数据代理</h5>\n<p><strong>data 中的数据都代理在 vm 中</strong></p>\n<p>通过 vm 对象来代理 data 中属性的操作</p>\n<ul>\n<li>当获取 vm 中的数据时，vm 触发 getter, 返回 data 中的数据</li>\n<li>当修改 vm 中的数据时，vm 触发 setter, 修改 data 中的数据</li>\n</ul>\n<p>data 中的数据存储在了 vm 中的_data 中</p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/ED11289633F8ED8EA2D312E86600F0F9.png\" alt=\"img\"></p>\n<p>没有数据代理的话 每次访问数据就得写_data.xxx 更加地麻烦</p>\n<h4 id=\"事件处理\"><a class=\"markdownIt-Anchor\" href=\"#事件处理\">#</a> 事件处理</h4>\n<h5 id=\"事件的基本使用\"><a class=\"markdownIt-Anchor\" href=\"#事件的基本使用\">#</a> 事件的基本使用</h5>\n<p><strong><u>所有被 Vue 管理的函数都写成普通函数</u></strong>, 为了保证 this</p>\n<p>事件的基本使用</p>\n<ul>\n<li>使用 <code>v-on:xxx</code>  或者 <code>@xxx</code>  绑定事件</li>\n<li>事件的回调配置在 methods 对象中，最终会在 vm 上</li>\n<li>methods 中配置的函数，不要用箭头函数，否则 this 将发生改变</li>\n<li><code>@click=\"demo\"</code>  和 <code>@click=\"demo($event)\"</code>  效果一致，但是后者可以传参</li>\n<li><code>@click=\"xxx\"</code>  xxx 可以写一些简单的 js 语句，当语句过多时，还是建议写到 methods 方法中去</li>\n</ul>\n<h5 id=\"事件修饰符\"><a class=\"markdownIt-Anchor\" href=\"#事件修饰符\">#</a> 事件修饰符</h5>\n<ol>\n<li><code>prevent</code> : 阻止默认事件</li>\n<li><code>stop</code> : 阻止时间冒泡</li>\n<li><code>once</code> : 事件只触发一次</li>\n<li><code>capture</code> : 使用事件的捕获方式</li>\n<li><code>self</code> : 只有 event.target 是当前操作的元素时才触发事件</li>\n<li><code>passive</code> : 事件的默认行为立即执行，无需等待时间回调执行完毕</li>\n</ol>\n<p>eg:  <code>@click.prevent = \"showInfo\"</code></p>\n<h5 id=\"键盘事件\"><a class=\"markdownIt-Anchor\" href=\"#键盘事件\">#</a> 键盘事件</h5>\n<ol>\n<li>Vue 常用的按键别名\n<ul>\n<li>回车:enter</li>\n<li>删除:delete</li>\n<li>退出:esc</li>\n<li>空格:space</li>\n<li>换行:tab (特殊，必须配合 keydown 使用)</li>\n<li>上:up</li>\n<li>下:down</li>\n<li>左:left</li>\n<li>右:right</li>\n</ul>\n</li>\n<li>原始 key 值绑定，<strong> 由多个单词组成的 key 值需要将多个单词用 <code>-</code>  连接</strong></li>\n<li>系统修饰键:ctrl,alt,shift,meta (特殊用法)\n<ul>\n<li>配合 <code>keyup</code>  使用：按下修饰键的同时，再按下其他键，随后释放其他键，时间才被触发  要实现同时按下修饰符和普通符 可以 <code>@keyup.修饰符.普通键</code></li>\n<li>配合 <code>keydown</code>  使用：正常触发事件</li>\n</ul>\n</li>\n<li>也可以使用 keyCode 去指定具体的按键 (<u>不推荐</u>), 因为不同的键盘编码可能不统一</li>\n<li><code>Vue.config.keyCodes.自定义键名 = 键码</code>  可以定制按键别名</li>\n</ol>\n<h4 id=\"计算属性\"><a class=\"markdownIt-Anchor\" href=\"#计算属性\">#</a> 计算属性</h4>\n<p>Vue 中只要模板中的数据发生改变，Vue 就会重新解析一遍模板，然后将更改的部分渲染到页面上</p>\n<p>Vue 认为 data 里面的数据是<strong>属性</strong></p>\n<p><strong>计算属性</strong>：对已有的属性进行加工计算，从而得到一个全新的属性</p>\n<ul>\n<li>定义：要用的属性不存在，要通过<strong>已有属性</strong><u>计算</u>得来</li>\n<li>原理：底层借助 <code>Object.defineproperty</code>  方法提供的 getter 和 setter</li>\n<li>get 函数的调用时机:\n<ol>\n<li>初次读取时</li>\n<li>当依赖的数据发生改变的时候</li>\n</ol>\n</li>\n<li>优势：与 methods 相比，内部有缓存机制，效率更高</li>\n<li>计算属性最终会出现在 vm 上，直接读取使用就可以，如果计算属性会被修改，就要写 set 函数</li>\n</ul>\n<h5 id=\"计算属性的简写\"><a class=\"markdownIt-Anchor\" href=\"#计算属性的简写\">#</a> 计算属性的简写</h5>\n<p>一般情况下计算属性用不到 set, 只需要用 get</p>\n<p><strong>不考虑修改的情况下才可以简写</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//完整情况</span>\ncomputed<span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>\n    fullName<span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> lastName <span class=\"token operator\">+</span> firstName<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">set</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            \n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//简写</span>\ncomputed<span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fullName</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> lastName <span class=\"token operator\">+</span> firstName\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"监视属性\"><a class=\"markdownIt-Anchor\" href=\"#监视属性\">#</a> 监视属性</h4>\n<ol>\n<li><strong>当被监视的属性发生变化</strong>的时候，回调函数自动调用</li>\n<li>监视的属性必须<strong>存在</strong>，才能进行监视</li>\n<li>监视的两种写法:\n<ol>\n<li>.new Vue 的时候传入 watch 配置</li>\n<li>通过 vm.$watch 监视</li>\n</ol>\n</li>\n</ol>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token comment\">//第一种监视写法</span>\n<span class=\"token number\">0</span>const vm <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\twatch<span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>\n        isHot<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">//监视属性 isHot</span>\n             immediate<span class=\"token operator\">:</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//可以不写 默认为false 为true表示,初始化的时候也调用handler</span>\n        \t<span class=\"token function\">handler</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">newValue<span class=\"token punctuation\">,</span>oldValue</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">//表示当isHot属性的值发生改变的时候,会调用handler函数,并传入新的值和旧的值</span>\n            <span class=\"token comment\">//计算出来的属性也可以监视</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\">//第二种监视的写法</span>\n<span class=\"token keyword\">const</span> vm <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nvm<span class=\"token punctuation\">.</span><span class=\"token function\">$watch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'isHot'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//和上面相同</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"深度监视\"><a class=\"markdownIt-Anchor\" href=\"#深度监视\">#</a> 深度监视</h5>\n<ul>\n<li>Vue 中的<strong> watch</strong> 默认不监测对象内部值的改变 (一层)       (Vue 是可以监视的 但是 Watch 不行)</li>\n<li>配置 <code>deep:true</code>  可以检测到对象内部值的改变 (多层次)</li>\n</ul>\n<h5 id=\"监视的简写形式\"><a class=\"markdownIt-Anchor\" href=\"#监视的简写形式\">#</a> 监视的简写形式</h5>\n<p><strong><u>不需要 immediate 和 deep 的时候，才可以简写</u></strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">watch <span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//正常写法</span>\n    isHot<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">handler</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">newValue<span class=\"token punctuation\">,</span>oldValue</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"正常写法\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>  \n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">//简写形式</span>\n    <span class=\"token function\">isHot</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">newValue<span class=\"token punctuation\">,</span>oldValue</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"简写写法\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"watch对比computed\"><a class=\"markdownIt-Anchor\" href=\"#watch对比computed\">#</a> Watch 对比 Computed</h4>\n<ol>\n<li>Computed 可以完成的，watch 能完成的</li>\n<li>Watch 能完成，computed 不一定能完成</li>\n<li>Computed 不支持异步操作，Watch 支持</li>\n<li>在都可以实现的时候，哪个容易写哪个</li>\n</ol>\n<h4 id=\"两个重要小原则\"><a class=\"markdownIt-Anchor\" href=\"#两个重要小原则\">#</a> 两个重要小原则</h4>\n<ol>\n<li>被 Vue 管理的函数，都写成普通函数，这样 this 指定的才是 vue</li>\n<li>所有不被 Vue 所管理的函数 (定时器，ajax) 最好写成箭头函数，这样 this 的指向才是 vue</li>\n</ol>\n<h4 id=\"class与style绑定\"><a class=\"markdownIt-Anchor\" href=\"#class与style绑定\">#</a> Class 与 style 绑定</h4>\n<h5 id=\"绑定class样式\"><a class=\"markdownIt-Anchor\" href=\"#绑定class样式\">#</a> 绑定 class 样式</h5>\n<ul>\n<li><strong>字符串写法</strong>：适用于样式的类名不确定，需要动态指定</li>\n<li>** 数组写法:** 适用于样式的个数和名字都不确定</li>\n<li><strong>对象写法</strong>：适用于要绑定的样式用不用不确定</li>\n</ul>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token style\"><span class=\"token language-css\">\n //省略\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>root<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n\t// 字符串写法\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">:class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Mode<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>changeMode<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    \n    //数组写法\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">:class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ModeArr<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    \n    //对象写法\n    \n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">:class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ModeObj<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\">\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        el<span class=\"token operator\">:</span><span class=\"token string\">\"#root\"</span><span class=\"token punctuation\">,</span>\n        data<span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>\n            Mode<span class=\"token operator\">:</span><span class=\"token string\">'happy'</span><span class=\"token punctuation\">,</span>\n            ModeArr<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token string\">'happy'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'normal'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'bad'</span><span class=\"token punctuation\">]</span>\n            ModeObj<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            \thappy<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n            \tbad<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        methods<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">changeMode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>Mode <span class=\"token operator\">=</span> <span class=\"token string\">'normal'</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"绑定style\"><a class=\"markdownIt-Anchor\" href=\"#绑定style\">#</a> 绑定 style</h5>\n<ol>\n<li><code>:style=\"{fontSize: xxx}\"</code>   其中 xxx 是动态值</li>\n<li>也可以像下面代码中一样 (常用)</li>\n<li>注意必须写成 <strong><u>驼峰命名</u></strong></li>\n</ol>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>root<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">:style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>styleObj<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n\t\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\">\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            el<span class=\"token operator\">:</span><span class=\"token string\">\"#root\"</span><span class=\"token punctuation\">,</span>\n            data<span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>\n                styleObj<span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>\n                \tfontSize<span class=\"token operator\">:</span> <span class=\"token string\">'40px'</span><span class=\"token punctuation\">,</span>      <span class=\"token comment\">//要切换成驼峰命名</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            methods<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"条件渲染\"><a class=\"markdownIt-Anchor\" href=\"#条件渲染\">#</a> 条件渲染</h4>\n<ol>\n<li><code>v-show</code>  做条件渲染，只是使用 display 将其隐藏了，但是本身还存在在 DOM 树里面</li>\n<li><code>v-if</code>  做条件渲染，直接在 DOM 树里面增添或者删除这个结点</li>\n</ol>\n<p>如果频繁切换，推荐用 <code>v-show</code></p>\n<h5 id=\"v-if与v-if-else于v-else\"><a class=\"markdownIt-Anchor\" href=\"#v-if与v-if-else于v-else\">#</a> v-if 与 v-if-else 于 v-else</h5>\n<p>使用与 <code>if      else if      else</code>  一样，但是进行判断的标签必须紧紧相连</p>\n<p>如果要对一堆元素进行管理，可以在最外层加上一个 <code>&lt;template v-if=\"true\"&gt;</code> , 这样不影响结构</p>\n<p>另外 templace 只能和 <code>v-if</code>  配合使用，不能和 <code>v-show</code>  配合使用</p>\n<h4 id=\"列表渲染important\"><a class=\"markdownIt-Anchor\" href=\"#列表渲染important\">#</a> 列表渲染 (important)</h4>\n<p><code>v-for</code>  指令用于展示列表数据</p>\n<ol>\n<li>语法:  <code>v-for=\"(item,index) in xxx\" :key=\"yyy\"</code></li>\n<li>可以遍历：数组，对象，字符串 (用得少), 指定次数 (用得少)</li>\n</ol>\n<h5 id=\"key作用与原理\"><a class=\"markdownIt-Anchor\" href=\"#key作用与原理\">#</a> key 作用与原理</h5>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/C9F8A6E7AC902688BD253CBFCB33AE47.png\" alt=\"index作为key\"></p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/ACF36FEC23900F414FD48E7CC5EFF9DE.png\" alt=\"id作为key\"></p>\n<ol>\n<li>\n<p>虚拟 DOM 中 key 的作用</p>\n<p>key 是虚拟 DOM 对象的标识，当数据发生变化的时候，Vue 会根据<strong>新数据</strong>，生成新的虚拟 DOM，随后 Vue 进行新虚拟 DOM 与旧虚拟 DOM 的差异比较，比较规则如下</p>\n</li>\n<li>\n<p>对比规则:</p>\n<ol>\n<li>旧虚拟 DOM 找到了与新虚拟 DOM 相同的 key\n<ol>\n<li>若虚拟 DOM 中内容没变，直接使用旧的真实 DOM</li>\n<li>若虚拟 DOM 的内容变了，则生成新的真实 DOM, 并替换掉页面中之前的真实 DOM</li>\n</ol>\n</li>\n<li>旧虚拟 DOM 没找到与新虚拟 DOM 相同的 key\n<ol>\n<li>创建新的真实 DOM, 随后渲染到页面</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>用 index 作为 key 可能会引发的问题</p>\n<ol>\n<li>若对数据进行逆序添加，逆序删除等破坏顺序的操作，会产生没有必要的真实 DOM 更新，使<strong>效率降低</strong></li>\n<li>如果结构中还包括输入类的 DOM, 会产生错误的 DOM 更新，<strong> 使界面有问题</strong></li>\n</ol>\n</li>\n<li>\n<p>最好选择唯一标识作为 key 值</p>\n</li>\n</ol>\n<h5 id=\"列表过滤\"><a class=\"markdownIt-Anchor\" href=\"#列表过滤\">#</a> 列表过滤</h5>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> vm <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n          <span class=\"token function\">data</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token keyword\">return</span><span class=\"token punctuation\">{</span>\n                  keyWord<span class=\"token operator\">:</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n                  persons<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n                      id<span class=\"token operator\">:</span><span class=\"token number\">001</span><span class=\"token punctuation\">,</span>\n                      name<span class=\"token operator\">:</span><span class=\"token string\">\"张三东\"</span><span class=\"token punctuation\">,</span>\n                      sex<span class=\"token operator\">:</span><span class=\"token string\">'男'</span><span class=\"token punctuation\">,</span>\n                      age<span class=\"token operator\">:</span><span class=\"token number\">19</span><span class=\"token punctuation\">,</span>\n                  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span>\n                      id<span class=\"token operator\">:</span><span class=\"token number\">002</span><span class=\"token punctuation\">,</span>\n                      name<span class=\"token operator\">:</span><span class=\"token string\">\"李四东伦\"</span><span class=\"token punctuation\">,</span>\n                      sex<span class=\"token operator\">:</span><span class=\"token string\">'女'</span><span class=\"token punctuation\">,</span>\n                      age<span class=\"token operator\">:</span><span class=\"token number\">18</span><span class=\"token punctuation\">,</span>\n                  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span>\n                      id<span class=\"token operator\">:</span><span class=\"token number\">003</span><span class=\"token punctuation\">,</span>\n                      name<span class=\"token operator\">:</span><span class=\"token string\">\"王伦五\"</span><span class=\"token punctuation\">,</span>\n                      sex<span class=\"token operator\">:</span><span class=\"token string\">'男'</span><span class=\"token punctuation\">,</span>\n                      age<span class=\"token operator\">:</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span>\n                  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n              <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n              computed<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                  <span class=\"token function\">filpersons</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>persons<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">person</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n                          <span class=\"token keyword\">return</span> person<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>keyWord<span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n                      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n                  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n              <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          methods<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n              \n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      vm<span class=\"token punctuation\">.</span><span class=\"token function\">$mount</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#root'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"列表排序\"><a class=\"markdownIt-Anchor\" href=\"#列表排序\">#</a> 列表排序</h5>\n<p>在 data 中使用一个变量来存储此时排序的状态</p>\n<p>通过对状态的检测 来进行排序，当点击按钮的时，状态更改，重新进行渲染</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">computed<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">filpersons</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span>  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>persons<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">person</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n                            <span class=\"token keyword\">return</span> person<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>keyWord<span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n                        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token comment\">//不需要排序 直接返回</span>\n                        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sortType<span class=\"token punctuation\">)</span>\n                        <span class=\"token comment\">//进行排序</span>\n                            arr<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n                                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sortType <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n                                <span class=\"token keyword\">return</span> b<span class=\"token punctuation\">.</span>age <span class=\"token operator\">-</span> a<span class=\"token punctuation\">.</span>age\n                                <span class=\"token keyword\">else</span> \n                                <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">.</span>age <span class=\"token operator\">-</span> b<span class=\"token punctuation\">.</span>age\n                            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"vue监测数据改变的原理\"><a class=\"markdownIt-Anchor\" href=\"#vue监测数据改变的原理\">#</a> Vue 监测数据改变的原理</h4>\n<h5 id=\"监测对象的改变\"><a class=\"markdownIt-Anchor\" href=\"#监测对象的改变\">#</a> 监测对象的改变</h5>\n<p>通过 setter 和 getter 进行监测，只要一改变，就进行重新渲染</p>\n<p>且底层使用递归，如果有多个对象叠对象，Vue 会找到最底层的数据进行监测</p>\n<h5 id=\"监测数组的改变\"><a class=\"markdownIt-Anchor\" href=\"#监测数组的改变\">#</a> 监测数组的改变</h5>\n<p>调用包裹数组更新元素的方法实现，本质就是做了两件事</p>\n<ul>\n<li>调用原生对应的方法对数组进行更新</li>\n<li>重新解析模板，进而更新页面</li>\n</ul>\n<h5 id=\"vueset的使用\"><a class=\"markdownIt-Anchor\" href=\"#vueset的使用\">#</a> Vue.set () 的使用</h5>\n<p>vue 对象中追加的数据，不做响应式处理，必须使用 vue.set () 方法</p>\n<p><code>Vue.set(target,key,value)</code> : 往 target 身上添加 key:value 的<strong>响应式数据</strong></p>\n<p><code>this.$set()</code>  和 <code>vue.set()</code>  相同</p>\n<p>否则后期添加的键值对不会是响应式的</p>\n<h5 id=\"vue修改数组中某个元素\"><a class=\"markdownIt-Anchor\" href=\"#vue修改数组中某个元素\">#</a> vue 修改数组中某个元素</h5>\n<p>直接对数组进行更新，vue 不会监测到，只有通过以下方法，vue 才会监测到</p>\n<p>使用如下方法</p>\n<ul>\n<li><code>push()</code> , <code>pop()</code> , <code>shift()</code> , <code>unshift()</code> , <code>splice()</code> , <code>sort()</code> , <code>reverse()</code></li>\n</ul>\n<h4 id=\"收集表单数据\"><a class=\"markdownIt-Anchor\" href=\"#收集表单数据\">#</a> 收集表单数据</h4>\n<ul>\n<li><code>&lt;input type=\"text\"&gt;</code> :v-model 双向绑定，<strong> 用户输入的就是 value 值</strong></li>\n<li><code>&lt;input type=\"radio\"&gt;</code> :v-model 双向绑定，收集到的是 value 值，需要<strong>手动配置 value 值</strong></li>\n<li><code>&lt;input type=\"checkbox\"&gt;</code>\n<ul>\n<li>没有配置 input 的 value 属性，收集到的是 checked 的<strong>布尔值</strong></li>\n<li>配置了 value 属性，如果是非数组收集到的也是布尔值，<strong>是数组收集到的就是选中的 value 组成的数组</strong></li>\n</ul>\n</li>\n</ul>\n<h5 id=\"v-model的三个修饰符\"><a class=\"markdownIt-Anchor\" href=\"#v-model的三个修饰符\">#</a> v-model 的三个修饰符</h5>\n<ul>\n<li>lazy: 失去焦点再收集数据</li>\n<li>number: 输入字符串转为有效数字</li>\n<li>trim: 输入首尾空格过滤</li>\n</ul>\n<h4 id=\"过滤器\"><a class=\"markdownIt-Anchor\" href=\"#过滤器\">#</a> 过滤器</h4>\n<p>对要显示的数据进行特定格式化后再显示 (使用于一些简单逻辑的处理)</p>\n<ol>\n<li>语法\n<ul>\n<li>注册过滤器: <code>Vue.filter(name,callback)</code>  或者  <code>new Vue(filters:{})</code></li>\n<li>使用过滤器: <code>{{xxx|过滤器名}}</code>  或者  <code>v-bind:属性 =\"xxx|过滤器名\"</code></li>\n</ul>\n</li>\n<li>备注\n<ul>\n<li>过滤器也可以接受额外参数</li>\n<li>多个过滤器可以串联</li>\n<li>过滤器并<strong>没有改变原本的数据</strong>，只是产生了新的数据</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"内置指令\"><a class=\"markdownIt-Anchor\" href=\"#内置指令\">#</a> 内置指令</h4>\n<h5 id=\"常用\"><a class=\"markdownIt-Anchor\" href=\"#常用\">#</a> 常用</h5>\n<ul>\n<li><code>v-bind</code> : 单向绑定解析表达式</li>\n<li><code>v-model</code> : 双向数据绑定</li>\n<li><code>v-for</code> : 遍历数组 / 对象 / 字符串</li>\n<li><code>v-on</code> : 绑定事件监听，可简写为 @</li>\n<li><code>v-if</code> : 条件渲染 (动态控制节点是否存在)</li>\n<li><code>v-else</code> : 条件渲染 (动态控制节点是否存在)</li>\n<li><code>v-show</code> : 条件渲染 (动态控制节点是否展示)</li>\n</ul>\n<h5 id=\"其他\"><a class=\"markdownIt-Anchor\" href=\"#其他\">#</a> 其他</h5>\n<ol>\n<li>\n<p><code>v-text</code></p>\n<ul>\n<li>作用：向其所在的节点中渲染文本内容</li>\n<li>与插值语法的区别:v-text 会替换掉节点中的<strong>全部内容</strong>，插值语法不会</li>\n</ul>\n</li>\n<li>\n<p><code>v-html</code></p>\n<ul>\n<li>作用：向指定节点中渲染包含 html 结构的内容</li>\n<li>与插值语法的区别\n<ol>\n<li>可以识别 html 结构</li>\n<li>会替换掉节点中的全部内容</li>\n</ol>\n</li>\n<li>注意！\n<ol>\n<li>在网站上动态渲染 html 非常危险，容易导致 XSS 攻击</li>\n<li>一定要在可信的内容上使用 v-html, 不要再用户提交的内容上</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>\n<p><code>v-cloak</code></p>\n<ol>\n<li>本质是一个特殊属性，Vue 实例创建完毕并接管容器后，会删掉 v-cloak 属性</li>\n<li>使用 css 配合 v-cloak 可以解决网速慢时直接将模板展示在浏览器中的问题</li>\n</ol>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token style\"><span class=\"token language-css\">\n    <span class=\"token selector\">[v-cloak]</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span> <span class=\"token attr-name\">v-cloak</span><span class=\"token punctuation\">&gt;</span></span>\n        你好\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p><code>v-once</code></p>\n<ol>\n<li><code>v-once</code>  所在节点在初始动态渲染后，就视为静态内容了</li>\n<li>以后数据的改变不会引起 <code>v-once</code>  所在结构的更新，可以用于优化性能</li>\n</ol>\n</li>\n<li>\n<p><code>v-pre</code></p>\n<ol>\n<li>跳过其所在节点的编译过程</li>\n<li>可利用他跳过：没有使用指令语法，没有使用插值语法的节点，可以加快编译</li>\n</ol>\n</li>\n</ol>\n<h5 id=\"自定义指令\"><a class=\"markdownIt-Anchor\" href=\"#自定义指令\">#</a> 自定义指令</h5>\n<h6 id=\"函数式\"><a class=\"markdownIt-Anchor\" href=\"#函数式\">#</a> 函数式</h6>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">http-equiv</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>X-UA-Compatible<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>IE=edge<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span> <span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>../js/vue.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">&gt;</span></span>Document<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>root<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">&gt;</span></span>当前的n值是<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">v-text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>n<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">&gt;</span></span>放大十倍后的n值是<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">v-big</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>n<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>n++<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>点我n加1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\">\n        <span class=\"token comment\">//定义一个v-big指令,和v-text类似 会把绑定的数值放大10倍</span>\n        <span class=\"token keyword\">const</span> vm <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            <span class=\"token function\">data</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span><span class=\"token punctuation\">{</span>\n                    n<span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            methods<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                \n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            directives<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">//big函数什么时候会被调用</span>\n                <span class=\"token comment\">// 1.指令和元素成功绑定时(初次)</span>\n                <span class=\"token comment\">// 2.指令所在的模板 被重新解析的时候</span>\n                <span class=\"token function\">big</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">element<span class=\"token punctuation\">,</span>binding</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    element<span class=\"token punctuation\">.</span>innerText <span class=\"token operator\">=</span> binding<span class=\"token punctuation\">.</span>value <span class=\"token operator\">*</span> <span class=\"token number\">10</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        vm<span class=\"token punctuation\">.</span><span class=\"token function\">$mount</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#root'</span><span class=\"token punctuation\">)</span>\n    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">&gt;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h6 id=\"对象式\"><a class=\"markdownIt-Anchor\" href=\"#对象式\">#</a> 对象式</h6>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">directives: {\n                XXX:{\n                    //当指令与元素成功绑定时调用\n                    bind() {},\n                    //指令所在元素被插入页面时调用\n                    inserted() {},\n                    //指令所在模板被重新解析时调用\n                    update(){},\n                }\n            },<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>函数式就是只用了 <code>bind</code>  和 <code>update</code>  没用 <code>insert</code></p>\n<h6 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\">#</a> 总结</h6>\n<ol>\n<li>\n<p>定义语法:</p>\n<ol>\n<li>\n<p>局部指令</p>\n<p><code>new Vue({directives:{指令名:配置对象}})</code></p>\n</li>\n<li>\n<p>全局指令</p>\n<p><code>Vue.directive(指令名,配置对象)</code></p>\n</li>\n</ol>\n</li>\n<li>\n<p>配置对象中常用的三个回调</p>\n<ol>\n<li><code>bind</code> : 指令与元素<strong>成功绑定</strong>时调用</li>\n<li><code>inserted</code> : 指令所在元素被<strong>插入页面</strong>时调用</li>\n<li><code>update</code> : 指令所在模板被<strong>重新解析</strong>时调用</li>\n</ol>\n</li>\n<li>\n<p>备注</p>\n<ol>\n<li>指令定义时不加 v-, 但使用时要加</li>\n<li>指令名如果是多个单词，要使用<strong> kebab-case 命名</strong>，不要用 camelCase 命名</li>\n</ol>\n</li>\n</ol>\n<h4 id=\"生命周期\"><a class=\"markdownIt-Anchor\" href=\"#生命周期\">#</a> 生命周期</h4>\n<ol>\n<li>生命周期函数是 Vue 在关键时刻帮我们调用的一些特殊名称的函数</li>\n<li>生命周期函数的名字不可更改，但函数的具体内容是程序员根据需求编写的</li>\n<li>生命周期函数中的 this 指向是 vm 或组件实例对象</li>\n</ol>\n<p>常用的周期钩子</p>\n<ol>\n<li><code>mounted</code> : 发送 ajax 请求，启动定时器，绑定自定义事件，订阅消息等<strong>初始化操作</strong></li>\n<li><code>beforeDestroy</code> : 清除定时器，解绑自定义时间，取消订阅消息等<strong>收尾工作</strong></li>\n</ol>\n<p>关于销毁 Vue 实例</p>\n<ol>\n<li>销毁后借助 Vue 开发者工具看不到任何信息</li>\n<li>销毁后自定义事件会失效，但<strong>原生 DOM 事件仍然有效</strong></li>\n<li>一般不会用 beforeDestroy 操作数据，因为即使操作数据，也<strong>不会再触发更新流程</strong>了</li>\n</ol>\n<h3 id=\"vue组件化编程\"><a class=\"markdownIt-Anchor\" href=\"#vue组件化编程\">#</a> Vue 组件化编程</h3>\n<p>组件：实现应用中局部功能代码和资源的集合</p>\n<h4 id=\"非单文件组件\"><a class=\"markdownIt-Anchor\" href=\"#非单文件组件\">#</a> 非单文件组件</h4>\n<p>一个文件中包含有 n 个组件</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">http-equiv</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>X-UA-Compatible<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>IE=edge<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span> <span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>../js/vue.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">&gt;</span></span>Document<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>root<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>school</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>school</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>hr</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>student</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>student</span><span class=\"token punctuation\">&gt;</span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\">\n        <span class=\"token comment\">//第一步创建组件</span>\n\n        <span class=\"token comment\">//创建school组件</span>\n        <span class=\"token comment\">//不要写el配置项,一定不要写el配置项</span>\n        <span class=\"token keyword\">const</span> school <span class=\"token operator\">=</span> Vue<span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            template<span class=\"token operator\">:</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;div&gt;\n                &lt;h2&gt;学校名称:{{schoolName}}&lt;/h2&gt;\n        &lt;h2&gt;学校地址:{{schoolAddress}}&lt;/h2&gt;\n                &lt;/div&gt;</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n            <span class=\"token function\">data</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span><span class=\"token punctuation\">{</span>\n                    schoolName<span class=\"token operator\">:</span><span class=\"token string\">'UESTC'</span><span class=\"token punctuation\">,</span>\n                    schoolAddress<span class=\"token operator\">:</span><span class=\"token string\">'沙河'</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            methods<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                \n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">//创建student组件</span>\n        <span class=\"token keyword\">const</span> student <span class=\"token operator\">=</span> Vue<span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            template<span class=\"token operator\">:</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;div&gt;\n                &lt;h2&gt;学生名称:{{studentName}}&lt;/h2&gt;\n        &lt;h2&gt;学校年龄:{{studentAge}}&lt;/h2&gt;\n                &lt;/div&gt;</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n            <span class=\"token function\">data</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span><span class=\"token punctuation\">{</span>\n                    studentName<span class=\"token operator\">:</span><span class=\"token string\">'s1m'</span><span class=\"token punctuation\">,</span>\n                    studentAge<span class=\"token operator\">:</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            methods<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                \n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    \n        \n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>       \n            el<span class=\"token operator\">:</span><span class=\"token string\">'#root'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token comment\">//第二步 局部注册组件</span>\n            components<span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>school<span class=\"token punctuation\">,</span>student<span class=\"token punctuation\">,</span><span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n\n\n        <span class=\"token comment\">// const vm = new Vue({</span>\n        <span class=\"token comment\">//     data () {</span>\n        <span class=\"token comment\">//         return{</span>\n        <span class=\"token comment\">//             schoolName:'UESTC',</span>\n        <span class=\"token comment\">//             schoolAddress:'沙河',</span>\n        <span class=\"token comment\">//             studentName:'s1m',</span>\n        <span class=\"token comment\">//             studentAge:20,</span>\n        <span class=\"token comment\">//         }},</span>\n        <span class=\"token comment\">//     methods: {</span>\n                \n        <span class=\"token comment\">//     }</span>\n        <span class=\"token comment\">// })</span>\n        <span class=\"token comment\">// vm.$mount('#root')</span>\n    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">&gt;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>Vue 中使用组件的三大步骤</p>\n<ol>\n<li>定义组件 (创建组件)</li>\n<li>注册组件</li>\n<li>使用组件 (写组件标签)</li>\n</ol>\n<h5 id=\"如何定义一个组件\"><a class=\"markdownIt-Anchor\" href=\"#如何定义一个组件\">#</a> 如何定义一个组件</h5>\n<p>使用 Vue.extend (options) 创建，其中 options 和 new Vue (options) 时传入的那个 options 几乎一样，区别如下:</p>\n<ol>\n<li>el 不要写</li>\n<li>data 必须写成函数 (<strong>避免组件被复用时的引用问题</strong>)</li>\n</ol>\n<p>备注：使用 <code>template</code>  可以配置组件结构</p>\n<h5 id=\"如何注册组件\"><a class=\"markdownIt-Anchor\" href=\"#如何注册组件\">#</a> 如何注册组件</h5>\n<ol>\n<li>局部注册：靠 new Vue 的时候传入 components 选项</li>\n<li>全局注册：靠 Vue.component (‘组件名’, 组件)</li>\n</ol>\n<h5 id=\"编写组件标签\"><a class=\"markdownIt-Anchor\" href=\"#编写组件标签\">#</a> 编写组件标签</h5>\n<p>eg: <code>&lt;school&gt;&lt;/school&gt;</code></p>\n<h5 id=\"几个注意点\"><a class=\"markdownIt-Anchor\" href=\"#几个注意点\">#</a> 几个注意点</h5>\n<ol>\n<li>\n<p>组件名</p>\n<ol>\n<li>一个单词组成：首字母大小写都可以</li>\n<li>多个单词组成\n<ul>\n<li>第一种：(kebab-case 命名) my-school</li>\n<li>第二种：(CamelCase 命名) MySchool (<strong>需要 Vue 脚手架支持</strong>)</li>\n</ul>\n</li>\n<li>备注\n<ul>\n<li>组件名尽可能回避 HTML 中已存的元素名称</li>\n<li>可以使用 name 配置项指定组件在开发者工具中呈现的名字</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>\n<p>关于组件标签</p>\n<ul>\n<li>第一种写法: <code>&lt;school&gt;&lt;/school&gt;</code></li>\n<li>第二种写法: <code>&lt;school/&gt;</code></li>\n<li>备注：不使用脚手架时， <code>&lt;school/&gt;</code>  会导致后续组件不能渲染</li>\n</ul>\n</li>\n<li>\n<p>一个简写方式</p>\n<p><code>const school = Vue.extend(options)</code>  可以写成  <code>const school = options</code></p>\n</li>\n</ol>\n<h5 id=\"组件的嵌套\"><a class=\"markdownIt-Anchor\" href=\"#组件的嵌套\">#</a> 组件的嵌套</h5>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> student <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n       template<span class=\"token operator\">:</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;div&gt;\n           &lt;h2&gt;学生姓名:{{studentName}}&lt;/h2&gt;\n   &lt;h2&gt;学生年龄:{{studentAge}}&lt;/h2&gt;\n           &lt;/div&gt;</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n       <span class=\"token function\">data</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n           <span class=\"token keyword\">return</span><span class=\"token punctuation\">{</span>\n               studentName<span class=\"token operator\">:</span><span class=\"token string\">'s1mm'</span><span class=\"token punctuation\">,</span>\n               studentAge<span class=\"token operator\">:</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span>\n           <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n       methods<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n           \n       <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">const</span> school <span class=\"token operator\">=</span> Vue<span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n       template<span class=\"token operator\">:</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;div&gt;\n           &lt;h2&gt;学校名称:{{schoolName}}&lt;/h2&gt;\n   &lt;h2&gt;学校地址:{{schoolAddress}}&lt;/h2&gt;\n   &lt;hr&gt;\n   &lt;student&gt;&lt;/student&gt;\n           &lt;/div&gt;</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n           components<span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>student<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n       <span class=\"token function\">data</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n           <span class=\"token keyword\">return</span><span class=\"token punctuation\">{</span>\n               schoolName<span class=\"token operator\">:</span><span class=\"token string\">'UESTC'</span><span class=\"token punctuation\">,</span>\n               schoolAddress<span class=\"token operator\">:</span><span class=\"token string\">'沙河'</span><span class=\"token punctuation\">,</span>\n           <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n       methods<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n           \n       <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n   <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>       \n       el<span class=\"token operator\">:</span><span class=\"token string\">'#root'</span><span class=\"token punctuation\">,</span>\n       <span class=\"token comment\">//第二步 局部注册组件</span>\n       components<span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>school<span class=\"token punctuation\">,</span><span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"vuecomponent\"><a class=\"markdownIt-Anchor\" href=\"#vuecomponent\">#</a> VueComponent</h5>\n<ol>\n<li>\n<p>组件本质是一个名为 VueComponnent 的构造函数，不是程序员定义的，是 Vue.extend () 生成的</p>\n</li>\n<li>\n<p>我们只需要写 <code>&lt;school/&gt;</code> ,Vue 解析时会帮我们创建 school 组件的实例对象，即 Vue 帮我们执行的:new VueComponent (options)</p>\n</li>\n<li>\n<p>特别注意：每次调用 Vue.extend, 返回的都是一个全新的 VueComponent</p>\n</li>\n<li>\n<p>关于 this 指向:</p>\n<ol>\n<li>\n<p>组件配置中:</p>\n<p>data 函数，methods 函数，watch 中的函数，computed 中的函数，他们的 sthis 都是<strong> VueComponent 实例对象</strong></p>\n</li>\n<li>\n<p>new Vue (options) 中</p>\n<p>data 函数，methods 函数，watch 中的函数，computed 中的函数，他们的 sthis 都是<strong> Vue 实例对象</strong></p>\n</li>\n</ol>\n</li>\n</ol>\n<h4 id=\"单文件组件\"><a class=\"markdownIt-Anchor\" href=\"#单文件组件\">#</a> 单文件组件</h4>\n<p>通过 VM 组件管理 APP 组件，再通过 APP 组件管理一堆组件</p>\n<pre class=\"line-numbers language-Vue\" data-language=\"Vue\"><code class=\"language-Vue\">&lt;template&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\n&lt;/script&gt;\n\n&lt;style&gt;\nnpm in&lt;/style&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"vue脚手架\"><a class=\"markdownIt-Anchor\" href=\"#vue脚手架\">#</a> Vue 脚手架</h3>\n<h4 id=\"创建vue脚手架\"><a class=\"markdownIt-Anchor\" href=\"#创建vue脚手架\">#</a> 创建 Vue 脚手架</h4>\n<ol>\n<li><code>npm install -g @vue/cli</code> , 全局安装 vue/cli</li>\n<li><code>vue create xxx</code>  创建项目</li>\n<li><code>npm run serve</code>  启动项目</li>\n</ol>\n<h4 id=\"分析脚手架\"><a class=\"markdownIt-Anchor\" href=\"#分析脚手架\">#</a> 分析脚手架</h4>\n<h5 id=\"render函数\"><a class=\"markdownIt-Anchor\" href=\"#render函数\">#</a> render 函数</h5>\n<ol>\n<li>vue.js 是完整版的 vue, 包含核心功能 + 模板解析器</li>\n<li>vue.runtime.xxx.js 是运行版的 vue, 只包含核心功能，没有模板解析器</li>\n<li>因为 <code>vue.runtime.xxx.js</code>  没有模板解析器，所以不能使用 template 配置项，需要使用<strong> render 函数</strong>接收到的<strong> createElement 函数去指定具体内容</strong></li>\n</ol>\n<h5 id=\"修改默认配置\"><a class=\"markdownIt-Anchor\" href=\"#修改默认配置\">#</a> 修改默认配置</h5>\n<p>可以在 <code>vue.config.js</code>  中添加个性化配置，vue 会将个性化配置和 webpack 中的默认配置对比，并且进行替换</p>\n<h4 id=\"ref属性\"><a class=\"markdownIt-Anchor\" href=\"#ref属性\">#</a> ref 属性</h4>\n<ol>\n<li>被用来给元素或<strong>子组件</strong>注册引用信息 (id 的替代者)</li>\n<li>应用在 html 标签上获取的是真实 DOM 元素，应用在组件标签上是组件实例对象（vc）</li>\n<li>使用方式\n<ul>\n<li>打标识  <code>&lt;h1 ref=\"xxx\"&gt; ... &lt;h1&gt;</code>  或  <code>&lt;School ref = \"xxx\"&gt;&lt;/School&gt;</code></li>\n<li>获取: <code>this.$refs.xxx</code></li>\n</ul>\n</li>\n</ol>\n<h4 id=\"props配置\"><a class=\"markdownIt-Anchor\" href=\"#props配置\">#</a> props 配置</h4>\n<p>功能：让组件接收外部传过来的数据</p>\n<ol>\n<li>\n<p>传递数据</p>\n<p><code>&lt;Demo name=\"xxx\" /&gt;</code></p>\n</li>\n<li>\n<p>接收数据 如下三种方式</p>\n</li>\n</ol>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//最简单写法</span>\nprops<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'sex'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'age'</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">//第二种写法 - 限制数据类型</span>\nprops<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>                        <span class=\"token comment\">//限制数据类型</span>\n         name<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n         age<span class=\"token operator\">:</span> Number<span class=\"token punctuation\">,</span>\n         sex<span class=\"token operator\">:</span> Number<span class=\"token punctuation\">,</span>\n     <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//完整写法  可以限制数据类型 + 必需性 + 默认值</span>\nprops<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        name<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            type<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>    <span class=\"token comment\">//类型</span>\n            required<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//名字是必须传的</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        age<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            type<span class=\"token operator\">:</span> Number<span class=\"token punctuation\">,</span>    <span class=\"token comment\">//类型</span>\n            <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token number\">31</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//默认值</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>备注:props 是<strong>只读</strong>的，Vue 底层会监测 props 的修改，如果进行了修改，就会发出警告，<u>如果业务需求需要修改，那么请复制 props 的内容到 data 中一份，然后去修改 data 中的数据</u></p>\n<h4 id=\"mixin混入\"><a class=\"markdownIt-Anchor\" href=\"#mixin混入\">#</a> mixin 混入</h4>\n<p>功能：可以把多个组件共用的配置提取成一个混入对象</p>\n<p>使用方式:</p>\n<ol>\n<li>\n<p>定义混合：在外部创建 js 文件并且引入 比如:</p>\n<p>const hunhe = {</p>\n<p>​\tdata(){}</p>\n<p>}</p>\n</li>\n<li>\n<p>第二部使用混入，例如</p>\n<ol>\n<li>全局混入：Vue.mixin (xxx)</li>\n<li>局部混入:mixins:[‘xxx’]</li>\n</ol>\n</li>\n</ol>\n<h4 id=\"插件\"><a class=\"markdownIt-Anchor\" href=\"#插件\">#</a> 插件</h4>\n<p>功能：增强 Vue</p>\n<p>本质：包含 install 方法的一个对象，install 方法的第一个参数是 Vue，第二个以后的参数是插件使用者传递的数据</p>\n<p>定义插件:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> plugins <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">install</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    \t<span class=\"token comment\">//添加全局过滤器</span>\n      \t<span class=\"token comment\">//添加全局指令</span>\n      <span class=\"token comment\">//配置全局混入</span>\n      <span class=\"token comment\">//添加实例方法</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> plugins<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>使用插件: Vue.use (‘xxx’)</p>\n<h4 id=\"scoped样式\"><a class=\"markdownIt-Anchor\" href=\"#scoped样式\">#</a> scoped 样式</h4>\n<p>作用：让样式在局部生效，防止冲突</p>\n<p>写法:  <code>&lt;style scoped&gt; &lt;/style&gt;</code></p>\n<h4 id=\"数据之间的基础传输\"><a class=\"markdownIt-Anchor\" href=\"#数据之间的基础传输\">#</a> 数据之间的<strong>基础</strong>传输</h4>\n<p>传递给下级组件：通过 props 接受数据，</p>\n<p>传递给上级组件：通过父组件定义函数，传入子组件，子组件通过 props 得到传入的函数，通过调用函数返回值</p>\n<h4 id=\"组件化编码流程\"><a class=\"markdownIt-Anchor\" href=\"#组件化编码流程\">#</a> 组件化编码流程</h4>\n<ol>\n<li>拆分静态组件：组件要按照功能点拆分，命名不要和 html 元素冲突</li>\n<li>实现动态组件：考虑好数据的存放位置，数据是一个组件在用，还是一些组件在用\n<ol>\n<li>一个组件在用：放在组件自身</li>\n<li>一些组件在用：放在共同的父组件身上</li>\n</ol>\n</li>\n</ol>\n<h4 id=\"props使用于\"><a class=\"markdownIt-Anchor\" href=\"#props使用于\">#</a> props 使用于</h4>\n<ol>\n<li>父组件到子组件通信</li>\n<li>子组件到父组件通信 (通过父组件向子组件传递函数)</li>\n</ol>\n<p>v-model 不能绑定 props 传送过来的值，因为 props 不可以修改</p>\n<h4 id=\"浏览器本地存储\"><a class=\"markdownIt-Anchor\" href=\"#浏览器本地存储\">#</a> 浏览器本地存储</h4>\n<h5 id=\"localstorage\"><a class=\"markdownIt-Anchor\" href=\"#localstorage\">#</a> localstorage</h5>\n<ul>\n<li><code>localstorage.setItem(key,value)</code> : 保存数据，且数据为键值对形式，key 和 value 都必须是字符串</li>\n<li><code>localstorage.getItem(key)</code> : 读取数据</li>\n<li><code>localstorage.removeItem(key,value)</code> : 删除数据</li>\n<li><code>localstorage.clear()</code> : 清空所有数据</li>\n</ul>\n<h6 id=\"json对象和字符串相互转换\"><a class=\"markdownIt-Anchor\" href=\"#json对象和字符串相互转换\">#</a> JSON 对象和字符串相互转换</h6>\n<ul>\n<li><code>JSON.parse(String)</code> :json 字符串转对象</li>\n<li><code>JSON.stringify(Object)</code> :json 对象转字符串</li>\n</ul>\n<h5 id=\"sessionstorage\"><a class=\"markdownIt-Anchor\" href=\"#sessionstorage\">#</a> sessionstorage</h5>\n<p>跟 localstorage 的 Api 相同</p>\n<h5 id=\"不同点\"><a class=\"markdownIt-Anchor\" href=\"#不同点\">#</a> 不同点</h5>\n<p>localStorage 一直存储在浏览器</p>\n<p>sessionstorage 关闭浏览器数据就消失</p>\n<h4 id=\"组件自定义事件\"><a class=\"markdownIt-Anchor\" href=\"#组件自定义事件\">#</a> 组件自定义事件</h4>\n<ol>\n<li>\n<p>一种组件间的通信方式，适用于 <strong>子组件 ===&gt; 父组件</strong></p>\n</li>\n<li>\n<p>第二种方式，在父组件中：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;Demo ref=\"xxx\"/&gt;\n.......\nmounted () {\n\tthis.$ref.xxx.$on('自定义事件',this.test)\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>如果想让自定义时间只能触发一次，可以使用 <code>once</code>  修饰符，或者 <code>$once</code>  方法</p>\n</li>\n<li>\n<p>触发自定义事件: <code>this.$emit('自定义事件',数据)</code></p>\n</li>\n<li>\n<p>解绑自定义事件: <code>this.$off('自定义事件')</code></p>\n</li>\n<li>\n<p>组件上也可以绑定原生 DOM 事件，需要使用 <code>native</code>  修饰符</p>\n</li>\n<li>\n<p>注意：通过 this.<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi><mi>e</mi><mi>f</mi><mi>s</mi><mi mathvariant=\"normal\">.</mi><mi>x</mi><mi>x</mi><mi>x</mi><mi mathvariant=\"normal\">.</mi></mrow><annotation encoding=\"application/x-tex\">refs.xxx.</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">s</span><span class=\"mord\">.</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">x</span><span class=\"mord\">.</span></span></span></span>on (‘自定义事件’, 回调函数) 绑定自定义事件时，回调<strong>要么配置在 methods 中，要么用箭头函数</strong>，否则 this 指向会出问题！</p>\n</li>\n</ol>\n<h4 id=\"全局事件总线globaleventbus\"><a class=\"markdownIt-Anchor\" href=\"#全局事件总线globaleventbus\">#</a> 全局事件总线 (GlobalEventBus)</h4>\n<ol>\n<li>\n<p>可以实现任意<strong>组件之间的通信</strong></p>\n</li>\n<li>\n<p>安装全局事件总线:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token operator\">...</span><span class=\"token operator\">...</span>\n\t<span class=\"token function\">beforecreate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">Vue</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>$bus <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span> \n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token operator\">...</span><span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>使用全局事件总线:</p>\n<ol>\n<li>\n<p>接受数据：A 组件想接受数据，则在 A 组件中给 $bus 绑定自定义事件，事件的<strong>回调在 A 组件自身，</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">methods() {\n\tdemo(data){......}\n}\n......\nmounted() {\n\tthis.$bus.$on('xxx',this.demo)\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>提供数据:this.<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi><mi>u</mi><mi>s</mi><mi mathvariant=\"normal\">.</mi></mrow><annotation encoding=\"application/x-tex\">bus.</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">s</span><span class=\"mord\">.</span></span></span></span>emit (‘xxx’, 数据)</p>\n</li>\n</ol>\n</li>\n<li>\n<p>最好在 beforeDestroy 钩子中，用 $off 解绑<strong>当前组件所用到的</strong>事件</p>\n</li>\n</ol>\n<h4 id=\"消息订阅与发布_pubsub\"><a class=\"markdownIt-Anchor\" href=\"#消息订阅与发布_pubsub\">#</a> 消息订阅与发布_pubsub</h4>\n<ol>\n<li>\n<p>一种组件间通信的方式，适用于<strong>任意组件间通信</strong></p>\n</li>\n<li>\n<p>使用步骤:</p>\n<ol>\n<li>\n<p>安装 pubsub: <code>npm i pubsub-js</code></p>\n</li>\n<li>\n<p>引入:  <code>import pubsub from 'pubsub-js'</code></p>\n</li>\n<li>\n<p>接受数据: A 组件想接收数据，则在 A 组件中订阅消息，订阅的<strong>回调在 A 组件自身</strong></p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token function\">methods</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">demo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">msgName<span class=\"token punctuation\">,</span>data</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">...</span><span class=\"token operator\">...</span>\n<span class=\"token function\">mounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pubId <span class=\"token operator\">=</span> pubsub<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'xxx'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">)</span> <span class=\"token comment\">//订阅消息</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>提供数据:  <code>pubsub.public('xxx',数据)</code></p>\n</li>\n<li>\n<p>最好在 beforeDestroy 钩子中，用 Pubsub.unsubscibe (pubId) 取消订阅</p>\n</li>\n</ol>\n</li>\n</ol>\n<h4 id=\"nexttick\"><a class=\"markdownIt-Anchor\" href=\"#nexttick\">#</a> nextTick</h4>\n<ol>\n<li>语法:  <code>this.$nextTick(function () { 代码})</code></li>\n<li>作用：在下一次 DOM 更新结束后执行其指定的回调函数</li>\n<li>什么时候用：当改变数据后，要基于更新后的新 DOM 进行某些操作时，要在 nextTick 所指定的回调函数中执行</li>\n</ol>\n<h4 id=\"过渡与动画\"><a class=\"markdownIt-Anchor\" href=\"#过渡与动画\">#</a> 过渡与动画</h4>\n<p>暂放</p>\n<h3 id=\"vue中的ajax\"><a class=\"markdownIt-Anchor\" href=\"#vue中的ajax\">#</a> Vue 中的 ajax</h3>\n<h4 id=\"vue脚手架配置代理\"><a class=\"markdownIt-Anchor\" href=\"#vue脚手架配置代理\">#</a> Vue 脚手架配置代理</h4>\n<h5 id=\"方法一\"><a class=\"markdownIt-Anchor\" href=\"#方法一\">#</a> 方法一</h5>\n<p>​\t在 Vue.config.js 中添加如下配置:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">devServer<span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>\n\tproxy<span class=\"token operator\">:</span><span class=\"token string\">\"http://localhost:5000\"</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>说明:</p>\n<pre><code>1. 优点:配置简单,请求资源时直接发给前端(8080)即可\n1. 缺点:不能配置多个代理,不能灵活的控制请求是否走代理.\n1. 工作方式:若按照上述配置代理,当请求了前端不存在的资源时,那么该请求会转发给服务器(优先匹配前端资源)\n</code></pre>\n<h5 id=\"方法二\"><a class=\"markdownIt-Anchor\" href=\"#方法二\">#</a> 方法二</h5>\n<p>编写 Vue.config.js 配置具体代理规则:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">moduel<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\tdevServer<span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>\n\t\tproxy<span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token string\">'/api1'</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{</span><span class=\"token comment\">//匹配所有以'/api1/开头的请求路径</span>\n\t\t\t\ttarget<span class=\"token operator\">:</span><span class=\"token string\">'http://localhost:5000'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//代理目标的基础路径</span>\n                changeOrigin<span class=\"token operator\">:</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n                pathRewrite<span class=\"token operator\">:</span><span class=\"token punctuation\">{</span><span class=\"token string\">'^api1'</span><span class=\"token operator\">:</span><span class=\"token string\">''</span><span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'/api2'</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{</span><span class=\"token comment\">//匹配所有以'/api2/开头的请求路径</span>\n\t\t\t\ttarget<span class=\"token operator\">:</span><span class=\"token string\">'http://localhost:5000'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//代理目标的基础路径</span>\n                changeOrigin<span class=\"token operator\">:</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n                pathRewrite<span class=\"token operator\">:</span><span class=\"token punctuation\">{</span><span class=\"token string\">'^api2'</span><span class=\"token operator\">:</span><span class=\"token string\">''</span><span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>说明:</p>\n<pre><code>1. 优点：可以配置多个代理，且可以灵活的控制请求是否走代理。\n1. 缺点：配置略微繁琐，请求资源时必须加前缀\n</code></pre>\n<h4 id=\"vue项目中常用的ajax库\"><a class=\"markdownIt-Anchor\" href=\"#vue项目中常用的ajax库\">#</a> vue 项目中常用的 ajax 库</h4>\n<h5 id=\"axios库使用\"><a class=\"markdownIt-Anchor\" href=\"#axios库使用\">#</a> axios 库使用</h5>\n<p>安装  <code>npm i axios</code></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//先引入</span>\n<span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span>\n<span class=\"token comment\">//使用</span>\n  axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">api</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>\n                <span class=\"token parameter\">response</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n                    \n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                <span class=\"token parameter\">error</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n                    \n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"vue-resource\"><a class=\"markdownIt-Anchor\" href=\"#vue-resource\">#</a> vue-resource</h5>\n<p>vue 自身的插件库，也封装了 ajax, 现在不常用 推荐还是使用 axios</p>\n<p><code>this.$http.get(' ').then( Response =&gt; { }, error =&gt; {})</code></p>\n<h4 id=\"slot插槽\"><a class=\"markdownIt-Anchor\" href=\"#slot插槽\">#</a> Slot 插槽</h4>\n<h5 id=\"默认插槽\"><a class=\"markdownIt-Anchor\" href=\"#默认插槽\">#</a> 默认插槽</h5>\n<p>slot 标签中包含的就是父组件中传入子组件标签中的内容</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">//父组件中\n&lt;Category&gt;\n\t&lt;h1&gt; 你好 &lt;h1&gt;\n&lt;/Category&gt;\n\n//Category标签中\n&lt;slot&gt;&lt;/slot&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"具名插槽\"><a class=\"markdownIt-Anchor\" href=\"#具名插槽\">#</a> 具名插槽</h5>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">//父组件中\n&lt;Category&gt;\n\t&lt;h1 slot=\"demo\"&gt; 你好 &lt;h1&gt;\n\t&lt;h1 slot=\"demo2\"&gt; 你好啊 &lt;h1&gt;\n&lt;/Category&gt;\n\n//Category标签中\n&lt;slot name=\"demo\"&gt;&lt;/slot&gt;\n&lt;slot name=\"demo2\"&gt;&lt;/slot&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><code>slot</code>  与 <code>name</code>  相<strong>对应</strong></p>\n<p>template 标签中用 v-slot</p>\n<h5 id=\"作用域插槽\"><a class=\"markdownIt-Anchor\" href=\"#作用域插槽\">#</a> 作用域插槽</h5>\n<p>数据在组件自身，但根据数据生成的机构需要组件的使用者来决定</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;Category&gt;\n&lt;template scope=\"nihao\"&gt;\n\t&lt;h1&gt; {{nihao.xxx}} &lt;h1&gt;  //相当于 games.xxx\n\t&lt;h1&gt; 你好啊 &lt;h1&gt;\n&lt;/template&gt;\n\n&lt;/Category&gt;\n\n//Category标签中\n&lt;slot :game=\"games\"&gt;&lt;/slot&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"vuex\"><a class=\"markdownIt-Anchor\" href=\"#vuex\">#</a> Vuex</h3>\n<p>在 Vue 中实现集中式数据管理的一个 Vue<strong> 插件</strong>，对 Vue 应用中多个组件的共享状态进行集中式的管理 (读 / 写), 也是一种组件间通信的方式，且使用于<strong>任何组件间</strong>通信</p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/vuex.png\" alt=\"vuex\"></p>\n<h4 id=\"搭建vuex环境\"><a class=\"markdownIt-Anchor\" href=\"#搭建vuex环境\">#</a> 搭建 Vuex 环境</h4>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">//在main.js中 传入store\n\nimport Vue from \"vue\";\nimport App from \"./App.vue\";\nimport store from \"./store/index\";\n\nnew Vue({\n  render: (h) =&gt; h(App),\n  store,\n  beforeCreate() {\n    Vue.prototype.$bus = this;\n  },\n}).$mount(\"#app\");\n\n//在store文件夹中store.js中\n\nimport Vue from \"vue\";\nimport Vuex from \"vuex\";\n\nVue.use(Vuex);\n//准备 actions 用于响应组件中的动作\n\nconst actions = {} //响应组件中的数据\nconst mutations = {} //用于操作数据\nconst state = {} //存储数据\n\nconst store = new Vuex.Store({actions,mutations,state}) //创建store\n\nexport default store<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"基本使用\"><a class=\"markdownIt-Anchor\" href=\"#基本使用\">#</a> 基本使用</h4>\n<ol>\n<li>组件读取 Vuex 中的数据:  <code>$store.state.sum</code></li>\n<li>组件修改 vuex 中的数据:  <code>$store.dispatch('action中的方法名',数据)</code>  或者 <code>$store.commit('mutations中的方法名',数据)</code></li>\n</ol>\n<h4 id=\"getters配置项\"><a class=\"markdownIt-Anchor\" href=\"#getters配置项\">#</a> getters 配置项</h4>\n<p>用于对 state 中的数据进行加工，相当于 vuex 中的计算属性</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> getters <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">bigSum</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> state<span class=\"token punctuation\">.</span>sum <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"mapstate与mapgetters\"><a class=\"markdownIt-Anchor\" href=\"#mapstate与mapgetters\">#</a> mapState 与 mapGetters</h4>\n<ol>\n<li>\n<p><strong>mapState</strong> 方法：帮助映射 state 中的数据成为计算属性</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">computed: {\n\t//对象写法\n\t...mapState({sum:'sum'})\n\t//数组写法\n\t...mapState(['sum'])\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>mapGetters 方法：帮助我们映射 getters 中的数据成为计算属性</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">computed: {\n\t//对象写法\n\t...mapGetters({bigSum:'bigSum'})\n\t//数组写法\n\t...mapGetters(['bigSum'])\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<h4 id=\"mapactions和mapmutations\"><a class=\"markdownIt-Anchor\" href=\"#mapactions和mapmutations\">#</a> mapActions 和 mapMutations</h4>\n<ol>\n<li>\n<p><code>mapActions</code> : 帮助我们生成与 <code>actions</code>  对话的方法，即：包含 <code>$store.dispatch(xxx)</code>  的函数</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">methods: {\n\t//对象\n\tmapActions({increment:\"jia\"})\n\t//数组\n\tmapActions(['jia'])\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p><code>mapMutations</code> : 帮助生成与 <code>mutations</code>  对话的方法</p>\n<p>类似 略</p>\n<p><strong>注意</strong>，现在参数通过在标签中事件触发传递 <code>@click=\"increment(n)\"</code></p>\n</li>\n</ol>\n<h4 id=\"vue模块化\"><a class=\"markdownIt-Anchor\" href=\"#vue模块化\">#</a> Vue 模块化</h4>\n<ol>\n<li>\n<p>目的：让代码更好维护，让多种数据分类更加准确</p>\n</li>\n<li>\n<p>修改 store.js</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">const countAbout = {\n\tnamespaced:true,\n\tstate:{}.\n\tactions:{},\n\tmutations:{},\n\tgetters:{\n\t\n\t}\n}\n\nconst store = new Vuex.Store({moduels:{countAbout}})<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>开启命名空间后，组件中读取 state 数据</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">//方式1 自己读取\nthis.$store.state.personAbout.list\n//方式二：借助mapState读取\n...mapState('personAbout',['sum','school','subject'])<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>开启命名空间后读取 getters 中的数据</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">//方式1 自己读取\nthis.$store.getters['personAbout/firstPersonName']\n//方式二：借助mapGetters\n...mapGetters('countAbout',['bigSum'])<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>开启命名空间后，组件中调用 dispatch</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">//方式1 自己直接dispatch\nthis.$store.dispatch('personAbout/addPerson',person)\n//方式二：借助mapActions读取\n...mapActions('countAbout',['jia'])<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>开启命名空间后，组件中调用 commit\\</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">//方式1 自己直接commit\nthis.$store.commit('personAbout/ADD_PERSON',person)\n//方式二：借助mapActions读取\n...mapMutations('mapMutations',['JIA'])<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<h3 id=\"vue-router路由\"><a class=\"markdownIt-Anchor\" href=\"#vue-router路由\">#</a> Vue-Router 路由</h3>\n<p>Vue 的一个插件库，实现 Single Page Application</p>\n<h4 id=\"1基本使用\"><a class=\"markdownIt-Anchor\" href=\"#1基本使用\">#</a> 1. 基本使用</h4>\n<ol>\n<li>\n<p>安装 <code>vue-router</code> , 命令:  <code>npm i vue-router</code></p>\n</li>\n<li>\n<p>应用插件  <code>Vue.use(VueRouter)</code></p>\n</li>\n<li>\n<p>编写 router 配置项</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//创建整个应用的路由</span>\n<span class=\"token keyword\">import</span> VueRouter <span class=\"token keyword\">from</span> <span class=\"token string\">\"vue-router\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> AboutView <span class=\"token keyword\">from</span> <span class=\"token string\">\"../components/AboutView\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> HomeView <span class=\"token keyword\">from</span> <span class=\"token string\">\"../components/HomeView\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//创建一个路由器</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">VueRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  routes<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      path<span class=\"token operator\">:</span> <span class=\"token string\">\"/about\"</span><span class=\"token punctuation\">,</span>\n      component<span class=\"token operator\">:</span> AboutView<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      path<span class=\"token operator\">:</span> <span class=\"token string\">\"/home\"</span><span class=\"token punctuation\">,</span>\n      component<span class=\"token operator\">:</span> HomeView<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>实现切换</p>\n<p><code>&lt;router-link class=\"list-group-item\" active-class=\"active\" to=\"/about\"&gt;About&lt;/router-link&gt;</code></p>\n</li>\n<li>\n<p>指定展示位置</p>\n<p><code>&lt;router-view&gt;</code></p>\n</li>\n</ol>\n<h4 id=\"2几个注意点\"><a class=\"markdownIt-Anchor\" href=\"#2几个注意点\">#</a> 2. 几个注意点</h4>\n<ol>\n<li>路由组件通常放在 pages 文件夹，一般组件通常存放在 components 文件夹</li>\n<li>通过切换，隐藏了的路由组件，默认是被销毁了</li>\n<li>每个组件都有自己的 $route 属性，里面存储着自己的路由信息</li>\n<li>整个应用只有一个 router, 可以通过组件的 $router 属性获取</li>\n</ol>\n<h4 id=\"3嵌套路由\"><a class=\"markdownIt-Anchor\" href=\"#3嵌套路由\">#</a> 3. 嵌套路由</h4>\n<ol>\n<li>\n<p>配置路由规则，使用<strong> children</strong> 配置项</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">routes:[\n\t{\n\t\tpath:'/home'\n\t\tcomponent:AboutView,\n\t\tchildren:[\n\t\t\t{\n\t\t\t\tpath:'news',\n\t\t\t\tcomponent:NewsView\n\t\t\t}\n\t\t]\n\t}\n]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>跳转 (要写<strong>完整路径</strong>)</p>\n<p><code>&lt;router-link to=\"/home/news\"&gt; &lt;router-link&gt;</code></p>\n</li>\n</ol>\n<h4 id=\"4路由传参\"><a class=\"markdownIt-Anchor\" href=\"#4路由传参\">#</a> 4. 路由传参</h4>\n<h5 id=\"41-query参数\"><a class=\"markdownIt-Anchor\" href=\"#41-query参数\">#</a> 4.1 query 参数</h5>\n<ol>\n<li>\n<p>传递参数</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">跳转并携带query参数,to的字符串写法\n&lt;router-link :to=\"/home/message/detail?id=666&amp;title=你好\"&gt;跳转 &lt;router-link&gt;\n\nto的对象写法\n&lt;router-link :to=\"{\n\tpath:'/home/message/detail',\n\tquery:{\n\t\tid:666,\n\t\ttitle:'你好',\n\t}\n}\"&gt;跳转 &lt;router-link&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>接收参数</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">$route.query.id\n$route.query.title<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<p><strong>不打扰路由器的配置</strong></p>\n<h5 id=\"42-命名路由\"><a class=\"markdownIt-Anchor\" href=\"#42-命名路由\">#</a> 4.2 命名路由</h5>\n<ol>\n<li>作用：简化路由的跳转</li>\n<li>如何使用:\n<ol>\n<li>给路由加上 <code>name:xxx</code>  属性，给路由命名</li>\n<li>在跳转的 to 的对象写法中 不写 path 直接写 <code>name:xxx</code>  即可实现跳转</li>\n</ol>\n</li>\n</ol>\n<h5 id=\"43-params参数\"><a class=\"markdownIt-Anchor\" href=\"#43-params参数\">#</a> 4.3 params 参数</h5>\n<ol>\n<li>\n<p>配置路由，声明接受 params 参数</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">routes:[\n\t{\n\t\tpath:'/home'\n\t\tcomponent:AboutView,\n\t\tchildren:[\n\t\t\t{\n\t\t\t\tpath:'news/:id/:title',\n\t\t\t\tcomponent:NewsView\n\t\t\t}\n\t\t]\n\t}\n]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>传递参数</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">跳转并携带query参数,to的字符串写法\n&lt;router-link :to=\"/home/message/detail/666/你好\"&gt;跳转 &lt;router-link&gt;\n\nto的对象写法\n&lt;router-link :to=\"{\n\tname:xxx      \n\tparams:{\n\t\tid:666,\n\t\ttitle:'你好',\n\t}\n}\"&gt;跳转 &lt;router-link&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong><u>使用 params 传递参数 不能使用 path 直接使用 name</u></strong></p>\n</li>\n<li>\n<p>接受参数</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">$route.params.id\n$route.params.title<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<h5 id=\"44-路由的props配置\"><a class=\"markdownIt-Anchor\" href=\"#44-路由的props配置\">#</a> 4.4 路由的 props 配置</h5>\n<p>让路由组件更加方便地收到参数</p>\n<ol>\n<li>\n<p>props 的第一种写法 (对象)</p>\n<p>该写法中的所有 key-value 都会以 props 的形式传给 Detail 组件</p>\n<p>死数据 不常用</p>\n</li>\n<li>\n<p>props 的第二种写法，值为布尔值</p>\n<p>若布尔值为真，就会把该路由组件收到的所有 params 组件以 props 的形式传给组件</p>\n</li>\n<li>\n<p>props 的第三种写法，值为函数</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">props($route) {\n\treturn {id:$route.query.id,title:$route.query.title}\n}\n\nprops({query:{id,title}})\n{\n return {id,title}\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<h4 id=\"5router-link的replace属性\"><a class=\"markdownIt-Anchor\" href=\"#5router-link的replace属性\">#</a> 5.router-link 的 replace 属性</h4>\n<ol>\n<li>作用：控制路由跳转时操作浏览器历史记录的模式</li>\n<li>浏览器历史记录有 2 种模式  <code>push</code>  追加和 <code>replace</code>  替换 默认为 <code>push</code></li>\n<li>在 <code>&lt;router-link&gt;&lt;/router-link&gt;</code>  标签加上 replace 则可以更改为 replace 模式</li>\n</ol>\n<h4 id=\"6-编程式路由导航\"><a class=\"markdownIt-Anchor\" href=\"#6-编程式路由导航\">#</a> 6. 编程式路由导航</h4>\n<ol>\n<li>\n<p>作用：不借助 <code>&lt;router-link&gt;</code>  进行路由跳转，让路由跳转更灵活</p>\n</li>\n<li>\n<p>编码:</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$router<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\tname<span class=\"token operator\">:</span><span class=\"token string\">'xxx'</span><span class=\"token punctuation\">,</span>\n    params<span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>\n        \n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$router<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    name<span class=\"token operator\">:</span><span class=\"token string\">'xxx'</span><span class=\"token punctuation\">,</span>\n    params<span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>\n        \n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$router<span class=\"token punctuation\">.</span><span class=\"token function\">forward</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$router<span class=\"token punctuation\">.</span><span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$router<span class=\"token punctuation\">.</span><span class=\"token function\">go</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<h4 id=\"7-缓存路由组件\"><a class=\"markdownIt-Anchor\" href=\"#7-缓存路由组件\">#</a> 7. 缓存路由组件</h4>\n<p>让不展示的组件保持挂载，以保留其中的数据</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>keep-alive</span> <span class=\"token attr-name\">include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>组件名<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">:include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>[<span class=\"token punctuation\">'</span>xxx<span class=\"token punctuation\">'</span>,<span class=\"token punctuation\">'</span>yyy<span class=\"token punctuation\">'</span>]<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>router-link</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>router-link</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>keep-alive</span><span class=\"token punctuation\">&gt;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"8-两个新的生命周期钩子\"><a class=\"markdownIt-Anchor\" href=\"#8-两个新的生命周期钩子\">#</a> 8. 两个新的生命周期钩子</h4>\n<p><strong>路由组件独有</strong></p>\n<p><code>activated(){}</code> : 组件被激活时调用</p>\n<p><code>deactivated() {}</code> : 组件失活时调用</p>\n<h4 id=\"9路由守卫\"><a class=\"markdownIt-Anchor\" href=\"#9路由守卫\">#</a> 9. 路由守卫</h4>\n<h5 id=\"91-全局前置\"><a class=\"markdownIt-Anchor\" href=\"#91-全局前置\">#</a> 9.1 全局前置</h5>\n<p><strong>初始化的时候</strong>调用</p>\n<p>每次<strong>切换路由前</strong>调用</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">router<span class=\"token punctuation\">.</span><span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">to<span class=\"token punctuation\">,</span>from<span class=\"token punctuation\">,</span>next</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// to 去哪个路由 to.path to.name</span>\n    <span class=\"token comment\">// from 来自哪个路由 </span>\n    <span class=\"token comment\">// next() 允许通行</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><code>meta:{isAuth:true}</code> : 在路由器中 meta 中添加数据，表示是否需要鉴权</p>\n<h5 id=\"92-全局后置\"><a class=\"markdownIt-Anchor\" href=\"#92-全局后置\">#</a> 9.2 全局后置</h5>\n<p><strong>初始化的时候</strong>调用</p>\n<p>每次<strong>切换路由后</strong>调用</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">router<span class=\"token punctuation\">.</span><span class=\"token function\">afterEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">to<span class=\"token punctuation\">,</span><span class=\"token keyword\">from</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// to 去哪个路由 to.path to.name</span>\n    <span class=\"token comment\">// from 来自哪个路由 </span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"93-独享路由守卫\"><a class=\"markdownIt-Anchor\" href=\"#93-独享路由守卫\">#</a> 9.3 独享路由守卫</h5>\n<p><code>beforeEneter: (to,from,next) =&gt; {}</code></p>\n<h5 id=\"94-组件内路由守卫\"><a class=\"markdownIt-Anchor\" href=\"#94-组件内路由守卫\">#</a> 9.4 组件内路由守卫</h5>\n<p><code>beforeRouteEnter(to,from,next)</code> : 进入该组件时被调用</p>\n<p><code>beforeRouteLeave(to,from,next)</code> : 离开该组件时被调用</p>\n<h4 id=\"10-history和hash模式\"><a class=\"markdownIt-Anchor\" href=\"#10-history和hash模式\">#</a> 10. History 和 Hash 模式</h4>\n<p><code>mode:history</code></p>\n<p>默认为 hash 模式 会带#</p>\n<h3 id=\"基础模板作者学习时候用来构建最基本html文件的\"><a class=\"markdownIt-Anchor\" href=\"#基础模板作者学习时候用来构建最基本html文件的\">#</a> 基础模板 (作者学习时候用来构建最基本 html 文件的)</h3>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">http-equiv</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>X-UA-Compatible<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>IE=edge<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span> <span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>../js/vue.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">&gt;</span></span>Document<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>root<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\">\n        <span class=\"token keyword\">const</span> vm <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            <span class=\"token function\">data</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span><span class=\"token punctuation\">{</span>\n                    \n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            methods<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                \n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        vm<span class=\"token punctuation\">.</span><span class=\"token function\">$mount</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#root'</span><span class=\"token punctuation\">)</span>\n    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">&gt;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n",
            "tags": [
                "vue"
            ]
        },
        {
            "id": "https://github.com/YogMas/YogMas.github.io/2021/11/06/css-xin/",
            "url": "https://github.com/YogMas/YogMas.github.io/2021/11/06/css-xin/",
            "title": "Css新",
            "date_published": "2021-11-05T16:00:00.000Z",
            "content_html": "<h1 id=\"css新\"><a class=\"markdownIt-Anchor\" href=\"#css新\">#</a> CSS (新)</h1>\n<p>复习 (好吧 太久没用忘了 其实是重新学习过程) CSS 时记忆的笔记</p>\n<h2 id=\"定位position\"><a class=\"markdownIt-Anchor\" href=\"#定位position\">#</a> 定位 (position)</h2>\n<ul>\n<li>static: 正常流定位</li>\n<li>relative: 相对定位</li>\n<li>absolute,fixed: 绝对定位</li>\n<li>sticky: 粘性定位</li>\n</ul>\n<h3 id=\"static正常流定位\"><a class=\"markdownIt-Anchor\" href=\"#static正常流定位\">#</a> Static 正常流定位</h3>\n<p>按照从上到下文档刷新的方式，就是最默认的定位方式</p>\n<h3 id=\"relative相对定位\"><a class=\"markdownIt-Anchor\" href=\"#relative相对定位\">#</a> relative 相对定位</h3>\n<p>相对于原位置的定位，可以相对于原位置进行位置的移动</p>\n<p><strong>相对定位会保留原有的样式</strong>，意思就是说相对定位移动后，原来那个位置的样式，不会被覆盖，可以理解为被隐藏了但是还在</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token property\">position</span><span class=\"token punctuation\">:</span>relative<span class=\"token punctuation\">;</span>\n<span class=\"token property\">top</span><span class=\"token punctuation\">:</span>\n<span class=\"token property\">left</span><span class=\"token punctuation\">:</span>\n<span class=\"token property\">right</span><span class=\"token punctuation\">:</span>\n<span class=\"token property\">bottom</span><span class=\"token punctuation\">:</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"absolute绝对定位\"><a class=\"markdownIt-Anchor\" href=\"#absolute绝对定位\">#</a> absolute 绝对定位</h3>\n<p>absolute 是相对于上一个<strong>非 static 定位</strong>的祖宗节点的位置</p>\n<p>意思就是说 absolute 会向上找，找到一个不会 static 定位的祖宗节点 (最上面是<strong> body</strong>),top 相当于距离这个父节点顶部的距离，其他类似</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token property\">position</span><span class=\"token punctuation\">:</span>absolute<span class=\"token punctuation\">;</span>\n<span class=\"token property\">top</span><span class=\"token punctuation\">:</span>\n<span class=\"token property\">left</span><span class=\"token punctuation\">:</span>\n<span class=\"token property\">right</span><span class=\"token punctuation\">:</span>\n<span class=\"token property\">bottom</span><span class=\"token punctuation\">:</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"fixed固定定位\"><a class=\"markdownIt-Anchor\" href=\"#fixed固定定位\">#</a> fixed 固定定位</h3>\n<p>fixed 是相对于<strong>整个视窗</strong>的位移，也是固定不变的</p>\n<h3 id=\"static粘性定位\"><a class=\"markdownIt-Anchor\" href=\"#static粘性定位\">#</a> static 粘性定位</h3>\n<p>当粘性定位的盒子的<strong>真实位置</strong>在视窗内部的时候，他是正常显示的，但是当他要脱离视窗的时候，他会像固定定位一样，导致不脱离视窗</p>\n<h2 id=\"浮动\"><a class=\"markdownIt-Anchor\" href=\"#浮动\">#</a> 浮动</h2>\n<p>块是会自动换行的，加上 float 之后，可以放在一行的会放在一行，一行无法放下时再进行换行</p>\n<p>新的未浮动块会在浮动块的上方而不是排布在后方，要排布在后方可以清除浮动块的影响 使用 clear</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token property\">float</span><span class=\"token punctuation\">:</span>left\n<span class=\"token property\">clear</span><span class=\"token punctuation\">:</span>left/right/both<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h2 id=\"flex布局\"><a class=\"markdownIt-Anchor\" href=\"#flex布局\">#</a> flex 布局</h2>\n<p>弹性布局，也就是当拉伸视窗的时候，布局随着视窗的改变会自动变化</p>\n<p>定义在<strong>父节点盒子上</strong></p>\n<ol>\n<li><code>flex-direction</code> ： 属性指定了内部元素是如何在 flex 容器中<strong>布局</strong>的，<strong>定义了主轴的方向</strong> (正方向或反方向)。\n<ul>\n<li><code>row</code> :flex 容器的主轴被定义为与文本方向相同。 主轴起点和主轴终点与内容方向相同。</li>\n<li><code>row-reverse</code> : 表现和 row 相同，但是置换了主轴起点和主轴终点。</li>\n<li><code>column</code> :flex 容器的主轴和块轴相同。主轴起点与主轴终点和书写模式的前后点相同</li>\n<li><code>column-reverse</code> : 表现和 column 相同，但是置换了主轴起点和主轴终点</li>\n</ul>\n</li>\n<li><code>flex-wrap</code> : 指定 flex 元素<strong>单行显示还是多行显示</strong>。如果允许换行，这个属性允许你控制行的堆叠方向。\n<ul>\n<li><code>nowrap</code> : 默认值。不换行。</li>\n<li><code>wrap</code> : 换行，第一行在上方。</li>\n<li><code>wrap-reverse</code> : 换行，第一行在下方。</li>\n</ul>\n</li>\n<li><code>flex-flow</code> : <code>flex-direction</code>  和  <code>flex-wrap</code>  的简写。默认值为： <code>row nowrap</code></li>\n<li><code>justify-content</code> : 属性定义了浏览器之间，如何分配顺着弹性容器主轴 (或者网格行轴) 的元素之间及其周围的空间。也就是<strong>控制横向对齐方式</strong>\n<ul>\n<li><code>flex-start</code> ：默认值。左对齐。</li>\n<li><code>flex-end</code> ：右对齐。</li>\n<li><code>space-between</code> ：左右两段对齐。</li>\n<li><code>space-around</code> ：在每行上均匀分配弹性元素。相邻元素间距离相同。每行第一个元素到行首的距离和每行最后一个元素到行尾的距离将会是相邻元素之间距离的一半。</li>\n<li><code>space-evenly</code> ：flex 项都沿着主轴均匀分布在指定的对齐容器中。相邻 flex 项之间的间距，主轴起始位置到第一个 flex 项的间距，主轴结束位置到最后一个 flex 项的间距，都完全一样。</li>\n</ul>\n</li>\n<li><code>align-items</code> ：控制<strong>纵轴 (交叉轴</strong>对齐)\n<ul>\n<li><code>flex-start</code> ：元素向主轴起点对齐。</li>\n<li><code>flex-end</code> ：元素向主轴终点对齐。</li>\n<li><code>center</code> ：元素在侧轴居中。</li>\n<li><code>stretch</code> ：弹性元素被在侧轴方向被拉伸到与容器相同的高度或宽度。</li>\n</ul>\n</li>\n<li><code>align-content</code> : 与 <code>align-items</code>  类似但是有以下区别\n<ul>\n<li>前者会均匀分布，后者会使所有行紧贴在一起</li>\n<li>当只有一行的时候，前者仍然会居中，后者会失去居中</li>\n</ul>\n</li>\n</ol>\n<p>定义在<strong> flex 盒子内部元素中</strong></p>\n<ol>\n<li>\n<p><code>order</code> : 定义 <code>flex</code>  项目的顺序，值越小越靠前。</p>\n</li>\n<li>\n<p><code>flex-grow</code> :CSS 属性 flex-grow CSS 设置 flex 项主尺寸 的 flex 增长系数。<strong>负值无效，默认为 0。</strong> <strong>也就是当视窗变大的时候 块也等比例变大</strong></p>\n</li>\n<li>\n<p><code>flex-shrink</code> : 属性指定了 flex 元素的收缩规则。flex 元素仅在默认宽度之和大于容器的时候才会发生收缩，其收缩的大小是依据 flex-shrink 的值。<strong>负值无效，默认为 1。</strong></p>\n</li>\n<li>\n<p><code>flex-basis</code> : 设置默认宽度，<strong> 优先级大于默认 width</strong></p>\n</li>\n<li>\n<p><code>flex</code> : <code>flex-grow</code> 、 <code>flex-shrink</code> 、 <code>flex-basis</code>  的缩写。</p>\n<p>常用取值： <code>flex: 1 1 auto</code>        <code>flex: 0 0 auto</code></p>\n</li>\n</ol>\n",
            "tags": [
                "Css"
            ]
        },
        {
            "id": "https://github.com/YogMas/YogMas.github.io/2021/11/06/css1/",
            "url": "https://github.com/YogMas/YogMas.github.io/2021/11/06/css1/",
            "title": "Css-first",
            "date_published": "2021-11-05T16:00:00.000Z",
            "content_html": "<h1 id=\"css1\"><a class=\"markdownIt-Anchor\" href=\"#css1\">#</a> css1</h1>\n<h3 id=\"the-article-from-yogmas-also-sam\"><a class=\"markdownIt-Anchor\" href=\"#the-article-from-yogmas-also-sam\">#</a> the article from yogmas also sam</h3>\n<h4 id=\"1css基本架构\"><a class=\"markdownIt-Anchor\" href=\"#1css基本架构\">#</a> 1.css 基本架构</h4>\n<blockquote>\n<pre><code>&lt;html&gt; \n&lt;head&gt;\n&lt;style&gt;&lt;/style&gt;\n &lt;/head&gt;\n &lt;body&gt;&lt;/body&gt;\n &lt;/html&gt;\n style为css放置位置\n</code></pre>\n</blockquote>\n<p>前期学习先将 css 放置在 html 文件夹里面后期会单独利用 css 文件来写 css</p>\n<h4 id=\"2选择器\"><a class=\"markdownIt-Anchor\" href=\"#2选择器\">#</a> 2. 选择器</h4>\n<h6 id=\"标签选择器\"><a class=\"markdownIt-Anchor\" href=\"#标签选择器\">#</a> 标签选择器</h6>\n<blockquote>\n<p>选择器 {样式}<br>\n 给谁改样式 {改什么样式}<br>\neg.p { color: red;<br>\nfont-size: 12px; }</p>\n</blockquote>\n<p>标签选择器为大类选择，同一类标签全部都会被 css 修改</p>\n<h6 id=\"类选择器\"><a class=\"markdownIt-Anchor\" href=\"#类选择器\">#</a> 类选择器</h6>\n<blockquote>\n<pre><code>.id {} \neg .red {color:red;}\n&lt;# class=\"id\"&gt;  &lt;/#&gt;\n</code></pre>\n</blockquote>\n<p>这里的 ID 还需要与 html 中的 class 相互匹配 #可以替换成任何你想选择的类别 id 可以替换成任何你命名的字母或者单词<br>\n<strong>类选择器口诀：样式点定义  结构类 (class) 调用  一个或多个 开发最常用</strong><br>\n<a href=\"https://imgtu.com/i/IQmbIf\"><img src=\"https://z3.ax1x.com/2021/11/06/IQmbIf.png\" alt=\"IQmbIf.png\"></a><br>\n 同时类选择器可以有多个 ID 都会起作用 中间用空格隔开 例如<br>\n<a href=\"https://imgtu.com/i/IQmHdP\"><img src=\"https://z3.ax1x.com/2021/11/06/IQmHdP.png\" alt=\"IQmHdP.png\"></a></p>\n<h6 id=\"id选择器\"><a class=\"markdownIt-Anchor\" href=\"#id选择器\">#</a> id 选择器</h6>\n<p>id 选择器与类选择器相似，不过 ID 选择器只能使用一次 并且一个 ID 只能调用一次</p>\n<blockquote>\n<pre><code>#ID {}\n&lt;XX id=\"\"&gt;  &lt;/XX&gt;\n</code></pre>\n</blockquote>\n<h6 id=\"通配符选择器\"><a class=\"markdownIt-Anchor\" href=\"#通配符选择器\">#</a> 通配符选择器</h6>\n<blockquote>\n<pre><code>* { }\n</code></pre>\n</blockquote>\n<p>通配符 简而言之就是对所有元素和类都有作用，后期主要用来先去除掉浏览器自身所带的一些 css 属性方便我们后续进行 css 操作</p>\n<h4 id=\"3css字体属性\"><a class=\"markdownIt-Anchor\" href=\"#3css字体属性\">#</a> 3.CSS 字体属性</h4>\n<p><a href=\"https://imgtu.com/i/IQmjzQ\"><img src=\"https://z3.ax1x.com/2021/11/06/IQmjzQ.png\" alt=\"IQmjzQ.png\"></a></p>\n<h6 id=\"字体系列\"><a class=\"markdownIt-Anchor\" href=\"#字体系列\">#</a> 字体系列</h6>\n<blockquote>\n<p>font-family:’   ';</p>\n</blockquote>\n<p>通常会根据团队的要求来确定书写的字体 一般来说是微软雅黑也就是 microsoft YaHei 当然也可以有其他的一系列字体<br>\n比如在后期的<strong>字体图标</strong>中就需要修改 font-family</p>\n<h6 id=\"字体大小\"><a class=\"markdownIt-Anchor\" href=\"#字体大小\">#</a> 字体大小</h6>\n<blockquote>\n<p>font-size:;</p>\n</blockquote>\n<p>顾名思义，是修改字体的大小，不过需要注意的是这后面不能跟单独的数字 这样是没有效果的 需要跟单位 px</p>\n<h6 id=\"字体粗细\"><a class=\"markdownIt-Anchor\" href=\"#字体粗细\">#</a> 字体粗细</h6>\n<blockquote>\n<p>font-weight:  ;</p>\n</blockquote>\n<p>这里需要谨记 2 个数字<br>\n 700: 加粗<br>\n 400: 正常大小<br>\n font-weight 后面跟数字，可以根据需要来进行调整 不过一般都是 700 和 400 之间切换</p>\n<h6 id=\"文字样式风格\"><a class=\"markdownIt-Anchor\" href=\"#文字样式风格\">#</a> 文字样式风格</h6>\n<blockquote>\n<p>font-style: ;</p>\n</blockquote>\n<p>一般运用的都 italic (倾斜) 和 normal (正常) 两种<br>\n实际运用场景：<br>\n1. 用来修改需要倾斜的汉字<br>\n 2. 当没有标签可用时，可以用 em 倾斜标签先将汉字包括，在通过 font-style:normal；将倾斜属性去掉</p>\n<h6 id=\"字体复合属性\"><a class=\"markdownIt-Anchor\" href=\"#字体复合属性\">#</a> 字体复合属性</h6>\n<p>通过简写的方式来节约代码 (不过有顺序要求)</p>\n<blockquote>\n<pre><code>font: font-style  font-weight  font-size/line-height  font-family;\neg:font: italic 700 16px 'Microsoft yahei';\n 前面两个可以省略，但是后面连个一定要写\n</code></pre>\n</blockquote>\n<h4 id=\"4文本外观属性\"><a class=\"markdownIt-Anchor\" href=\"#4文本外观属性\">#</a> 4. 文本外观属性</h4>\n<p><a href=\"https://imgtu.com/i/IQn9Zq\"><img src=\"https://z3.ax1x.com/2021/11/06/IQn9Zq.png\" alt=\"IQn9Zq.png\"></a></p>\n<h6 id=\"颜色\"><a class=\"markdownIt-Anchor\" href=\"#颜色\">#</a> 颜色</h6>\n<blockquote>\n<pre><code>color: \"\n</code></pre>\n</blockquote>\n<p>这里 color 后面所带有 4 种写法<br>\n 1. 直接加颜色例如 red,blue<br>\n2. 加颜色编号，主要这里 #必须加例如 #123456 (常用) 后期通常会用吸色笔 然后负值颜色编号<br>\n 3.rgb (X,X,X) 三色的搭配<br>\n 4.rgba (X,X,X,G) 这个主要是用来设置颜色的透明度 G 取值从 0~1<br>\n 用来设置颜色的透明度</p>\n<h6 id=\"文字对齐\"><a class=\"markdownIt-Anchor\" href=\"#文字对齐\">#</a> 文字对齐</h6>\n<blockquote>\n<p>text-align: ;</p>\n</blockquote>\n<p>设置文字的对齐方式，<br>\nleft,center,right</p>\n<h6 id=\"装饰文本\"><a class=\"markdownIt-Anchor\" href=\"#装饰文本\">#</a> 装饰文本</h6>\n<blockquote>\n<pre><code>text-deroration: ;\n</code></pre>\n</blockquote>\n<p>可加元素:<br>\nline-through 删除线<br>\n overline 上划线<br>\n<strong> none</strong> (常用) 通常用来配合通配符选择器来取消 a 的下划线</p>\n<h6 id=\"文本缩进\"><a class=\"markdownIt-Anchor\" href=\"#文本缩进\">#</a> 文本缩进</h6>\n<blockquote>\n<p>text-indent: ;</p>\n</blockquote>\n<p>后面添加数据时需要注意单位 用像素 (px) 或者 em (一个汉字所占的大小)</p>\n<h6 id=\"行间距\"><a class=\"markdownIt-Anchor\" href=\"#行间距\">#</a> 行间距</h6>\n<blockquote>\n<p>line-height: ;</p>\n</blockquote>\n<p>也需要加 px<br>\n 后期通常使 line-height 和 height 相等，来使文字垂直对齐</p>\n<h4 id=\"5style样式表\"><a class=\"markdownIt-Anchor\" href=\"#5style样式表\">#</a> 5.style 样式表</h4>\n<h6 id=\"内部样式表\"><a class=\"markdownIt-Anchor\" href=\"#内部样式表\">#</a> 内部样式表</h6>\n<p>也就是我们最开始介绍，直到现在一直在使用的加到 style 里面的 css 属性</p>\n<h6 id=\"行内样式表\"><a class=\"markdownIt-Anchor\" href=\"#行内样式表\">#</a> 行内样式表</h6>\n<p>直接加在 html 标签中的样式表</p>\n<blockquote>\n<pre><code> 例如: &lt;div style=\"\";&gt; &lt;/div&gt;\n 不常使用，会使html标签显得臃肿\n</code></pre>\n</blockquote>\n<h6 id=\"外部样式表\"><a class=\"markdownIt-Anchor\" href=\"#外部样式表\">#</a> 外部样式表</h6>\n<blockquote>\n<pre><code>&lt;link rel=\"\"; href=\"文件地址\";&gt;\n</code></pre>\n</blockquote>\n<p>另建一个.css 文件，在另外一个文件中书写 css 属性<br>\n再通过在 style 中书写 link 将其引入</p>\n<h4 id=\"6vscode中使用emmet语法快速书写代码\"><a class=\"markdownIt-Anchor\" href=\"#6vscode中使用emmet语法快速书写代码\">#</a> 6.vscode 中使用 emmet 语法快速书写代码</h4>\n<p><a href=\"https://imgtu.com/i/IQnSLn\"><img src=\"https://z3.ax1x.com/2021/11/06/IQnSLn.png\" alt=\"IQnSLn.png\"></a></p>\n<h4 id=\"7选择器拓展\"><a class=\"markdownIt-Anchor\" href=\"#7选择器拓展\">#</a> 7. 选择器拓展</h4>\n<p><a href=\"https://imgtu.com/i/IQnZQJ\"><img src=\"https://z3.ax1x.com/2021/11/06/IQnZQJ.png\" alt=\"IQnZQJ.png\"></a></p>\n<h6 id=\"后代选择器\"><a class=\"markdownIt-Anchor\" href=\"#后代选择器\">#</a> 后代选择器</h6>\n<p>顾名思义就是将大元素中包括的小元素提取出来，这里通过列子来展示<br>\n<a href=\"https://imgtu.com/i/IQnCd0\"><img src=\"https://z3.ax1x.com/2021/11/06/IQnCd0.png\" alt=\"IQnCd0.png\"></a></p>\n<h6 id=\"子元素选择器\"><a class=\"markdownIt-Anchor\" href=\"#子元素选择器\">#</a> 子元素选择器</h6>\n<p>例如上面的 ol li 变成 ol&gt;li 就只对 ol 中的下一级 li 有用也就是他的儿子，而他的下下级，也就是孙子则不起作用</p>\n<h6 id=\"并集选择器\"><a class=\"markdownIt-Anchor\" href=\"#并集选择器\">#</a> 并集选择器</h6>\n<p>在标签和标签中间用逗号连接，这样就可以达到同时对两个盒子都起作用的效果</p>\n<blockquote>\n<p>例如 div,p,li {}</p>\n</blockquote>\n<p>需要注意的是最后一个选择器不需要加逗号</p>\n<h6 id=\"链接伪类选择器\"><a class=\"markdownIt-Anchor\" href=\"#链接伪类选择器\">#</a> 链接伪类选择器</h6>\n<p><a href=\"https://imgtu.com/i/IJqEWt\"><img src=\"https://z3.ax1x.com/2021/11/09/IJqEWt.png\" alt=\"IJqEWt.png\"></a></p>\n<blockquote>\n<p>X:GGGG {}</p>\n</blockquote>\n<p>X 可以是你的选择器中的任何<br>\n：后面可以添加 4 中元素 (其中 hover 最经常使用)：<br>\nlink: 未访问链接：把没有点击过的链接选择出来<br>\n visited: 访问过的链接，把点击过的链接选择出来<br>\n hover: 当鼠标经过时<br>\n active: 鼠标点击但是还未弹起来时<br>\n<a href=\"https://imgtu.com/i/IQmxMj\"><img src=\"https://z3.ax1x.com/2021/11/06/IQmxMj.png\" alt=\"IQmxMj.png\"></a></p>\n<h6 id=\"focus选择器\"><a class=\"markdownIt-Anchor\" href=\"#focus选择器\">#</a> focus 选择器</h6>\n<p>把获得光标的 input 选择显示出来<br>\n下面是代码，可以通过自己运行来进行查看<br>\n<a href=\"https://imgtu.com/i/IQnPoV\"><img src=\"https://z3.ax1x.com/2021/11/06/IQnPoV.png\" alt=\"IQnPoV.png\"></a></p>\n<h4 id=\"8元素显示模式\"><a class=\"markdownIt-Anchor\" href=\"#8元素显示模式\">#</a> 8. 元素显示模式</h4>\n<p><a href=\"https://imgtu.com/i/IJqmy8\"><img src=\"https://z3.ax1x.com/2021/11/09/IJqmy8.png\" alt=\"IJqmy8.png\"></a></p>\n<h6 id=\"块级元素\"><a class=\"markdownIt-Anchor\" href=\"#块级元素\">#</a> 块级元素</h6>\n<p><a href=\"https://imgtu.com/i/IQnkJU\"><img src=\"https://z3.ax1x.com/2021/11/06/IQnkJU.png\" alt=\"IQnkJU.png\"></a></p>\n<h6 id=\"行内元素\"><a class=\"markdownIt-Anchor\" href=\"#行内元素\">#</a> 行内元素</h6>\n<p><a href=\"https://imgtu.com/i/IQnAWF\"><img src=\"https://z3.ax1x.com/2021/11/06/IQnAWF.png\" alt=\"IQnAWF.png\"></a></p>\n<h6 id=\"行内块元素\"><a class=\"markdownIt-Anchor\" href=\"#行内块元素\">#</a> 行内块元素</h6>\n<p>特殊情况，同时具有块级元素和行内元素的特点，可以进行的大小设置，也可以书写汉字，但是大小会随着汉字的多少而改变</p>\n<h6 id=\"元素显示模式转换\"><a class=\"markdownIt-Anchor\" href=\"#元素显示模式转换\">#</a> 元素显示模式转换</h6>\n<blockquote>\n<pre><code> display:   ;\n</code></pre>\n</blockquote>\n<p>inline: 行内元素<br>\n block: 块级元素<br>\n inline-block: 行内块元素<br>\n<strong>学到这里去做一下小米侧边栏试试吧</strong></p>\n<h6 id=\"单行文字垂直居中\"><a class=\"markdownIt-Anchor\" href=\"#单行文字垂直居中\">#</a> 单行文字垂直居中</h6>\n<p>也就是上面和大家提及过的，这里让 height 和 line-height 相同即可</p>\n<h4 id=\"9背景\"><a class=\"markdownIt-Anchor\" href=\"#9背景\">#</a> 9. 背景</h4>\n<p><a href=\"https://imgtu.com/i/IQ6dHA\"><img src=\"https://z3.ax1x.com/2021/11/06/IQ6dHA.png\" alt=\"IQ6dHA.png\"></a></p>\n<h6 id=\"背景颜色\"><a class=\"markdownIt-Anchor\" href=\"#背景颜色\">#</a> 背景颜色</h6>\n<blockquote>\n<p>background-color: ;</p>\n</blockquote>\n<p>后面的元素参照前面 color 属性</p>\n<h6 id=\"背景图片\"><a class=\"markdownIt-Anchor\" href=\"#背景图片\">#</a> 背景图片</h6>\n<blockquote>\n<p>background-image: url (链接 / 地址)；</p>\n</blockquote>\n<h6 id=\"背景平铺\"><a class=\"markdownIt-Anchor\" href=\"#背景平铺\">#</a> 背景平铺</h6>\n<blockquote>\n<p>background-repeat: ;</p>\n</blockquote>\n<p>no-repeat (常用): 不平铺<br>\n repeat (默认): 平铺<br>\n repeat-x: 沿着 X 轴平铺<br>\n repeat-y: 沿着 Y 轴平铺<br>\n<strong>背景图片会压住背景颜色</strong><br>\n<a href=\"https://imgtu.com/i/IQnFiT\"><img src=\"https://z3.ax1x.com/2021/11/06/IQnFiT.png\" alt=\"IQnFiT.png\"></a></p>\n<h6 id=\"背景位置\"><a class=\"markdownIt-Anchor\" href=\"#背景位置\">#</a> 背景位置</h6>\n<blockquote>\n<p>background-position: ;</p>\n</blockquote>\n<p>left top center right bottom<br>\n 也可以用 right center 等同时使用 但是有几点需要注意<br>\n 1. 如果是方位名词  right center 和 center right 效果是等价的 跟顺序没有关系<br>\n 2. 当有参数省略时，并且不全是方位名字时，例如 right top ,<br>\n 省略 right，此时 top 会自动顶部对齐，而省略的会被判定为水平居中<br>\n省略 top，则会被判定为垂直居中<br>\n<a href=\"https://imgtu.com/i/IQnEz4\"><img src=\"https://z3.ax1x.com/2021/11/06/IQnEz4.png\" alt=\"IQnEz4.png\"></a><br>\n 也可以用具体的数据来进行移动，主要用于精灵图<br>\n<a href=\"https://imgtu.com/i/IQney9\"><img src=\"https://z3.ax1x.com/2021/11/06/IQney9.png\" alt=\"IQney9.png\"></a><br>\n 需要注意的时，html 的 X 轴向右，而 y 轴是向下的，需要向反方向移动时可以添加负号</p>\n<h6 id=\"背景固定\"><a class=\"markdownIt-Anchor\" href=\"#背景固定\">#</a> 背景固定</h6>\n<blockquote>\n<p>backgrounf-attachment: fixed;</p>\n</blockquote>\n<p>将背景图片固定，这样滑动鼠标滚轮时，背景图片会一直存在于网页上，并不会滑走<br>\n<a href=\"https://imgtu.com/i/IQnmLR\"><img src=\"https://z3.ax1x.com/2021/11/06/IQnmLR.png\" alt=\"IQnmLR.png\"></a></p>\n<h6 id=\"背景属性复合写法\"><a class=\"markdownIt-Anchor\" href=\"#背景属性复合写法\">#</a> 背景属性复合写法</h6>\n<p><a href=\"https://imgtu.com/i/IQ6tje\"><img src=\"https://z3.ax1x.com/2021/11/06/IQ6tje.png\" alt=\"IQ6tje.png\"></a></p>\n<h6 id=\"背景半透明\"><a class=\"markdownIt-Anchor\" href=\"#背景半透明\">#</a> 背景半透明</h6>\n<p>主要这个不是放在 background-color 中</p>\n<blockquote>\n<p>background: rgba(X,X,X,X);</p>\n</blockquote>\n",
            "tags": [
                "Css"
            ]
        },
        {
            "id": "https://github.com/YogMas/YogMas.github.io/2021/11/06/css2/",
            "url": "https://github.com/YogMas/YogMas.github.io/2021/11/06/css2/",
            "title": "Css-second",
            "date_published": "2021-11-05T16:00:00.000Z",
            "content_html": "<h1 id=\"css2\"><a class=\"markdownIt-Anchor\" href=\"#css2\">#</a> css2</h1>\n<h3 id=\"the-article-from-yogmas-also-sam\"><a class=\"markdownIt-Anchor\" href=\"#the-article-from-yogmas-also-sam\">#</a> the article from yogmas also sam</h3>\n<h4 id=\"1css选择器的性质\"><a class=\"markdownIt-Anchor\" href=\"#1css选择器的性质\">#</a> 1.css 选择器的性质</h4>\n<h6 id=\"css层叠性\"><a class=\"markdownIt-Anchor\" href=\"#css层叠性\">#</a> css 层叠性</h6>\n<p>长江后浪推前浪，前浪死在沙滩上<br>\n当两个完全相同的选择器写在一起时，此时根据就近原则处理</p>\n<h6 id=\"css继承性\"><a class=\"markdownIt-Anchor\" href=\"#css继承性\">#</a> css 继承性</h6>\n<p>大元素中的小元素会继承写在大元素中的属性</p>\n<h6 id=\"行高的继承\"><a class=\"markdownIt-Anchor\" href=\"#行高的继承\">#</a> 行高的继承</h6>\n<p><a href=\"https://imgtu.com/i/IQ6YcD\"><img src=\"https://z3.ax1x.com/2021/11/06/IQ6YcD.png\" alt=\"IQ6YcD.png\"></a></p>\n<p>孩子拥有 font-size 元素会优先使用定义在自身的，而后面的倍数孩子自身没有就会继承父亲的倍数</p>\n<h6 id=\"css优先级\"><a class=\"markdownIt-Anchor\" href=\"#css优先级\">#</a> css 优先级</h6>\n<p>这个主要是根据后面的权重的大小而判定的，权重大的优先。</p>\n<h6 id=\"css权重\"><a class=\"markdownIt-Anchor\" href=\"#css权重\">#</a> css 权重</h6>\n<p><a href=\"https://imgtu.com/i/IQ6UnH\"><img src=\"https://z3.ax1x.com/2021/11/06/IQ6UnH.png\" alt=\"IQ6UnH.png\"></a></p>\n<h6 id=\"权重的叠加\"><a class=\"markdownIt-Anchor\" href=\"#权重的叠加\">#</a> 权重的叠加</h6>\n<p>权重的叠加可以用加减法来计算<br>\n例如 0,1,0,0 相当于 100</p>\n<h4 id=\"2盒子模型\"><a class=\"markdownIt-Anchor\" href=\"#2盒子模型\">#</a> 2. 盒子模型</h4>\n<p>盒子通常是块级元素<br>\n也可以通过 display 将其变成块级元素 a 元素通常使用这种方法</p>\n<h6 id=\"盒子边框\"><a class=\"markdownIt-Anchor\" href=\"#盒子边框\">#</a> 盒子边框</h6>\n<p><a href=\"https://imgtu.com/i/IQ6aBd\"><img src=\"https://z3.ax1x.com/2021/11/06/IQ6aBd.png\" alt=\"IQ6aBd.png\"></a></p>\n<blockquote>\n<p>border-width: ;<br>\nborder-style: ;<br>\nborder-color: ;<br>\nborder:width style color ; 复合写法</p>\n</blockquote>\n<p>这边建议大家使用复合写法<br>\n style:solid 实线 dotted 虚线 dashed 更大点的虚线</p>\n<p><strong>边框会影响盒子的实际大小</strong></p>\n<h6 id=\"盒子内边框\"><a class=\"markdownIt-Anchor\" href=\"#盒子内边框\">#</a> 盒子内边框</h6>\n<p><a href=\"https://imgtu.com/i/IQ66gS\"><img src=\"https://z3.ax1x.com/2021/11/06/IQ66gS.png\" alt=\"IQ66gS.png\"></a></p>\n<blockquote>\n<p>padding: ;<br>\npadding-left: ;</p>\n</blockquote>\n<p>同理 left 可以换成其他的方位</p>\n<p>内边距复合写法：从顶部顺时针数<br>\n<strong>内边距会影响盒子的大小</strong></p>\n<p>内边距不会影响盒子大小的情况:<br>\n 当盒子内没有给宽时，padding-left/right 不会影响<br>\n没有给高时 padding-top/bottom 不会影响</p>\n<h6 id=\"盒子外边距\"><a class=\"markdownIt-Anchor\" href=\"#盒子外边距\">#</a> 盒子外边距</h6>\n<blockquote>\n<p>margin:  ;<br>\nmargin-top/XXX: ;</p>\n</blockquote>\n<p>复合写法和内边距同理</p>\n<p><strong>外边距典型应用</strong>:<br>\nmargin: XXXpx auto;<br>\n 此时 auto 代表左右两边自动设置可以让盒子水平对齐</p>\n<h6 id=\"行内元素或行内块元素水平居中对齐\"><a class=\"markdownIt-Anchor\" href=\"#行内元素或行内块元素水平居中对齐\">#</a> 行内元素或行内块元素水平居中对齐</h6>\n<p>margin 对行内元素没有作用，但是可以给这两种元素的父盒子添加 text-align:center;</p>\n<h6 id=\"外边距合并\"><a class=\"markdownIt-Anchor\" href=\"#外边距合并\">#</a> 外边距合并</h6>\n<p>当子盒子给 margin 时，父盒子和子盒子会塌陷，两个盒子会边框重合</p>\n<h6 id=\"清除内外边距\"><a class=\"markdownIt-Anchor\" href=\"#清除内外边距\">#</a> 清除内外边距</h6>\n<p>通常浏览器会自带内外边距这时就需要使用通用符选择器将浏览器自带的边距出去</p>\n<blockquote>\n<pre><code>* {padding:0 ;\n   margin:0;}\n</code></pre>\n</blockquote>\n<h6 id=\"圆角边框\"><a class=\"markdownIt-Anchor\" href=\"#圆角边框\">#</a> 圆角边框</h6>\n<blockquote>\n<p>border-radius: Xpx ;</p>\n</blockquote>\n<p>原理：利用一个半径为 Xpx 的圆，与边角重叠，然后切去没有重叠的边角；</p>\n<h6 id=\"盒子阴影\"><a class=\"markdownIt-Anchor\" href=\"#盒子阴影\">#</a> 盒子阴影</h6>\n<p><a href=\"https://imgtu.com/i/IQCJfI\"><img src=\"https://z3.ax1x.com/2021/11/06/IQCJfI.png\" alt=\"IQCJfI.png\"></a></p>\n<blockquote>\n<p>box-shadow: X X X X X;</p>\n</blockquote>\n<p>由左到右依次为 往右边移动的距离 往下面移动的距离 阴影发散度 (往四面八方发散)  往四面八方扩散的距离 颜色 (通常是 rgba 控制)</p>\n<h6 id=\"文字阴影\"><a class=\"markdownIt-Anchor\" href=\"#文字阴影\">#</a> 文字阴影</h6>\n<blockquote>\n<p>text-shadow:X X X rgba;</p>\n</blockquote>\n<p>分别是 往右边移动的距离 往下面移动的距离 虚实度 (越大越虚)</p>\n<h6 id=\"行内块元素中间有缝隙\"><a class=\"markdownIt-Anchor\" href=\"#行内块元素中间有缝隙\">#</a> 行内块元素中间有缝隙</h6>\n<h4 id=\"3浮动\"><a class=\"markdownIt-Anchor\" href=\"#3浮动\">#</a> 3. 浮动</h4>\n<blockquote>\n<pre><code>  float: left/right;\n</code></pre>\n</blockquote>\n<h6 id=\"浮动特性-脱标\"><a class=\"markdownIt-Anchor\" href=\"#浮动特性-脱标\">#</a> 浮动特性 - 脱标</h6>\n<p>1. 脱离标准普通流的控制（浮）移动到指定位置（动）。<br>\n2. 浮动的盒子不在保留原先的位置</p>\n<p><strong>浮动元素具有行内块元素的特点</strong><br>\n浮动盒子通常搭配标准流父盒子</p>\n<h6 id=\"浮动的注意点\"><a class=\"markdownIt-Anchor\" href=\"#浮动的注意点\">#</a> 浮动的注意点</h6>\n<p>1. 如果一个子元素浮动了，尽量其他盒子也浮动，这样保证这些子元素一行显示</p>\n<h6 id=\"清除浮动的方法\"><a class=\"markdownIt-Anchor\" href=\"#清除浮动的方法\">#</a> 清除浮动的方法</h6>\n<p><a href=\"https://imgtu.com/i/IQCN1P\"><img src=\"https://z3.ax1x.com/2021/11/06/IQCN1P.png\" alt=\"IQCN1P.png\"></a></p>\n<p><a href=\"https://imgtu.com/i/IJqJS0\"><img src=\"https://z3.ax1x.com/2021/11/09/IJqJS0.png\" alt=\"IJqJS0.png\"></a></p>\n<p>额外标签法：在子盒子的最后新增一个块级盒子 并且用 css 给快捷盒子加上 clear:both; 属性</p>\n<p>父元素 overflow: 给父元素加上一个 overflow: hidden; 的 css 属性<br>\n<a href=\"https://imgtu.com/i/IJqtyT\"><img src=\"https://z3.ax1x.com/2021/11/09/IJqtyT.png\" alt=\"IJqtyT.png\"></a></p>\n<p>伪元素清除:</p>\n<blockquote>\n<p>.clearfix:after {<br>\ncontent: “”;<br>\ndisplay: block;<br>\nheight: 0;<br>\nclear: both;<br>\nvisibility: hidden;<br>\n}<br>\n.clearfix {<br>\nIE6、7 专有<br>\n zoom: 1;<br>\n}</p>\n</blockquote>\n<p><a href=\"https://imgtu.com/i/IQ60AI\"><img src=\"https://z3.ax1x.com/2021/11/06/IQ60AI.png\" alt=\"IQ60AI.png\"></a></p>\n<p>给父盒子一个 class 为 clearfix 然后将这串代码心如 css 中</p>\n<p>双伪元素清除:</p>\n<blockquote>\n<p>.clearfix:before,<br>\n.clearfix:after {<br>\ncontent: “”;<br>\ndisplay: table;<br>\n}<br>\n.clearfix:after {<br>\nclear: both;<br>\n}<br>\n.clearfix {<br>\n*zoom: 1;<br>\n}</p>\n</blockquote>\n<p>同理给一个 clearfix 标签，然后将这串代码写入 css 中</p>\n<h4 id=\"4定位\"><a class=\"markdownIt-Anchor\" href=\"#4定位\">#</a> 4. 定位</h4>\n<p><a href=\"https://imgtu.com/i/IQCGtA\"><img src=\"https://z3.ax1x.com/2021/11/06/IQCGtA.png\" alt=\"IQCGtA.png\"></a><br>\n<a href=\"https://imgtu.com/i/IJqwTJ\"><img src=\"https://z3.ax1x.com/2021/11/09/IJqwTJ.png\" alt=\"IJqwTJ.png\"></a></p>\n<blockquote>\n<p>position: ;</p>\n</blockquote>\n<p>static: 默认静态定位<br>\n absolute: 绝对定位<br>\n relative: 相对定位<br>\n fixed: 固定定位<br>\n sticky: 粘性定位</p>\n<p>相对定位：可以进行定位，但依旧会占用空间<br>\n绝对定位<br>\n如果没施加绝对定位的盒子没有父盒子，那么绝对定位就是在浏览器的基础上的<br>\n如果绝对定位的盒子有父盒子，那么绝对定位就是在父盒子的基础上，并且<strong>父盒子一定要有定位，否则绝对定位就会失效</strong>所以通常说相对定位就是给绝对定位当爹的</p>\n<p>固定定位：会固定在屏幕上，无视浏览器的滑块移动</p>\n<p>粘性定位：会先随着浏览器滑块的滑动而滑动，但是后来会静止，并且无法滑出浏览器屏幕</p>\n<h6 id=\"定位的堆叠顺序\"><a class=\"markdownIt-Anchor\" href=\"#定位的堆叠顺序\">#</a> 定位的堆叠顺序</h6>\n<p>如果有很多个绝对定位，可能会放在同一个位置，这时候需要确定谁放置在最上面</p>\n<blockquote>\n<pre><code>z-index: ;\n</code></pre>\n</blockquote>\n<p>默认为 0，数值越大显示等级越高</p>\n<h6 id=\"小技巧-绝对定位的水平垂直居中\"><a class=\"markdownIt-Anchor\" href=\"#小技巧-绝对定位的水平垂直居中\">#</a> 小技巧 - 绝对定位的水平垂直居中</h6>\n<p>1.left 走 50%  父容器宽度的一半<br>\n 2.margin 负值 往左边走 自己盒子宽度的一半</p>\n<h6 id=\"定位的特殊特性\"><a class=\"markdownIt-Anchor\" href=\"#定位的特殊特性\">#</a> 定位的特殊特性</h6>\n<p><a href=\"https://imgtu.com/i/IQC1TH\"><img src=\"https://z3.ax1x.com/2021/11/06/IQC1TH.png\" alt=\"IQC1TH.png\"></a><br>\n<a href=\"https://imgtu.com/i/IQCtpt\"><img src=\"https://z3.ax1x.com/2021/11/06/IQCtpt.png\" alt=\"IQCtpt.png\"></a></p>\n<h6 id=\"定位和浮动的差异\"><a class=\"markdownIt-Anchor\" href=\"#定位和浮动的差异\">#</a> 定位和浮动的差异</h6>\n<p>定位和浮动有相似部分，类如都会转化为行内块元素，都会压住盒子，但是浮动不会压住文字，定位会将所有东西压住</p>\n<h4 id=\"5显示隐藏\"><a class=\"markdownIt-Anchor\" href=\"#5显示隐藏\">#</a> 5. 显示隐藏</h4>\n<h6 id=\"display\"><a class=\"markdownIt-Anchor\" href=\"#display\">#</a> display</h6>\n<blockquote>\n<p>display: ;</p>\n</blockquote>\n<p><a href=\"https://imgtu.com/i/IQCaX8\"><img src=\"https://z3.ax1x.com/2021/11/06/IQCaX8.png\" alt=\"IQCaX8.png\"></a></p>\n<h6 id=\"visibility\"><a class=\"markdownIt-Anchor\" href=\"#visibility\">#</a> visibility</h6>\n<p><a href=\"https://imgtu.com/i/IQCwnS\"><img src=\"https://z3.ax1x.com/2021/11/06/IQCwnS.png\" alt=\"IQCwnS.png\"></a></p>\n<h6 id=\"overflow\"><a class=\"markdownIt-Anchor\" href=\"#overflow\">#</a> overflow</h6>\n<blockquote>\n<p>overflow: ;</p>\n</blockquote>\n<p><a href=\"https://imgtu.com/i/IQC00g\"><img src=\"https://z3.ax1x.com/2021/11/06/IQC00g.png\" alt=\"IQC00g.png\"></a><br>\n<a href=\"https://imgtu.com/i/IQCB7Q\"><img src=\"https://z3.ax1x.com/2021/11/06/IQCB7Q.png\" alt=\"IQCB7Q.png\"></a></p>\n<h4 id=\"6精灵图\"><a class=\"markdownIt-Anchor\" href=\"#6精灵图\">#</a> 6. 精灵图</h4>\n<p>这里不好介绍怎样操作只能简单而言<br>\n一张包含各种小图片的大图片<br>\n利用前面所讲的背景图片位置的移动使其只能显示出一张小图片来<br>\n问：为什么需要精灵图<br>\n利用精灵图可以将多张图片整合在一起，从而可以减少信息的发送和接受量，减少服务器的负担</p>\n<h4 id=\"7字体图标的使用\"><a class=\"markdownIt-Anchor\" href=\"#7字体图标的使用\">#</a> 7. 字体图标的使用</h4>\n<p>通过在网站上寻找字体图标，下载</p>\n<p>然后将代码写入 css 中</p>\n<blockquote>\n<p>@font-face {<br>\nfont-family: ‘icomoon’;<br>\nsrc:  url(‘fonts/icomoon.eot?p4ssmb’);<br>\nsrc:  url(‘fonts/icomoon.eot?p4ssmb#iefix’) format(‘embedded-opentype’),<br>\nurl(‘fonts/icomoon.ttf?p4ssmb’) format(‘truetype’),<br>\nurl(‘fonts/icomoon.woff?p4ssmb’) format(‘woff’),<br>\nurl(‘fonts/icomoon.svg?p4ssmb#icomoon’) format(‘svg’);<br>\nfont-weight: normal;<br>\nfont-style: normal;<br>\nfont-display: block;<br>\n}</p>\n</blockquote>\n<p>font 文件夹移动到主文件夹中</p>\n<p>此时就可以用字体图标代码来进行表示字体图标</p>\n<p>好处：可以对图标进行改变颜色大小等等的改变字体时用到的属性</p>\n<h4 id=\"8css三角的制作\"><a class=\"markdownIt-Anchor\" href=\"#8css三角的制作\">#</a> 8.css 三角的制作</h4>\n<p>利用 cssborder 属性来进行三角的制作<br>\n由于不好叙述，自己输入，理解并体验这几组代码，应该就能理解 css 三角的制作<br>\n<a href=\"https://imgtu.com/i/IQCsts\"><img src=\"https://z3.ax1x.com/2021/11/06/IQCsts.png\" alt=\"IQCsts.png\"></a><br>\n<a href=\"https://imgtu.com/i/IQCrkj\"><img src=\"https://z3.ax1x.com/2021/11/06/IQCrkj.png\" alt=\"IQCrkj.png\"></a></p>\n<h4 id=\"9用户界面样式\"><a class=\"markdownIt-Anchor\" href=\"#9用户界面样式\">#</a> 9. 用户界面样式</h4>\n<h6 id=\"表单轮廓\"><a class=\"markdownIt-Anchor\" href=\"#表单轮廓\">#</a> 表单轮廓</h6>\n<p>由于点击表单或者 text 文本框时边框上会出现颜色变化边框变大拖拽文本域等一系列的反应，从而利用 css 取消边框的轮廓</p>\n<blockquote>\n<pre><code>outline: none;  (input,textarea)\n</code></pre>\n</blockquote>\n<blockquote>\n<pre><code>resize:none; (textarea)\n</code></pre>\n<p>用来防止拖拽文本域的</p>\n</blockquote>\n<h6 id=\"鼠标样式\"><a class=\"markdownIt-Anchor\" href=\"#鼠标样式\">#</a> 鼠标样式</h6>\n<blockquote>\n<p>cursor: ;</p>\n</blockquote>\n<p>default: 小白鼠标样式<br>\n pointer: 鼠标小手样式<br>\n move: 鼠标移动样式<br>\n text: 鼠标文本样式<br>\n not-allowed: 鼠标禁止样式</p>\n<h6 id=\"图片文字垂直居中\"><a class=\"markdownIt-Anchor\" href=\"#图片文字垂直居中\">#</a> 图片文字垂直居中</h6>\n<p><a href=\"https://imgtu.com/i/IJqrf1\"><img src=\"https://z3.ax1x.com/2021/11/09/IJqrf1.png\" alt=\"IJqrf1.png\"></a></p>\n<h6 id=\"图片底侧有空白缝隙的解决方案\"><a class=\"markdownIt-Anchor\" href=\"#图片底侧有空白缝隙的解决方案\">#</a> 图片底侧有空白缝隙的解决方案</h6>\n<p>先将图片变为块级元素，然后再给块级元素设置边框就可以解决</p>\n<h4 id=\"10文字溢出显示\"><a class=\"markdownIt-Anchor\" href=\"#10文字溢出显示\">#</a> 10. 文字溢出显示</h4>\n<h6 id=\"单行文字溢出显示\"><a class=\"markdownIt-Anchor\" href=\"#单行文字溢出显示\">#</a> 单行文字溢出显示</h6>\n<p><a href=\"https://imgtu.com/i/IQCyhn\"><img src=\"https://z3.ax1x.com/2021/11/06/IQCyhn.png\" alt=\"IQCyhn.png\"></a></p>\n<h6 id=\"多行文字溢出显示\"><a class=\"markdownIt-Anchor\" href=\"#多行文字溢出显示\">#</a> 多行文字溢出显示</h6>\n<p><a href=\"https://imgtu.com/i/IJqc6K\"><img src=\"https://z3.ax1x.com/2021/11/09/IJqc6K.png\" alt=\"IJqc6K.png\"></a></p>\n<h4 id=\"11margin负值的巧妙运动\"><a class=\"markdownIt-Anchor\" href=\"#11margin负值的巧妙运动\">#</a> 11.margin 负值的巧妙运动</h4>\n<p>如果多个盒子都有边框，此时相交部分边框会重合在一起，从而增加边框的大小，此时只需要写入 margin-left: -1px; 就可以得到解决</p>\n<h4 id=\"12文字围绕浮动元素\"><a class=\"markdownIt-Anchor\" href=\"#12文字围绕浮动元素\">#</a> 12. 文字围绕浮动元素</h4>\n<p>众所周知浮动元素是不占用空间的，此时如果将一个照片浮动，而需要在照片旁边写入汉字的话，汉字是否会出现在图片的下方呢，答案是不会，因为汉字会围绕浮动元素</p>\n<h4 id=\"13css初始化\"><a class=\"markdownIt-Anchor\" href=\"#13css初始化\">#</a> 13.css 初始化</h4>\n<p>这里给出一串代码，初始化网页，将网页元素自带的一些 css 属性给去掉</p>\n<blockquote>\n<p>/* 把我们所有标签的内外边距清零 <em>/<br>\n* {<br>\nmargin: 0;<br>\npadding: 0<br>\n}<br>\n/</em>em 和 i 斜体的文字不倾斜 <em>/<br>\nem,<br>\ni {<br>\nfont-style: normal<br>\n}<br>\n/</em> 去掉 li 的小圆点 <em>/<br>\nli {<br>\nlist-style: none<br>\n}<br>\nimg {<br>\n/</em>border 0 照顾低版本浏览器 如果 图片外面包含了链接会有边框的问题 <em>/<br>\nborder: 0;<br>\n/</em> 取消图片底侧有空白缝隙的问题 <em>/<br>\nvertical-align: middle<br>\n}<br>\nbutton {<br>\n/</em> 当我们鼠标经过 button 按钮的时候，鼠标变成小手 <em>/<br>\ncursor: pointer<br>\n}<br>\na {<br>\ncolor: #666;<br>\ntext-decoration: none<br>\n}<br>\na:hover {<br>\ncolor: #c81623<br>\n}<br>\nbutton,<br>\ninput {<br>\n/</em> “\\5B8B\\4F53” 就是宋体的意思 这样浏览器兼容性比较好 <em>/<br>\nfont-family: Microsoft YaHei, Heiti SC, tahoma, arial, Hiragino Sans GB, “\\5B8B\\4F53”, sans-serif<br>\n}<br>\nbody {<br>\n/</em> CSS3 抗锯齿形 让文字显示的更加清晰 <em>/<br>\n-webkit-font-smoothing: antialiased;<br>\nbackground-color: #fff;<br>\nfont: 12px/1.5 Microsoft YaHei, Heiti SC, tahoma, arial, Hiragino Sans GB, “\\5B8B\\4F53”, sans-serif;<br>\ncolor: #666<br>\n}<br>\n.hide,<br>\n.none {<br>\ndisplay: none<br>\n}<br>\n/</em> 清除浮动 */<br>\n.clearfix:after {<br>\nvisibility: hidden;<br>\nclear: both;<br>\ndisplay: block;<br>\ncontent: “.”;<br>\nheight: 0<br>\n}<br>\n.clearfix {<br>\n*zoom: 1<br>\n}</p>\n</blockquote>\n<h4 id=\"14css新增属性\"><a class=\"markdownIt-Anchor\" href=\"#14css新增属性\">#</a> 14.css 新增属性</h4>\n<h6 id=\"新增属性选择器\"><a class=\"markdownIt-Anchor\" href=\"#新增属性选择器\">#</a> 新增属性选择器</h6>\n<p><a href=\"https://imgtu.com/i/IJqRmD\"><img src=\"https://z3.ax1x.com/2021/11/09/IJqRmD.png\" alt=\"IJqRmD.png\"></a></p>\n<p>通过举例进行说明<br>\n input [type=text] {}<br>\n 这个表示选出 input 中 type=text 的元素</p>\n<p>div [class^=XXX]: 选出以 XXX 开头的元素</p>\n<p>div [class$=XXX]: 选出以 XXX 结尾的元素</p>\n<h6 id=\"结构伪类选择器\"><a class=\"markdownIt-Anchor\" href=\"#结构伪类选择器\">#</a> 结构伪类选择器</h6>\n<p><a href=\"https://imgtu.com/i/IJqgOO\"><img src=\"https://z3.ax1x.com/2021/11/09/IJqgOO.png\" alt=\"IJqgOO.png\"></a></p>\n<blockquote>\n<pre><code>xxx:firstchild\nxxx:secondchild\nxxx:nth-child(number)\n</code></pre>\n</blockquote>\n<p>都是选出第几个子元素的意思</p>\n<p><a href=\"https://imgtu.com/i/IJq4kd\"><img src=\"https://z3.ax1x.com/2021/11/09/IJq4kd.png\" alt=\"IJq4kd.png\"></a></p>\n<p>括号里面不仅仅可以跟数字，也可以很有特殊意义的单词，甚至可以跟公式 n 将取自然数</p>\n<p>nth-of-type 选择器</p>\n<p>两个选择器的区别如下<br>\n<a href=\"https://imgtu.com/i/IJqfTH\"><img src=\"https://z3.ax1x.com/2021/11/09/IJqfTH.png\" alt=\"IJqfTH.png\"></a></p>\n<p>举例子来说明:</p>\n<blockquote>\n<pre><code>&lt;p&gt;光头强&lt;/p&gt;\n&lt;div&gt;熊大&lt;/div&gt;\n&lt;div&gt;熊二&lt;/div&gt;\n</code></pre>\n</blockquote>\n<p>此时如果给一个 section div:nth-child (1) { background-color: red; } 指令，你觉得谁会被加上红色呢<br>\n答案是都不会<br>\n child 先看后面的数字 1   ，此时第一个孩子是 p，然后再来看前面的 div，发现 div 不是 P，所以不成立 谁都不给</p>\n<p>但如果给一个 section div:nth-of-type (1) {<br>\nbackground-color: blue;} 指令呢<br>\n答案是会给熊大，type 先看前面的 div，找出 div，再发现后面的 1，所以会给 div 中的第一个孩子</p>\n<h6 id=\"伪元素选择器\"><a class=\"markdownIt-Anchor\" href=\"#伪元素选择器\">#</a> 伪元素选择器</h6>\n<blockquote>\n<p>XXX::before/after {<br>\ncontent:’’;<br>\n}<br>\n 这里面的 content 是必须加的，表示里面的内容，即使你没有内容要写，也需要写出 content 否则无效，注意是单引号</p>\n</blockquote>\n<p>用处：可以里面 css 来个父元素添加盒子 词的的 before 表示出现在父元素的左边 after 表示出现在父元素的右边</p>\n<h6 id=\"css3盒子模型\"><a class=\"markdownIt-Anchor\" href=\"#css3盒子模型\">#</a> css3 盒子模型</h6>\n<p>前面我们说了 padding 和边框都会撑大盒子，所以说我们使用 border 和 padding 还需要减去其尺寸，现在我们提供了修复的方法</p>\n<blockquote>\n<p>box-sizing:  ;</p>\n</blockquote>\n<p>content-box: 按照原来会撑大盒子的方式<br>\n border-box: 会自动减去撑大的尺寸，保证盒子的尺寸不变</p>\n<h6 id=\"图片模糊处理\"><a class=\"markdownIt-Anchor\" href=\"#图片模糊处理\">#</a> 图片模糊处理</h6>\n<blockquote>\n<p>filter:blur()</p>\n</blockquote>\n<p>blur 是一个函数 小括号里面数值越大，图片越模糊 注意数值要加 px 单位</p>\n<h6 id=\"css3宽度calc函数\"><a class=\"markdownIt-Anchor\" href=\"#css3宽度calc函数\">#</a> css3 宽度 calc 函数</h6>\n<p>calc 函数主要提供了一个计算的方法<br>\n例如在有一个父盒子的前提下，子盒子写出这样一个函数 width: calc (100% - 30px); 表示在父亲 100% 尺寸的前提下始终减去 30px 的宽度</p>\n<h6 id=\"过渡效果\"><a class=\"markdownIt-Anchor\" href=\"#过渡效果\">#</a> 过渡效果</h6>\n<p>大概来说就是将一个瞬间变化的过程转化成阶段性有时间长短的变化<br>\n<a href=\"https://imgtu.com/i/IJqTpt\"><img src=\"https://z3.ax1x.com/2021/11/09/IJqTpt.png\" alt=\"IJqTpt.png\"></a><br>\n 在这里 0s 开始一般可以不写而省略，变化曲线也一遍使用 ease 这是最常用的变化曲线</p>\n",
            "tags": [
                "Css"
            ]
        },
        {
            "id": "https://github.com/YogMas/YogMas.github.io/2021/11/06/html-xia/",
            "url": "https://github.com/YogMas/YogMas.github.io/2021/11/06/html-xia/",
            "title": "Html-second",
            "date_published": "2021-11-05T16:00:00.000Z",
            "content_html": "<p>。</p>\n<h1 id=\"html下\"><a class=\"markdownIt-Anchor\" href=\"#html下\">#</a> Html (下)</h1>\n<h3 id=\"the-article-from-yogmas-also-sam\"><a class=\"markdownIt-Anchor\" href=\"#the-article-from-yogmas-also-sam\">#</a> the article from yogmas also sam</h3>\n<h4 id=\"1表格\"><a class=\"markdownIt-Anchor\" href=\"#1表格\">#</a> 1. 表格</h4>\n<h6 id=\"表格基本语法\"><a class=\"markdownIt-Anchor\" href=\"#表格基本语法\">#</a> 表格基本语法</h6>\n<blockquote>\n<pre><code>&lt;table&gt;\n  &lt;tr&gt;&lt;th&gt;&lt;/th&gt;&lt;/tr&gt;\n  &lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;\n&lt;/table&gt;\n</code></pre>\n</blockquote>\n<h6 id=\"表头单元格标签\"><a class=\"markdownIt-Anchor\" href=\"#表头单元格标签\">#</a> 表头单元格标签</h6>\n<blockquote>\n<p>align=\"\"<br>\nborder=\"\"<br>\ncellpadding=\"\"<br>\ncellspacing=\"\"<br>\nwidth=\"\"<br>\nheight=\"\"<br>\n<strong> 这些标签要写到 table 里面去</strong></p>\n</blockquote>\n<p>align: 表格中的文字所处的文字 eg.center 就是未于中间类似的还有 left,right<br>\nborder：表示表格边框的大小 0 表示没有 <strong>此属性的参数值是数字</strong><br>\n cellpadding：代表单元格边框到内容之间的距离（留白）<br>\ncellspacing：用来指定表格各单元格之间的空隙。<strong>此属性的参数值是数字</strong>，表示单元格间隙所占的像素点数。<br>\n同样 width,height 已经介绍过了 ，大多数时候都会用<strong> CSS</strong> 来写</p>\n<h6 id=\"合并单元格\"><a class=\"markdownIt-Anchor\" href=\"#合并单元格\">#</a> 合并单元格</h6>\n<blockquote>\n<p>rowspan=“合并单元格数目”<br>\ncolspan=“合并单元格数目”</p>\n</blockquote>\n<p>rowspan: 合并行 (也就是将一列上的各行合并)<br>\n colspan: 合并列 (也就是将一行上的各列合并)<br>\n 合并准则：如果 rowspan 就在最上面的表格的标签里面加上 rowspan=\"合并数目\" 并且删除已经被合并的表格<br>\n colspan 同理，注意 colspan 加在最左边的表格标签<br>\n eg.</p>\n<blockquote>\n<pre><code>  &lt;tr&gt;\n     &lt;td&gt;&lt;/td&gt;\n      &lt;td colspan=\"2\"&gt;&lt;/td&gt;\n\n  &lt;/tr&gt;\n</code></pre>\n</blockquote>\n<p>表示合并一行上的 2 列 第三列删除 colspan 写在第二列的 td 表格标签内</p>\n<h4 id=\"2列表\"><a class=\"markdownIt-Anchor\" href=\"#2列表\">#</a> 2. 列表</h4>\n<h6 id=\"无序列表\"><a class=\"markdownIt-Anchor\" href=\"#无序列表\">#</a> 无序列表</h6>\n<blockquote>\n<pre><code>&lt;ul&gt;\n  &lt;li&gt;&lt;/li&gt;\n    …………\n  &lt;li&gt;&lt;/li&gt;\n  &lt;li&gt;&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n</blockquote>\n<p>其中的 li 标签各位根据需要而定<br>\n ul:unorderlist<br>\nli:list</p>\n<h6 id=\"有序列表\"><a class=\"markdownIt-Anchor\" href=\"#有序列表\">#</a> 有序列表</h6>\n<blockquote>\n<pre><code>&lt;ol&gt;\n  &lt;li&gt;&lt;/li&gt;\n    …………\n  &lt;li&gt;&lt;/li&gt;\n&lt;/ol&gt;\n</code></pre>\n</blockquote>\n<p>ol:orderlist<br>\nli:list</p>\n<h6 id=\"自定义列表\"><a class=\"markdownIt-Anchor\" href=\"#自定义列表\">#</a> 自定义列表</h6>\n<blockquote>\n<pre><code> &lt;dl&gt;\n   &lt;dt&gt;&lt;/dt&gt;顶部总标签\n   &lt;dd&gt;&lt;/dd&gt;\n   &lt;dt&gt;&lt;/dt&gt;\n   &lt;dd&gt;&lt;/dd\n &lt;/dl&gt;\n 一个&lt;dt&gt;和&lt;/dt&gt;标签出现代表一列\n 直到下一个&lt;dt&gt;和&lt;/dt&gt;出现才换列\n</code></pre>\n</blockquote>\n<h4 id=\"3表单\"><a class=\"markdownIt-Anchor\" href=\"#3表单\">#</a> 3. 表单</h4>\n<h6 id=\"表单域\"><a class=\"markdownIt-Anchor\" href=\"#表单域\">#</a> 表单域</h6>\n<blockquote>\n<pre><code>&lt;form action=\"\" method=\"\" name=\"\"&gt;\n&lt;/form&gt;\n</code></pre>\n</blockquote>\n<p>表单域需要与后端结合使用只是接下来的一系列需要传输数据到后端的都需要写到表单域内<br>\n附：此时作者还不知道表单域的 action 等标签充当的角色和用处</p>\n<h6 id=\"input表单元素\"><a class=\"markdownIt-Anchor\" href=\"#input表单元素\">#</a> input 表单元素</h6>\n<blockquote>\n<pre><code>&lt;input type=\"\" value=\"\" name=\"\" &gt;\n</code></pre>\n</blockquote>\n<p><a href=\"https://imgtu.com/i/IJqbX8\"><img src=\"https://z3.ax1x.com/2021/11/09/IJqbX8.png\" alt=\"IJqbX8.png\"></a><br>\ntype 里面可以填写的元素<br>\n text: 文本框，用户可以输入任何文字，但可以用 maxlength 等来加以限定<br>\n password：密码框，可以对你输入的数字进行保密 此时显示 *******<br>\nradio: 单选按钮</p>\n<blockquote>\n<p>将两个 input+radio 元素的标签 name 设置成相同 才可以进行单选 具体下面看图</p>\n</blockquote>\n<p>checkbox: 复选框，可以进行多个选择<br>\n submit: 提交按钮，点击可以将数据提交给后端<br>\n reset: 重新填写<br>\n button: 点击  例如：获取短信验证码需要使用</p>\n<p>与 type 同等级的元素作用<br>\n value：提前显示在文本框内的文字<br>\n name：传送给后端时的数据名称，radio 只有 name 相同才能单选<br>\n<a href=\"https://imgtu.com/i/IQmXRg\"><img src=\"https://z3.ax1x.com/2021/11/06/IQmXRg.png\" alt=\"IQmXRg.png\"></a></p>\n<h6 id=\"label标签\"><a class=\"markdownIt-Anchor\" href=\"#label标签\">#</a> label 标签</h6>\n<p>点击添加了 label 标签的元素等于点击 label 标签的输出端</p>\n<blockquote>\n<pre><code>&lt;label for=\"XXX\"&gt; &lt;/label&gt;\n&lt;input type=\"\" id=\"XXX\"&gt;\n</code></pre>\n</blockquote>\n<p>并不一定要是 input 只是在 input 等填写数据中较为广泛地使用，xxx 可以换成任何自己命名的单词字母等<br>\n for 和 id 中填写的必须相同</p>\n<h6 id=\"select下拉表单\"><a class=\"markdownIt-Anchor\" href=\"#select下拉表单\">#</a> select 下拉表单</h6>\n<blockquote>\n<pre><code>&lt;select&gt;\n&lt;option&gt;&lt;/option&gt;\n&lt;option selected=\"selected\"&gt; &lt;/potion&gt;\n&lt;/select&gt;\n</code></pre>\n</blockquote>\n<p>option 标签中间填写下拉菜单中的文字等<br>\n添加了 selected 元素的表示 未下拉时显示在表面的选项</p>\n<h6 id=\"textarea文本域\"><a class=\"markdownIt-Anchor\" href=\"#textarea文本域\">#</a> textarea 文本域</h6>\n<blockquote>\n<pre><code>&lt;textarea cols=\"\" rows=\"\"&gt;\n&lt;/textarea&gt;\n</code></pre>\n</blockquote>\n<p>文本域通常很大所以用 cols 和 rows 来进行限定<br>\n cols 限定一行的字数 rows 限定行数<br>\n在后期的学习中可以用<strong> css</strong> 将文本域的右下角拉伸和上下滑动进行去除，增加美观性</p>\n<h4 id=\"4html5新增\"><a class=\"markdownIt-Anchor\" href=\"#4html5新增\">#</a> 4.html5 新增</h4>\n<h6 id=\"语义化标签\"><a class=\"markdownIt-Anchor\" href=\"#语义化标签\">#</a> 语义化标签</h6>\n<blockquote>\n<pre><code>&lt;header&gt;头部标签&lt;/header&gt;\n\n&lt;nav&gt;导航栏标签&lt;/nav&gt;   \n&lt;section&gt;某个区域&lt;/section&gt;\n</code></pre>\n</blockquote>\n<h6 id=\"视频标签\"><a class=\"markdownIt-Anchor\" href=\"#视频标签\">#</a> 视频标签</h6>\n<blockquote>\n<pre><code>&lt;video src=\"\" autoplay=\"\"muted=\"muted\"  loop=\"loop\" poster=\"media/mi9.jpg\"&gt;\n</code></pre>\n</blockquote>\n<p>src: 路径<br>\n autoplay: 写入 autoplay 代表自动播放<br>\n mute: 播放时静音<br>\n loop: 预先加载<br>\n poster: 播放还没有加载出来的时候显示的图片<br>\n controls: 是否显示控制按钮</p>\n<h6 id=\"音频标签\"><a class=\"markdownIt-Anchor\" href=\"#音频标签\">#</a> 音频标签</h6>\n<blockquote>\n<pre><code>&lt;audio src=\"media/music.mp3\" autoplay=\"autoplay\" controls=\"controls\"&gt;&lt;/audio&gt;\n</code></pre>\n</blockquote>\n<p>与视频标签相差无几</p>\n<h6 id=\"input表单\"><a class=\"markdownIt-Anchor\" href=\"#input表单\">#</a> input 表单</h6>\n<p><a href=\"https://imgtu.com/i/IJqLnS\"><img src=\"https://z3.ax1x.com/2021/11/09/IJqLnS.png\" alt=\"IJqLnS.png\"></a></p>\n<h6 id=\"表单属性\"><a class=\"markdownIt-Anchor\" href=\"#表单属性\">#</a> 表单属性</h6>\n<blockquote>\n<pre><code>&lt;input type=\"search\" name=\"sear\" id=\"\" required=\"required\" placeholder=\"pink老师\" autofocus=\"autofocus\" autocomplete=\"off\"&gt;\n</code></pre>\n</blockquote>\n<pre><code> &lt;input type=\"file\" name=\"\" id=\"\" multiple=\"multiple\"&gt;\n</code></pre>\n<p>required: 需要填写才能点确定<br>\n placeholder: 还没有填写时候显示的文字<br>\n autofocus: 打开网页时，指标会自动点一下这里<br>\n autocomplete: 自动储存你输入过的信息 (容易暴露信息，所以一般都会关闭)<br>\n multiple: 可以选取多个文件</p>\n",
            "tags": [
                "Html"
            ]
        },
        {
            "id": "https://github.com/YogMas/YogMas.github.io/2021/11/06/javascript-ji-chu-ban/",
            "url": "https://github.com/YogMas/YogMas.github.io/2021/11/06/javascript-ji-chu-ban/",
            "title": "Javascript基础(未完待续)",
            "date_published": "2021-11-05T16:00:00.000Z",
            "content_html": "<h1 id=\"javascript\"><a class=\"markdownIt-Anchor\" href=\"#javascript\">#</a> javascript</h1>\n<h2 id=\"article-by-yogmas\"><a class=\"markdownIt-Anchor\" href=\"#article-by-yogmas\">#</a> Article By Yogmas</h2>\n<h3 id=\"js的组成\"><a class=\"markdownIt-Anchor\" href=\"#js的组成\">#</a> js 的组成</h3>\n<p>1.ECNscript:JS 语法<br>\n 2.DOM: 页面文档模型<br>\n 3.BOM: 浏览器对象模型</p>\n<h4 id=\"js初体验\"><a class=\"markdownIt-Anchor\" href=\"#js初体验\">#</a> js 初体验</h4>\n<p>1. 行内式 js: 直接写到元素的内部<br>\n<a href=\"https://imgtu.com/i/IGFyQJ\"><img src=\"https://z3.ax1x.com/2021/11/08/IGFyQJ.png\" alt=\"IGFyQJ.png\"></a><br>\n2. 内嵌式的 js:</p>\n<blockquote>\n<pre><code>&lt;head&gt;&lt;script&gt; &lt;/script&gt;&lt;/head&gt;\n</code></pre>\n</blockquote>\n<p>3. 外部式 js: 创建 XXX.js 文件在通过标签引出到 html 文件中<br>\n<a href=\"https://imgtu.com/i/IGF2e1\"><img src=\"https://z3.ax1x.com/2021/11/08/IGF2e1.png\" alt=\"IGF2e1.png\"></a></p>\n<h4 id=\"js注释\"><a class=\"markdownIt-Anchor\" href=\"#js注释\">#</a> js 注释</h4>\n<blockquote>\n<pre><code>1.单行注释    //    ctrl + /\n2.多行注释     /*    */    shift + alt + a\n</code></pre>\n</blockquote>\n<h4 id=\"js输入输出语句\"><a class=\"markdownIt-Anchor\" href=\"#js输入输出语句\">#</a> js 输入输出语句</h4>\n<p><a href=\"https://imgtu.com/i/IGFWo6\"><img src=\"https://z3.ax1x.com/2021/11/08/IGFWo6.png\" alt=\"IGFWo6.png\"></a></p>\n<blockquote>\n<pre><code>prompt('') 输入框 \nalert('')警示框  展示给用户的\nconsole 控制台打印的信息 给程序员看的\n</code></pre>\n</blockquote>\n<h3 id=\"变量概述\"><a class=\"markdownIt-Anchor\" href=\"#变量概述\">#</a> 变量概述</h3>\n<h4 id=\"什么是变量\"><a class=\"markdownIt-Anchor\" href=\"#什么是变量\">#</a> 什么是变量</h4>\n<p>变量是用来存放数据的容器，简而言之就是一个装东西的盒子<br>\n变量是内存中申请的一部分用来存放数据的空间</p>\n<h3 id=\"变量的使用\"><a class=\"markdownIt-Anchor\" href=\"#变量的使用\">#</a> 变量的使用</h3>\n<h4 id=\"声明变量\"><a class=\"markdownIt-Anchor\" href=\"#声明变量\">#</a> 声明变量</h4>\n<blockquote>\n<p>var age;</p>\n</blockquote>\n<p>var 是一个 js 关键字用来声明变量<br>\n age 是程序员取的名字</p>\n<h4 id=\"赋值\"><a class=\"markdownIt-Anchor\" href=\"#赋值\">#</a> 赋值</h4>\n<p>赋值就是把值存入变量中</p>\n<blockquote>\n<p>age=10</p>\n</blockquote>\n<p>这里的 = 是赋值的意思 在变量中存储一个数据</p>\n<h4 id=\"变量的初始化\"><a class=\"markdownIt-Anchor\" href=\"#变量的初始化\">#</a> 变量的初始化</h4>\n<blockquote>\n<p>var age=18;</p>\n</blockquote>\n<p>在声明变量的同时赋值给 18  使程序变得更加简便</p>\n<blockquote>\n<pre><code>var myname = prompt('请输入你的名字')\n</code></pre>\n</blockquote>\n<p>这样在弹出的对话框里面输入的名字 可以储存到变量 myname 中去</p>\n<h4 id=\"变量语法扩展\"><a class=\"markdownIt-Anchor\" href=\"#变量语法扩展\">#</a> 变量语法扩展</h4>\n<h5 id=\"更新变量\"><a class=\"markdownIt-Anchor\" href=\"#更新变量\">#</a> 更新变量</h5>\n<blockquote>\n<pre><code> var myname = 'pink';\n console.log(myname);\n  myname = '迪丽热巴';\n  console.log(myname);\n</code></pre>\n</blockquote>\n<p>这样从上到下 第一次输出的 pink 第二次输出的是迪丽热巴  变量在不断更新</p>\n<h5 id=\"声明多个变量\"><a class=\"markdownIt-Anchor\" href=\"#声明多个变量\">#</a> 声明多个变量</h5>\n<blockquote>\n<pre><code>eg:var age=18,address='火影村'\n</code></pre>\n</blockquote>\n<p>这里声明了 age 和 address 多个变量，变量与变量之间通过英文的逗号隔开</p>\n<h5 id=\"声明变量的特殊情况\"><a class=\"markdownIt-Anchor\" href=\"#声明变量的特殊情况\">#</a> 声明变量的特殊情况</h5>\n<p>1. 只声明不赋值 这时候输出的结果是 undefined (未定义的)<br>\n 2. 不声明不赋值 直接使用 浏览器会进行报错<br>\n 3. 不声明直接赋值使用 在 js 之中只可以使用的</p>\n<p>注意:js 是从上到下处理的，如果中间有错误的代码，那么错误代码下面的代码将不再被 js 处理<br>\n<a href=\"https://imgtu.com/i/IG0QRf\"><img src=\"https://z3.ax1x.com/2021/11/08/IG0QRf.png\" alt=\"IG0QRf.png\"></a></p>\n<h5 id=\"变量命名规范\"><a class=\"markdownIt-Anchor\" href=\"#变量命名规范\">#</a> 变量命名规范</h5>\n<p><a href=\"https://imgtu.com/i/IGieEV\"><img src=\"https://z3.ax1x.com/2021/11/08/IGieEV.png\" alt=\"IGieEV.png\"></a><br>\n 尽量不要直接使用 name 作为变量名，name 在大部分浏览器中有变量含义</p>\n<h4 id=\"小结\"><a class=\"markdownIt-Anchor\" href=\"#小结\">#</a> 小结</h4>\n<p>自我问答环节<br>\n<a href=\"https://imgtu.com/i/IGin4U\"><img src=\"https://z3.ax1x.com/2021/11/08/IGin4U.png\" alt=\"IGin4U.png\"></a><br>\n<a href=\"https://imgtu.com/i/IGiM34\"><img src=\"https://z3.ax1x.com/2021/11/08/IGiM34.png\" alt=\"IGiM34.png\"></a></p>\n<h3 id=\"数据类型\"><a class=\"markdownIt-Anchor\" href=\"#数据类型\">#</a> 数据类型</h3>\n<h4 id=\"简介\"><a class=\"markdownIt-Anchor\" href=\"#简介\">#</a> 简介</h4>\n<p>不同的数据占用的存储空间不同，为了充分利用存储空间，于是定义了不同的数据类型.</p>\n<h4 id=\"变量的数据类型\"><a class=\"markdownIt-Anchor\" href=\"#变量的数据类型\">#</a> 变量的数据类型</h4>\n<p>js 是一种弱类型或者说动态语言，这意味着不用提前声明变量的类型，在程序运行的过程中，类型会自动确定.</p>\n<p>js 的变量数据类型是只有程序在运行过程中，根据等号右边的值来确定的.</p>\n<p>js 是动态语言，变量的数据类型是可以变化的</p>\n<blockquote>\n<p>var x = 10;x 是数字型<br>\n var x = ‘yogmas’; x 是字符串型</p>\n</blockquote>\n<h5 id=\"简单数据类型\"><a class=\"markdownIt-Anchor\" href=\"#简单数据类型\">#</a> 简单数据类型</h5>\n<p><a href=\"https://imgtu.com/i/IGFTQH\"><img src=\"https://z3.ax1x.com/2021/11/08/IGFTQH.png\" alt=\"IGFTQH.png\"></a></p>\n<h6 id=\"数字型\"><a class=\"markdownIt-Anchor\" href=\"#数字型\">#</a> 数字型</h6>\n<p>1. 在我们程序里面数字前面加 0 表示 8 进制</p>\n<blockquote>\n<pre><code>eg:var num = 010 转化为10进制就是8\n</code></pre>\n</blockquote>\n<p>2. 十六进制 0~9 a~f<br>\n 在数字前面加 0x 表示 16 进制</p>\n<blockquote>\n<pre><code>eg:var num = 0xa 转外为10进制就是10\n</code></pre>\n</blockquote>\n<p>3. 数字型的最大值</p>\n<blockquote>\n<pre><code>console.log(Number.MAX_VALUE)  1.7976e+308\n</code></pre>\n</blockquote>\n<p>4. 数字型的最小值</p>\n<blockquote>\n<pre><code>console.log(Number.MIN_VALUE)  5e-324\n</code></pre>\n</blockquote>\n<p>数字型的三个特殊数值<br>\n alert (infinity) 无穷大<br>\n alert (-infinity) 无穷小<br>\n这两个数都可以通过将前面的最大数或者最小数通过加减乘除扩大或缩小得到<br>\n alert (NAN) 非数值</p>\n<p>可以通过 isNAN 用来判断非数字 并且返回一个值， 如果是数值返回的是 false 如果不是数字 返回的是 true<br>\nconsole.log(isNaN(XX));<br>\n<a href=\"https://imgtu.com/i/IGFOTP\"><img src=\"https://z3.ax1x.com/2021/11/08/IGFOTP.png\" alt=\"IGFOTP.png\"></a></p>\n<h5 id=\"字符串型\"><a class=\"markdownIt-Anchor\" href=\"#字符串型\">#</a> 字符串型</h5>\n<p>字符串数据类型用单引号圈出 (字符串必须加引号，不然会提示错误)</p>\n<p>注意引号内不能内嵌引号，如果要引号内嵌，使用不同的引号 (<strong>引号判定是就近一致原则</strong>)</p>\n<blockquote>\n<pre><code>例如:var str = \"我是一个'高富帅'程序员\";\n</code></pre>\n</blockquote>\n<h6 id=\"字符串长度\"><a class=\"markdownIt-Anchor\" href=\"#字符串长度\">#</a> 字符串长度</h6>\n<p>检测获取字符串的长度 用 length</p>\n<blockquote>\n<pre><code>        var str = 'my name is andy ';\n        console.log(str.length)\n</code></pre>\n</blockquote>\n<h6 id=\"字符转义符\"><a class=\"markdownIt-Anchor\" href=\"#字符转义符\">#</a> 字符转义符</h6>\n<p><a href=\"https://imgtu.com/i/IGkmpF\"><img src=\"https://z3.ax1x.com/2021/11/08/IGkmpF.png\" alt=\"IGkmpF.png\"></a><br>\n 都是以 \\ 开头 ，但是这些转义字符要写到引号里面</p>\n<h6 id=\"字符串的拼接\"><a class=\"markdownIt-Anchor\" href=\"#字符串的拼接\">#</a> 字符串的拼接</h6>\n<blockquote>\n<pre><code>console.log ('' + '' + '')字符串之间通过加号连接\neg:console.log ('沙漠'+'骆驼 ') = '沙漠骆驼'\nconsole.log ('12' + 12) 最后为1212  这是字符串的相加   \nconsole.log (12 + 12) 最后为24   这是数字型的相加\n</code></pre>\n</blockquote>\n<p>只要有一个是字符串 其他全部都会以字符串相连<br>\n<strong>数字相加，字符相连</strong></p>\n<h6 id=\"字符串拼接加强\"><a class=\"markdownIt-Anchor\" href=\"#字符串拼接加强\">#</a> 字符串拼接加强</h6>\n<p>通过改变变量中的值 来改变显示中的值</p>\n<blockquote>\n<pre><code>eg:var age = 18;\n   console.log('pink老师'+age+'岁')\n</code></pre>\n</blockquote>\n<p>需要注意的时，<strong>变量不要写到字符串里面，是通过和字符串相连的方式实现的</strong></p>\n<blockquote>\n<pre><code>  console.log ('pink老师age岁')\n  console.log ('pink老师'+'age'+'岁')\n  console.log ('pink老师'+'age岁')\n</code></pre>\n</blockquote>\n<p>如上这些等等做法，都是不能实现的.<br>\n<a href=\"https://imgtu.com/i/IGku6J\"><img src=\"https://z3.ax1x.com/2021/11/08/IGku6J.png\" alt=\"IGku6J.png\"></a><br>\n 交互编程：</p>\n<p>用户输入 → 处理 → 输出</p>\n<blockquote>\n<pre><code>eg         var age = prompt('请输入您的年龄');\n           var str = '你今年已经' + age + '岁了';\n           alert(str);\n</code></pre>\n</blockquote>\n<h5 id=\"布尔型boolean\"><a class=\"markdownIt-Anchor\" href=\"#布尔型boolean\">#</a> 布尔型 Boolean</h5>\n<p>布尔型中有两个值 true 和 false</p>\n<blockquote>\n<pre><code>eg         var flag = true; 布尔型\n           var flag1 = false; 布尔型\n</code></pre>\n</blockquote>\n<p>需要注意的是参与加法运算时布尔型 true 就是 1，false 就是 0.</p>\n<h5 id=\"undefined-和null\"><a class=\"markdownIt-Anchor\" href=\"#undefined-和null\">#</a> Undefined 和 Null</h5>\n<p>如果一个变量声明未赋值 就是 undefined 未定义数据类型</p>\n<blockquote>\n<pre><code>   eg: var str;\n       console.log(var);\n</code></pre>\n</blockquote>\n<p>未定义和字符串相加，最终的结果是 undefined+ 字符串的内容</p>\n<p>undefined 和数字相加 最后得到的结果是 NaN: not a number</p>\n<p>null : 空值</p>\n<blockquote>\n<pre><code>var space = null\nconsole.log(space + 'yogmas')  输出的结果是 spaceyogmas\nconsole.log(space + 1) 输出的结果是1  (和undefined区别)\n</code></pre>\n</blockquote>\n<h4 id=\"获取变量数据类型\"><a class=\"markdownIt-Anchor\" href=\"#获取变量数据类型\">#</a> 获取变量数据类型</h4>\n<h5 id=\"使用typeof来检测\"><a class=\"markdownIt-Anchor\" href=\"#使用typeof来检测\">#</a> 使用 typeof 来检测</h5>\n<blockquote>\n<pre><code>   eg:   var num = 10;\n         console.log(typeof num);\n</code></pre>\n</blockquote>\n<p>比较特殊的是 在这里对 null 进行数据类型检测 输出来的是 object (对象)</p>\n<p>经过检测发现 我们 prompt 取过来的值是字符型的</p>\n<h5 id=\"观察控制台中的数据颜色\"><a class=\"markdownIt-Anchor\" href=\"#观察控制台中的数据颜色\">#</a> 观察控制台中的数据颜色</h5>\n<p>数字型 浅蓝色<br>\n字符型 黑色<br>\n布尔型 深蓝色<br>\n undefined 和 null 灰色</p>\n<h4 id=\"字面量\"><a class=\"markdownIt-Anchor\" href=\"#字面量\">#</a> 字面量</h4>\n<p>字面量是在源代码中一个固定值得表示法，通俗来说，就是字面量表示如何表达这个值<br>\n<a href=\"https://imgtu.com/i/IGkQmR\"><img src=\"https://z3.ax1x.com/2021/11/08/IGkQmR.png\" alt=\"IGkQmR.png\"></a></p>\n<h4 id=\"数据类型转换\"><a class=\"markdownIt-Anchor\" href=\"#数据类型转换\">#</a> 数据类型转换</h4>\n<p>通常会实现 3 中方式的转换<br>\n 1. 转换为字符串类型<br>\n 2. 转换为数字型<br>\n 3. 转换为布尔型</p>\n<h5 id=\"转换成字符串型\"><a class=\"markdownIt-Anchor\" href=\"#转换成字符串型\">#</a> 转换成字符串型</h5>\n<p><a href=\"https://imgtu.com/i/IGkGtK\"><img src=\"https://z3.ax1x.com/2021/11/08/IGkGtK.png\" alt=\"IGkGtK.png\"></a></p>\n<blockquote>\n<pre><code>var num = 18;\nconsole.log(num.toString())\nconsole.log(String(num))\nconsole.log(num + '')\n</code></pre>\n</blockquote>\n<p>注意:toString () 和 String () 的使用方法不同<br>\n三种方法中 其中拼接转换字符串最为实用</p>\n<h5 id=\"转换为数字型重点\"><a class=\"markdownIt-Anchor\" href=\"#转换为数字型重点\">#</a> 转换为数字型 (重点)</h5>\n<p><a href=\"https://imgtu.com/i/IGkN1e\"><img src=\"https://z3.ax1x.com/2021/11/08/IGkN1e.png\" alt=\"IGkN1e.png\"></a><br>\n 其中前两个较为实用<br>\n 1.parseInt (变量) 可以把字符型的转换为数字型 但是得到的是整数 并且约分不会四舍五入，会直接去掉小数点后面的数字 如果数字后面有单位，也会去掉单位，如果以字母开头那么输出的为 NaN<br>\n2.paseFloat (变量) 可以把字符型的转化为数字型，得到的是浮点数也就是小数，但同样也会把后面的单位去掉<br>\n 3.Number (变量)<br>\n 4. 利用了算数运算 - * / 隐式转换<br>\n<a href=\"https://imgtu.com/i/IGk2cQ\"><img src=\"https://z3.ax1x.com/2021/11/08/IGk2cQ.png\" alt=\"IGk2cQ.png\"></a></p>\n<blockquote>\n<pre><code>   console.log(parseInt('123'));\n   console.log(parseFloat('123'));\n   console.log(Number('123'));\n   console.log('12' - 0);\n   console.log('123' - '123');\n   console.log('123' * 1);\n</code></pre>\n</blockquote>\n<h5 id=\"转化为布尔型\"><a class=\"markdownIt-Anchor\" href=\"#转化为布尔型\">#</a> 转化为布尔型</h5>\n<p>代表<strong>空，否定</strong>的值会被转化为 false，如’’,0,NaN,null,undefined. 其他的值都会被转化成 true<br>\n<a href=\"https://imgtu.com/i/IGkjBR\"><img src=\"https://z3.ax1x.com/2021/11/08/IGkjBR.png\" alt=\"IGkjBR.png\"></a></p>\n<blockquote>\n<pre><code>eg: console.log(Boolean(''));      这是false\n</code></pre>\n</blockquote>\n<h4 id=\"解释型语言和编译型语言\"><a class=\"markdownIt-Anchor\" href=\"#解释型语言和编译型语言\">#</a> 解释型语言和编译型语言</h4>\n<p>编译型语言：全部编译成功后再执行代码.(做好菜 再吃饭)<br>\n 解释型语言：解释一行代码后就执行一行代码.(吃火锅：边吃边涮)</p>\n<h4 id=\"标识符关键字保留字\"><a class=\"markdownIt-Anchor\" href=\"#标识符关键字保留字\">#</a> 标识符，关键字，保留字</h4>\n<p>标识符：开发人员为变量，属性，函数，参数取的名字<br>\n<strong>标识符不能是关键字和保留字</strong><br>\n关键字：是指 js 本身已经使用了子，不能充当变量名和方法名<br>\n<a href=\"https://imgtu.com/i/IGBhAs\"><img src=\"https://z3.ax1x.com/2021/11/08/IGBhAs.png\" alt=\"IGBhAs.png\"></a><br>\n 保留字：预留的关键字，未来可能会成为关键字<br>\n<a href=\"https://imgtu.com/i/IGBHjU\"><img src=\"https://z3.ax1x.com/2021/11/08/IGBHjU.png\" alt=\"IGBHjU.png\"></a></p>\n<h3 id=\"运算符\"><a class=\"markdownIt-Anchor\" href=\"#运算符\">#</a> 运算符</h3>\n<h4 id=\"算数运算符\"><a class=\"markdownIt-Anchor\" href=\"#算数运算符\">#</a> 算数运算符</h4>\n<p><a href=\"https://imgtu.com/i/IGAQgg\"><img src=\"https://z3.ax1x.com/2021/11/08/IGAQgg.png\" alt=\"IGAQgg.png\"></a><br>\n 需要注意的是浮点数在算数运算里面会有问题 (会有一定的误差)</p>\n<blockquote>\n<pre><code>eg:console.log(0.07*100); 最终的结果是7.000000000000001\n</code></pre>\n</blockquote>\n<p><a href=\"https://imgtu.com/i/IGAaCT\"><img src=\"https://z3.ax1x.com/2021/11/08/IGAaCT.png\" alt=\"IGAaCT.png\"></a><br>\n 我们不能拿着浮点数来进行相比较是否相等</p>\n<h5 id=\"表达式返回值\"><a class=\"markdownIt-Anchor\" href=\"#表达式返回值\">#</a> 表达式，返回值</h5>\n<p>由数字，运算符，变量等组成的式子</p>\n<p>在程序中的计算是把右边表达式计算完毕把返回值给左边</p>\n<p>式子通过计算得到的结果 称为返回值</p>\n<h4 id=\"自增和自减运算符\"><a class=\"markdownIt-Anchor\" href=\"#自增和自减运算符\">#</a> 自增和自减运算符</h4>\n<p>反复用给数字变量添加或者减去 1，可以用 ++ 或者–来实现<br>\n在 js 中，自增自减运算符既可以放在变量前面又可以放在变量后面，称为前置或者后置.<br>\n 需要注意的是 这个运算符必须和变量配合才能使用<br>\n前置和后置有区别的是，前置表示先自增或自减再返回，后置表示先返回再自增或自减<br>\n<a href=\"https://imgtu.com/i/IGYJ4U\"><img src=\"https://z3.ax1x.com/2021/11/08/IGYJ4U.png\" alt=\"IGYJ4U.png\"></a></p>\n<h4 id=\"比较运算符关系运算符\"><a class=\"markdownIt-Anchor\" href=\"#比较运算符关系运算符\">#</a> 比较运算符 &amp; 关系运算符</h4>\n<p><a href=\"https://imgtu.com/i/IGYwuR\"><img src=\"https://z3.ax1x.com/2021/11/08/IGYwuR.png\" alt=\"IGYwuR.png\"></a><br>\n<a href=\"https://imgtu.com/i/IGYy4O\"><img src=\"https://z3.ax1x.com/2021/11/08/IGYy4O.png\" alt=\"IGYy4O.png\"></a></p>\n<h4 id=\"逻辑运算符\"><a class=\"markdownIt-Anchor\" href=\"#逻辑运算符\">#</a> 逻辑运算符</h4>\n<p><a href=\"https://imgtu.com/i/IGYhDI\"><img src=\"https://z3.ax1x.com/2021/11/08/IGYhDI.png\" alt=\"IGYhDI.png\"></a></p>\n<h5 id=\"短路运算逻辑中断\"><a class=\"markdownIt-Anchor\" href=\"#短路运算逻辑中断\">#</a> 短路运算 (逻辑中断)</h5>\n<p>原理：左边表达式的值可以确定结果时，就不再继续运算右边的值</p>\n<p>逻辑与：如果表达式 1 结果为真，则返回表达式 2. 如果表达式 1 结果为假，则返回表达式 1<br>\n<a href=\"https://imgtu.com/i/IGYIVP\"><img src=\"https://z3.ax1x.com/2021/11/08/IGYIVP.png\" alt=\"IGYIVP.png\"></a><br>\n<a href=\"https://imgtu.com/i/IGYoUf\"><img src=\"https://z3.ax1x.com/2021/11/08/IGYoUf.png\" alt=\"IGYoUf.png\"></a><br>\n 逻辑或：如果表达式 1 结果为真，则返回表达式 1. 如果表达式 1 结果为假，则返回表达式 2.<br>\n<a href=\"https://imgtu.com/i/IGYT58\"><img src=\"https://z3.ax1x.com/2021/11/08/IGYT58.png\" alt=\"IGYT58.png\"></a></p>\n<h5 id=\"赋值运算符\"><a class=\"markdownIt-Anchor\" href=\"#赋值运算符\">#</a> 赋值运算符</h5>\n<p>把右边的数据赋给左边的变量<br>\n<a href=\"https://imgtu.com/i/IGYLvj\"><img src=\"https://z3.ax1x.com/2021/11/08/IGYLvj.png\" alt=\"IGYLvj.png\"></a></p>\n<h5 id=\"运算符优先级\"><a class=\"markdownIt-Anchor\" href=\"#运算符优先级\">#</a> 运算符优先级</h5>\n<p><a href=\"https://imgtu.com/i/IGtSaV\"><img src=\"https://z3.ax1x.com/2021/11/08/IGtSaV.png\" alt=\"IGtSaV.png\"></a><br>\n 注意逻辑与的权重大于逻辑或的权重</p>\n<h3 id=\"流程控制-分支\"><a class=\"markdownIt-Anchor\" href=\"#流程控制-分支\">#</a> 流程控制 - 分支</h3>\n<h4 id=\"流程控制\"><a class=\"markdownIt-Anchor\" href=\"#流程控制\">#</a> 流程控制</h4>\n<p>控制代码按照什么结构顺序来执行</p>\n<p>流程控制有三种结构，分别是顺序结构，分支结构和循环结构<br>\n<a href=\"https://imgtu.com/i/IGti24\"><img src=\"https://z3.ax1x.com/2021/11/08/IGti24.png\" alt=\"IGti24.png\"></a></p>\n<h5 id=\"顺序流程控制\"><a class=\"markdownIt-Anchor\" href=\"#顺序流程控制\">#</a> 顺序流程控制</h5>\n<p>按照写的代码的顺序从上到下执行，我们现在的代码大多数都是按照顺序流程控制来写的</p>\n<h5 id=\"分支流程控制\"><a class=\"markdownIt-Anchor\" href=\"#分支流程控制\">#</a> 分支流程控制</h5>\n<p>从上到下执行代码的过程中，根据不同的条件，执行不同的路径代码，从而得到不同的结果</p>\n<h4 id=\"if分支语句\"><a class=\"markdownIt-Anchor\" href=\"#if分支语句\">#</a> if 分支语句</h4>\n<blockquote>\n<pre><code>if (条件表达式) {执行语句}\n</code></pre>\n</blockquote>\n<p>如果条件表达式结果为真就执行大括号里面的执行语句<br>\n如果条件表达式结果为假就执行 if 语句后面的代码<br>\n<a href=\"https://imgtu.com/i/IGBOHJ\"><img src=\"https://z3.ax1x.com/2021/11/08/IGBOHJ.png\" alt=\"IGBOHJ.png\"></a><br>\n<a href=\"https://imgtu.com/i/IGBx41\"><img src=\"https://z3.ax1x.com/2021/11/08/IGBx41.png\" alt=\"IGBx41.png\"></a></p>\n<h5 id=\"if-else-双分支语句\"><a class=\"markdownIt-Anchor\" href=\"#if-else-双分支语句\">#</a> if else 双分支语句</h5>\n<p><a href=\"https://imgtu.com/i/IGDp36\"><img src=\"https://z3.ax1x.com/2021/11/08/IGDp36.png\" alt=\"IGDp36.png\"></a><br>\n 如果表达式结果为真，那么执行语句 1 否则执行语句 2<br>\n 语句 1 和语句 2 只能二选一执行<br>\n else 后面直接加大括号而不是小括号<br>\n<a href=\"https://imgtu.com/i/IGDVUA\"><img src=\"https://z3.ax1x.com/2021/11/08/IGDVUA.png\" alt=\"IGDVUA.png\"></a></p>\n<h5 id=\"if-else-多分支语句\"><a class=\"markdownIt-Anchor\" href=\"#if-else-多分支语句\">#</a> if else 多分支语句</h5>\n<p>利用多个条件来选择不同的语句执行，得到不同的结果，是多选 1 的过程</p>\n<p>语法规范:<br>\nif (条件表达式 1) {</p>\n<p>} else if (条件表达式 2) {</p>\n<p>} else if …{</p>\n<p>} else {<br>\n最后的语句<br>\n}<br>\n 如果条件表达式 1 满足就执行语句 1，执行完毕后退出整个 if 分支语句<br>\n如果条件 1 不满足就判断表达式 2 以此类推<br>\n如果全都不成立，则执行最后的 else 里面的语句<br>\n注意<br>\n 1. 多分支语句还是多选 1 最后只有 1 个语句能执行<br>\n 2.else if 里面的条件理论上是可以任意多个的<br>\n 3.else if 中间有个空格<br>\n<a href=\"https://imgtu.com/i/IGD9gK\"><img src=\"https://z3.ax1x.com/2021/11/08/IGD9gK.png\" alt=\"IGD9gK.png\"></a></p>\n<h4 id=\"三元表达式\"><a class=\"markdownIt-Anchor\" href=\"#三元表达式\">#</a> 三元表达式</h4>\n<p>有三元运算符组成的式子我们称为三元表达式</p>\n<p>条件表达式 1? 表达式 1: 表达式 2</p>\n<p>如果条件表达式结果为真，则返回表达式 1 的值，如果条件表达式的结果为假，则返回表达式 2 的值</p>\n<h4 id=\"switch语句\"><a class=\"markdownIt-Anchor\" href=\"#switch语句\">#</a> switch 语句</h4>\n<p>也是多分支语句可以实现多选 1 的效果<br>\n<a href=\"https://imgtu.com/i/IGDn8P\"><img src=\"https://z3.ax1x.com/2021/11/08/IGDn8P.png\" alt=\"IGDn8P.png\"></a><br>\n 语法结构:<br>\nswitch (表达式) {<br>\ncase value1:<br>\n 执行语句 1;<br>\nbreak;<br>\ncase value2:<br>\n 执行语句 2;<br>\nbreak;<br>\n…………<br>\ndefault :<br>\n 执行最后的语句；<br>\n}<br>\n 利用表达式的值和 case 里面的选项匹配如果匹配上就执行相应的 case 里面的值，如果都没有匹配上就执行 default 里面的语句<br>\n<a href=\"https://imgtu.com/i/IGDKv8\"><img src=\"https://z3.ax1x.com/2021/11/08/IGDKv8.png\" alt=\"IGDKv8.png\"></a></p>\n<h4 id=\"switch语句和-if-else-if语句的区别\"><a class=\"markdownIt-Anchor\" href=\"#switch语句和-if-else-if语句的区别\">#</a> switch 语句和 if else if 语句的区别</h4>\n<p>一般情况下，他们两个语句可以相互替换<br>\n switch…case 语句 一般在 case 为比较固定值得情况下而 if…else 语句一般来判断范围<br>\n switch 判断时直接跳到判断语句上而 if 语句从上往下一次判断，这样 switch 语句的效率更高一点，但是如果分支少的话 if else if 的效率会更高一点，分支多的时候 switch 语句的效率更高<br>\n<a href=\"https://imgtu.com/i/IGDQKS\"><img src=\"https://z3.ax1x.com/2021/11/08/IGDQKS.png\" alt=\"IGDQKS.png\"></a></p>\n<h3 id=\"流程控制-循环\"><a class=\"markdownIt-Anchor\" href=\"#流程控制-循环\">#</a> 流程控制 - 循环</h3>\n<p>可以反复不断地循环执行某些代码</p>\n<h4 id=\"for循环\"><a class=\"markdownIt-Anchor\" href=\"#for循环\">#</a> for 循环</h4>\n<p>for 循环重复执行某些代码，通常和计数有关<br>\n被重复的语句称为循环体，是否重复执行取决于循环的终止条件，由循环体及循环的终止条件<br>\n初始化变量 就是用 var 声明的一个普通变量，通常用于作为计数器使用<br>\n条件表达式 就是用来决定每一次循环是否继续执行 就是终止的条件<br>\n操作表达式 是每次循环最后执行的代码，经常用来对我们的计数器进行更新 (递增或者递减)</p>\n<h5 id=\"断点调试\"><a class=\"markdownIt-Anchor\" href=\"#断点调试\">#</a> 断点调试</h5>\n<p>自己在程序的某一行设置一个断点，调试时，程序运行到这一行就会停住，然后你可以一步一步往下调试，调试过程中可以看着各个变量当前的值，出错的话，调试到出错的代码行及硻错误，停下.</p>\n<p>在浏览器调试中的 source 中可以进行断点调试<br>\n<a href=\"https://imgtu.com/i/IGtai8\"><img src=\"https://z3.ax1x.com/2021/11/08/IGtai8.png\" alt=\"IGtai8.png\"></a></p>\n<h5 id=\"for循环重复相同的代码\"><a class=\"markdownIt-Anchor\" href=\"#for循环重复相同的代码\">#</a> for 循环重复相同的代码</h5>\n<blockquote>\n<pre><code>   var num = prompt('请输入重复的次数');\n   for (i = 1; i &lt;= num; i++) {\n   console.log('你是大傻逼');\n   }\n</code></pre>\n</blockquote>\n<h5 id=\"for循环重复不同的代码\"><a class=\"markdownIt-Anchor\" href=\"#for循环重复不同的代码\">#</a> for 循环重复不同的代码</h5>\n<p>循环可以重复执行不同的代码，因为计数器变量 i 的存在 i 每次循环值都会变化</p>\n<blockquote>\n<pre><code>   for (var i = 1; i &lt;= 100; i++) {\n   console.log('这个人今年' + i + '岁了');\n   }\n</code></pre>\n</blockquote>\n<h5 id=\"for循环重复相同的操作\"><a class=\"markdownIt-Anchor\" href=\"#for循环重复相同的操作\">#</a> for 循环重复相同的操作</h5>\n<p>例如:</p>\n<blockquote>\n<pre><code>   var sum = 0, aver = 0;\n   for (var i = 1; i &lt;= 100; i++) {\n   sum += i\n   }\n   aver = sum / i\n   console.log(aver);\n</code></pre>\n</blockquote>\n<h5 id=\"双重for循环\"><a class=\"markdownIt-Anchor\" href=\"#双重for循环\">#</a> 双重 for 循环</h5>\n<p>也就是 for 循环嵌套，在一个循环语句中 再定义一个循环语句.</p>\n<blockquote>\n<pre><code>for (外层的初始化变量;外层的条件表达式;外层的操作表达式) {\n     for (初始化变量;条件表达式;操作表达式){\n     }\n     }\n</code></pre>\n</blockquote>\n<p>里层的循环可以看成是外层循环的语句</p>\n<h5 id=\"for循环小结\"><a class=\"markdownIt-Anchor\" href=\"#for循环小结\">#</a> for 循环小结</h5>\n<p><a href=\"https://imgtu.com/i/IGD1bQ\"><img src=\"https://z3.ax1x.com/2021/11/08/IGD1bQ.png\" alt=\"IGD1bQ.png\"></a></p>\n<h4 id=\"while循环\"><a class=\"markdownIt-Anchor\" href=\"#while循环\">#</a> while 循环</h4>\n<p><a href=\"https://imgtu.com/i/IGD8Ej\"><img src=\"https://z3.ax1x.com/2021/11/08/IGD8Ej.png\" alt=\"IGD8Ej.png\"></a></p>\n<p>条件表达式结果为 true 则执行循环体 否则 退出循环</p>\n<p>while 循环中应该也有计数器初始化变量，也该有操作表达式完成计数器的更新防止死循环</p>\n<h4 id=\"do-while-循环\"><a class=\"markdownIt-Anchor\" href=\"#do-while-循环\">#</a> do while 循环</h4>\n<p>语法结构</p>\n<blockquote>\n<p>do {循环体} while (条件表达式)</p>\n</blockquote>\n<p>执行思路不同的地方跟 while 在于 do whild 先执行一遍循环体再判断条件<br>\n do while 语句至少执行一次循环体</p>\n<p><a href=\"https://imgtu.com/i/IGDwKU\"><img src=\"https://z3.ax1x.com/2021/11/08/IGDwKU.png\" alt=\"IGDwKU.png\"></a></p>\n<h4 id=\"循环小结\"><a class=\"markdownIt-Anchor\" href=\"#循环小结\">#</a> 循环小结</h4>\n<p><a href=\"https://imgtu.com/i/IGtwRg\"><img src=\"https://z3.ax1x.com/2021/11/08/IGtwRg.png\" alt=\"IGtwRg.png\"></a></p>\n<h3 id=\"continue关键字\"><a class=\"markdownIt-Anchor\" href=\"#continue关键字\">#</a> continue 关键字</h3>\n<p>用于立即跳出本次循环，继续下一次循环.</p>\n<h3 id=\"break关键字\"><a class=\"markdownIt-Anchor\" href=\"#break关键字\">#</a> break 关键字</h3>\n<p>break 退出整个循环，使循环立马结束</p>\n<h3 id=\"命名规范\"><a class=\"markdownIt-Anchor\" href=\"#命名规范\">#</a> 命名规范</h3>\n<h4 id=\"标志符命名规范\"><a class=\"markdownIt-Anchor\" href=\"#标志符命名规范\">#</a> 标志符命名规范</h4>\n<p><a href=\"https://imgtu.com/i/IGtrss\"><img src=\"https://z3.ax1x.com/2021/11/08/IGtrss.png\" alt=\"IGtrss.png\"></a></p>\n<h4 id=\"操作符规范\"><a class=\"markdownIt-Anchor\" href=\"#操作符规范\">#</a> 操作符规范</h4>\n<p>操作符左右两侧各保留一个空格<br>\n单行注释在 // 后面敲个空格</p>\n<h4 id=\"循环作业\"><a class=\"markdownIt-Anchor\" href=\"#循环作业\">#</a> 循环作业</h4>\n<p><a href=\"https://imgtu.com/i/IGtgoV\"><img src=\"https://z3.ax1x.com/2021/11/08/IGtgoV.png\" alt=\"IGtgoV.png\"></a></p>\n<h3 id=\"javascript数组\"><a class=\"markdownIt-Anchor\" href=\"#javascript数组\">#</a> javascript 数组</h3>\n<h4 id=\"数组的概念\"><a class=\"markdownIt-Anchor\" href=\"#数组的概念\">#</a> 数组的概念</h4>\n<p>数组是一组数据的集合，其中每个数据都被称为元素，在数组中可以存放任何类型的元素，数组是可以将数据存储在单个变量下的优雅方式</p>\n<h4 id=\"创建数组\"><a class=\"markdownIt-Anchor\" href=\"#创建数组\">#</a> 创建数组</h4>\n<p>1.new 创建数组<br>\n 2. 利用数组关键字创造数组</p>\n<h5 id=\"利用new创建数组\"><a class=\"markdownIt-Anchor\" href=\"#利用new创建数组\">#</a> 利用 new 创建数组</h5>\n<p><a href=\"https://imgtu.com/i/IGrSaj\"><img src=\"https://z3.ax1x.com/2021/11/08/IGrSaj.png\" alt=\"IGrSaj.png\"></a><br>\n 注意 Array 的 A 要大写</p>\n<h5 id=\"利用数组字面量创建数组\"><a class=\"markdownIt-Anchor\" href=\"#利用数组字面量创建数组\">#</a> 利用数组字面量创建数组</h5>\n<p>[] 是数组的的字面量</p>\n<blockquote>\n<p>var arr = [];<br>\n 这样便创建了一个空的数组<br>\n var arr = [1,1,2,3,‘pink’,true]</p>\n</blockquote>\n<p>在数组内可以放任何的数据类型，但是每一个数据之间必须用逗号分隔.</p>\n<h4 id=\"获取数组元素\"><a class=\"markdownIt-Anchor\" href=\"#获取数组元素\">#</a> 获取数组元素</h4>\n<h5 id=\"数组的索引\"><a class=\"markdownIt-Anchor\" href=\"#数组的索引\">#</a> 数组的索引</h5>\n<p>索引又被称为下标：用来访问数组元素的序号 (数组下标从 0 开始)<br>\n<a href=\"https://imgtu.com/i/IGNAfS\"><img src=\"https://z3.ax1x.com/2021/11/08/IGNAfS.png\" alt=\"IGNAfS.png\"></a></p>\n<blockquote>\n<pre><code> 数组名[索引号]\n console.log(arr[1])\n</code></pre>\n</blockquote>\n<p><strong>索引号从 0 开始</strong><br>\n如果没有该数组元素 就会输出 undefined</p>\n<h4 id=\"遍历数组\"><a class=\"markdownIt-Anchor\" href=\"#遍历数组\">#</a> 遍历数组</h4>\n<p>遍历：就是把数组中的每个元素从头到尾访问一次</p>\n<blockquote>\n<pre><code>eg:var arr = [1, 2, 3, 4, 5, 'pink'];\n   for (i = 0; i &lt; 6; i++) {\n   console.log(arr[i]);\n   }\n</code></pre>\n</blockquote>\n<p>输出的时候计数器当索引号来用</p>\n<h5 id=\"数组长度\"><a class=\"markdownIt-Anchor\" href=\"#数组长度\">#</a> 数组长度</h5>\n<p>数组名.length  可以访问数组中的数组元素的数量</p>\n<blockquote>\n<pre><code>console.log(arr.length);\n</code></pre>\n</blockquote>\n<p>同时 数组名.length 可以动态检测数组元素的个数</p>\n<h4 id=\"数组中新增元素\"><a class=\"markdownIt-Anchor\" href=\"#数组中新增元素\">#</a> 数组中新增元素</h4>\n<h5 id=\"通过修改length长度新增数组长度\"><a class=\"markdownIt-Anchor\" href=\"#通过修改length长度新增数组长度\">#</a> 通过修改 length 长度新增数组长度</h5>\n<blockquote>\n<pre><code>   var arr = ['pink', 'red', 'blue'];\n   arr.length = 5\n</code></pre>\n</blockquote>\n<p>如果扩容的数组元素中没有给值，其中的元素是 undefined</p>\n<h5 id=\"修改索引号-增加数组元素\"><a class=\"markdownIt-Anchor\" href=\"#修改索引号-增加数组元素\">#</a> 修改索引号 增加数组元素</h5>\n<blockquote>\n<pre><code>var arr = ['pink', 'red', 'blue'];\narr[3] = 'pink'\n</code></pre>\n</blockquote>\n<p>如果这个索引号原先已经被占用，就会替换原来的数组元素<br>\n<strong>不要直接给数组名赋值，否则会覆盖掉以前的数据，导致数据一个都没有了</strong></p>\n<h4 id=\"筛选数组的方法\"><a class=\"markdownIt-Anchor\" href=\"#筛选数组的方法\">#</a> 筛选数组的方法</h4>\n<h5 id=\"方法1\"><a class=\"markdownIt-Anchor\" href=\"#方法1\">#</a> 方法 1</h5>\n<blockquote>\n<pre><code>   var arr = [1, 2, 3, 4, 5, 6, 8, 11, 45, 13, 48, 46, 13];\n   var newArr = [];\n   var j = 0;\n   for (var i = 0; i &lt; arr.length; i++) {\n       if (arr[i] &gt; 10) {\n           newArr[j] = arr[i]\n           j++\n       }\n   }\n   console.log(newArr);\n</code></pre>\n</blockquote>\n<p>这里通过声明一个变量 j 来使新数组从 0 开始</p>\n<h5 id=\"方法2\"><a class=\"markdownIt-Anchor\" href=\"#方法2\">#</a> 方法 2</h5>\n<blockquote>\n<pre><code>   var arr = [1, 2, 3, 4, 5, 6, 8, 11, 45, 13, 48, 46, 13];\n   var newArr = [];\n   for (var i = 0; i &lt; arr.length; i++) {\n       if (arr[i] &gt; 10) {\n           newArr[newArr.length] = arr[i]\n       }\n   }\n   console.log(newArr);\n</code></pre>\n</blockquote>\n<p>将 j 替换成 newArr, 最开始当新数组里面没有元素时是 0，当有元素时 newArr.length 开始不断增多</p>\n<h4 id=\"翻转数组\"><a class=\"markdownIt-Anchor\" href=\"#翻转数组\">#</a> 翻转数组</h4>\n<blockquote>\n<pre><code>   var arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n   var newArr = [];\n   for (i = arr.length - 1; i &gt;= 0; i--) {\n       newArr[newArr.length] = arr[i]\n   }\n   console.log(newArr);\n</code></pre>\n</blockquote>\n<p>这里需要注意的是：元素的索引号的最大值等于数组长度 - 1</p>\n<h4 id=\"冒泡排序\"><a class=\"markdownIt-Anchor\" href=\"#冒泡排序\">#</a> 冒泡排序</h4>\n<p>是一种算法，把一系列数组按照一定的顺序进行排列显示 (从小到大或者从大到小)<br>\n 算法：观察执行过程，从而找到其中的规律，并且找到代码</p>\n<blockquote>\n<pre><code>   var arr = [1, 5, 4, 3, 2];\n   for (var i = 0; i &lt; arr.length - 1; i++) { // 外层循环次数\n       for (var j = 0; j &lt; arr.length - i - 1; j++) { // 内层循环次数\n           if (arr[j] &gt; arr[j + 1]) {\n               var temp = arr[j]\n               arr[j] = arr[j + 1]\n               arr[j + 1] = temp\n           }\n       }\n   }\n</code></pre>\n</blockquote>\n<h3 id=\"javascript函数\"><a class=\"markdownIt-Anchor\" href=\"#javascript函数\">#</a> javascript 函数</h3>\n<h4 id=\"函数的概念\"><a class=\"markdownIt-Anchor\" href=\"#函数的概念\">#</a> 函数的概念</h4>\n<p>js 中经常会定义相同的代码，这些代码可能会大量使用<br>\n函数：就是封装了一段可被重复调用执行的代码块，通过调用代码块可以实现大量代码的重复使用.</p>\n<h4 id=\"函数的使用\"><a class=\"markdownIt-Anchor\" href=\"#函数的使用\">#</a> 函数的使用</h4>\n<p>步骤：1. 声明函数 2. 调用函数</p>\n<h5 id=\"声明函数\"><a class=\"markdownIt-Anchor\" href=\"#声明函数\">#</a> 声明函数</h5>\n<blockquote>\n<pre><code>function 函数名() {函数体}\n</code></pre>\n</blockquote>\n<p>注意事项：1.function 声明函数的关键字 全部小写 2. 函数是做某件事情，函数名一般是动词 3. 函数不调用自己不会执行</p>\n<h5 id=\"调用函数\"><a class=\"markdownIt-Anchor\" href=\"#调用函数\">#</a> 调用函数</h5>\n<blockquote>\n<pre><code>函数名();\n</code></pre>\n</blockquote>\n<p>调用函数时，千万不要忘了加小括号.</p>\n<h5 id=\"函数的参数\"><a class=\"markdownIt-Anchor\" href=\"#函数的参数\">#</a> 函数的参数</h5>\n<p>我们可以利用函数的参数实现函数重复不同的代码<br>\n参数: 1. 形参 2. 实参<br>\n<a href=\"https://imgtu.com/i/IGrNod\"><img src=\"https://z3.ax1x.com/2021/11/08/IGrNod.png\" alt=\"IGrNod.png\"></a></p>\n<blockquote>\n<pre><code>function (形参1,形参2,....) {  在声明函数的小括号里面是形参\n }\n函数名(实参1,实参2...)     在函数调用的小括号里面是实参\n</code></pre>\n</blockquote>\n<p>形参类似于一个变量来接受实参的<br>\n函数的参数可以有也可以没有，个数不限<br>\n多个参数之间用逗号隔开</p>\n<h6 id=\"函数形参实参个数匹配\"><a class=\"markdownIt-Anchor\" href=\"#函数形参实参个数匹配\">#</a> 函数形参实参个数匹配</h6>\n<p>1. 如果实参的个数和形参的个数一直，则正常输出结果<br>\n 2. 如果实参的个数多于形参的个数，会取到形参的个数，实参中多的自动忽略<br>\n 3. 如果实参的个数小于形参的个数，num2 可以看做一个变量但是没有接收值，所以最终的结果就是 undefined<br>\n<a href=\"https://imgtu.com/i/IGN3fU\"><img src=\"https://z3.ax1x.com/2021/11/08/IGN3fU.png\" alt=\"IGN3fU.png\"></a></p>\n<h6 id=\"函数参数小结\"><a class=\"markdownIt-Anchor\" href=\"#函数参数小结\">#</a> 函数参数小结</h6>\n<p><a href=\"https://imgtu.com/i/IGrBSP\"><img src=\"https://z3.ax1x.com/2021/11/08/IGrBSP.png\" alt=\"IGrBSP.png\"></a></p>\n<h5 id=\"函数的返回值\"><a class=\"markdownIt-Anchor\" href=\"#函数的返回值\">#</a> 函数的返回值</h5>\n<h6 id=\"return语句\"><a class=\"markdownIt-Anchor\" href=\"#return语句\">#</a> return 语句</h6>\n<p>函数只是实现某种功能，最终的结果需要返回给函数的调用者函数名 () 通过 return 实现<br>\n只要函数遇到 return 就把后面的结果返回给函数的调用者 函数名 ()=return 后面的结果</p>\n<blockquote>\n<pre><code> function 函数名() {\n       return 需要返回的结果;\n }\n 函数名();\n</code></pre>\n</blockquote>\n<p>代码验证</p>\n<blockquote>\n<pre><code>   function getSum(num1, num2) {\n       return num1 + num2;\n   }\n   console.log(getSum(1, 3));\n</code></pre>\n</blockquote>\n<p>这样输出的结果就是 4 (来自于 1+3)</p>\n<p>return 终止函数：函数遇到 return 就终止函数<br>\n return 的返回值:return 只能返回一个值，如果有多个值，return 只返回最后一个值<br>\n如果想要返回多个数值时，我们可以将数值放在一个数组里面，一个数组代表一个结果<br>\n函数如果 return 则返回的是 return 后面的值，如果函数没有 return 就返回 undefined<br>\nbreak,continue,return 的区别:<br>\n<a href=\"https://imgtu.com/i/IGrDQf\"><img src=\"https://z3.ax1x.com/2021/11/08/IGrDQf.png\" alt=\"IGrDQf.png\"></a></p>\n<h4 id=\"函数的理解\"><a class=\"markdownIt-Anchor\" href=\"#函数的理解\">#</a> 函数的理解</h4>\n<p><a href=\"https://imgtu.com/i/IGNJl4\"><img src=\"https://z3.ax1x.com/2021/11/08/IGNJl4.png\" alt=\"IGNJl4.png\"></a></p>\n<h4 id=\"函数的作业\"><a class=\"markdownIt-Anchor\" href=\"#函数的作业\">#</a> 函数的作业</h4>\n<p><a href=\"https://imgtu.com/i/IGrWYn\"><img src=\"https://z3.ax1x.com/2021/11/08/IGrWYn.png\" alt=\"IGrWYn.png\"></a></p>\n<h4 id=\"arguments的作用\"><a class=\"markdownIt-Anchor\" href=\"#arguments的作用\">#</a> arguments 的作用</h4>\n<p>当我们不确定有多少个参数传递时，可以用 argument 在获取，他实际上是当前函数的一个内置对象，arguements 存储了传递过来的所有实参</p>\n<p>arguments 实际上是伪数组.<br>\n 伪数组:<br>\n1. 具有数组的 length 属性.<br>\n2. 按照索引的方式进行存储.<br>\n3. 没有真正数组的一些方法:pop () 等</p>\n<h4 id=\"函数可以调用另外一个函数\"><a class=\"markdownIt-Anchor\" href=\"#函数可以调用另外一个函数\">#</a> 函数可以调用另外一个函数</h4>\n<h4 id=\"函数的两种声明方式\"><a class=\"markdownIt-Anchor\" href=\"#函数的两种声明方式\">#</a> 函数的两种声明方式</h4>\n<p>1. 利用函数关键字自定义函数</p>\n<blockquote>\n<pre><code>function fn() {\n}\nfn()\n</code></pre>\n</blockquote>\n<p>也被称为命名函数</p>\n<p>2. 函数表达式</p>\n<blockquote>\n<pre><code>var 变量名 = function() {}\n</code></pre>\n</blockquote>\n<p>又被叫做匿名函数<br>\n这是变量名不是函数名<br>\n函数表达式声明方式跟声明变量差不多，只不过变量里面存的是值，而函数表达式里面存的是函数。</p>\n<h3 id=\"作用域\"><a class=\"markdownIt-Anchor\" href=\"#作用域\">#</a> 作用域</h3>\n<h4 id=\"作用域概述\"><a class=\"markdownIt-Anchor\" href=\"#作用域概述\">#</a> 作用域概述</h4>\n<p>1.js 的作用域就是代码名字在某个范围内起作用和效果 目的是为了提高程序的可靠性，重要的是减少命名冲突<br>\n 2.js 的作用域 (es6) 之前：全局作用域 和 局部作用域<br>\n 3. 全局作用域：整个 script 标签 或者是一个单独的 js 文件<br>\n 4. 局部作用域：在函数内部就是局部作用域，这个代码的名字只在函数内部起作用和效果 又叫做函数作用域</p>\n<h4 id=\"变量的作用域\"><a class=\"markdownIt-Anchor\" href=\"#变量的作用域\">#</a> 变量的作用域</h4>\n<p>根据作用域的不同我们变量分为全局变量和局部变量<br>\n 1. 全局变量：在全局作用域下的变量 在全局下都可以使用 (当然包括函数内部)<br>\n 2. 局部变量：在局部作用域下的变量 在函数内部的变量就是局部变量 只能在函数内部使用<br>\n 3. 特殊情况：如果在函数内部没有声明直接赋值的变量也称为全局变量，函数的形参也可以看成局部变量</p>\n<p>从执行效率来看全局变量和局部变量<br>\n 1. 全局变量只有浏览器关闭的时候才会销毁，比较占内存资源<br>\n 2. 局部变量 当我们程序执行完毕就会销毁，比较节约内存支援<br>\n<strong>现阶段 js 没有块级作用域</strong></p>\n<h4 id=\"作用域链\"><a class=\"markdownIt-Anchor\" href=\"#作用域链\">#</a> 作用域链</h4>\n<p>内部函数访问外部函数的电量，采取的是链式查找的方式来决定取哪种值，这种结构我们称为作用域链<br>\n内部函数是可以访问外部函数的变量的</p>\n<h3 id=\"javascript预解析\"><a class=\"markdownIt-Anchor\" href=\"#javascript预解析\">#</a> javascript 预解析</h3>\n<p>1.js 解析器在运行 js 代码的时候分为两部分：先进行预解析，再进行代码执行<br>\n (2). 预解析:js 引擎会把 js 里面所有的 var 还有 function 提升到当前作用域的最前面<br>\n (3). 代码执行：按照代码书写的顺序从上往下执行.<br>\n2. 预解析分为变量预解析 (变量提升) 和函数预解析 (函数执行)<br>\n(1). 变量提升：就是把所有的变量声明提升到当前的作用域最前面 不提升赋值</p>\n<blockquote>\n<pre><code>console.log(num);\nvar num= 10;\n在预解析的时候执行顺序是这样的\nvar num;\nconsole.log(num);\nnum=10\n</code></pre>\n</blockquote>\n<p>(2). 函数声明：就是先把函数声明提升到当前作用域的最前面，不执行函数.</p>\n<h3 id=\"js对象\"><a class=\"markdownIt-Anchor\" href=\"#js对象\">#</a> js 对象</h3>\n<h4 id=\"对象概念\"><a class=\"markdownIt-Anchor\" href=\"#对象概念\">#</a> 对象概念</h4>\n<p>对象是一个具体的事物 (不是泛指)<br>\n 比如 明星不是对象 但刘德华是对象<br>\n<a href=\"https://imgtu.com/i/IGNspD\"><img src=\"https://z3.ax1x.com/2021/11/08/IGNspD.png\" alt=\"IGNspD.png\"></a></p>\n<h4 id=\"对象的使用方向\"><a class=\"markdownIt-Anchor\" href=\"#对象的使用方向\">#</a> 对象的使用方向</h4>\n<p>保存一个值可以使用变量，保存多个值可以使用数组，但如果保存一个人的完整信就需要用到对象了</p>\n<h4 id=\"创建对象的三种方式\"><a class=\"markdownIt-Anchor\" href=\"#创建对象的三种方式\">#</a> 创建对象的三种方式</h4>\n<p>1. 利用字面量创建对象<br>\n 2. 利用 new Object 创建对象<br>\n 3. 利用构造函数创建对象</p>\n<h4 id=\"对象字面量\"><a class=\"markdownIt-Anchor\" href=\"#对象字面量\">#</a> 对象字面量</h4>\n<p>{} 是对象的字面量<br>\n 1. 里面的属性或者方法我们采取键值对的形式 键 属性名：值 属性值<br>\n 2. 多个属性或者方法中间用逗号隔开，函数后面加；而不加逗号<br>\n 3. 方法冒号后面跟的是一个匿名函数</p>\n<h4 id=\"使用对象\"><a class=\"markdownIt-Anchor\" href=\"#使用对象\">#</a> 使用对象</h4>\n<p>调用对象的属性 我们采取 对象名。属性名</p>\n<blockquote>\n<p>console.log(obj.uname)</p>\n</blockquote>\n<p>其中这个。我们可以理解为的 比如说对象的属性<br>\n调用属性还有一种方法 对象名 [‘属性名’]</p>\n<blockquote>\n<p>console.log(abj[‘age’])</p>\n</blockquote>\n<p>需要注意的是 后面这种方法需要’' 而前面一种方法不需要<br>\n调用对象中的函数时，千万不要忘记添加小括号<br>\n<a href=\"https://imgtu.com/i/IGN66H\"><img src=\"https://z3.ax1x.com/2021/11/08/IGN66H.png\" alt=\"IGN66H.png\"></a></p>\n<h4 id=\"变量-属性-函数-方法的区别\"><a class=\"markdownIt-Anchor\" href=\"#变量-属性-函数-方法的区别\">#</a> 变量 属性 函数 方法的区别</h4>\n<p>相同点：都是用来存储数据的<br>\n不同点：1. 变量 单独声明并赋值 使用的时候直接写变量名 单独存在<br>\n 2. 属性 在对象里面的不需要声明的 使用的时候必须是 对象。属性</p>\n<p>函数和方法<br>\n相同点：都是实现某种功能 做某件事<br>\n不同点：函数时单独声明 并且调用的 是单独存在的<br>\n方法 在对象里面</p>\n<h4 id=\"利用new-object来创建对象\"><a class=\"markdownIt-Anchor\" href=\"#利用new-object来创建对象\">#</a> 利用 new Object 来创建对象</h4>\n<blockquote>\n<pre><code>var obj = new Object();   创建了一个空的对象\nobj.uname = '张三丰';\n</code></pre>\n</blockquote>\n<p>利用 等号 = 赋值的方法 添加对象的属性和方法<br>\n每个属性和方法之间用分号结束</p>\n<h4 id=\"利用构造函数创建对象\"><a class=\"markdownIt-Anchor\" href=\"#利用构造函数创建对象\">#</a> 利用构造函数创建对象</h4>\n<p>构造函数 就是把我们对象里面一些相同的属性和方法抽象出来封装到函数里面<br>\n语法格式:</p>\n<blockquote>\n<pre><code>function 构造函数名() {\n    this.属性 = 值;\n    this.方法 = function() {}\n }\n使用: new 构造函数名();\n</code></pre>\n</blockquote>\n<p>1. 构造函数名的首字母要大写<br>\n 2. 构造函数 不需要 return 就可以返回结果<br>\n 3. 我们调用构造函数必须使用 new<br>\n4. 属性和方法前面必须添加 this<br>\n<a href=\"https://imgtu.com/i/IGroOU\"><img src=\"https://z3.ax1x.com/2021/11/08/IGroOU.png\" alt=\"IGroOU.png\"></a></p>\n<h4 id=\"for-in遍历我们的对象\"><a class=\"markdownIt-Anchor\" href=\"#for-in遍历我们的对象\">#</a> for in 遍历我们的对象</h4>\n<blockquote>\n<pre><code>for (变量 in 对象) {\n  }\n</code></pre>\n</blockquote>\n<h3 id=\"javascript内置对象\"><a class=\"markdownIt-Anchor\" href=\"#javascript内置对象\">#</a> javascript 内置对象</h3>\n<p>1. 自定义对象<br>\n 2. 内置对象<br>\n 3. 浏览器对象 (js 特有)</p>\n<p>内置对象是 js 语言自带的一些对象，这些对象供开发者使用，并提供了一些常用的或者是最基本的属性和方法<br>\n Math Date Array String</p>\n<h4 id=\"查阅文档\"><a class=\"markdownIt-Anchor\" href=\"#查阅文档\">#</a> 查阅文档</h4>\n<blockquote>\n<pre><code>https://developer.mozilla.org/zh-CN\n</code></pre>\n</blockquote>\n<p><a href=\"https://imgtu.com/i/IGNW7t\"><img src=\"https://z3.ax1x.com/2021/11/08/IGNW7t.png\" alt=\"IGNW7t.png\"></a></p>\n<h4 id=\"math对象\"><a class=\"markdownIt-Anchor\" href=\"#math对象\">#</a> Math 对象</h4>\n<p>不是一个构造函数，不用 new 来调用，直接使用即可<br>\n<a href=\"https://imgtu.com/i/IGr7mF\"><img src=\"https://z3.ax1x.com/2021/11/08/IGr7mF.png\" alt=\"IGr7mF.png\"></a></p>\n<p>Math.round 四舍五入中.5 是特殊数字 他往大了去  比如 - 1.5 的结果是 - 1</p>\n<h5 id=\"math随机数法\"><a class=\"markdownIt-Anchor\" href=\"#math随机数法\">#</a> Math 随机数法</h5>\n<blockquote>\n<pre><code>console.log(Math.random());\n</code></pre>\n</blockquote>\n<h4 id=\"date日期数法\"><a class=\"markdownIt-Anchor\" href=\"#date日期数法\">#</a> Date 日期数法</h4>\n<p>是一个构造函数 必须使用 new 来调用创建我们的日期对象</p>\n<blockquote>\n<pre><code>   var day = new Date();\n   console.log(day);\n</code></pre>\n</blockquote>\n<p>使用 date 如果没有参数 返回当前系统的当前时间<br>\n参数常用的写法 数字型 2019,10,01 或者是字符串型’2019-10-01’<br>\n<a href=\"https://imgtu.com/i/IGrbTJ\"><img src=\"https://z3.ax1x.com/2021/11/08/IGrbTJ.png\" alt=\"IGrbTJ.png\"></a></p>\n<h5 id=\"日期格式化date\"><a class=\"markdownIt-Anchor\" href=\"#日期格式化date\">#</a> 日期格式化 Date</h5>\n<p><a href=\"https://imgtu.com/i/IGNo9S\"><img src=\"https://z3.ax1x.com/2021/11/08/IGNo9S.png\" alt=\"IGNo9S.png\"></a><br>\n 返回的月份小一个月 记得月份 +1</p>\n<h5 id=\"获取日期的总的毫秒形式\"><a class=\"markdownIt-Anchor\" href=\"#获取日期的总的毫秒形式\">#</a> 获取日期的总的毫秒形式</h5>\n<p>Date 对象是基于 1970 年 1 月 1 日 (世界标准时间) 起的毫秒数</p>\n<blockquote>\n<pre><code>1.valueOf()    getTime()\n2.var date1= +new Date();\n3.H5新增 console(Date.now());\n</code></pre>\n</blockquote>\n<h4 id=\"数组对象array\"><a class=\"markdownIt-Anchor\" href=\"#数组对象array\">#</a> 数组对象 Array</h4>\n<p>1. 数组字面量创建<br>\n 2. 利用 new Array () 创建</p>\n<p>检测是非为数组<br>\n 1.instanceof Array<br>\n2.Array.isArray (参数)</p>\n<h5 id=\"添加删除数组元素的方法\"><a class=\"markdownIt-Anchor\" href=\"#添加删除数组元素的方法\">#</a> 添加删除数组元素的方法</h5>\n<p><a href=\"https://imgtu.com/i/IGN7cQ\"><img src=\"https://z3.ax1x.com/2021/11/08/IGN7cQ.png\" alt=\"IGN7cQ.png\"></a><br>\n 添加:arr.push ();arr.unshift ();<br>\n 删除:arr.pop ();arr.shift;</p>\n<h5 id=\"数组排序\"><a class=\"markdownIt-Anchor\" href=\"#数组排序\">#</a> 数组排序</h5>\n<p><a href=\"https://imgtu.com/i/IGNqns\"><img src=\"https://z3.ax1x.com/2021/11/08/IGNqns.png\" alt=\"IGNqns.png\"></a></p>\n<blockquote>\n<pre><code>       arr1.sort(function (a, b) {\n       return a - b //升序的顺序排列\n       //return b - a 是降序的顺序排列\n        });\n</code></pre>\n</blockquote>\n<h5 id=\"数组索引方法\"><a class=\"markdownIt-Anchor\" href=\"#数组索引方法\">#</a> 数组索引方法</h5>\n<p><a href=\"https://imgtu.com/i/IGNO7q\"><img src=\"https://z3.ax1x.com/2021/11/08/IGNO7q.png\" alt=\"IGNO7q.png\"></a><br>\n 注意，如果有两个重复 只范湖第一个满足条件的索引号。如果里面没有相对元素返回的结果是 - 1;</p>\n<h5 id=\"数组转化成字符串\"><a class=\"markdownIt-Anchor\" href=\"#数组转化成字符串\">#</a> 数组转化成字符串</h5>\n<p><a href=\"https://imgtu.com/i/IGUiu9\"><img src=\"https://z3.ax1x.com/2021/11/08/IGUiu9.png\" alt=\"IGUiu9.png\"></a></p>\n<h4 id=\"字符串对象\"><a class=\"markdownIt-Anchor\" href=\"#字符串对象\">#</a> 字符串对象</h4>\n<p>基本包装类型：就是把简单数据类型 包装称为了 复杂数据类型<br>\n (1) 把简单数据类型包装称为复杂数据类型<br>\n var temp = new String (‘Andy’)<br>\n(2) 把临时变量的值给 str<br>\nstr=temp<br>\n (3) 销毁这个临时变量<br>\n temp = null<br>\n<a href=\"https://imgtu.com/i/IGrOYR\"><img src=\"https://z3.ax1x.com/2021/11/08/IGrOYR.png\" alt=\"IGrOYR.png\"></a></p>\n<h5 id=\"字符串的不可变型\"><a class=\"markdownIt-Anchor\" href=\"#字符串的不可变型\">#</a> 字符串的不可变型</h5>\n<p><a href=\"https://imgtu.com/i/IGU1HI\"><img src=\"https://z3.ax1x.com/2021/11/08/IGU1HI.png\" alt=\"IGU1HI.png\"></a></p>\n<blockquote>\n<pre><code>   var str = '改革吹风吹满地'\n   console.log(str.indexOf('吹',3));\n</code></pre>\n</blockquote>\n<h5 id=\"根据位置返回字符\"><a class=\"markdownIt-Anchor\" href=\"#根据位置返回字符\">#</a> 根据位置返回字符</h5>\n<p><a href=\"https://imgtu.com/i/IGUUgg\"><img src=\"https://z3.ax1x.com/2021/11/08/IGUUgg.png\" alt=\"IGUUgg.png\"></a></p>\n<h5 id=\"字符串操作方法\"><a class=\"markdownIt-Anchor\" href=\"#字符串操作方法\">#</a> 字符串操作方法</h5>\n<p><a href=\"https://imgtu.com/i/IGUavQ\"><img src=\"https://z3.ax1x.com/2021/11/08/IGUavQ.png\" alt=\"IGUavQ.png\"></a></p>\n<blockquote>\n<pre><code>   var str = '改革春风吹满地'\n   console.log(str.substr(2, 2));  //第一个2是索引号的2  第二个2是取几个字符\n</code></pre>\n</blockquote>\n<h5 id=\"替换字符串\"><a class=\"markdownIt-Anchor\" href=\"#替换字符串\">#</a> 替换字符串</h5>\n<blockquote>\n<pre><code>replace('被替换的字符','替换为的字符')\n</code></pre>\n</blockquote>\n<p>如果有相同的两个字符 只会替换前面一个字符</p>\n<h5 id=\"把字符串转化成数组\"><a class=\"markdownIt-Anchor\" href=\"#把字符串转化成数组\">#</a> 把字符串转化成数组</h5>\n<p>split (‘分隔符’) 把字符转换成数组<br>\n join (‘分隔符’) 把数组转换成字符串</p>\n<p>split 中的分隔符取决于原字符串中的分隔符是什么</p>\n<h3 id=\"web-apis\"><a class=\"markdownIt-Anchor\" href=\"#web-apis\">#</a> Web APIs</h3>\n<p>浏览器提供的一套操作浏览器功能和页面元素的 API</p>\n<h4 id=\"dom\"><a class=\"markdownIt-Anchor\" href=\"#dom\">#</a> DOM</h4>\n<p><a href=\"https://imgtu.com/i/IGrvSx\"><img src=\"https://z3.ax1x.com/2021/11/08/IGrvSx.png\" alt=\"IGrvSx.png\"></a></p>\n<h4 id=\"获取页面元素\"><a class=\"markdownIt-Anchor\" href=\"#获取页面元素\">#</a> 获取页面元素</h4>\n<h5 id=\"id获取\"><a class=\"markdownIt-Anchor\" href=\"#id获取\">#</a> ID 获取</h5>\n<p>getElementByld()<br>\n console.dir (); 打印我们返回的元素对象 更好地查看里面的属性和方法</p>\n<h5 id=\"根据标签名来获取\"><a class=\"markdownIt-Anchor\" href=\"#根据标签名来获取\">#</a> 根据标签名来获取</h5>\n<p>element.getElementsByTagName (‘标签名’)<br>\n 1. 获取过来元素对象的集合 以伪数组的形式储存<br>\n 2. 如果页面中只有一个元素 返回的还是伪数组的形式<br>\n 3. 如果页面中没有这个元素 返回的是空的伪数组</p>\n<blockquote>\n<pre><code>   var lis = document.getElementsByTagName('ul')\n   var li = lis[0].getElementsByTagName('li')\n</code></pre>\n</blockquote>\n<h5 id=\"根据类型来获取新增html5属性\"><a class=\"markdownIt-Anchor\" href=\"#根据类型来获取新增html5属性\">#</a> 根据类型来获取 (新增 Html5 属性)</h5>\n<p>document.getElementsByClassName (‘类名’)<br>\n document.querySelector (‘选择器’) 根据选择器返回第一个元素对象<br>\n document.querySelectorAll (‘选择器’) 根据选择器返回所有的集合</p>\n<h5 id=\"获取特殊元素\"><a class=\"markdownIt-Anchor\" href=\"#获取特殊元素\">#</a> 获取特殊元素</h5>\n<p>1. 获取 body 元素<br>\n document.body<br>\n2. 获取 html 元素<br>\n document.documentElement</p>\n<h4 id=\"事件基础\"><a class=\"markdownIt-Anchor\" href=\"#事件基础\">#</a> 事件基础</h4>\n<p>js 让我们有能力创建动态页面，而时间是可以被 js 侦测到的行为<br>\n在网页中每个元素都可以产生某些触发 js 的事件</p>\n<p>事件的组成部分<br>\n 1. 事件源：事件被触发的对象<br>\n 2. 事件类型：如何触发 什么事件 比如 鼠标点击 (onclick) 触发  还是鼠标经过触发<br>\n 3. 事件处理程序：通过函数赋值的方式完成</p>\n<h5 id=\"执行事件的步骤\"><a class=\"markdownIt-Anchor\" href=\"#执行事件的步骤\">#</a> 执行事件的步骤</h5>\n<p>1. 获取事件源<br>\n 2. 绑定事件<br>\n 3. 添加事件处理程序 (采取函数赋值的形式)</p>\n<h4 id=\"操作元素\"><a class=\"markdownIt-Anchor\" href=\"#操作元素\">#</a> 操作元素</h4>\n<h5 id=\"改变元素内容\"><a class=\"markdownIt-Anchor\" href=\"#改变元素内容\">#</a> 改变元素内容</h5>\n<p>element.innerText<br>\nelement.innerHTML<br>\n 这两个属性是可读写的 可以获取元素里面的内容<br>\n<a href=\"https://imgtu.com/i/IGUy5V\"><img src=\"https://z3.ax1x.com/2021/11/08/IGUy5V.png\" alt=\"IGUy5V.png\"></a></p>\n<h5 id=\"改变元素属性\"><a class=\"markdownIt-Anchor\" href=\"#改变元素属性\">#</a> 改变元素属性</h5>\n<h5 id=\"表单元素属性设置\"><a class=\"markdownIt-Anchor\" href=\"#表单元素属性设置\">#</a> 表单元素属性设置</h5>\n<p><a href=\"https://imgtu.com/i/IGURv4\"><img src=\"https://z3.ax1x.com/2021/11/08/IGURv4.png\" alt=\"IGURv4.png\"></a></p>\n<h5 id=\"修改样式属性\"><a class=\"markdownIt-Anchor\" href=\"#修改样式属性\">#</a> 修改样式属性</h5>\n<p>element.style 行内样式操作<br>\n element.className 类名样式操作<br>\n<a href=\"https://imgtu.com/i/IGaMGT\"><img src=\"https://z3.ax1x.com/2021/11/08/IGaMGT.png\" alt=\"IGaMGT.png\"></a></p>\n<p>onfocus 获得焦点事件<br>\n onblur 失去焦点事件</p>\n<h5 id=\"操作元素总结\"><a class=\"markdownIt-Anchor\" href=\"#操作元素总结\">#</a> 操作元素总结</h5>\n<p><a href=\"https://imgtu.com/i/IGaNIx\"><img src=\"https://z3.ax1x.com/2021/11/08/IGaNIx.png\" alt=\"IGaNIx.png\"></a></p>\n<h5 id=\"排他思想\"><a class=\"markdownIt-Anchor\" href=\"#排他思想\">#</a> 排他思想</h5>\n<p>先清除样式，再给当前元素设置样式</p>\n<blockquote>\n<pre><code>   var btn = document.getElementsByTagName('button')\n   for (i = 0; i &lt; btn.length; i++) {\n       btn[i].onclick = function () {\n           for (i = 0; i &lt; btn.length; i++) {\n               btn[i].style.backgroundColor = 'white'\n           }\n           this.style.backgroundColor = 'pink'\n       }\n   }\n</code></pre>\n</blockquote>\n<p>鼠标经过 onmouseover<br>\n 鼠标离开 onmouseout</p>\n<h5 id=\"自定义属性值的操作\"><a class=\"markdownIt-Anchor\" href=\"#自定义属性值的操作\">#</a> 自定义属性值的操作</h5>\n<h6 id=\"获取属性值\"><a class=\"markdownIt-Anchor\" href=\"#获取属性值\">#</a> 获取属性值</h6>\n<p><a href=\"https://imgtu.com/i/IGa0zD\"><img src=\"https://z3.ax1x.com/2021/11/08/IGa0zD.png\" alt=\"IGa0zD.png\"></a></p>\n<h6 id=\"设置属性值\"><a class=\"markdownIt-Anchor\" href=\"#设置属性值\">#</a> 设置属性值</h6>\n<p>element. 属性 = ‘值’<br>\nelement.setAttribute (‘属性’,‘值’)</p>\n<p>setAttribute 主要用于设置自定义属性</p>\n<p>removeAttribute 移除属性</p>\n<h6 id=\"h5自定义属性值\"><a class=\"markdownIt-Anchor\" href=\"#h5自定义属性值\">#</a> H5 自定义属性值</h6>\n<p>H5 新规范：自定义属性都用 data- 开头<br>\n H5 新增的获取自定义属性的方法 <a href=\"http://element.dataset.XXX\">element.dataset.XXX</a><br>\ndataset 是一个集合 里面存放了所有以 data 开头的自定义属性<br>\n如果自定义属性里面有多个 - 链接的单词，我们获取的时候采取驼峰命名法</p>\n<p><a href=\"https://imgtu.com/i/IGrz6K\"><img src=\"https://z3.ax1x.com/2021/11/08/IGrz6K.png\" alt=\"IGrz6K.png\"></a></p>\n<h4 id=\"节点操作\"><a class=\"markdownIt-Anchor\" href=\"#节点操作\">#</a> 节点操作</h4>\n<p>为什么要学节点操作<br>\n<a href=\"https://imgtu.com/i/IGaRFP\"><img src=\"https://z3.ax1x.com/2021/11/08/IGaRFP.png\" alt=\"IGaRFP.png\"></a></p>\n<h5 id=\"节点概述\"><a class=\"markdownIt-Anchor\" href=\"#节点概述\">#</a> 节点概述</h5>\n<p><a href=\"https://imgtu.com/i/IGa4SS\"><img src=\"https://z3.ax1x.com/2021/11/08/IGa4SS.png\" alt=\"IGa4SS.png\"></a></p>\n<h5 id=\"节点层级\"><a class=\"markdownIt-Anchor\" href=\"#节点层级\">#</a> 节点层级</h5>\n<p><a href=\"https://imgtu.com/i/IGaIyQ\"><img src=\"https://z3.ax1x.com/2021/11/08/IGaIyQ.png\" alt=\"IGaIyQ.png\"></a></p>\n<h5 id=\"父节点\"><a class=\"markdownIt-Anchor\" href=\"#父节点\">#</a> 父节点</h5>\n<p><a href=\"https://imgtu.com/i/IGaHwn\"><img src=\"https://z3.ax1x.com/2021/11/08/IGaHwn.png\" alt=\"IGaHwn.png\"></a></p>\n<h5 id=\"子节点\"><a class=\"markdownIt-Anchor\" href=\"#子节点\">#</a> 子节点</h5>\n<p><a href=\"https://imgtu.com/i/IGaLF0\"><img src=\"https://z3.ax1x.com/2021/11/08/IGaLF0.png\" alt=\"IGaLF0.png\"></a><br>\n<a href=\"https://imgtu.com/i/IGaboq\"><img src=\"https://z3.ax1x.com/2021/11/08/IGaboq.png\" alt=\"IGaboq.png\"></a><br>\n<a href=\"https://imgtu.com/i/IGdSOJ\"><img src=\"https://z3.ax1x.com/2021/11/08/IGdSOJ.png\" alt=\"IGdSOJ.png\"></a></p>\n<h5 id=\"兄弟节点\"><a class=\"markdownIt-Anchor\" href=\"#兄弟节点\">#</a> 兄弟节点</h5>\n<p><a href=\"https://imgtu.com/i/IGdCwR\"><img src=\"https://z3.ax1x.com/2021/11/08/IGdCwR.png\" alt=\"IGdCwR.png\"></a><br>\n 解决兄弟节点的兼容性问题:<br>\n<a href=\"https://imgtu.com/i/IGdumd\"><img src=\"https://z3.ax1x.com/2021/11/08/IGdumd.png\" alt=\"IGdumd.png\"></a></p>\n<h5 id=\"创建和删除节点\"><a class=\"markdownIt-Anchor\" href=\"#创建和删除节点\">#</a> 创建和删除节点</h5>\n<h6 id=\"创建节点\"><a class=\"markdownIt-Anchor\" href=\"#创建节点\">#</a> 创建节点</h6>\n<p><a href=\"https://imgtu.com/i/IGsC0e\"><img src=\"https://z3.ax1x.com/2021/11/08/IGsC0e.png\" alt=\"IGsC0e.png\"></a></p>\n<h6 id=\"添加节点\"><a class=\"markdownIt-Anchor\" href=\"#添加节点\">#</a> 添加节点</h6>\n<p><a href=\"https://imgtu.com/i/IGdGp8\"><img src=\"https://z3.ax1x.com/2021/11/08/IGdGp8.png\" alt=\"IGdGp8.png\"></a><br>\nnode.appendChild(child)<br>\n node.insertbefore (child, 指定元素);</p>\n<h6 id=\"删除节点\"><a class=\"markdownIt-Anchor\" href=\"#删除节点\">#</a> 删除节点</h6>\n<p>code.removeChild (节点)<br>\neg:ul.removeChild(ul.children[0])</p>\n<h6 id=\"复制节点克隆节点\"><a class=\"markdownIt-Anchor\" href=\"#复制节点克隆节点\">#</a> 复制节点 (克隆节点)</h6>\n<p>node.cloneNode()<br>\n 如果括号为空，则只复制标签 不复制里面的内容<br>\n括号里面为 true 则里面的内容也跟着赋值</p>\n<h6 id=\"三种动态创建元素区别\"><a class=\"markdownIt-Anchor\" href=\"#三种动态创建元素区别\">#</a> 三种动态创建元素区别</h6>\n<p>document.write () 如果页面加载完毕 再执行这个指令 会导致页面全部重绘<br>\n innerHTML<br>\ndocument.createElement(’’)<br>\n 最后两个大致上没有区别 但是如果需要创造很多个元素 最后一个的效率会大大提高，因为最后一个不是拼接字符串 而是在电脑中重新开辟一个新的空间</p>\n<p><a href=\"https://imgtu.com/i/IGdDhV\"><img src=\"https://z3.ax1x.com/2021/11/08/IGdDhV.png\" alt=\"IGdDhV.png\"></a><br>\n 改进方法:innerHTML 不采用拼接字符串的方式，而是采用数组形式拼接，现在数组中拼接字符串，然后将数组引入到 innerHTML 中</p>\n<h4 id=\"dom重点核心\"><a class=\"markdownIt-Anchor\" href=\"#dom重点核心\">#</a> DOM 重点核心</h4>\n<p>(一) 创建<br>\n 1.document.write<br>\n2.innerHTML<br>\n3.createElement<br>\n (二) 增<br>\n 1.appendChild<br>\n2.innerBefore<br>\n (三) 删<br>\n 1.removeChild<br>\n (四) 改<br>\n 1. 修改元素属性:src,href,title<br>\n2. 修改普通元素内容:innerHTML,innerText<br>\n3. 修改表单元素:value,type,disabled<br>\n4. 修改元素样式:style,className<br>\n (五) 查<br>\n 1.DOM 提供的 API 方法:getElementById,getElementsByTagName  (<strong>古老用法不推荐</strong>)<br>\n 2.H5 提供的新方法:querySelector,querySelectorAll 提倡<br>\n 3. 利用节点获取元素：父 (parentNode), 子 (children), 兄 (previousElementSibing,nextElementSibing) 提倡<br>\n (六) 属性操作<br>\n 1.setAttribute: 设置 dom 的属性值<br>\n 2.getAttribute: 得到 dom 的属性值<br>\n 3.removeAttribute: 移除属性<br>\n (七) 事件操作<br>\n onclick: 鼠标点击左键触发<br>\n onmouseover: 鼠标经过触发<br>\n onmouseout: 鼠标离开触发<br>\n onfocus: 获得鼠标焦点触发<br>\n onblur: 失去鼠标焦点触发<br>\n onmousemove: 鼠标移动触发<br>\n onmouseup: 鼠标弹起触发<br>\n onmousedown: 鼠标按下触发</p>\n<h4 id=\"事件高级导读\"><a class=\"markdownIt-Anchor\" href=\"#事件高级导读\">#</a> 事件高级导读</h4>\n<h5 id=\"注册事件\"><a class=\"markdownIt-Anchor\" href=\"#注册事件\">#</a> 注册事件</h5>\n<p>传统方式和方法监听注册方式<br>\n<a href=\"https://imgtu.com/i/IGd6cF\"><img src=\"https://z3.ax1x.com/2021/11/08/IGd6cF.png\" alt=\"IGd6cF.png\"></a></p>\n<blockquote>\n<pre><code>eventTarget.addEventListener(type,listener[,useCapture])\n</code></pre>\n</blockquote>\n<p><a href=\"https://imgtu.com/i/IGsktA\"><img src=\"https://z3.ax1x.com/2021/11/08/IGsktA.png\" alt=\"IGsktA.png\"></a><br>\n 里面的事件类型是字符串 必定加引号 不带 on<br>\n 同一个元素 同一个事件可以添加多个侦听器 (事件处理程序)</p>\n<p>AttachEvent 事件监听方式 (<strong>不提倡仅供了解</strong>)<br>\n<a href=\"https://imgtu.com/i/IGsVpt\"><img src=\"https://z3.ax1x.com/2021/11/08/IGsVpt.png\" alt=\"IGsVpt.png\"></a></p>\n<p>注册事件兼容性解决方法<br>\n<a href=\"https://imgtu.com/i/IGdW7R\"><img src=\"https://z3.ax1x.com/2021/11/08/IGdW7R.png\" alt=\"IGdW7R.png\"></a></p>\n<h5 id=\"删除事件解绑事件\"><a class=\"markdownIt-Anchor\" href=\"#删除事件解绑事件\">#</a> 删除事件 (解绑事件)</h5>\n<p>1. 传统法式:element.onclick = null<br>\n2. 方法监听事件: eventTarget.removeEventListener (type,listener [,useCapture])<br>\n 删除事件兼容性解决方案:<br>\n<a href=\"https://imgtu.com/i/IGd4tx\"><img src=\"https://z3.ax1x.com/2021/11/08/IGd4tx.png\" alt=\"IGd4tx.png\"></a></p>\n<h5 id=\"dom事件流\"><a class=\"markdownIt-Anchor\" href=\"#dom事件流\">#</a> DOM 事件流</h5>\n<p><a href=\"https://imgtu.com/i/IGsunS\"><img src=\"https://z3.ax1x.com/2021/11/08/IGsunS.png\" alt=\"IGsunS.png\"></a></p>\n<p>注意事项<br>\n<a href=\"https://imgtu.com/i/IGsGpq\"><img src=\"https://z3.ax1x.com/2021/11/08/IGsGpq.png\" alt=\"IGsGpq.png\"></a><br>\n 捕获阶段<br>\n<a href=\"https://imgtu.com/i/IGs3hn\"><img src=\"https://z3.ax1x.com/2021/11/08/IGs3hn.png\" alt=\"IGs3hn.png\"></a><br>\n 冒泡阶段<br>\n<a href=\"https://imgtu.com/i/IGs1ts\"><img src=\"https://z3.ax1x.com/2021/11/08/IGs1ts.png\" alt=\"IGs1ts.png\"></a></p>\n<h4 id=\"事件对象\"><a class=\"markdownIt-Anchor\" href=\"#事件对象\">#</a> 事件对象</h4>\n<p><a href=\"https://imgtu.com/i/IGdqnH\"><img src=\"https://z3.ax1x.com/2021/11/08/IGdqnH.png\" alt=\"IGdqnH.png\"></a></p>\n<h5 id=\"事件对象的常见属性和方法\"><a class=\"markdownIt-Anchor\" href=\"#事件对象的常见属性和方法\">#</a> 事件对象的常见属性和方法</h5>\n<p><a href=\"https://imgtu.com/i/IGdLBd\"><img src=\"https://z3.ax1x.com/2021/11/08/IGdLBd.png\" alt=\"IGdLBd.png\"></a><br>\ne.target 返回的是触发事件的对象 而 this 返回的是绑定事件的对象，currentTarget 和 this 一样返回的是绑定事件的对象 ie678 不认识 currentTarget<br>\ne.type: 返回事件类型 例如 click,mouseover</p>\n<p>组织默认事件 让链接不跳转 或者让提交按钮不提交 e.preventDefault ();<br>\n<a href=\"https://imgtu.com/i/IGdx4P\"><img src=\"https://z3.ax1x.com/2021/11/08/IGdx4P.png\" alt=\"IGdx4P.png\"></a></p>\n<p>组织事件冒泡 e.stopPropagation ()<br>\n 兼容性解决方法<br>\n<a href=\"https://imgtu.com/i/IGdvNt\"><img src=\"https://z3.ax1x.com/2021/11/08/IGdvNt.png\" alt=\"IGdvNt.png\"></a></p>\n<h5 id=\"事件委托\"><a class=\"markdownIt-Anchor\" href=\"#事件委托\">#</a> 事件委托</h5>\n<p>原理：给父节点添加侦听器，利用事件冒泡影响每一个子节点</p>\n<h5 id=\"常用的鼠标事件\"><a class=\"markdownIt-Anchor\" href=\"#常用的鼠标事件\">#</a> 常用的鼠标事件</h5>\n<p><a href=\"https://imgtu.com/i/IGw9gS\"><img src=\"https://z3.ax1x.com/2021/11/08/IGw9gS.png\" alt=\"IGw9gS.png\"></a><br>\n 禁止鼠标右键菜单:contextmenu 主要控制应该在何时显示上下文菜单，主要用于程序员取消默认的上下文菜单<br>\n禁止鼠标选中:selectstart</p>\n<blockquote>\n<pre><code>   document.addEventListener('contextmenu', function (e) {\n       e.preventDefault();\n   })\n   document.addEventListener('selectstart', function (e) {\n       e.preventDefault();\n   })\n</code></pre>\n</blockquote>\n<h5 id=\"鼠标事件对象\"><a class=\"markdownIt-Anchor\" href=\"#鼠标事件对象\">#</a> 鼠标事件对象</h5>\n<p>Mouseevent 鼠标事件对象<br>\n keyboard 键盘事件对象<br>\n<a href=\"https://imgtu.com/i/IGwCjg\"><img src=\"https://z3.ax1x.com/2021/11/08/IGwCjg.png\" alt=\"IGwCjg.png\"></a><br>\nclient 以可视区为主 跟屏幕滚动没有关系<br>\n page 相对于文档页面的 X 和 Y 坐标<br>\n screen 鼠标相当于电脑屏幕的 X 和 Y 坐标 (当浏览器缩小或者放大时会变化)<br>\n mousemove 鼠标移动事件</p>\n<h5 id=\"键盘事件对象\"><a class=\"markdownIt-Anchor\" href=\"#键盘事件对象\">#</a> 键盘事件对象</h5>\n<p><a href=\"https://imgtu.com/i/IGwkHs\"><img src=\"https://z3.ax1x.com/2021/11/08/IGwkHs.png\" alt=\"IGwkHs.png\"></a><br>\n 三个事件的执行顺序是 keydown keypress keyup</p>\n<p>KeyCode 返回键盘按键的 ASCII 的值<br>\n keyup 和 keydown 事件不区分字母大小写 a 和 A 得到的就是 65<br>\nkeypress 区分字母大小写</p>\n<h3 id=\"bom浏览器对象模型\"><a class=\"markdownIt-Anchor\" href=\"#bom浏览器对象模型\">#</a> BOM 浏览器对象模型</h3>\n<h4 id=\"bom概述\"><a class=\"markdownIt-Anchor\" href=\"#bom概述\">#</a> BOM 概述</h4>\n<p>BOM: 浏览器对象模型<br>\n<a href=\"https://imgtu.com/i/IJFREt\"><img src=\"https://z3.ax1x.com/2021/11/08/IJFREt.png\" alt=\"IJFREt.png\"></a><br>\nBOM 的构成<br>\n<a href=\"https://imgtu.com/i/IJFf4f\"><img src=\"https://z3.ax1x.com/2021/11/08/IJFf4f.png\" alt=\"IJFf4f.png\"></a></p>\n<h4 id=\"浏览器顶级对象window\"><a class=\"markdownIt-Anchor\" href=\"#浏览器顶级对象window\">#</a> 浏览器顶级对象 window</h4>\n<p><a href=\"https://imgtu.com/i/IJF4C8\"><img src=\"https://z3.ax1x.com/2021/11/08/IJF4C8.png\" alt=\"IJF4C8.png\"></a></p>\n<h5 id=\"窗口加载事件\"><a class=\"markdownIt-Anchor\" href=\"#窗口加载事件\">#</a> 窗口加载事件</h5>\n<p>window.onload 窗口加载事件，当文档内容完全加载完成后会触发该事件 (包括图像 css 脚本等等)<br>\n 注意:<br>\n1. 有了 window.onload 我们就可以将 js 写在任何位置 onload 是等页面文档加载完成后 最后加载的东西<br>\n 2.window,onload 传统注册事件只能写一次，如果有多个，会以最后一个 window.onload 为准<br>\n 3. 如果使用 AddEventListener 则没有限制<br>\n document.addEventListener (‘DOMContentLoaded’,function (){})<br>\n 仅当 DOM 加载完成就开始触发，不包括样式表，图片，flash 等等<br>\n后一个加载更快，如果是图片较多的网站等 会因为图片刷新过快 如果使用第一个方式 有可能无法加载出 js 文件 而使用后一个方式 则在 DOM 加载完成后 就加载 js</p>\n<h5 id=\"调整窗口大小事件\"><a class=\"markdownIt-Anchor\" href=\"#调整窗口大小事件\">#</a> 调整窗口大小事件</h5>\n<p><a href=\"https://imgtu.com/i/IGwEEn\"><img src=\"https://z3.ax1x.com/2021/11/08/IGwEEn.png\" alt=\"IGwEEn.png\"></a></p>\n<h4 id=\"定时器\"><a class=\"markdownIt-Anchor\" href=\"#定时器\">#</a> 定时器</h4>\n<h5 id=\"settimeout定时器\"><a class=\"markdownIt-Anchor\" href=\"#settimeout定时器\">#</a> setTimeout () 定时器</h5>\n<p>window.setTimeout (调用函数，[延迟的毫秒数]);<br>\n 在定时器到期后执行函数<br>\n 1.window 在调用的时候可以省略<br>\n 2. 时间单位是毫秒，可以省略 如果省略默认为 0<br>\n3. 页面中可能有很多的定时器 我们经常给定时器起一个标识符</p>\n<p>callback 回调函数<br>\n<a href=\"https://imgtu.com/i/IJFovQ\"><img src=\"https://z3.ax1x.com/2021/11/08/IJFovQ.png\" alt=\"IJFovQ.png\"></a></p>\n<h6 id=\"停止settimeout定时器\"><a class=\"markdownIt-Anchor\" href=\"#停止settimeout定时器\">#</a> 停止 setTimeout () 定时器</h6>\n<p>window.clearaTimeout (定时器名字)</p>\n<h5 id=\"setinterval定时器\"><a class=\"markdownIt-Anchor\" href=\"#setinterval定时器\">#</a> setInterval () 定时器</h5>\n<p><a href=\"https://imgtu.com/i/IJFLEq\"><img src=\"https://z3.ax1x.com/2021/11/08/IJFLEq.png\" alt=\"IJFLEq.png\"></a></p>\n<p>区别:setTimeout 只调用一次回调函数<br>\n setInterval 会一直调用函数</p>\n<h4 id=\"this指向问题\"><a class=\"markdownIt-Anchor\" href=\"#this指向问题\">#</a> this 指向问题</h4>\n<p>1. 全局作用域或者普通函数中 this 指向全局对象 window (定时器里面的 this 指向 window)<br>\n 2. 方法调用中谁调用 this 指向谁<br>\n 3. 构造函数中 this 可以指向构造函数<br>\n<a href=\"https://imgtu.com/i/oSEMu9\"><img src=\"https://z3.ax1x.com/2021/11/22/oSEMu9.png\" alt=\"oSEMu9.png\"></a><br>\n<a href=\"https://imgtu.com/i/oSEQBR\"><img src=\"https://z3.ax1x.com/2021/11/22/oSEQBR.png\" alt=\"oSEQBR.png\"></a></p>\n<h4 id=\"js的执行队列\"><a class=\"markdownIt-Anchor\" href=\"#js的执行队列\">#</a> js 的执行队列</h4>\n<p>js 是单线程的 同一个时间只能做一件事<br>\n为了解决这个问题，利用多核 CPU 的计算能力，HTML5 允许 js 脚本创建多个线程，于是 js 中出现了同步和异步<br>\n<a href=\"https://imgtu.com/i/IGwugU\"><img src=\"https://z3.ax1x.com/2021/11/08/IGwugU.png\" alt=\"IGwugU.png\"></a></p>\n<h5 id=\"js执行机制\"><a class=\"markdownIt-Anchor\" href=\"#js执行机制\">#</a> js 执行机制</h5>\n<p><a href=\"https://imgtu.com/i/IGw1b9\"><img src=\"https://z3.ax1x.com/2021/11/08/IGw1b9.png\" alt=\"IGw1b9.png\"></a><br>\n<a href=\"https://imgtu.com/i/IGwQu4\"><img src=\"https://z3.ax1x.com/2021/11/08/IGwQu4.png\" alt=\"IGwQu4.png\"></a><br>\n<a href=\"https://imgtu.com/i/IJkczF\"><img src=\"https://z3.ax1x.com/2021/11/08/IJkczF.png\" alt=\"IJkczF.png\"></a><br>\n<a href=\"https://imgtu.com/i/IJFz2F\"><img src=\"https://z3.ax1x.com/2021/11/08/IJFz2F.png\" alt=\"IJFz2F.png\"></a><br>\n 事件循环：主线程不断的城府获得任务 执行任务 再获取任务 执行任务</p>\n<h4 id=\"location对象\"><a class=\"markdownIt-Anchor\" href=\"#location对象\">#</a> location 对象</h4>\n<p><a href=\"https://imgtu.com/i/IJAmF0\"><img src=\"https://z3.ax1x.com/2021/11/08/IJAmF0.png\" alt=\"IJAmF0.png\"></a><br>\n<a href=\"https://imgtu.com/i/IJAnYV\"><img src=\"https://z3.ax1x.com/2021/11/08/IJAnYV.png\" alt=\"IJAnYV.png\"></a></p>\n<h5 id=\"location对象方法\"><a class=\"markdownIt-Anchor\" href=\"#location对象方法\">#</a> location 对象方法</h5>\n<p><a href=\"https://imgtu.com/i/IGwJ4x\"><img src=\"https://z3.ax1x.com/2021/11/08/IGwJ4x.png\" alt=\"IGwJ4x.png\"></a><br>\nassign 能够记录历史 可以实现后退功能</p>\n<h4 id=\"navigator对象\"><a class=\"markdownIt-Anchor\" href=\"#navigator对象\">#</a> navigator 对象</h4>\n<p>包含浏览器的信息 有很多属性 我们最常用的属性是 userAgent 该属性可以返回由客户机发送服务器的 user-agent 头部的值</p>\n<p><a href=\"https://imgtu.com/i/IJAuWT\"><img src=\"https://z3.ax1x.com/2021/11/08/IJAuWT.png\" alt=\"IJAuWT.png\"></a></p>\n<h4 id=\"history对象\"><a class=\"markdownIt-Anchor\" href=\"#history对象\">#</a> history 对象</h4>\n<p><a href=\"https://imgtu.com/i/IJAQlF\"><img src=\"https://z3.ax1x.com/2021/11/08/IJAQlF.png\" alt=\"IJAQlF.png\"></a></p>\n<blockquote>\n<pre><code>btn.addEventListener('click',function(){\nhistory.forward();  \n})\nback() 和 go() 同理\n其中go(-1) 表示后退一页 go(-1)表示后退两页\n</code></pre>\n</blockquote>\n<h3 id=\"pc端网页特效\"><a class=\"markdownIt-Anchor\" href=\"#pc端网页特效\">#</a> PC 端网页特效</h3>\n<h4 id=\"元素偏移量offset系列\"><a class=\"markdownIt-Anchor\" href=\"#元素偏移量offset系列\">#</a> 元素偏移量 offset 系列</h4>\n<p>动态获取元素位置和大小</p>\n<ul>\n<li>获取元素距离带有定位父元素的位置</li>\n<li>获得元素自身的大小 (包含 padding 和 border)</li>\n<li>返回的数值不带单位</li>\n</ul>\n<p><a href=\"https://imgtu.com/i/oih8C6\"><img src=\"https://z3.ax1x.com/2021/11/24/oih8C6.png\" alt=\"oih8C6.png\"></a><br>\noffsetParent  返回的是带有定位的父元素 (没有则返回 body)<br>\n parentNode 返回的是最近一级的父元素 不管父元素有没有定位</p>\n<h5 id=\"offset和style的区别\"><a class=\"markdownIt-Anchor\" href=\"#offset和style的区别\">#</a> offset 和 style 的区别</h5>\n<ul>\n<li>offsetWidth 与 style.width<br>\n<a href=\"https://imgtu.com/i/oiTCtA\"><img src=\"https://z3.ax1x.com/2021/11/24/oiTCtA.png\" alt=\"oiTCtA.png\"></a></li>\n</ul>\n<h4 id=\"元素可视区client系列\"><a class=\"markdownIt-Anchor\" href=\"#元素可视区client系列\">#</a> 元素可视区 client 系列</h4>\n<p>使用 client 系列的相关属性获取元素可视区的相关信息<br>\n通过 client 系列的相关属性可以动态得到该元素的边框大小，元素大小等<br>\n<a href=\"https://imgtu.com/i/oib09s\"><img src=\"https://z3.ax1x.com/2021/11/24/oib09s.png\" alt=\"oib09s.png\"></a></p>\n<h4 id=\"淘宝源码分析\"><a class=\"markdownIt-Anchor\" href=\"#淘宝源码分析\">#</a> 淘宝源码分析</h4>\n<h5 id=\"立即执行函数\"><a class=\"markdownIt-Anchor\" href=\"#立即执行函数\">#</a> 立即执行函数</h5>\n<p>不需要调用 立即执行</p>\n<blockquote>\n<pre><code>(function XXX() { })()  第二个小括号可以看成调用函数 也可以传递参数\n(function XXX(){}()) 第二个小括号可以看成调用函数 也可以传递参数\n</code></pre>\n</blockquote>\n<ul>\n<li>XXX 为函数名 可以省略</li>\n<li><strong>多个立即执行函数之间必须使用分号隔开</strong></li>\n<li>好处：独立创建了一个作用域 里面所有的变量都是局部变量 避免了命名冲突的问题</li>\n</ul>\n<h4 id=\"元素滚动scroll系列\"><a class=\"markdownIt-Anchor\" href=\"#元素滚动scroll系列\">#</a> 元素滚动 scroll 系列</h4>\n<p>得到元素的大小 滚动距离 与页面中的滚动条有关<br>\n<a href=\"https://imgtu.com/i/oAwKnP\"><img src=\"https://z3.ax1x.com/2021/11/25/oAwKnP.png\" alt=\"oAwKnP.png\"></a><br>\n<strong> 不包含边框 包含 padding 值</strong><br>\n对于超出父元素的汉字 会按照所有汉字叠加的高度计算 (真正的内容实际大小)<br>\n 与 client 不同的是 client 并不会计算超出的大小 而只是原有父元素的大小<br>\n<a href=\"https://imgtu.com/i/oA0u8J\"><img src=\"https://z3.ax1x.com/2021/11/25/oA0u8J.png\" alt=\"oA0u8J.png\"></a></p>\n<h5 id=\"scroll事件\"><a class=\"markdownIt-Anchor\" href=\"#scroll事件\">#</a> scroll 事件</h5>\n<p>当滚动条发生变化时会触发的事件</p>\n<blockquote>\n<pre><code>XXX.document.addEventListener('scroll',function(){})\n</code></pre>\n</blockquote>\n<h4 id=\"动画函数封装\"><a class=\"markdownIt-Anchor\" href=\"#动画函数封装\">#</a> 动画函数封装</h4>\n<p>通过定时器 setInterval () 不断移动盒子的位置<br>\n 1. 获取当前位置<br>\n 2. 给当前位置加一个移动距离<br>\n 3. 利用定时器不断重复这个操作<br>\n 4. 结束定时器<br>\n<strong> 5. 元素需要添加定位才能使用 element.style.left</strong></p>\n<h5 id=\"动画函数简单封装\"><a class=\"markdownIt-Anchor\" href=\"#动画函数简单封装\">#</a> 动画函数简单封装</h5>\n<blockquote>\n<pre><code>function animate(obj, target) {\n    clearInterval(obj.timer)\n    obj.timer = setInterval(function () {\n        if (obj.offsetLeft &gt;= target) {\n            clearInterval(obj.timer)\n        } else\n            obj.style.left = obj.offsetLeft + 2 + 'px';\n    }, 30)\n}\n</code></pre>\n</blockquote>\n<h5 id=\"缓动动画\"><a class=\"markdownIt-Anchor\" href=\"#缓动动画\">#</a> 缓动动画</h5>\n<ol>\n<li>让盒子每次移动的距离慢慢变小 速度就会慢慢慢下来</li>\n<li>核心算法：(目标值 - 现在的位置)/10</li>\n<li>盒子等于目标位置就停止计时器</li>\n</ol>\n",
            "tags": [
                "Javascript"
            ]
        },
        {
            "id": "https://github.com/YogMas/YogMas.github.io/2021/11/06/html-shang/",
            "url": "https://github.com/YogMas/YogMas.github.io/2021/11/06/html-shang/",
            "title": "Html-first",
            "date_published": "2021-11-05T16:00:00.000Z",
            "content_html": "<h1 id=\"html上\"><a class=\"markdownIt-Anchor\" href=\"#html上\">#</a> Html (上)</h1>\n<h3 id=\"the-article-from-yogmas-also-sam\"><a class=\"markdownIt-Anchor\" href=\"#the-article-from-yogmas-also-sam\">#</a> the article from yogmas also sam</h3>\n<h4 id=\"1基本架构\"><a class=\"markdownIt-Anchor\" href=\"#1基本架构\">#</a> 1. 基本架构</h4>\n<blockquote>\n<pre><code>&lt;html&gt; \n&lt;head&gt;&lt;/head&gt;\n&lt;body&gt;&lt;/body&gt;\n&lt;/html&gt; \n</code></pre>\n</blockquote>\n<h4 id=\"2html标签\"><a class=\"markdownIt-Anchor\" href=\"#2html标签\">#</a> 2.html 标签</h4>\n<h6 id=\"标题标签\"><a class=\"markdownIt-Anchor\" href=\"#标题标签\">#</a> 标题标签</h6>\n<blockquote>\n<pre><code>&lt;h1&gt;&lt;/h1&gt;   ……  &lt;h6&gt;&lt;/h6&gt;\n</code></pre>\n</blockquote>\n<p>一共六级标题，文字加粗，由大到小依次减小。<br>\n<strong>大多数标签都是成对存在的，只有少数例如 br 的单标签</strong></p>\n<h6 id=\"段落和换行标签\"><a class=\"markdownIt-Anchor\" href=\"#段落和换行标签\">#</a> 段落和换行标签</h6>\n<blockquote>\n<pre><code>&lt;p&gt;&lt;/p&gt;\n&lt;/br&gt;\n</code></pre>\n</blockquote>\n<p>p 标签会自动换行，不用添加 br</p>\n<h6 id=\"文本格式化标签\"><a class=\"markdownIt-Anchor\" href=\"#文本格式化标签\">#</a> 文本格式化标签</h6>\n<blockquote>\n<pre><code>&lt;strong&gt;加粗&lt;/strong&gt; 或者 &lt;b&gt;加粗&lt;/b&gt;\n&lt;em&gt;倾斜&lt;/em&gt; 或者 &lt;i&gt;倾斜&lt;/i&gt;\n&lt;del&gt;删除线&lt;/del&gt; 或者 &lt;s&gt;删除线&lt;/s&gt;\n&lt;ins&gt;下划线&lt;/ins&gt; 或者 &lt;u&gt;下划线&lt;/u&gt;\n</code></pre>\n</blockquote>\n<h6 id=\"div和span标签\"><a class=\"markdownIt-Anchor\" href=\"#div和span标签\">#</a> div 和 span 标签</h6>\n<blockquote>\n<pre><code>&lt;span&gt;&lt;/span&gt;\n</code></pre>\n</blockquote>\n<p>形象来说 div 是一个大盒子，span 通常是用来放在大盒子里面的小盒子（后期 div 在页面构造中非常常用)</p>\n<h6 id=\"图像标签\"><a class=\"markdownIt-Anchor\" href=\"#图像标签\">#</a> 图像标签</h6>\n<blockquote>\n<pre><code>&lt;img src=\"路径\" alt=\"图片不显示时显示出来的\" \ntitle=\"鼠标放在图片上面显示出来的文字\" \nwidth=\"\" height=\"\" border=\"\"&gt;\n</code></pre>\n</blockquote>\n<p>在后期使用的 width,height,border, 都会放入<strong> css</strong> 中来运行使用不会单独列入 img 中<br>\n图像标签的路径<br>\n 1. 同一级路径<br>\n eg:(img.jpg)<br>\n 2. 下一级路径<br>\n eg:(images/img.jpg)<br>\n 3. 绝对路径<br>\n eg:(C:\\Users\\apple\\Desktop\\ 前端基础第一天 - HTML\\ 案例 \\img.jpg)<br>\neg：(<a href=\"http://www.itcast.cn/2018czgw/images/logo.png\">http://www.itcast.cn/2018czgw/images/logo.png</a>)<br>\n<a href=\"https://imgtu.com/i/IQmLi8\"><img src=\"https://z3.ax1x.com/2021/11/06/IQmLi8.png\" alt=\"IQmLi8.png\"></a></p>\n<h6 id=\"超链接标签\"><a class=\"markdownIt-Anchor\" href=\"#超链接标签\">#</a> 超链接标签</h6>\n<blockquote>\n<pre><code>&lt;a href=\"链接\"&gt;LOL&lt;/a&gt;\n</code></pre>\n<p>LOL 可以以图片文字等等代替，点击就可以跳转到 href 所在的链接</p>\n</blockquote>\n<p>可以添加的元素：target=“X”<br>\nX 包括_self (覆盖当前页面)<br>\n 和_blank 重新启动新的页面<br>\n链接分类<br>\n 1. 内部链接：存放在你网站前端的链接也就是你写前端时电脑里面的链接<br>\n 2. 外部链接：例如 http 这类的其他网站的链接<br>\n 3. 空链接：当你还没有链接可以填时，留出空位用 #代替<br>\n 4. 下载链接：通常是以.zip 结尾的压缩包<br>\n<a href=\"https://imgtu.com/i/IQC8kd\"><img src=\"https://z3.ax1x.com/2021/11/06/IQC8kd.png\" alt=\"IQC8kd.png\"></a></p>\n<h6 id=\"锚点定位\"><a class=\"markdownIt-Anchor\" href=\"#锚点定位\">#</a> 锚点定位</h6>\n<p>由两个相互呼应的标签组成<br>\n可以从页面的一个地方跳转到当前页面的另外一个地方</p>\n<blockquote>\n<pre><code>&lt;a href=\"#ID\"&gt;&lt;/a&gt;\n&lt;h3 id=\"ID\"&gt;\n</code></pre>\n</blockquote>\n<p>ID 可以写成任何你定义的名称<br>\n h3 并不是固定的，可以换成任意标签<br>\n当你点击 a 中携带的元素或标签时你将会跳转到拥有 id=“” 且和 a 相同 id 的标签这</p>\n<h6 id=\"注释标签和特殊字符\"><a class=\"markdownIt-Anchor\" href=\"#注释标签和特殊字符\">#</a> 注释标签和特殊字符</h6>\n<blockquote>\n<pre><code>&lt;!-- 注释内容 --&gt; \n&lt;用&amp;lt  &gt;用&amp;gt；(由于&lt;&gt;符号在html中的特殊性)\n</code></pre>\n</blockquote>\n<p>特殊内容可以用 ctrl+l 快速注释</p>\n",
            "tags": [
                "Html"
            ]
        }
    ]
}