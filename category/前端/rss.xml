<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>S1m • Posts by &#34;前端&#34; category</title>
        <link>https://github.com/YogMas/YogMas.github.io</link>
        <description>博客记录个人学习笔记,处于不断完善中</description>
        <language>zh-CN</language>
        <pubDate>Sat, 10 Sep 2022 00:00:00 +0800</pubDate>
        <lastBuildDate>Sat, 10 Sep 2022 00:00:00 +0800</lastBuildDate>
        <category>C语言</category>
        <category>Latex</category>
        <category>操作系统</category>
        <category>Css</category>
        <category>vue</category>
        <category>python</category>
        <category>Git</category>
        <category>Html</category>
        <category>java</category>
        <category>机器学习</category>
        <category>Javascript</category>
        <category>icoding答案</category>
        <category>算法啊</category>
        <category>计算机组成原理</category>
        <category>课内课程</category>
        <item>
            <guid isPermalink="true">https://github.com/YogMas/YogMas.github.io/2022/09/10/vue/</guid>
            <title>vue</title>
            <link>https://github.com/YogMas/YogMas.github.io/2022/09/10/vue/</link>
            <category>vue</category>
            <pubDate>Sat, 10 Sep 2022 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;vue&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#vue&#34;&gt;#&lt;/a&gt; Vue&lt;/h1&gt;
&lt;h2 id=&#34;vue2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#vue2&#34;&gt;#&lt;/a&gt; Vue2&lt;/h2&gt;
&lt;h3 id=&#34;vue核心&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#vue核心&#34;&gt;#&lt;/a&gt; Vue 核心&lt;/h3&gt;
&lt;h4 id=&#34;初识vue&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#初识vue&#34;&gt;#&lt;/a&gt; 初识 Vue&lt;/h4&gt;
&lt;p&gt;Vue 通过创造一个&lt;strong&gt; Vue 实例&lt;/strong&gt;来进行工作，其中需要传入一个&lt;strong&gt;配置对象&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;el&lt;/code&gt; : 表示 Vue 实例为哪一个&lt;strong&gt;容器&lt;/strong&gt;服务&lt;/li&gt;
&lt;li&gt;&lt;code&gt;data&lt;/code&gt; : 存储数据供 el 中的容器使用&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;line-numbers language-javascript&#34; data-language=&#34;javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Vue&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;     &lt;span class=&#34;token comment&#34;&gt;//创建一个Vue实例  传入配置对象&lt;/span&gt;
    el&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;#root&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;    &lt;span class=&#34;token comment&#34;&gt;//Vue为哪个容器服务  这里为ID为root的容器服务&lt;/span&gt;
    data&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
        name&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;s1m&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;    &lt;span class=&#34;token comment&#34;&gt;//存储的数据&lt;/span&gt;
    &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;容器中的代码仍然符合 html 规范，只不过引入了一些特殊的 Vue 语法&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-html&#34; data-language=&#34;html&#34;&gt;&lt;code class=&#34;language-html&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;html&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;body&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;root&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
           	&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;h1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
                hello {{name}}  &lt;span class=&#34;token comment&#34;&gt;&amp;lt;!-- 此时就去调用了Vue中name数据--&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;h1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;body&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;html&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;{{}}`内的内容并不是只能写Vue实例中存在的数据,可以写**js表达式**(表达式:一个表达式会产生一个值,可以放在任何一个需要值的地方)
- 一个容器只能由一个实例接管  必须**一对一**,真实开发中只有一个Vue实例,配合着Vue中的组件进行使用

#### 模板语法

##### 插值语法

`{{}}&lt;/code&gt; : 用在&lt;strong&gt;标签体&lt;/strong&gt;中，也就是放在标签内，用于读取 data 中的内容，会将其内的内容转化成&lt;strong&gt; js 表达式&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;指令语法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#指令语法&#34;&gt;#&lt;/a&gt; 指令语法&lt;/h5&gt;
&lt;p&gt;用于解析&lt;strong&gt;标签&lt;/strong&gt; 属性 内容 绑定事件等等&lt;/p&gt;
&lt;p&gt;Vue 中的指令语法 一般都是 &lt;code&gt;v-xxx:&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;数据绑定&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数据绑定&#34;&gt;#&lt;/a&gt; 数据绑定&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;单向数据绑定:  &lt;code&gt;v-bind:&lt;/code&gt; Vue 实例中的数据发生改变，页面中的数据也发生改变，但是发过来不改变&lt;/li&gt;
&lt;li&gt;双向数据绑定: &lt;code&gt;v-model:&lt;/code&gt;  页面中的数据和 Vue 实例中的数据双向绑定，一个改变另一个就发生改变&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;u&gt;&lt;strong&gt;并不是所有支持单向数据绑定的就能双向绑定&lt;/strong&gt;&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;v-model&lt;/code&gt;  只能应用在&lt;strong&gt;表单类&lt;/strong&gt;元素上面，即有 &lt;code&gt;value&lt;/code&gt;  属性，&lt;/p&gt;
&lt;p&gt;显然 &lt;code&gt;v-model&lt;/code&gt;  是用来与用户产生交互的，不是表单类元素，无法捕获到用户的输入，根本没有必要进行双向绑定&lt;/p&gt;
&lt;h5 id=&#34;简写&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#简写&#34;&gt;#&lt;/a&gt; 简写&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;v-bind:&lt;/code&gt;  可以&lt;strong&gt;简写&lt;/strong&gt;为 &lt;code&gt;:&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;v-model:value&lt;/code&gt;  可以&lt;strong&gt;简写&lt;/strong&gt;为 &lt;code&gt;v-model&lt;/code&gt;  因为 &lt;code&gt;v-model&lt;/code&gt;  本来就是对 &lt;code&gt;value&lt;/code&gt;  属性进行捕获&lt;/p&gt;
&lt;h4 id=&#34;el和data的两种写法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#el和data的两种写法&#34;&gt;#&lt;/a&gt; el 和 data 的两种写法&lt;/h4&gt;
&lt;h5 id=&#34;el的写法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#el的写法&#34;&gt;#&lt;/a&gt; el 的写法&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;在初始化 Vue 实例中传入配置化对象，配置化对象中包含 &lt;code&gt;el:&#39;&#39;&lt;/code&gt;  来指定挂载对象&lt;/li&gt;
&lt;li&gt;通过对 Vue 实例进行挂载&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;line-numbers language-javascript&#34; data-language=&#34;javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt;&lt;span class=&#34;token comment&#34;&gt;//第一种写法&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Vue&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
    el&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;#root&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; 

&lt;span class=&#34;token comment&#34;&gt;//第二种写法&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; v &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Vue&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
v&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;$mount&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;#root&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;进行挂载&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;data的写法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#data的写法&#34;&gt;#&lt;/a&gt; data 的写法&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;对象式：通过 &lt;code&gt;data:{}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;函数式: &lt;code&gt;data:function() {return {}}&lt;/code&gt;  通过函数的返回值返回数据&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;写项目组件时，必须得使用函数式&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-javascript&#34; data-language=&#34;javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt;&lt;span class=&#34;token comment&#34;&gt;//第一种写法 对象式&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Vue&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;token comment&#34;&gt;//对象式&lt;/span&gt;
    data&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;

    &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
    
    
    &lt;span class=&#34;token comment&#34;&gt;//函数式&lt;/span&gt;
    &lt;span class=&#34;token function-variable function&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;token comment&#34;&gt;//此处的this是Vue对象&lt;/span&gt;
    &lt;span class=&#34;token comment&#34;&gt;//此处的函数不能使用箭头函数 因为箭头函数没有自己的this 他会往外找 然后找到window全局对象   所以此处只能写成普通函数&lt;/span&gt;
    	&lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;//数据  &lt;/span&gt;
        &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;

	&lt;span class=&#34;token comment&#34;&gt;//在对象里面写函数 一般会写成这种简写形式&lt;/span&gt;
	&lt;span class=&#34;token function&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
        
    &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;u&gt;&lt;strong&gt;由 Vue 所管理的函数，一定不要写成箭头函数，一旦写成箭头函数，this 就不再是 Vue 实例了，就变成 window 全局对象了&lt;/strong&gt;&lt;/u&gt;&lt;/p&gt;
&lt;h4 id=&#34;mvvm模型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#mvvm模型&#34;&gt;#&lt;/a&gt; MVVM 模型&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Vue 设计受 MVVM 模型的启发&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;M: 模型 (Model): 对应 data 中的数据&lt;/li&gt;
&lt;li&gt;V: 视图 (View): 模板&lt;/li&gt;
&lt;li&gt;VM: 视图模型 (ViewModel): Vue 实例对象&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/C0DE41AAD7ED441C2C288D4E7A7AA07E.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;将 Dom 结构和数据进行链接&lt;/p&gt;
&lt;p&gt;Vue 中通常使用&lt;strong&gt; vm&lt;/strong&gt; 来作为 Vue 实例的名称&lt;/p&gt;
&lt;p&gt;插值语法可以获取到所有&lt;strong&gt; VM 中的数据&lt;/strong&gt; (data 数据也在 VM 中)&lt;/p&gt;
&lt;h4 id=&#34;数据代理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数据代理&#34;&gt;#&lt;/a&gt; 数据代理&lt;/h4&gt;
&lt;h5 id=&#34;defineproperty-方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#defineproperty-方法&#34;&gt;#&lt;/a&gt; defineproperty 方法&lt;/h5&gt;
&lt;pre class=&#34;line-numbers language-javascript&#34; data-language=&#34;javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt;&lt;span class=&#34;token comment&#34;&gt;//js代码&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; person &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
    name： &lt;span class=&#34;token string&#34;&gt;&#34;s1m&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
Object&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;defineproperty&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;person&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;age&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
    value&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;18&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
    enumerable&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;//属性是否可以被枚举 默认为false&lt;/span&gt;
    writable&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;//属性是否可以被修改 默认为false&lt;/span&gt;
    configurable&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;//属性是否可以被修改 默认为false&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;//传入三个参数 第一个为修改对象,第二个为添加的key值 第三个为参数&lt;/span&gt;

Object&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;defineproperty&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;person&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;age&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;token function&#34;&gt;get&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;token comment&#34;&gt;//当有人获取 age的值的时候进行调用 且返回值为age的value&lt;/span&gt;
    &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;token function&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;value&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
    	&lt;span class=&#34;token comment&#34;&gt;//当有人 修改 age的值的时候调用&lt;/span&gt;
	&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;什么是数据代理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#什么是数据代理&#34;&gt;#&lt;/a&gt; 什么是数据代理&lt;/h5&gt;
&lt;p&gt;数据代理：通过一个对象代理对另一个对象中属性的操作 (读 / 写)&lt;/p&gt;
&lt;p&gt;通过修改一个对象的属性可以对另一个对象的属性同样进行修改&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-javascript&#34; data-language=&#34;javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt;        &lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; obj1 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;x&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; obj2 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;y&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;200&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
        Object&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;defineProperty&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;obj2&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;x&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;token function&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; obj1&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;   &lt;span class=&#34;token comment&#34;&gt;//当访问obj2的x的属性时候 返回的是obj1的属性&lt;/span&gt;
            &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;token function&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;value&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
                obj1&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; value&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;//当对obj2的x改的时候,修改的obj1的x&lt;/span&gt;
            &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; 
&lt;span class=&#34;token comment&#34;&gt;//当对obj2的x值更改的时候 更改的是obj1的x值&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;//获取obj2的x值的时候,获取的是obj1的值&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;vue中的数据代理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#vue中的数据代理&#34;&gt;#&lt;/a&gt; Vue 中的数据代理&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;data 中的数据都代理在 vm 中&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;通过 vm 对象来代理 data 中属性的操作&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当获取 vm 中的数据时，vm 触发 getter, 返回 data 中的数据&lt;/li&gt;
&lt;li&gt;当修改 vm 中的数据时，vm 触发 setter, 修改 data 中的数据&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;data 中的数据存储在了 vm 中的_data 中&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/ED11289633F8ED8EA2D312E86600F0F9.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;没有数据代理的话 每次访问数据就得写_data.xxx 更加地麻烦&lt;/p&gt;
&lt;h4 id=&#34;事件处理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#事件处理&#34;&gt;#&lt;/a&gt; 事件处理&lt;/h4&gt;
&lt;h5 id=&#34;事件的基本使用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#事件的基本使用&#34;&gt;#&lt;/a&gt; 事件的基本使用&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;&lt;u&gt;所有被 Vue 管理的函数都写成普通函数&lt;/u&gt;&lt;/strong&gt;, 为了保证 this&lt;/p&gt;
&lt;p&gt;事件的基本使用&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 &lt;code&gt;v-on:xxx&lt;/code&gt;  或者 &lt;code&gt;@xxx&lt;/code&gt;  绑定事件&lt;/li&gt;
&lt;li&gt;事件的回调配置在 methods 对象中，最终会在 vm 上&lt;/li&gt;
&lt;li&gt;methods 中配置的函数，不要用箭头函数，否则 this 将发生改变&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@click=&#34;demo&#34;&lt;/code&gt;  和 &lt;code&gt;@click=&#34;demo($event)&#34;&lt;/code&gt;  效果一致，但是后者可以传参&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@click=&#34;xxx&#34;&lt;/code&gt;  xxx 可以写一些简单的 js 语句，当语句过多时，还是建议写到 methods 方法中去&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;事件修饰符&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#事件修饰符&#34;&gt;#&lt;/a&gt; 事件修饰符&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;prevent&lt;/code&gt; : 阻止默认事件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stop&lt;/code&gt; : 阻止时间冒泡&lt;/li&gt;
&lt;li&gt;&lt;code&gt;once&lt;/code&gt; : 事件只触发一次&lt;/li&gt;
&lt;li&gt;&lt;code&gt;capture&lt;/code&gt; : 使用事件的捕获方式&lt;/li&gt;
&lt;li&gt;&lt;code&gt;self&lt;/code&gt; : 只有 event.target 是当前操作的元素时才触发事件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;passive&lt;/code&gt; : 事件的默认行为立即执行，无需等待时间回调执行完毕&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;eg:  &lt;code&gt;@click.prevent = &#34;showInfo&#34;&lt;/code&gt;&lt;/p&gt;
&lt;h5 id=&#34;键盘事件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#键盘事件&#34;&gt;#&lt;/a&gt; 键盘事件&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;Vue 常用的按键别名
&lt;ul&gt;
&lt;li&gt;回车:enter&lt;/li&gt;
&lt;li&gt;删除:delete&lt;/li&gt;
&lt;li&gt;退出:esc&lt;/li&gt;
&lt;li&gt;空格:space&lt;/li&gt;
&lt;li&gt;换行:tab (特殊，必须配合 keydown 使用)&lt;/li&gt;
&lt;li&gt;上:up&lt;/li&gt;
&lt;li&gt;下:down&lt;/li&gt;
&lt;li&gt;左:left&lt;/li&gt;
&lt;li&gt;右:right&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;原始 key 值绑定，&lt;strong&gt; 由多个单词组成的 key 值需要将多个单词用 &lt;code&gt;-&lt;/code&gt;  连接&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;系统修饰键:ctrl,alt,shift,meta (特殊用法)
&lt;ul&gt;
&lt;li&gt;配合 &lt;code&gt;keyup&lt;/code&gt;  使用：按下修饰键的同时，再按下其他键，随后释放其他键，时间才被触发  要实现同时按下修饰符和普通符 可以 &lt;code&gt;@keyup.修饰符.普通键&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;配合 &lt;code&gt;keydown&lt;/code&gt;  使用：正常触发事件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;也可以使用 keyCode 去指定具体的按键 (&lt;u&gt;不推荐&lt;/u&gt;), 因为不同的键盘编码可能不统一&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Vue.config.keyCodes.自定义键名 = 键码&lt;/code&gt;  可以定制按键别名&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;计算属性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#计算属性&#34;&gt;#&lt;/a&gt; 计算属性&lt;/h4&gt;
&lt;p&gt;Vue 中只要模板中的数据发生改变，Vue 就会重新解析一遍模板，然后将更改的部分渲染到页面上&lt;/p&gt;
&lt;p&gt;Vue 认为 data 里面的数据是&lt;strong&gt;属性&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;计算属性&lt;/strong&gt;：对已有的属性进行加工计算，从而得到一个全新的属性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;定义：要用的属性不存在，要通过&lt;strong&gt;已有属性&lt;/strong&gt;&lt;u&gt;计算&lt;/u&gt;得来&lt;/li&gt;
&lt;li&gt;原理：底层借助 &lt;code&gt;Object.defineproperty&lt;/code&gt;  方法提供的 getter 和 setter&lt;/li&gt;
&lt;li&gt;get 函数的调用时机:
&lt;ol&gt;
&lt;li&gt;初次读取时&lt;/li&gt;
&lt;li&gt;当依赖的数据发生改变的时候&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;优势：与 methods 相比，内部有缓存机制，效率更高&lt;/li&gt;
&lt;li&gt;计算属性最终会出现在 vm 上，直接读取使用就可以，如果计算属性会被修改，就要写 set 函数&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;计算属性的简写&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#计算属性的简写&#34;&gt;#&lt;/a&gt; 计算属性的简写&lt;/h5&gt;
&lt;p&gt;一般情况下计算属性用不到 set, 只需要用 get&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;不考虑修改的情况下才可以简写&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-javascript&#34; data-language=&#34;javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt;&lt;span class=&#34;token comment&#34;&gt;//完整情况&lt;/span&gt;
computed&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
    fullName&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;token function&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; lastName &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; firstName&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;token function&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;value&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
            
        &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;//简写&lt;/span&gt;
computed&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;token function&#34;&gt;fullName&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; lastName &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; firstName
    &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;监视属性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#监视属性&#34;&gt;#&lt;/a&gt; 监视属性&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;当被监视的属性发生变化&lt;/strong&gt;的时候，回调函数自动调用&lt;/li&gt;
&lt;li&gt;监视的属性必须&lt;strong&gt;存在&lt;/strong&gt;，才能进行监视&lt;/li&gt;
&lt;li&gt;监视的两种写法:
&lt;ol&gt;
&lt;li&gt;.new Vue 的时候传入 watch 配置&lt;/li&gt;
&lt;li&gt;通过 vm.$watch 监视&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;line-numbers language-js&#34; data-language=&#34;js&#34;&gt;&lt;code class=&#34;language-js&#34;&gt;&lt;span class=&#34;token comment&#34;&gt;//第一种监视写法&lt;/span&gt;
&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;const vm &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Vue&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
	watch&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
        isHot&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;//监视属性 isHot&lt;/span&gt;
             immediate&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;//可以不写 默认为false 为true表示,初始化的时候也调用handler&lt;/span&gt;
        	&lt;span class=&#34;token function&#34;&gt;handler&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;newValue&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;oldValue&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;token comment&#34;&gt;//表示当isHot属性的值发生改变的时候,会调用handler函数,并传入新的值和旧的值&lt;/span&gt;
            &lt;span class=&#34;token comment&#34;&gt;//计算出来的属性也可以监视&lt;/span&gt;
            &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;


&lt;span class=&#34;token comment&#34;&gt;//第二种监视的写法&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; vm &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Vue&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

vm&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;$watch&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;isHot&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;token comment&#34;&gt;//和上面相同&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;深度监视&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#深度监视&#34;&gt;#&lt;/a&gt; 深度监视&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Vue 中的&lt;strong&gt; watch&lt;/strong&gt; 默认不监测对象内部值的改变 (一层)       (Vue 是可以监视的 但是 Watch 不行)&lt;/li&gt;
&lt;li&gt;配置 &lt;code&gt;deep:true&lt;/code&gt;  可以检测到对象内部值的改变 (多层次)&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;监视的简写形式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#监视的简写形式&#34;&gt;#&lt;/a&gt; 监视的简写形式&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;&lt;u&gt;不需要 immediate 和 deep 的时候，才可以简写&lt;/u&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-javascript&#34; data-language=&#34;javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt;watch &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;token comment&#34;&gt;//正常写法&lt;/span&gt;
    isHot&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;token function&#34;&gt;handler&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;newValue&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;oldValue&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
          console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;正常写法&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;  
    &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;token comment&#34;&gt;//简写形式&lt;/span&gt;
    &lt;span class=&#34;token function&#34;&gt;isHot&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;newValue&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;oldValue&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
        console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;简写写法&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;watch对比computed&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#watch对比computed&#34;&gt;#&lt;/a&gt; Watch 对比 Computed&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Computed 可以完成的，watch 能完成的&lt;/li&gt;
&lt;li&gt;Watch 能完成，computed 不一定能完成&lt;/li&gt;
&lt;li&gt;Computed 不支持异步操作，Watch 支持&lt;/li&gt;
&lt;li&gt;在都可以实现的时候，哪个容易写哪个&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;两个重要小原则&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#两个重要小原则&#34;&gt;#&lt;/a&gt; 两个重要小原则&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;被 Vue 管理的函数，都写成普通函数，这样 this 指定的才是 vue&lt;/li&gt;
&lt;li&gt;所有不被 Vue 所管理的函数 (定时器，ajax) 最好写成箭头函数，这样 this 的指向才是 vue&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;class与style绑定&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#class与style绑定&#34;&gt;#&lt;/a&gt; Class 与 style 绑定&lt;/h4&gt;
&lt;h5 id=&#34;绑定class样式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#绑定class样式&#34;&gt;#&lt;/a&gt; 绑定 class 样式&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;字符串写法&lt;/strong&gt;：适用于样式的类名不确定，需要动态指定&lt;/li&gt;
&lt;li&gt;** 数组写法:** 适用于样式的个数和名字都不确定&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;对象写法&lt;/strong&gt;：适用于要绑定的样式用不用不确定&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;line-numbers language-html&#34; data-language=&#34;html&#34;&gt;&lt;code class=&#34;language-html&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;style&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token style&#34;&gt;&lt;span class=&#34;token language-css&#34;&gt;
 //省略
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;style&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;root&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
	// 字符串写法
    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;:class&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;Mode&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;@click&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;changeMode&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
    
    //数组写法
    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;:class&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;ModeArr&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
    
    //对象写法
    
    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;:class&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;ModeObj&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
 &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token script&#34;&gt;&lt;span class=&#34;token language-javascript&#34;&gt;
    &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Vue&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
        el&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;#root&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
        data&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
            Mode&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;happy&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
            ModeArr&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;happy&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;normal&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;bad&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
            ModeObj&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
            	happy&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
            	bad&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
        methods&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;token function&#34;&gt;changeMode&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;Mode &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;normal&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
            &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;绑定style&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#绑定style&#34;&gt;#&lt;/a&gt; 绑定 style&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;:style=&#34;{fontSize: xxx}&#34;&lt;/code&gt;   其中 xxx 是动态值&lt;/li&gt;
&lt;li&gt;也可以像下面代码中一样 (常用)&lt;/li&gt;
&lt;li&gt;注意必须写成 &lt;strong&gt;&lt;u&gt;驼峰命名&lt;/u&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;line-numbers language-html&#34; data-language=&#34;html&#34;&gt;&lt;code class=&#34;language-html&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;root&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
	&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;:style&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;styleObj&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
	
	&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;

    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token script&#34;&gt;&lt;span class=&#34;token language-javascript&#34;&gt;
        &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Vue&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
            el&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;#root&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
            data&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
                styleObj&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
                	fontSize&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;40px&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;      &lt;span class=&#34;token comment&#34;&gt;//要切换成驼峰命名&lt;/span&gt;
                &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
            methods&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
    &lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;条件渲染&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#条件渲染&#34;&gt;#&lt;/a&gt; 条件渲染&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;v-show&lt;/code&gt;  做条件渲染，只是使用 display 将其隐藏了，但是本身还存在在 DOM 树里面&lt;/li&gt;
&lt;li&gt;&lt;code&gt;v-if&lt;/code&gt;  做条件渲染，直接在 DOM 树里面增添或者删除这个结点&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果频繁切换，推荐用 &lt;code&gt;v-show&lt;/code&gt;&lt;/p&gt;
&lt;h5 id=&#34;v-if与v-if-else于v-else&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#v-if与v-if-else于v-else&#34;&gt;#&lt;/a&gt; v-if 与 v-if-else 于 v-else&lt;/h5&gt;
&lt;p&gt;使用与 &lt;code&gt;if      else if      else&lt;/code&gt;  一样，但是进行判断的标签必须紧紧相连&lt;/p&gt;
&lt;p&gt;如果要对一堆元素进行管理，可以在最外层加上一个 &lt;code&gt;&amp;lt;template v-if=&#34;true&#34;&amp;gt;&lt;/code&gt; , 这样不影响结构&lt;/p&gt;
&lt;p&gt;另外 templace 只能和 &lt;code&gt;v-if&lt;/code&gt;  配合使用，不能和 &lt;code&gt;v-show&lt;/code&gt;  配合使用&lt;/p&gt;
&lt;h4 id=&#34;列表渲染important&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#列表渲染important&#34;&gt;#&lt;/a&gt; 列表渲染 (important)&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;v-for&lt;/code&gt;  指令用于展示列表数据&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;语法:  &lt;code&gt;v-for=&#34;(item,index) in xxx&#34; :key=&#34;yyy&#34;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;可以遍历：数组，对象，字符串 (用得少), 指定次数 (用得少)&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;key作用与原理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#key作用与原理&#34;&gt;#&lt;/a&gt; key 作用与原理&lt;/h5&gt;
&lt;p&gt;&lt;img src=&#34;https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/C9F8A6E7AC902688BD253CBFCB33AE47.png&#34; alt=&#34;index作为key&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/ACF36FEC23900F414FD48E7CC5EFF9DE.png&#34; alt=&#34;id作为key&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;虚拟 DOM 中 key 的作用&lt;/p&gt;
&lt;p&gt;key 是虚拟 DOM 对象的标识，当数据发生变化的时候，Vue 会根据&lt;strong&gt;新数据&lt;/strong&gt;，生成新的虚拟 DOM，随后 Vue 进行新虚拟 DOM 与旧虚拟 DOM 的差异比较，比较规则如下&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对比规则:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;旧虚拟 DOM 找到了与新虚拟 DOM 相同的 key
&lt;ol&gt;
&lt;li&gt;若虚拟 DOM 中内容没变，直接使用旧的真实 DOM&lt;/li&gt;
&lt;li&gt;若虚拟 DOM 的内容变了，则生成新的真实 DOM, 并替换掉页面中之前的真实 DOM&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;旧虚拟 DOM 没找到与新虚拟 DOM 相同的 key
&lt;ol&gt;
&lt;li&gt;创建新的真实 DOM, 随后渲染到页面&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用 index 作为 key 可能会引发的问题&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;若对数据进行逆序添加，逆序删除等破坏顺序的操作，会产生没有必要的真实 DOM 更新，使&lt;strong&gt;效率降低&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;如果结构中还包括输入类的 DOM, 会产生错误的 DOM 更新，&lt;strong&gt; 使界面有问题&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;最好选择唯一标识作为 key 值&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;列表过滤&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#列表过滤&#34;&gt;#&lt;/a&gt; 列表过滤&lt;/h5&gt;
&lt;pre class=&#34;line-numbers language-js&#34; data-language=&#34;js&#34;&gt;&lt;code class=&#34;language-js&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; vm &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Vue&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
          &lt;span class=&#34;token function&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
              &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
                  keyWord&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
                  persons&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
                      id&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;001&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
                      name&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;张三东&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
                      sex&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;男&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
                      age&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;19&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
                  &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
                      id&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;002&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
                      name&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;李四东伦&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
                      sex&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;女&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
                      age&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;18&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
                  &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
                      id&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;003&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
                      name&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;王伦五&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
                      sex&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;男&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
                      age&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
                  &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
              &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
              computed&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
                  &lt;span class=&#34;token function&#34;&gt;filpersons&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
                      &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;persons&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;person&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
                          &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; person&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;name&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;indexOf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;keyWord&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;!==&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;
                      &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
                  &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
              &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
          methods&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
              
          &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
      vm&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;$mount&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;#root&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;列表排序&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#列表排序&#34;&gt;#&lt;/a&gt; 列表排序&lt;/h5&gt;
&lt;p&gt;在 data 中使用一个变量来存储此时排序的状态&lt;/p&gt;
&lt;p&gt;通过对状态的检测 来进行排序，当点击按钮的时，状态更改，重新进行渲染&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-javascript&#34; data-language=&#34;javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt;computed&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
                    &lt;span class=&#34;token function&#34;&gt;filpersons&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
                        &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; arr &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;  &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;persons&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;person&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
                            &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; person&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;name&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;indexOf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;keyWord&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;!==&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;
                        &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
                        &lt;span class=&#34;token comment&#34;&gt;//不需要排序 直接返回&lt;/span&gt;
                        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sortType&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
                        &lt;span class=&#34;token comment&#34;&gt;//进行排序&lt;/span&gt;
                            arr&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;sort&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;a&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;b&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
                                &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sortType &lt;span class=&#34;token operator&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
                                &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; b&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;age &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt; a&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;age
                                &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt; 
                                &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; a&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;age &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt; b&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;age
                            &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
                        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; arr&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
                    &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
                &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;vue监测数据改变的原理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#vue监测数据改变的原理&#34;&gt;#&lt;/a&gt; Vue 监测数据改变的原理&lt;/h4&gt;
&lt;h5 id=&#34;监测对象的改变&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#监测对象的改变&#34;&gt;#&lt;/a&gt; 监测对象的改变&lt;/h5&gt;
&lt;p&gt;通过 setter 和 getter 进行监测，只要一改变，就进行重新渲染&lt;/p&gt;
&lt;p&gt;且底层使用递归，如果有多个对象叠对象，Vue 会找到最底层的数据进行监测&lt;/p&gt;
&lt;h5 id=&#34;监测数组的改变&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#监测数组的改变&#34;&gt;#&lt;/a&gt; 监测数组的改变&lt;/h5&gt;
&lt;p&gt;调用包裹数组更新元素的方法实现，本质就是做了两件事&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;调用原生对应的方法对数组进行更新&lt;/li&gt;
&lt;li&gt;重新解析模板，进而更新页面&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;vueset的使用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#vueset的使用&#34;&gt;#&lt;/a&gt; Vue.set () 的使用&lt;/h5&gt;
&lt;p&gt;vue 对象中追加的数据，不做响应式处理，必须使用 vue.set () 方法&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Vue.set(target,key,value)&lt;/code&gt; : 往 target 身上添加 key:value 的&lt;strong&gt;响应式数据&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;this.$set()&lt;/code&gt;  和 &lt;code&gt;vue.set()&lt;/code&gt;  相同&lt;/p&gt;
&lt;p&gt;否则后期添加的键值对不会是响应式的&lt;/p&gt;
&lt;h5 id=&#34;vue修改数组中某个元素&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#vue修改数组中某个元素&#34;&gt;#&lt;/a&gt; vue 修改数组中某个元素&lt;/h5&gt;
&lt;p&gt;直接对数组进行更新，vue 不会监测到，只有通过以下方法，vue 才会监测到&lt;/p&gt;
&lt;p&gt;使用如下方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;push()&lt;/code&gt; , &lt;code&gt;pop()&lt;/code&gt; , &lt;code&gt;shift()&lt;/code&gt; , &lt;code&gt;unshift()&lt;/code&gt; , &lt;code&gt;splice()&lt;/code&gt; , &lt;code&gt;sort()&lt;/code&gt; , &lt;code&gt;reverse()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;收集表单数据&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#收集表单数据&#34;&gt;#&lt;/a&gt; 收集表单数据&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;input type=&#34;text&#34;&amp;gt;&lt;/code&gt; :v-model 双向绑定，&lt;strong&gt; 用户输入的就是 value 值&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;input type=&#34;radio&#34;&amp;gt;&lt;/code&gt; :v-model 双向绑定，收集到的是 value 值，需要&lt;strong&gt;手动配置 value 值&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;input type=&#34;checkbox&#34;&amp;gt;&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;没有配置 input 的 value 属性，收集到的是 checked 的&lt;strong&gt;布尔值&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;配置了 value 属性，如果是非数组收集到的也是布尔值，&lt;strong&gt;是数组收集到的就是选中的 value 组成的数组&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;v-model的三个修饰符&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#v-model的三个修饰符&#34;&gt;#&lt;/a&gt; v-model 的三个修饰符&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;lazy: 失去焦点再收集数据&lt;/li&gt;
&lt;li&gt;number: 输入字符串转为有效数字&lt;/li&gt;
&lt;li&gt;trim: 输入首尾空格过滤&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;过滤器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#过滤器&#34;&gt;#&lt;/a&gt; 过滤器&lt;/h4&gt;
&lt;p&gt;对要显示的数据进行特定格式化后再显示 (使用于一些简单逻辑的处理)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;语法
&lt;ul&gt;
&lt;li&gt;注册过滤器: &lt;code&gt;Vue.filter(name,callback)&lt;/code&gt;  或者  &lt;code&gt;new Vue(filters:{})&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;使用过滤器: &lt;code&gt;{{xxx|过滤器名}}&lt;/code&gt;  或者  &lt;code&gt;v-bind:属性 =&#34;xxx|过滤器名&#34;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;备注
&lt;ul&gt;
&lt;li&gt;过滤器也可以接受额外参数&lt;/li&gt;
&lt;li&gt;多个过滤器可以串联&lt;/li&gt;
&lt;li&gt;过滤器并&lt;strong&gt;没有改变原本的数据&lt;/strong&gt;，只是产生了新的数据&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;内置指令&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#内置指令&#34;&gt;#&lt;/a&gt; 内置指令&lt;/h4&gt;
&lt;h5 id=&#34;常用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#常用&#34;&gt;#&lt;/a&gt; 常用&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;v-bind&lt;/code&gt; : 单向绑定解析表达式&lt;/li&gt;
&lt;li&gt;&lt;code&gt;v-model&lt;/code&gt; : 双向数据绑定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;v-for&lt;/code&gt; : 遍历数组 / 对象 / 字符串&lt;/li&gt;
&lt;li&gt;&lt;code&gt;v-on&lt;/code&gt; : 绑定事件监听，可简写为 @&lt;/li&gt;
&lt;li&gt;&lt;code&gt;v-if&lt;/code&gt; : 条件渲染 (动态控制节点是否存在)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;v-else&lt;/code&gt; : 条件渲染 (动态控制节点是否存在)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;v-show&lt;/code&gt; : 条件渲染 (动态控制节点是否展示)&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;其他&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#其他&#34;&gt;#&lt;/a&gt; 其他&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;v-text&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;作用：向其所在的节点中渲染文本内容&lt;/li&gt;
&lt;li&gt;与插值语法的区别:v-text 会替换掉节点中的&lt;strong&gt;全部内容&lt;/strong&gt;，插值语法不会&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;v-html&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;作用：向指定节点中渲染包含 html 结构的内容&lt;/li&gt;
&lt;li&gt;与插值语法的区别
&lt;ol&gt;
&lt;li&gt;可以识别 html 结构&lt;/li&gt;
&lt;li&gt;会替换掉节点中的全部内容&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;注意！
&lt;ol&gt;
&lt;li&gt;在网站上动态渲染 html 非常危险，容易导致 XSS 攻击&lt;/li&gt;
&lt;li&gt;一定要在可信的内容上使用 v-html, 不要再用户提交的内容上&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;v-cloak&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;本质是一个特殊属性，Vue 实例创建完毕并接管容器后，会删掉 v-cloak 属性&lt;/li&gt;
&lt;li&gt;使用 css 配合 v-cloak 可以解决网速慢时直接将模板展示在浏览器中的问题&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;line-numbers language-html&#34; data-language=&#34;html&#34;&gt;&lt;code class=&#34;language-html&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;style&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token style&#34;&gt;&lt;span class=&#34;token language-css&#34;&gt;
    &lt;span class=&#34;token selector&#34;&gt;[v-cloak]&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;token property&#34;&gt;display&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; none&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;style&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;body&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;h2&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;v-cloak&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
        你好
    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;h2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;body&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;v-once&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;v-once&lt;/code&gt;  所在节点在初始动态渲染后，就视为静态内容了&lt;/li&gt;
&lt;li&gt;以后数据的改变不会引起 &lt;code&gt;v-once&lt;/code&gt;  所在结构的更新，可以用于优化性能&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;v-pre&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;跳过其所在节点的编译过程&lt;/li&gt;
&lt;li&gt;可利用他跳过：没有使用指令语法，没有使用插值语法的节点，可以加快编译&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;自定义指令&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#自定义指令&#34;&gt;#&lt;/a&gt; 自定义指令&lt;/h5&gt;
&lt;h6 id=&#34;函数式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#函数式&#34;&gt;#&lt;/a&gt; 函数式&lt;/h6&gt;
&lt;pre class=&#34;line-numbers language-html&#34; data-language=&#34;html&#34;&gt;&lt;code class=&#34;language-html&#34;&gt;&lt;span class=&#34;token doctype&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;!&lt;/span&gt;&lt;span class=&#34;token doctype-tag&#34;&gt;DOCTYPE&lt;/span&gt; &lt;span class=&#34;token name&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;html&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;lang&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;en&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;head&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;meta&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;charset&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;UTF-8&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;meta&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;http-equiv&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;X-UA-Compatible&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;IE=edge&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;meta&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;viewport&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;width=device-width, initial-scale=1.0&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;text/javascript&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;../js/vue.js&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token script&#34;&gt;&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;title&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;Document&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;title&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;head&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;body&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;root&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;h2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;当前的n值是&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;span&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;v-text&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;n&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;span&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;h2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;h2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;放大十倍后的n值是&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;span&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;v-big&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;n&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;span&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;h2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;@click&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;n++&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;点我n加1&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token script&#34;&gt;&lt;span class=&#34;token language-javascript&#34;&gt;
        &lt;span class=&#34;token comment&#34;&gt;//定义一个v-big指令,和v-text类似 会把绑定的数值放大10倍&lt;/span&gt;
        &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; vm &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Vue&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;token function&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
                    n&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
                &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
            methods&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
                
            &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
            directives&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;token comment&#34;&gt;//big函数什么时候会被调用&lt;/span&gt;
                &lt;span class=&#34;token comment&#34;&gt;// 1.指令和元素成功绑定时(初次)&lt;/span&gt;
                &lt;span class=&#34;token comment&#34;&gt;// 2.指令所在的模板 被重新解析的时候&lt;/span&gt;
                &lt;span class=&#34;token function&#34;&gt;big&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;element&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;binding&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
                    element&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;innerText &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; binding&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;value &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;
                &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
        vm&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;$mount&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;#root&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
    &lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;body&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;html&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h6 id=&#34;对象式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#对象式&#34;&gt;#&lt;/a&gt; 对象式&lt;/h6&gt;
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;directives: {
                XXX:{
                    //当指令与元素成功绑定时调用
                    bind() {},
                    //指令所在元素被插入页面时调用
                    inserted() {},
                    //指令所在模板被重新解析时调用
                    update(){},
                }
            },&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;函数式就是只用了 &lt;code&gt;bind&lt;/code&gt;  和 &lt;code&gt;update&lt;/code&gt;  没用 &lt;code&gt;insert&lt;/code&gt;&lt;/p&gt;
&lt;h6 id=&#34;总结&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#总结&#34;&gt;#&lt;/a&gt; 总结&lt;/h6&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;定义语法:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;局部指令&lt;/p&gt;
&lt;p&gt;&lt;code&gt;new Vue({directives:{指令名:配置对象}})&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;全局指令&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Vue.directive(指令名,配置对象)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配置对象中常用的三个回调&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;bind&lt;/code&gt; : 指令与元素&lt;strong&gt;成功绑定&lt;/strong&gt;时调用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;inserted&lt;/code&gt; : 指令所在元素被&lt;strong&gt;插入页面&lt;/strong&gt;时调用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;update&lt;/code&gt; : 指令所在模板被&lt;strong&gt;重新解析&lt;/strong&gt;时调用&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;备注&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;指令定义时不加 v-, 但使用时要加&lt;/li&gt;
&lt;li&gt;指令名如果是多个单词，要使用&lt;strong&gt; kebab-case 命名&lt;/strong&gt;，不要用 camelCase 命名&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;生命周期&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#生命周期&#34;&gt;#&lt;/a&gt; 生命周期&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;生命周期函数是 Vue 在关键时刻帮我们调用的一些特殊名称的函数&lt;/li&gt;
&lt;li&gt;生命周期函数的名字不可更改，但函数的具体内容是程序员根据需求编写的&lt;/li&gt;
&lt;li&gt;生命周期函数中的 this 指向是 vm 或组件实例对象&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;常用的周期钩子&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;mounted&lt;/code&gt; : 发送 ajax 请求，启动定时器，绑定自定义事件，订阅消息等&lt;strong&gt;初始化操作&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;beforeDestroy&lt;/code&gt; : 清除定时器，解绑自定义时间，取消订阅消息等&lt;strong&gt;收尾工作&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;关于销毁 Vue 实例&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;销毁后借助 Vue 开发者工具看不到任何信息&lt;/li&gt;
&lt;li&gt;销毁后自定义事件会失效，但&lt;strong&gt;原生 DOM 事件仍然有效&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;一般不会用 beforeDestroy 操作数据，因为即使操作数据，也&lt;strong&gt;不会再触发更新流程&lt;/strong&gt;了&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;vue组件化编程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#vue组件化编程&#34;&gt;#&lt;/a&gt; Vue 组件化编程&lt;/h3&gt;
&lt;p&gt;组件：实现应用中局部功能代码和资源的集合&lt;/p&gt;
&lt;h4 id=&#34;非单文件组件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#非单文件组件&#34;&gt;#&lt;/a&gt; 非单文件组件&lt;/h4&gt;
&lt;p&gt;一个文件中包含有 n 个组件&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-html&#34; data-language=&#34;html&#34;&gt;&lt;code class=&#34;language-html&#34;&gt;&lt;span class=&#34;token doctype&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;!&lt;/span&gt;&lt;span class=&#34;token doctype-tag&#34;&gt;DOCTYPE&lt;/span&gt; &lt;span class=&#34;token name&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;html&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;lang&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;en&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;head&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;meta&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;charset&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;UTF-8&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;meta&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;http-equiv&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;X-UA-Compatible&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;IE=edge&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;meta&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;viewport&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;width=device-width, initial-scale=1.0&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;text/javascript&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;../js/vue.js&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token script&#34;&gt;&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;title&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;Document&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;title&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;head&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;body&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;root&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;school&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;school&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;hr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;student&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;student&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;

    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token script&#34;&gt;&lt;span class=&#34;token language-javascript&#34;&gt;
        &lt;span class=&#34;token comment&#34;&gt;//第一步创建组件&lt;/span&gt;

        &lt;span class=&#34;token comment&#34;&gt;//创建school组件&lt;/span&gt;
        &lt;span class=&#34;token comment&#34;&gt;//不要写el配置项,一定不要写el配置项&lt;/span&gt;
        &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; school &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; Vue&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;extend&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
            template&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token template-string&#34;&gt;&lt;span class=&#34;token template-punctuation string&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&amp;lt;div&amp;gt;
                &amp;lt;h2&amp;gt;学校名称:{{schoolName}}&amp;lt;/h2&amp;gt;
        &amp;lt;h2&amp;gt;学校地址:{{schoolAddress}}&amp;lt;/h2&amp;gt;
                &amp;lt;/div&amp;gt;&lt;/span&gt;&lt;span class=&#34;token template-punctuation string&#34;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;token function&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
                    schoolName&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;UESTC&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
                    schoolAddress&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;沙河&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
                &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
            methods&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
                
            &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;token comment&#34;&gt;//创建student组件&lt;/span&gt;
        &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; student &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; Vue&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;extend&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
            template&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token template-string&#34;&gt;&lt;span class=&#34;token template-punctuation string&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&amp;lt;div&amp;gt;
                &amp;lt;h2&amp;gt;学生名称:{{studentName}}&amp;lt;/h2&amp;gt;
        &amp;lt;h2&amp;gt;学校年龄:{{studentAge}}&amp;lt;/h2&amp;gt;
                &amp;lt;/div&amp;gt;&lt;/span&gt;&lt;span class=&#34;token template-punctuation string&#34;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;token function&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
                    studentName&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;s1m&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
                    studentAge&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
                &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
            methods&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
                
            &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
    
        
        &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Vue&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;       
            el&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;#root&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;token comment&#34;&gt;//第二步 局部注册组件&lt;/span&gt;
            components&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;school&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;student&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;



        &lt;span class=&#34;token comment&#34;&gt;// const vm = new Vue({&lt;/span&gt;
        &lt;span class=&#34;token comment&#34;&gt;//     data () {&lt;/span&gt;
        &lt;span class=&#34;token comment&#34;&gt;//         return{&lt;/span&gt;
        &lt;span class=&#34;token comment&#34;&gt;//             schoolName:&#39;UESTC&#39;,&lt;/span&gt;
        &lt;span class=&#34;token comment&#34;&gt;//             schoolAddress:&#39;沙河&#39;,&lt;/span&gt;
        &lt;span class=&#34;token comment&#34;&gt;//             studentName:&#39;s1m&#39;,&lt;/span&gt;
        &lt;span class=&#34;token comment&#34;&gt;//             studentAge:20,&lt;/span&gt;
        &lt;span class=&#34;token comment&#34;&gt;//         }},&lt;/span&gt;
        &lt;span class=&#34;token comment&#34;&gt;//     methods: {&lt;/span&gt;
                
        &lt;span class=&#34;token comment&#34;&gt;//     }&lt;/span&gt;
        &lt;span class=&#34;token comment&#34;&gt;// })&lt;/span&gt;
        &lt;span class=&#34;token comment&#34;&gt;// vm.$mount(&#39;#root&#39;)&lt;/span&gt;
    &lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;body&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;html&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Vue 中使用组件的三大步骤&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;定义组件 (创建组件)&lt;/li&gt;
&lt;li&gt;注册组件&lt;/li&gt;
&lt;li&gt;使用组件 (写组件标签)&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;如何定义一个组件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#如何定义一个组件&#34;&gt;#&lt;/a&gt; 如何定义一个组件&lt;/h5&gt;
&lt;p&gt;使用 Vue.extend (options) 创建，其中 options 和 new Vue (options) 时传入的那个 options 几乎一样，区别如下:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;el 不要写&lt;/li&gt;
&lt;li&gt;data 必须写成函数 (&lt;strong&gt;避免组件被复用时的引用问题&lt;/strong&gt;)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;备注：使用 &lt;code&gt;template&lt;/code&gt;  可以配置组件结构&lt;/p&gt;
&lt;h5 id=&#34;如何注册组件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#如何注册组件&#34;&gt;#&lt;/a&gt; 如何注册组件&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;局部注册：靠 new Vue 的时候传入 components 选项&lt;/li&gt;
&lt;li&gt;全局注册：靠 Vue.component (‘组件名’, 组件)&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;编写组件标签&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#编写组件标签&#34;&gt;#&lt;/a&gt; 编写组件标签&lt;/h5&gt;
&lt;p&gt;eg: &lt;code&gt;&amp;lt;school&amp;gt;&amp;lt;/school&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h5 id=&#34;几个注意点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#几个注意点&#34;&gt;#&lt;/a&gt; 几个注意点&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;组件名&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;一个单词组成：首字母大小写都可以&lt;/li&gt;
&lt;li&gt;多个单词组成
&lt;ul&gt;
&lt;li&gt;第一种：(kebab-case 命名) my-school&lt;/li&gt;
&lt;li&gt;第二种：(CamelCase 命名) MySchool (&lt;strong&gt;需要 Vue 脚手架支持&lt;/strong&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;备注
&lt;ul&gt;
&lt;li&gt;组件名尽可能回避 HTML 中已存的元素名称&lt;/li&gt;
&lt;li&gt;可以使用 name 配置项指定组件在开发者工具中呈现的名字&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;关于组件标签&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一种写法: &lt;code&gt;&amp;lt;school&amp;gt;&amp;lt;/school&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;第二种写法: &lt;code&gt;&amp;lt;school/&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;备注：不使用脚手架时， &lt;code&gt;&amp;lt;school/&amp;gt;&lt;/code&gt;  会导致后续组件不能渲染&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一个简写方式&lt;/p&gt;
&lt;p&gt;&lt;code&gt;const school = Vue.extend(options)&lt;/code&gt;  可以写成  &lt;code&gt;const school = options&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;组件的嵌套&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#组件的嵌套&#34;&gt;#&lt;/a&gt; 组件的嵌套&lt;/h5&gt;
&lt;pre class=&#34;line-numbers language-javascript&#34; data-language=&#34;javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; student &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
       template&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token template-string&#34;&gt;&lt;span class=&#34;token template-punctuation string&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&amp;lt;div&amp;gt;
           &amp;lt;h2&amp;gt;学生姓名:{{studentName}}&amp;lt;/h2&amp;gt;
   &amp;lt;h2&amp;gt;学生年龄:{{studentAge}}&amp;lt;/h2&amp;gt;
           &amp;lt;/div&amp;gt;&lt;/span&gt;&lt;span class=&#34;token template-punctuation string&#34;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
       &lt;span class=&#34;token function&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
           &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
               studentName&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;s1mm&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
               studentAge&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
           &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
       methods&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
           
       &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
   &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
   &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; school &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; Vue&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;extend&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
       template&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token template-string&#34;&gt;&lt;span class=&#34;token template-punctuation string&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&amp;lt;div&amp;gt;
           &amp;lt;h2&amp;gt;学校名称:{{schoolName}}&amp;lt;/h2&amp;gt;
   &amp;lt;h2&amp;gt;学校地址:{{schoolAddress}}&amp;lt;/h2&amp;gt;
   &amp;lt;hr&amp;gt;
   &amp;lt;student&amp;gt;&amp;lt;/student&amp;gt;
           &amp;lt;/div&amp;gt;&lt;/span&gt;&lt;span class=&#34;token template-punctuation string&#34;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
           components&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;student&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
       &lt;span class=&#34;token function&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
           &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
               schoolName&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;UESTC&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
               schoolAddress&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;沙河&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
           &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
       methods&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
           
       &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
   &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

   &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Vue&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;       
       el&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;#root&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
       &lt;span class=&#34;token comment&#34;&gt;//第二步 局部注册组件&lt;/span&gt;
       components&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;school&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
   &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;vuecomponent&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#vuecomponent&#34;&gt;#&lt;/a&gt; VueComponent&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;组件本质是一个名为 VueComponnent 的构造函数，不是程序员定义的，是 Vue.extend () 生成的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;我们只需要写 &lt;code&gt;&amp;lt;school/&amp;gt;&lt;/code&gt; ,Vue 解析时会帮我们创建 school 组件的实例对象，即 Vue 帮我们执行的:new VueComponent (options)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;特别注意：每次调用 Vue.extend, 返回的都是一个全新的 VueComponent&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;关于 this 指向:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;组件配置中:&lt;/p&gt;
&lt;p&gt;data 函数，methods 函数，watch 中的函数，computed 中的函数，他们的 sthis 都是&lt;strong&gt; VueComponent 实例对象&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;new Vue (options) 中&lt;/p&gt;
&lt;p&gt;data 函数，methods 函数，watch 中的函数，computed 中的函数，他们的 sthis 都是&lt;strong&gt; Vue 实例对象&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;单文件组件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#单文件组件&#34;&gt;#&lt;/a&gt; 单文件组件&lt;/h4&gt;
&lt;p&gt;通过 VM 组件管理 APP 组件，再通过 APP 组件管理一堆组件&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-Vue&#34; data-language=&#34;Vue&#34;&gt;&lt;code class=&#34;language-Vue&#34;&gt;&amp;lt;template&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
&amp;lt;/script&amp;gt;

&amp;lt;style&amp;gt;
npm in&amp;lt;/style&amp;gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;vue脚手架&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#vue脚手架&#34;&gt;#&lt;/a&gt; Vue 脚手架&lt;/h3&gt;
&lt;h4 id=&#34;创建vue脚手架&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#创建vue脚手架&#34;&gt;#&lt;/a&gt; 创建 Vue 脚手架&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;npm install -g @vue/cli&lt;/code&gt; , 全局安装 vue/cli&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vue create xxx&lt;/code&gt;  创建项目&lt;/li&gt;
&lt;li&gt;&lt;code&gt;npm run serve&lt;/code&gt;  启动项目&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;分析脚手架&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#分析脚手架&#34;&gt;#&lt;/a&gt; 分析脚手架&lt;/h4&gt;
&lt;h5 id=&#34;render函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#render函数&#34;&gt;#&lt;/a&gt; render 函数&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;vue.js 是完整版的 vue, 包含核心功能 + 模板解析器&lt;/li&gt;
&lt;li&gt;vue.runtime.xxx.js 是运行版的 vue, 只包含核心功能，没有模板解析器&lt;/li&gt;
&lt;li&gt;因为 &lt;code&gt;vue.runtime.xxx.js&lt;/code&gt;  没有模板解析器，所以不能使用 template 配置项，需要使用&lt;strong&gt; render 函数&lt;/strong&gt;接收到的&lt;strong&gt; createElement 函数去指定具体内容&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;修改默认配置&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#修改默认配置&#34;&gt;#&lt;/a&gt; 修改默认配置&lt;/h5&gt;
&lt;p&gt;可以在 &lt;code&gt;vue.config.js&lt;/code&gt;  中添加个性化配置，vue 会将个性化配置和 webpack 中的默认配置对比，并且进行替换&lt;/p&gt;
&lt;h4 id=&#34;ref属性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#ref属性&#34;&gt;#&lt;/a&gt; ref 属性&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;被用来给元素或&lt;strong&gt;子组件&lt;/strong&gt;注册引用信息 (id 的替代者)&lt;/li&gt;
&lt;li&gt;应用在 html 标签上获取的是真实 DOM 元素，应用在组件标签上是组件实例对象（vc）&lt;/li&gt;
&lt;li&gt;使用方式
&lt;ul&gt;
&lt;li&gt;打标识  &lt;code&gt;&amp;lt;h1 ref=&#34;xxx&#34;&amp;gt; ... &amp;lt;h1&amp;gt;&lt;/code&gt;  或  &lt;code&gt;&amp;lt;School ref = &#34;xxx&#34;&amp;gt;&amp;lt;/School&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;获取: &lt;code&gt;this.$refs.xxx&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;props配置&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#props配置&#34;&gt;#&lt;/a&gt; props 配置&lt;/h4&gt;
&lt;p&gt;功能：让组件接收外部传过来的数据&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;传递数据&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;Demo name=&#34;xxx&#34; /&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;接收数据 如下三种方式&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;line-numbers language-javascript&#34; data-language=&#34;javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt;&lt;span class=&#34;token comment&#34;&gt;//最简单写法&lt;/span&gt;
props&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;name&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;sex&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;age&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;//第二种写法 - 限制数据类型&lt;/span&gt;
props&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;                        &lt;span class=&#34;token comment&#34;&gt;//限制数据类型&lt;/span&gt;
         name&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; String&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
         age&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; Number&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
         sex&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; Number&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
     &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;//完整写法  可以限制数据类型 + 必需性 + 默认值&lt;/span&gt;
props&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
        name&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
            type&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; String&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;    &lt;span class=&#34;token comment&#34;&gt;//类型&lt;/span&gt;
            required&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;//名字是必须传的&lt;/span&gt;
        &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
        age&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
            type&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; Number&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;    &lt;span class=&#34;token comment&#34;&gt;//类型&lt;/span&gt;
            &lt;span class=&#34;token keyword&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;31&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;//默认值&lt;/span&gt;
        &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;备注:props 是&lt;strong&gt;只读&lt;/strong&gt;的，Vue 底层会监测 props 的修改，如果进行了修改，就会发出警告，&lt;u&gt;如果业务需求需要修改，那么请复制 props 的内容到 data 中一份，然后去修改 data 中的数据&lt;/u&gt;&lt;/p&gt;
&lt;h4 id=&#34;mixin混入&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#mixin混入&#34;&gt;#&lt;/a&gt; mixin 混入&lt;/h4&gt;
&lt;p&gt;功能：可以把多个组件共用的配置提取成一个混入对象&lt;/p&gt;
&lt;p&gt;使用方式:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;定义混合：在外部创建 js 文件并且引入 比如:&lt;/p&gt;
&lt;p&gt;const hunhe = {&lt;/p&gt;
&lt;p&gt;​	data(){}&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第二部使用混入，例如&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;全局混入：Vue.mixin (xxx)&lt;/li&gt;
&lt;li&gt;局部混入:mixins:[‘xxx’]&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;插件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#插件&#34;&gt;#&lt;/a&gt; 插件&lt;/h4&gt;
&lt;p&gt;功能：增强 Vue&lt;/p&gt;
&lt;p&gt;本质：包含 install 方法的一个对象，install 方法的第一个参数是 Vue，第二个以后的参数是插件使用者传递的数据&lt;/p&gt;
&lt;p&gt;定义插件:&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-javascript&#34; data-language=&#34;javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; plugins &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
    	&lt;span class=&#34;token comment&#34;&gt;//添加全局过滤器&lt;/span&gt;
      	&lt;span class=&#34;token comment&#34;&gt;//添加全局指令&lt;/span&gt;
      &lt;span class=&#34;token comment&#34;&gt;//配置全局混入&lt;/span&gt;
      &lt;span class=&#34;token comment&#34;&gt;//添加实例方法&lt;/span&gt;
  &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;default&lt;/span&gt; plugins&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;使用插件: Vue.use (‘xxx’)&lt;/p&gt;
&lt;h4 id=&#34;scoped样式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#scoped样式&#34;&gt;#&lt;/a&gt; scoped 样式&lt;/h4&gt;
&lt;p&gt;作用：让样式在局部生效，防止冲突&lt;/p&gt;
&lt;p&gt;写法:  &lt;code&gt;&amp;lt;style scoped&amp;gt; &amp;lt;/style&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;数据之间的基础传输&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数据之间的基础传输&#34;&gt;#&lt;/a&gt; 数据之间的&lt;strong&gt;基础&lt;/strong&gt;传输&lt;/h4&gt;
&lt;p&gt;传递给下级组件：通过 props 接受数据，&lt;/p&gt;
&lt;p&gt;传递给上级组件：通过父组件定义函数，传入子组件，子组件通过 props 得到传入的函数，通过调用函数返回值&lt;/p&gt;
&lt;h4 id=&#34;组件化编码流程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#组件化编码流程&#34;&gt;#&lt;/a&gt; 组件化编码流程&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;拆分静态组件：组件要按照功能点拆分，命名不要和 html 元素冲突&lt;/li&gt;
&lt;li&gt;实现动态组件：考虑好数据的存放位置，数据是一个组件在用，还是一些组件在用
&lt;ol&gt;
&lt;li&gt;一个组件在用：放在组件自身&lt;/li&gt;
&lt;li&gt;一些组件在用：放在共同的父组件身上&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;props使用于&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#props使用于&#34;&gt;#&lt;/a&gt; props 使用于&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;父组件到子组件通信&lt;/li&gt;
&lt;li&gt;子组件到父组件通信 (通过父组件向子组件传递函数)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;v-model 不能绑定 props 传送过来的值，因为 props 不可以修改&lt;/p&gt;
&lt;h4 id=&#34;浏览器本地存储&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#浏览器本地存储&#34;&gt;#&lt;/a&gt; 浏览器本地存储&lt;/h4&gt;
&lt;h5 id=&#34;localstorage&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#localstorage&#34;&gt;#&lt;/a&gt; localstorage&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;localstorage.setItem(key,value)&lt;/code&gt; : 保存数据，且数据为键值对形式，key 和 value 都必须是字符串&lt;/li&gt;
&lt;li&gt;&lt;code&gt;localstorage.getItem(key)&lt;/code&gt; : 读取数据&lt;/li&gt;
&lt;li&gt;&lt;code&gt;localstorage.removeItem(key,value)&lt;/code&gt; : 删除数据&lt;/li&gt;
&lt;li&gt;&lt;code&gt;localstorage.clear()&lt;/code&gt; : 清空所有数据&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;json对象和字符串相互转换&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#json对象和字符串相互转换&#34;&gt;#&lt;/a&gt; JSON 对象和字符串相互转换&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JSON.parse(String)&lt;/code&gt; :json 字符串转对象&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JSON.stringify(Object)&lt;/code&gt; :json 对象转字符串&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;sessionstorage&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#sessionstorage&#34;&gt;#&lt;/a&gt; sessionstorage&lt;/h5&gt;
&lt;p&gt;跟 localstorage 的 Api 相同&lt;/p&gt;
&lt;h5 id=&#34;不同点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#不同点&#34;&gt;#&lt;/a&gt; 不同点&lt;/h5&gt;
&lt;p&gt;localStorage 一直存储在浏览器&lt;/p&gt;
&lt;p&gt;sessionstorage 关闭浏览器数据就消失&lt;/p&gt;
&lt;h4 id=&#34;组件自定义事件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#组件自定义事件&#34;&gt;#&lt;/a&gt; 组件自定义事件&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;一种组件间的通信方式，适用于 &lt;strong&gt;子组件 ===&amp;gt; 父组件&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第二种方式，在父组件中：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;&amp;lt;Demo ref=&#34;xxx&#34;/&amp;gt;
.......
mounted () {
	this.$ref.xxx.$on(&#39;自定义事件&#39;,this.test)
}&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果想让自定义时间只能触发一次，可以使用 &lt;code&gt;once&lt;/code&gt;  修饰符，或者 &lt;code&gt;$once&lt;/code&gt;  方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;触发自定义事件: &lt;code&gt;this.$emit(&#39;自定义事件&#39;,数据)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;解绑自定义事件: &lt;code&gt;this.$off(&#39;自定义事件&#39;)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;组件上也可以绑定原生 DOM 事件，需要使用 &lt;code&gt;native&lt;/code&gt;  修饰符&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;注意：通过 this.&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;f&lt;/mi&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;.&lt;/mi&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;.&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;refs.xxx.&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8888799999999999em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.10764em;&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;on (‘自定义事件’, 回调函数) 绑定自定义事件时，回调&lt;strong&gt;要么配置在 methods 中，要么用箭头函数&lt;/strong&gt;，否则 this 指向会出问题！&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;全局事件总线globaleventbus&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#全局事件总线globaleventbus&#34;&gt;#&lt;/a&gt; 全局事件总线 (GlobalEventBus)&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;可以实现任意&lt;strong&gt;组件之间的通信&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安装全局事件总线:&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-javascript&#34; data-language=&#34;javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Vue&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;token operator&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;...&lt;/span&gt;
	&lt;span class=&#34;token function&#34;&gt;beforecreate&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;token class-name&#34;&gt;Vue&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;prototype&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;$bus &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt; 
	&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
	&lt;span class=&#34;token operator&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用全局事件总线:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;接受数据：A 组件想接受数据，则在 A 组件中给 $bus 绑定自定义事件，事件的&lt;strong&gt;回调在 A 组件自身，&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;methods() {
	demo(data){......}
}
......
mounted() {
	this.$bus.$on(&#39;xxx&#39;,this.demo)
}&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;提供数据:this.&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;b&lt;/mi&gt;&lt;mi&gt;u&lt;/mi&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;.&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;bus.&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.69444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;emit (‘xxx’, 数据)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;最好在 beforeDestroy 钩子中，用 $off 解绑&lt;strong&gt;当前组件所用到的&lt;/strong&gt;事件&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;消息订阅与发布_pubsub&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#消息订阅与发布_pubsub&#34;&gt;#&lt;/a&gt; 消息订阅与发布_pubsub&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;一种组件间通信的方式，适用于&lt;strong&gt;任意组件间通信&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用步骤:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;安装 pubsub: &lt;code&gt;npm i pubsub-js&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;引入:  &lt;code&gt;import pubsub from &#39;pubsub-js&#39;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;接受数据: A 组件想接收数据，则在 A 组件中订阅消息，订阅的&lt;strong&gt;回调在 A 组件自身&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-js&#34; data-language=&#34;js&#34;&gt;&lt;code class=&#34;language-js&#34;&gt;&lt;span class=&#34;token function&#34;&gt;methods&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;token function&#34;&gt;demo&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;msgName&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;data&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;token operator&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;token function&#34;&gt;mounted&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;pubId &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; pubsub&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;subscribe&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;xxx&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;demo&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;//订阅消息&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;提供数据:  &lt;code&gt;pubsub.public(&#39;xxx&#39;,数据)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;最好在 beforeDestroy 钩子中，用 Pubsub.unsubscibe (pubId) 取消订阅&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;nexttick&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#nexttick&#34;&gt;#&lt;/a&gt; nextTick&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;语法:  &lt;code&gt;this.$nextTick(function () { 代码})&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;作用：在下一次 DOM 更新结束后执行其指定的回调函数&lt;/li&gt;
&lt;li&gt;什么时候用：当改变数据后，要基于更新后的新 DOM 进行某些操作时，要在 nextTick 所指定的回调函数中执行&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;过渡与动画&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#过渡与动画&#34;&gt;#&lt;/a&gt; 过渡与动画&lt;/h4&gt;
&lt;p&gt;暂放&lt;/p&gt;
&lt;h3 id=&#34;vue中的ajax&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#vue中的ajax&#34;&gt;#&lt;/a&gt; Vue 中的 ajax&lt;/h3&gt;
&lt;h4 id=&#34;vue脚手架配置代理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#vue脚手架配置代理&#34;&gt;#&lt;/a&gt; Vue 脚手架配置代理&lt;/h4&gt;
&lt;h5 id=&#34;方法一&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#方法一&#34;&gt;#&lt;/a&gt; 方法一&lt;/h5&gt;
&lt;p&gt;​	在 Vue.config.js 中添加如下配置:&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-javascript&#34; data-language=&#34;javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt;devServer&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
	proxy&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;http://localhost:5000&#34;&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;说明:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1. 优点:配置简单,请求资源时直接发给前端(8080)即可
1. 缺点:不能配置多个代理,不能灵活的控制请求是否走代理.
1. 工作方式:若按照上述配置代理,当请求了前端不存在的资源时,那么该请求会转发给服务器(优先匹配前端资源)
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;方法二&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#方法二&#34;&gt;#&lt;/a&gt; 方法二&lt;/h5&gt;
&lt;p&gt;编写 Vue.config.js 配置具体代理规则:&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-javascript&#34; data-language=&#34;javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt;moduel&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;exports &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
	devServer&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
		proxy&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
			&lt;span class=&#34;token string&#34;&gt;&#39;/api1&#39;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;//匹配所有以&#39;/api1/开头的请求路径&lt;/span&gt;
				target&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;http://localhost:5000&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;//代理目标的基础路径&lt;/span&gt;
                changeOrigin&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
                pathRewrite&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;^api1&#39;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
			&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;token string&#34;&gt;&#39;/api2&#39;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;//匹配所有以&#39;/api2/开头的请求路径&lt;/span&gt;
				target&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;http://localhost:5000&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;//代理目标的基础路径&lt;/span&gt;
                changeOrigin&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
                pathRewrite&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;^api2&#39;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
			&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
		&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;说明:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1. 优点：可以配置多个代理，且可以灵活的控制请求是否走代理。
1. 缺点：配置略微繁琐，请求资源时必须加前缀
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;vue项目中常用的ajax库&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#vue项目中常用的ajax库&#34;&gt;#&lt;/a&gt; vue 项目中常用的 ajax 库&lt;/h4&gt;
&lt;h5 id=&#34;axios库使用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#axios库使用&#34;&gt;#&lt;/a&gt; axios 库使用&lt;/h5&gt;
&lt;p&gt;安装  &lt;code&gt;npm i axios&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-javascript&#34; data-language=&#34;javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt;&lt;span class=&#34;token comment&#34;&gt;//先引入&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; axios &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;axios&#39;&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;//使用&lt;/span&gt;
  axios&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token template-string&#34;&gt;&lt;span class=&#34;token template-punctuation string&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;api&lt;/span&gt;&lt;span class=&#34;token template-punctuation string&#34;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;
                &lt;span class=&#34;token parameter&#34;&gt;response&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
                    
                &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
                &lt;span class=&#34;token parameter&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
                    
                &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;vue-resource&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#vue-resource&#34;&gt;#&lt;/a&gt; vue-resource&lt;/h5&gt;
&lt;p&gt;vue 自身的插件库，也封装了 ajax, 现在不常用 推荐还是使用 axios&lt;/p&gt;
&lt;p&gt;&lt;code&gt;this.$http.get(&#39; &#39;).then( Response =&amp;gt; { }, error =&amp;gt; {})&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;slot插槽&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#slot插槽&#34;&gt;#&lt;/a&gt; Slot 插槽&lt;/h4&gt;
&lt;h5 id=&#34;默认插槽&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#默认插槽&#34;&gt;#&lt;/a&gt; 默认插槽&lt;/h5&gt;
&lt;p&gt;slot 标签中包含的就是父组件中传入子组件标签中的内容&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;//父组件中
&amp;lt;Category&amp;gt;
	&amp;lt;h1&amp;gt; 你好 &amp;lt;h1&amp;gt;
&amp;lt;/Category&amp;gt;

//Category标签中
&amp;lt;slot&amp;gt;&amp;lt;/slot&amp;gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;具名插槽&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#具名插槽&#34;&gt;#&lt;/a&gt; 具名插槽&lt;/h5&gt;
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;//父组件中
&amp;lt;Category&amp;gt;
	&amp;lt;h1 slot=&#34;demo&#34;&amp;gt; 你好 &amp;lt;h1&amp;gt;
	&amp;lt;h1 slot=&#34;demo2&#34;&amp;gt; 你好啊 &amp;lt;h1&amp;gt;
&amp;lt;/Category&amp;gt;

//Category标签中
&amp;lt;slot name=&#34;demo&#34;&amp;gt;&amp;lt;/slot&amp;gt;
&amp;lt;slot name=&#34;demo2&#34;&amp;gt;&amp;lt;/slot&amp;gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;slot&lt;/code&gt;  与 &lt;code&gt;name&lt;/code&gt;  相&lt;strong&gt;对应&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;template 标签中用 v-slot&lt;/p&gt;
&lt;h5 id=&#34;作用域插槽&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#作用域插槽&#34;&gt;#&lt;/a&gt; 作用域插槽&lt;/h5&gt;
&lt;p&gt;数据在组件自身，但根据数据生成的机构需要组件的使用者来决定&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;&amp;lt;Category&amp;gt;
&amp;lt;template scope=&#34;nihao&#34;&amp;gt;
	&amp;lt;h1&amp;gt; {{nihao.xxx}} &amp;lt;h1&amp;gt;  //相当于 games.xxx
	&amp;lt;h1&amp;gt; 你好啊 &amp;lt;h1&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;/Category&amp;gt;

//Category标签中
&amp;lt;slot :game=&#34;games&#34;&amp;gt;&amp;lt;/slot&amp;gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;vuex&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#vuex&#34;&gt;#&lt;/a&gt; Vuex&lt;/h3&gt;
&lt;p&gt;在 Vue 中实现集中式数据管理的一个 Vue&lt;strong&gt; 插件&lt;/strong&gt;，对 Vue 应用中多个组件的共享状态进行集中式的管理 (读 / 写), 也是一种组件间通信的方式，且使用于&lt;strong&gt;任何组件间&lt;/strong&gt;通信&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/vuex.png&#34; alt=&#34;vuex&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;搭建vuex环境&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#搭建vuex环境&#34;&gt;#&lt;/a&gt; 搭建 Vuex 环境&lt;/h4&gt;
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;//在main.js中 传入store

import Vue from &#34;vue&#34;;
import App from &#34;./App.vue&#34;;
import store from &#34;./store/index&#34;;

new Vue({
  render: (h) =&amp;gt; h(App),
  store,
  beforeCreate() {
    Vue.prototype.$bus = this;
  },
}).$mount(&#34;#app&#34;);

//在store文件夹中store.js中

import Vue from &#34;vue&#34;;
import Vuex from &#34;vuex&#34;;

Vue.use(Vuex);
//准备 actions 用于响应组件中的动作

const actions = {} //响应组件中的数据
const mutations = {} //用于操作数据
const state = {} //存储数据

const store = new Vuex.Store({actions,mutations,state}) //创建store

export default store&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;基本使用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#基本使用&#34;&gt;#&lt;/a&gt; 基本使用&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;组件读取 Vuex 中的数据:  &lt;code&gt;$store.state.sum&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;组件修改 vuex 中的数据:  &lt;code&gt;$store.dispatch(&#39;action中的方法名&#39;,数据)&lt;/code&gt;  或者 &lt;code&gt;$store.commit(&#39;mutations中的方法名&#39;,数据)&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;getters配置项&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#getters配置项&#34;&gt;#&lt;/a&gt; getters 配置项&lt;/h4&gt;
&lt;p&gt;用于对 state 中的数据进行加工，相当于 vuex 中的计算属性&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-js&#34; data-language=&#34;js&#34;&gt;&lt;code class=&#34;language-js&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; getters &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;token function&#34;&gt;bigSum&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;state&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; state&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sum &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
	&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;mapstate与mapgetters&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#mapstate与mapgetters&#34;&gt;#&lt;/a&gt; mapState 与 mapGetters&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;mapState&lt;/strong&gt; 方法：帮助映射 state 中的数据成为计算属性&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;computed: {
	//对象写法
	...mapState({sum:&#39;sum&#39;})
	//数组写法
	...mapState([&#39;sum&#39;])
}&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;mapGetters 方法：帮助我们映射 getters 中的数据成为计算属性&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;computed: {
	//对象写法
	...mapGetters({bigSum:&#39;bigSum&#39;})
	//数组写法
	...mapGetters([&#39;bigSum&#39;])
}&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;mapactions和mapmutations&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#mapactions和mapmutations&#34;&gt;#&lt;/a&gt; mapActions 和 mapMutations&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;mapActions&lt;/code&gt; : 帮助我们生成与 &lt;code&gt;actions&lt;/code&gt;  对话的方法，即：包含 &lt;code&gt;$store.dispatch(xxx)&lt;/code&gt;  的函数&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;methods: {
	//对象
	mapActions({increment:&#34;jia&#34;})
	//数组
	mapActions([&#39;jia&#39;])
}&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;mapMutations&lt;/code&gt; : 帮助生成与 &lt;code&gt;mutations&lt;/code&gt;  对话的方法&lt;/p&gt;
&lt;p&gt;类似 略&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;，现在参数通过在标签中事件触发传递 &lt;code&gt;@click=&#34;increment(n)&#34;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;vue模块化&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#vue模块化&#34;&gt;#&lt;/a&gt; Vue 模块化&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;目的：让代码更好维护，让多种数据分类更加准确&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;修改 store.js&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;const countAbout = {
	namespaced:true,
	state:{}.
	actions:{},
	mutations:{},
	getters:{
	
	}
}

const store = new Vuex.Store({moduels:{countAbout}})&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;开启命名空间后，组件中读取 state 数据&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;//方式1 自己读取
this.$store.state.personAbout.list
//方式二：借助mapState读取
...mapState(&#39;personAbout&#39;,[&#39;sum&#39;,&#39;school&#39;,&#39;subject&#39;])&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;开启命名空间后读取 getters 中的数据&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;//方式1 自己读取
this.$store.getters[&#39;personAbout/firstPersonName&#39;]
//方式二：借助mapGetters
...mapGetters(&#39;countAbout&#39;,[&#39;bigSum&#39;])&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;开启命名空间后，组件中调用 dispatch&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;//方式1 自己直接dispatch
this.$store.dispatch(&#39;personAbout/addPerson&#39;,person)
//方式二：借助mapActions读取
...mapActions(&#39;countAbout&#39;,[&#39;jia&#39;])&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;开启命名空间后，组件中调用 commit\&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;//方式1 自己直接commit
this.$store.commit(&#39;personAbout/ADD_PERSON&#39;,person)
//方式二：借助mapActions读取
...mapMutations(&#39;mapMutations&#39;,[&#39;JIA&#39;])&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;vue-router路由&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#vue-router路由&#34;&gt;#&lt;/a&gt; Vue-Router 路由&lt;/h3&gt;
&lt;p&gt;Vue 的一个插件库，实现 Single Page Application&lt;/p&gt;
&lt;h4 id=&#34;1基本使用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1基本使用&#34;&gt;#&lt;/a&gt; 1. 基本使用&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;安装 &lt;code&gt;vue-router&lt;/code&gt; , 命令:  &lt;code&gt;npm i vue-router&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;应用插件  &lt;code&gt;Vue.use(VueRouter)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;编写 router 配置项&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-javascript&#34; data-language=&#34;javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt;&lt;span class=&#34;token comment&#34;&gt;//创建整个应用的路由&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; VueRouter &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;vue-router&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; AboutView &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;../components/AboutView&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; HomeView &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;../components/HomeView&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;//创建一个路由器&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;VueRouter&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
  routes&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;
    &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
      path&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;/about&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
      component&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; AboutView&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
      path&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;/home&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
      component&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; HomeView&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;实现切换&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;router-link class=&#34;list-group-item&#34; active-class=&#34;active&#34; to=&#34;/about&#34;&amp;gt;About&amp;lt;/router-link&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;指定展示位置&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;router-view&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;2几个注意点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2几个注意点&#34;&gt;#&lt;/a&gt; 2. 几个注意点&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;路由组件通常放在 pages 文件夹，一般组件通常存放在 components 文件夹&lt;/li&gt;
&lt;li&gt;通过切换，隐藏了的路由组件，默认是被销毁了&lt;/li&gt;
&lt;li&gt;每个组件都有自己的 $route 属性，里面存储着自己的路由信息&lt;/li&gt;
&lt;li&gt;整个应用只有一个 router, 可以通过组件的 $router 属性获取&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;3嵌套路由&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3嵌套路由&#34;&gt;#&lt;/a&gt; 3. 嵌套路由&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;配置路由规则，使用&lt;strong&gt; children&lt;/strong&gt; 配置项&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;routes:[
	{
		path:&#39;/home&#39;
		component:AboutView,
		children:[
			{
				path:&#39;news&#39;,
				component:NewsView
			}
		]
	}
]&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;跳转 (要写&lt;strong&gt;完整路径&lt;/strong&gt;)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;router-link to=&#34;/home/news&#34;&amp;gt; &amp;lt;router-link&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;4路由传参&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4路由传参&#34;&gt;#&lt;/a&gt; 4. 路由传参&lt;/h4&gt;
&lt;h5 id=&#34;41-query参数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#41-query参数&#34;&gt;#&lt;/a&gt; 4.1 query 参数&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;传递参数&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;跳转并携带query参数,to的字符串写法
&amp;lt;router-link :to=&#34;/home/message/detail?id=666&amp;amp;title=你好&#34;&amp;gt;跳转 &amp;lt;router-link&amp;gt;

to的对象写法
&amp;lt;router-link :to=&#34;{
	path:&#39;/home/message/detail&#39;,
	query:{
		id:666,
		title:&#39;你好&#39;,
	}
}&#34;&amp;gt;跳转 &amp;lt;router-link&amp;gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;接收参数&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;$route.query.id
$route.query.title&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;不打扰路由器的配置&lt;/strong&gt;&lt;/p&gt;
&lt;h5 id=&#34;42-命名路由&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#42-命名路由&#34;&gt;#&lt;/a&gt; 4.2 命名路由&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;作用：简化路由的跳转&lt;/li&gt;
&lt;li&gt;如何使用:
&lt;ol&gt;
&lt;li&gt;给路由加上 &lt;code&gt;name:xxx&lt;/code&gt;  属性，给路由命名&lt;/li&gt;
&lt;li&gt;在跳转的 to 的对象写法中 不写 path 直接写 &lt;code&gt;name:xxx&lt;/code&gt;  即可实现跳转&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;43-params参数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#43-params参数&#34;&gt;#&lt;/a&gt; 4.3 params 参数&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;配置路由，声明接受 params 参数&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;routes:[
	{
		path:&#39;/home&#39;
		component:AboutView,
		children:[
			{
				path:&#39;news/:id/:title&#39;,
				component:NewsView
			}
		]
	}
]&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;传递参数&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;跳转并携带query参数,to的字符串写法
&amp;lt;router-link :to=&#34;/home/message/detail/666/你好&#34;&amp;gt;跳转 &amp;lt;router-link&amp;gt;

to的对象写法
&amp;lt;router-link :to=&#34;{
	name:xxx      
	params:{
		id:666,
		title:&#39;你好&#39;,
	}
}&#34;&amp;gt;跳转 &amp;lt;router-link&amp;gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;&lt;u&gt;使用 params 传递参数 不能使用 path 直接使用 name&lt;/u&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;接受参数&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;$route.params.id
$route.params.title&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;44-路由的props配置&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#44-路由的props配置&#34;&gt;#&lt;/a&gt; 4.4 路由的 props 配置&lt;/h5&gt;
&lt;p&gt;让路由组件更加方便地收到参数&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;props 的第一种写法 (对象)&lt;/p&gt;
&lt;p&gt;该写法中的所有 key-value 都会以 props 的形式传给 Detail 组件&lt;/p&gt;
&lt;p&gt;死数据 不常用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;props 的第二种写法，值为布尔值&lt;/p&gt;
&lt;p&gt;若布尔值为真，就会把该路由组件收到的所有 params 组件以 props 的形式传给组件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;props 的第三种写法，值为函数&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;props($route) {
	return {id:$route.query.id,title:$route.query.title}
}

props({query:{id,title}})
{
 return {id,title}
}&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;5router-link的replace属性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#5router-link的replace属性&#34;&gt;#&lt;/a&gt; 5.router-link 的 replace 属性&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;作用：控制路由跳转时操作浏览器历史记录的模式&lt;/li&gt;
&lt;li&gt;浏览器历史记录有 2 种模式  &lt;code&gt;push&lt;/code&gt;  追加和 &lt;code&gt;replace&lt;/code&gt;  替换 默认为 &lt;code&gt;push&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在 &lt;code&gt;&amp;lt;router-link&amp;gt;&amp;lt;/router-link&amp;gt;&lt;/code&gt;  标签加上 replace 则可以更改为 replace 模式&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;6-编程式路由导航&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#6-编程式路由导航&#34;&gt;#&lt;/a&gt; 6. 编程式路由导航&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;作用：不借助 &lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt;  进行路由跳转，让路由跳转更灵活&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;编码:&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-js&#34; data-language=&#34;js&#34;&gt;&lt;code class=&#34;language-js&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;$router&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
	name&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;xxx&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
    params&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
        
    &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;$router&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;replace&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
    name&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;xxx&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
    params&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
        
    &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;$router&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;forward&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;$router&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;back&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;$router&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;go&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;7-缓存路由组件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#7-缓存路由组件&#34;&gt;#&lt;/a&gt; 7. 缓存路由组件&lt;/h4&gt;
&lt;p&gt;让不展示的组件保持挂载，以保留其中的数据&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-html&#34; data-language=&#34;html&#34;&gt;&lt;code class=&#34;language-html&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;keep-alive&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;组件名&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;:include&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;[&lt;span class=&#34;token punctuation&#34;&gt;&#39;&lt;/span&gt;xxx&lt;span class=&#34;token punctuation&#34;&gt;&#39;&lt;/span&gt;,&lt;span class=&#34;token punctuation&#34;&gt;&#39;&lt;/span&gt;yyy&lt;span class=&#34;token punctuation&#34;&gt;&#39;&lt;/span&gt;]&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;router-link&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;router-link&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;keep-alive&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;8-两个新的生命周期钩子&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#8-两个新的生命周期钩子&#34;&gt;#&lt;/a&gt; 8. 两个新的生命周期钩子&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;路由组件独有&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;activated(){}&lt;/code&gt; : 组件被激活时调用&lt;/p&gt;
&lt;p&gt;&lt;code&gt;deactivated() {}&lt;/code&gt; : 组件失活时调用&lt;/p&gt;
&lt;h4 id=&#34;9路由守卫&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#9路由守卫&#34;&gt;#&lt;/a&gt; 9. 路由守卫&lt;/h4&gt;
&lt;h5 id=&#34;91-全局前置&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#91-全局前置&#34;&gt;#&lt;/a&gt; 9.1 全局前置&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;初始化的时候&lt;/strong&gt;调用&lt;/p&gt;
&lt;p&gt;每次&lt;strong&gt;切换路由前&lt;/strong&gt;调用&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-js&#34; data-language=&#34;js&#34;&gt;&lt;code class=&#34;language-js&#34;&gt;router&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;beforeEach&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;to&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;from&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;next&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;token comment&#34;&gt;// to 去哪个路由 to.path to.name&lt;/span&gt;
    &lt;span class=&#34;token comment&#34;&gt;// from 来自哪个路由 &lt;/span&gt;
    &lt;span class=&#34;token comment&#34;&gt;// next() 允许通行&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;meta:{isAuth:true}&lt;/code&gt; : 在路由器中 meta 中添加数据，表示是否需要鉴权&lt;/p&gt;
&lt;h5 id=&#34;92-全局后置&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#92-全局后置&#34;&gt;#&lt;/a&gt; 9.2 全局后置&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;初始化的时候&lt;/strong&gt;调用&lt;/p&gt;
&lt;p&gt;每次&lt;strong&gt;切换路由后&lt;/strong&gt;调用&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-js&#34; data-language=&#34;js&#34;&gt;&lt;code class=&#34;language-js&#34;&gt;router&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;afterEach&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;to&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;token comment&#34;&gt;// to 去哪个路由 to.path to.name&lt;/span&gt;
    &lt;span class=&#34;token comment&#34;&gt;// from 来自哪个路由 &lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;93-独享路由守卫&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#93-独享路由守卫&#34;&gt;#&lt;/a&gt; 9.3 独享路由守卫&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;beforeEneter: (to,from,next) =&amp;gt; {}&lt;/code&gt;&lt;/p&gt;
&lt;h5 id=&#34;94-组件内路由守卫&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#94-组件内路由守卫&#34;&gt;#&lt;/a&gt; 9.4 组件内路由守卫&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;beforeRouteEnter(to,from,next)&lt;/code&gt; : 进入该组件时被调用&lt;/p&gt;
&lt;p&gt;&lt;code&gt;beforeRouteLeave(to,from,next)&lt;/code&gt; : 离开该组件时被调用&lt;/p&gt;
&lt;h4 id=&#34;10-history和hash模式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#10-history和hash模式&#34;&gt;#&lt;/a&gt; 10. History 和 Hash 模式&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;mode:history&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;默认为 hash 模式 会带#&lt;/p&gt;
&lt;h3 id=&#34;基础模板作者学习时候用来构建最基本html文件的&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#基础模板作者学习时候用来构建最基本html文件的&#34;&gt;#&lt;/a&gt; 基础模板 (作者学习时候用来构建最基本 html 文件的)&lt;/h3&gt;
&lt;pre class=&#34;line-numbers language-html&#34; data-language=&#34;html&#34;&gt;&lt;code class=&#34;language-html&#34;&gt;&lt;span class=&#34;token doctype&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;!&lt;/span&gt;&lt;span class=&#34;token doctype-tag&#34;&gt;DOCTYPE&lt;/span&gt; &lt;span class=&#34;token name&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;html&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;lang&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;en&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;head&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;meta&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;charset&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;UTF-8&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;meta&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;http-equiv&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;X-UA-Compatible&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;IE=edge&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;meta&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;viewport&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;width=device-width, initial-scale=1.0&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;text/javascript&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;../js/vue.js&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token script&#34;&gt;&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;title&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;Document&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;title&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;head&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;body&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;root&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;

    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token script&#34;&gt;&lt;span class=&#34;token language-javascript&#34;&gt;
        &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; vm &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Vue&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;token function&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
                    
                &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
            methods&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
                
            &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
        vm&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;$mount&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;#root&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
    &lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;body&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;html&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://github.com/YogMas/YogMas.github.io/2021/11/06/css-xin/</guid>
            <title>Css新</title>
            <link>https://github.com/YogMas/YogMas.github.io/2021/11/06/css-xin/</link>
            <category>Css</category>
            <pubDate>Sat, 06 Nov 2021 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;css新&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#css新&#34;&gt;#&lt;/a&gt; CSS (新)&lt;/h1&gt;
&lt;p&gt;复习 (好吧 太久没用忘了 其实是重新学习过程) CSS 时记忆的笔记&lt;/p&gt;
&lt;h2 id=&#34;定位position&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#定位position&#34;&gt;#&lt;/a&gt; 定位 (position)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;static: 正常流定位&lt;/li&gt;
&lt;li&gt;relative: 相对定位&lt;/li&gt;
&lt;li&gt;absolute,fixed: 绝对定位&lt;/li&gt;
&lt;li&gt;sticky: 粘性定位&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;static正常流定位&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#static正常流定位&#34;&gt;#&lt;/a&gt; Static 正常流定位&lt;/h3&gt;
&lt;p&gt;按照从上到下文档刷新的方式，就是最默认的定位方式&lt;/p&gt;
&lt;h3 id=&#34;relative相对定位&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#relative相对定位&#34;&gt;#&lt;/a&gt; relative 相对定位&lt;/h3&gt;
&lt;p&gt;相对于原位置的定位，可以相对于原位置进行位置的移动&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;相对定位会保留原有的样式&lt;/strong&gt;，意思就是说相对定位移动后，原来那个位置的样式，不会被覆盖，可以理解为被隐藏了但是还在&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-css&#34; data-language=&#34;css&#34;&gt;&lt;code class=&#34;language-css&#34;&gt;&lt;span class=&#34;token property&#34;&gt;position&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;relative&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token property&#34;&gt;top&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
&lt;span class=&#34;token property&#34;&gt;left&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
&lt;span class=&#34;token property&#34;&gt;right&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
&lt;span class=&#34;token property&#34;&gt;bottom&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;absolute绝对定位&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#absolute绝对定位&#34;&gt;#&lt;/a&gt; absolute 绝对定位&lt;/h3&gt;
&lt;p&gt;absolute 是相对于上一个&lt;strong&gt;非 static 定位&lt;/strong&gt;的祖宗节点的位置&lt;/p&gt;
&lt;p&gt;意思就是说 absolute 会向上找，找到一个不会 static 定位的祖宗节点 (最上面是&lt;strong&gt; body&lt;/strong&gt;),top 相当于距离这个父节点顶部的距离，其他类似&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-css&#34; data-language=&#34;css&#34;&gt;&lt;code class=&#34;language-css&#34;&gt;&lt;span class=&#34;token property&#34;&gt;position&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;absolute&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token property&#34;&gt;top&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
&lt;span class=&#34;token property&#34;&gt;left&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
&lt;span class=&#34;token property&#34;&gt;right&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
&lt;span class=&#34;token property&#34;&gt;bottom&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;fixed固定定位&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#fixed固定定位&#34;&gt;#&lt;/a&gt; fixed 固定定位&lt;/h3&gt;
&lt;p&gt;fixed 是相对于&lt;strong&gt;整个视窗&lt;/strong&gt;的位移，也是固定不变的&lt;/p&gt;
&lt;h3 id=&#34;static粘性定位&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#static粘性定位&#34;&gt;#&lt;/a&gt; static 粘性定位&lt;/h3&gt;
&lt;p&gt;当粘性定位的盒子的&lt;strong&gt;真实位置&lt;/strong&gt;在视窗内部的时候，他是正常显示的，但是当他要脱离视窗的时候，他会像固定定位一样，导致不脱离视窗&lt;/p&gt;
&lt;h2 id=&#34;浮动&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#浮动&#34;&gt;#&lt;/a&gt; 浮动&lt;/h2&gt;
&lt;p&gt;块是会自动换行的，加上 float 之后，可以放在一行的会放在一行，一行无法放下时再进行换行&lt;/p&gt;
&lt;p&gt;新的未浮动块会在浮动块的上方而不是排布在后方，要排布在后方可以清除浮动块的影响 使用 clear&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-css&#34; data-language=&#34;css&#34;&gt;&lt;code class=&#34;language-css&#34;&gt;&lt;span class=&#34;token property&#34;&gt;float&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;left
&lt;span class=&#34;token property&#34;&gt;clear&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;left/right/both&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;flex布局&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#flex布局&#34;&gt;#&lt;/a&gt; flex 布局&lt;/h2&gt;
&lt;p&gt;弹性布局，也就是当拉伸视窗的时候，布局随着视窗的改变会自动变化&lt;/p&gt;
&lt;p&gt;定义在&lt;strong&gt;父节点盒子上&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;flex-direction&lt;/code&gt; ： 属性指定了内部元素是如何在 flex 容器中&lt;strong&gt;布局&lt;/strong&gt;的，&lt;strong&gt;定义了主轴的方向&lt;/strong&gt; (正方向或反方向)。
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;row&lt;/code&gt; :flex 容器的主轴被定义为与文本方向相同。 主轴起点和主轴终点与内容方向相同。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;row-reverse&lt;/code&gt; : 表现和 row 相同，但是置换了主轴起点和主轴终点。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;column&lt;/code&gt; :flex 容器的主轴和块轴相同。主轴起点与主轴终点和书写模式的前后点相同&lt;/li&gt;
&lt;li&gt;&lt;code&gt;column-reverse&lt;/code&gt; : 表现和 column 相同，但是置换了主轴起点和主轴终点&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flex-wrap&lt;/code&gt; : 指定 flex 元素&lt;strong&gt;单行显示还是多行显示&lt;/strong&gt;。如果允许换行，这个属性允许你控制行的堆叠方向。
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;nowrap&lt;/code&gt; : 默认值。不换行。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wrap&lt;/code&gt; : 换行，第一行在上方。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wrap-reverse&lt;/code&gt; : 换行，第一行在下方。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flex-flow&lt;/code&gt; : &lt;code&gt;flex-direction&lt;/code&gt;  和  &lt;code&gt;flex-wrap&lt;/code&gt;  的简写。默认值为： &lt;code&gt;row nowrap&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;justify-content&lt;/code&gt; : 属性定义了浏览器之间，如何分配顺着弹性容器主轴 (或者网格行轴) 的元素之间及其周围的空间。也就是&lt;strong&gt;控制横向对齐方式&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;flex-start&lt;/code&gt; ：默认值。左对齐。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flex-end&lt;/code&gt; ：右对齐。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;space-between&lt;/code&gt; ：左右两段对齐。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;space-around&lt;/code&gt; ：在每行上均匀分配弹性元素。相邻元素间距离相同。每行第一个元素到行首的距离和每行最后一个元素到行尾的距离将会是相邻元素之间距离的一半。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;space-evenly&lt;/code&gt; ：flex 项都沿着主轴均匀分布在指定的对齐容器中。相邻 flex 项之间的间距，主轴起始位置到第一个 flex 项的间距，主轴结束位置到最后一个 flex 项的间距，都完全一样。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;align-items&lt;/code&gt; ：控制&lt;strong&gt;纵轴 (交叉轴&lt;/strong&gt;对齐)
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;flex-start&lt;/code&gt; ：元素向主轴起点对齐。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flex-end&lt;/code&gt; ：元素向主轴终点对齐。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;center&lt;/code&gt; ：元素在侧轴居中。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stretch&lt;/code&gt; ：弹性元素被在侧轴方向被拉伸到与容器相同的高度或宽度。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;align-content&lt;/code&gt; : 与 &lt;code&gt;align-items&lt;/code&gt;  类似但是有以下区别
&lt;ul&gt;
&lt;li&gt;前者会均匀分布，后者会使所有行紧贴在一起&lt;/li&gt;
&lt;li&gt;当只有一行的时候，前者仍然会居中，后者会失去居中&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;定义在&lt;strong&gt; flex 盒子内部元素中&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;order&lt;/code&gt; : 定义 &lt;code&gt;flex&lt;/code&gt;  项目的顺序，值越小越靠前。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;flex-grow&lt;/code&gt; :CSS 属性 flex-grow CSS 设置 flex 项主尺寸 的 flex 增长系数。&lt;strong&gt;负值无效，默认为 0。&lt;/strong&gt; &lt;strong&gt;也就是当视窗变大的时候 块也等比例变大&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;flex-shrink&lt;/code&gt; : 属性指定了 flex 元素的收缩规则。flex 元素仅在默认宽度之和大于容器的时候才会发生收缩，其收缩的大小是依据 flex-shrink 的值。&lt;strong&gt;负值无效，默认为 1。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;flex-basis&lt;/code&gt; : 设置默认宽度，&lt;strong&gt; 优先级大于默认 width&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;flex&lt;/code&gt; : &lt;code&gt;flex-grow&lt;/code&gt; 、 &lt;code&gt;flex-shrink&lt;/code&gt; 、 &lt;code&gt;flex-basis&lt;/code&gt;  的缩写。&lt;/p&gt;
&lt;p&gt;常用取值： &lt;code&gt;flex: 1 1 auto&lt;/code&gt;        &lt;code&gt;flex: 0 0 auto&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://github.com/YogMas/YogMas.github.io/2021/11/06/css1/</guid>
            <title>Css-first</title>
            <link>https://github.com/YogMas/YogMas.github.io/2021/11/06/css1/</link>
            <category>Css</category>
            <pubDate>Sat, 06 Nov 2021 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;css1&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#css1&#34;&gt;#&lt;/a&gt; css1&lt;/h1&gt;
&lt;h3 id=&#34;the-article-from-yogmas-also-sam&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#the-article-from-yogmas-also-sam&#34;&gt;#&lt;/a&gt; the article from yogmas also sam&lt;/h3&gt;
&lt;h4 id=&#34;1css基本架构&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1css基本架构&#34;&gt;#&lt;/a&gt; 1.css 基本架构&lt;/h4&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;html&amp;gt; 
&amp;lt;head&amp;gt;
&amp;lt;style&amp;gt;&amp;lt;/style&amp;gt;
 &amp;lt;/head&amp;gt;
 &amp;lt;body&amp;gt;&amp;lt;/body&amp;gt;
 &amp;lt;/html&amp;gt;
 style为css放置位置
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;前期学习先将 css 放置在 html 文件夹里面后期会单独利用 css 文件来写 css&lt;/p&gt;
&lt;h4 id=&#34;2选择器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2选择器&#34;&gt;#&lt;/a&gt; 2. 选择器&lt;/h4&gt;
&lt;h6 id=&#34;标签选择器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#标签选择器&#34;&gt;#&lt;/a&gt; 标签选择器&lt;/h6&gt;
&lt;blockquote&gt;
&lt;p&gt;选择器 {样式}&lt;br&gt;
 给谁改样式 {改什么样式}&lt;br&gt;
eg.p { color: red;&lt;br&gt;
font-size: 12px; }&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;标签选择器为大类选择，同一类标签全部都会被 css 修改&lt;/p&gt;
&lt;h6 id=&#34;类选择器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#类选择器&#34;&gt;#&lt;/a&gt; 类选择器&lt;/h6&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;.id {} 
eg .red {color:red;}
&amp;lt;# class=&#34;id&#34;&amp;gt;  &amp;lt;/#&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;这里的 ID 还需要与 html 中的 class 相互匹配 #可以替换成任何你想选择的类别 id 可以替换成任何你命名的字母或者单词&lt;br&gt;
&lt;strong&gt;类选择器口诀：样式点定义  结构类 (class) 调用  一个或多个 开发最常用&lt;/strong&gt;&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IQmbIf&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/06/IQmbIf.png&#34; alt=&#34;IQmbIf.png&#34;&gt;&lt;/a&gt;&lt;br&gt;
 同时类选择器可以有多个 ID 都会起作用 中间用空格隔开 例如&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IQmHdP&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/06/IQmHdP.png&#34; alt=&#34;IQmHdP.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h6 id=&#34;id选择器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#id选择器&#34;&gt;#&lt;/a&gt; id 选择器&lt;/h6&gt;
&lt;p&gt;id 选择器与类选择器相似，不过 ID 选择器只能使用一次 并且一个 ID 只能调用一次&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;#ID {}
&amp;lt;XX id=&#34;&#34;&amp;gt;  &amp;lt;/XX&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h6 id=&#34;通配符选择器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#通配符选择器&#34;&gt;#&lt;/a&gt; 通配符选择器&lt;/h6&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;* { }
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;通配符 简而言之就是对所有元素和类都有作用，后期主要用来先去除掉浏览器自身所带的一些 css 属性方便我们后续进行 css 操作&lt;/p&gt;
&lt;h4 id=&#34;3css字体属性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3css字体属性&#34;&gt;#&lt;/a&gt; 3.CSS 字体属性&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IQmjzQ&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/06/IQmjzQ.png&#34; alt=&#34;IQmjzQ.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h6 id=&#34;字体系列&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#字体系列&#34;&gt;#&lt;/a&gt; 字体系列&lt;/h6&gt;
&lt;blockquote&gt;
&lt;p&gt;font-family:’   &#39;;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;通常会根据团队的要求来确定书写的字体 一般来说是微软雅黑也就是 microsoft YaHei 当然也可以有其他的一系列字体&lt;br&gt;
比如在后期的&lt;strong&gt;字体图标&lt;/strong&gt;中就需要修改 font-family&lt;/p&gt;
&lt;h6 id=&#34;字体大小&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#字体大小&#34;&gt;#&lt;/a&gt; 字体大小&lt;/h6&gt;
&lt;blockquote&gt;
&lt;p&gt;font-size:;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;顾名思义，是修改字体的大小，不过需要注意的是这后面不能跟单独的数字 这样是没有效果的 需要跟单位 px&lt;/p&gt;
&lt;h6 id=&#34;字体粗细&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#字体粗细&#34;&gt;#&lt;/a&gt; 字体粗细&lt;/h6&gt;
&lt;blockquote&gt;
&lt;p&gt;font-weight:  ;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这里需要谨记 2 个数字&lt;br&gt;
 700: 加粗&lt;br&gt;
 400: 正常大小&lt;br&gt;
 font-weight 后面跟数字，可以根据需要来进行调整 不过一般都是 700 和 400 之间切换&lt;/p&gt;
&lt;h6 id=&#34;文字样式风格&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#文字样式风格&#34;&gt;#&lt;/a&gt; 文字样式风格&lt;/h6&gt;
&lt;blockquote&gt;
&lt;p&gt;font-style: ;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一般运用的都 italic (倾斜) 和 normal (正常) 两种&lt;br&gt;
实际运用场景：&lt;br&gt;
1. 用来修改需要倾斜的汉字&lt;br&gt;
 2. 当没有标签可用时，可以用 em 倾斜标签先将汉字包括，在通过 font-style:normal；将倾斜属性去掉&lt;/p&gt;
&lt;h6 id=&#34;字体复合属性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#字体复合属性&#34;&gt;#&lt;/a&gt; 字体复合属性&lt;/h6&gt;
&lt;p&gt;通过简写的方式来节约代码 (不过有顺序要求)&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;font: font-style  font-weight  font-size/line-height  font-family;
eg:font: italic 700 16px &#39;Microsoft yahei&#39;;
 前面两个可以省略，但是后面连个一定要写
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;4文本外观属性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4文本外观属性&#34;&gt;#&lt;/a&gt; 4. 文本外观属性&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IQn9Zq&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/06/IQn9Zq.png&#34; alt=&#34;IQn9Zq.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h6 id=&#34;颜色&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#颜色&#34;&gt;#&lt;/a&gt; 颜色&lt;/h6&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;color: &#34;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;这里 color 后面所带有 4 种写法&lt;br&gt;
 1. 直接加颜色例如 red,blue&lt;br&gt;
2. 加颜色编号，主要这里 #必须加例如 #123456 (常用) 后期通常会用吸色笔 然后负值颜色编号&lt;br&gt;
 3.rgb (X,X,X) 三色的搭配&lt;br&gt;
 4.rgba (X,X,X,G) 这个主要是用来设置颜色的透明度 G 取值从 0~1&lt;br&gt;
 用来设置颜色的透明度&lt;/p&gt;
&lt;h6 id=&#34;文字对齐&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#文字对齐&#34;&gt;#&lt;/a&gt; 文字对齐&lt;/h6&gt;
&lt;blockquote&gt;
&lt;p&gt;text-align: ;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;设置文字的对齐方式，&lt;br&gt;
left,center,right&lt;/p&gt;
&lt;h6 id=&#34;装饰文本&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#装饰文本&#34;&gt;#&lt;/a&gt; 装饰文本&lt;/h6&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;text-deroration: ;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;可加元素:&lt;br&gt;
line-through 删除线&lt;br&gt;
 overline 上划线&lt;br&gt;
&lt;strong&gt; none&lt;/strong&gt; (常用) 通常用来配合通配符选择器来取消 a 的下划线&lt;/p&gt;
&lt;h6 id=&#34;文本缩进&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#文本缩进&#34;&gt;#&lt;/a&gt; 文本缩进&lt;/h6&gt;
&lt;blockquote&gt;
&lt;p&gt;text-indent: ;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;后面添加数据时需要注意单位 用像素 (px) 或者 em (一个汉字所占的大小)&lt;/p&gt;
&lt;h6 id=&#34;行间距&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#行间距&#34;&gt;#&lt;/a&gt; 行间距&lt;/h6&gt;
&lt;blockquote&gt;
&lt;p&gt;line-height: ;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;也需要加 px&lt;br&gt;
 后期通常使 line-height 和 height 相等，来使文字垂直对齐&lt;/p&gt;
&lt;h4 id=&#34;5style样式表&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#5style样式表&#34;&gt;#&lt;/a&gt; 5.style 样式表&lt;/h4&gt;
&lt;h6 id=&#34;内部样式表&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#内部样式表&#34;&gt;#&lt;/a&gt; 内部样式表&lt;/h6&gt;
&lt;p&gt;也就是我们最开始介绍，直到现在一直在使用的加到 style 里面的 css 属性&lt;/p&gt;
&lt;h6 id=&#34;行内样式表&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#行内样式表&#34;&gt;#&lt;/a&gt; 行内样式表&lt;/h6&gt;
&lt;p&gt;直接加在 html 标签中的样式表&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt; 例如: &amp;lt;div style=&#34;&#34;;&amp;gt; &amp;lt;/div&amp;gt;
 不常使用，会使html标签显得臃肿
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h6 id=&#34;外部样式表&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#外部样式表&#34;&gt;#&lt;/a&gt; 外部样式表&lt;/h6&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;link rel=&#34;&#34;; href=&#34;文件地址&#34;;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;另建一个.css 文件，在另外一个文件中书写 css 属性&lt;br&gt;
再通过在 style 中书写 link 将其引入&lt;/p&gt;
&lt;h4 id=&#34;6vscode中使用emmet语法快速书写代码&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#6vscode中使用emmet语法快速书写代码&#34;&gt;#&lt;/a&gt; 6.vscode 中使用 emmet 语法快速书写代码&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IQnSLn&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/06/IQnSLn.png&#34; alt=&#34;IQnSLn.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;7选择器拓展&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#7选择器拓展&#34;&gt;#&lt;/a&gt; 7. 选择器拓展&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IQnZQJ&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/06/IQnZQJ.png&#34; alt=&#34;IQnZQJ.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h6 id=&#34;后代选择器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#后代选择器&#34;&gt;#&lt;/a&gt; 后代选择器&lt;/h6&gt;
&lt;p&gt;顾名思义就是将大元素中包括的小元素提取出来，这里通过列子来展示&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IQnCd0&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/06/IQnCd0.png&#34; alt=&#34;IQnCd0.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h6 id=&#34;子元素选择器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#子元素选择器&#34;&gt;#&lt;/a&gt; 子元素选择器&lt;/h6&gt;
&lt;p&gt;例如上面的 ol li 变成 ol&amp;gt;li 就只对 ol 中的下一级 li 有用也就是他的儿子，而他的下下级，也就是孙子则不起作用&lt;/p&gt;
&lt;h6 id=&#34;并集选择器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#并集选择器&#34;&gt;#&lt;/a&gt; 并集选择器&lt;/h6&gt;
&lt;p&gt;在标签和标签中间用逗号连接，这样就可以达到同时对两个盒子都起作用的效果&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;例如 div,p,li {}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;需要注意的是最后一个选择器不需要加逗号&lt;/p&gt;
&lt;h6 id=&#34;链接伪类选择器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#链接伪类选择器&#34;&gt;#&lt;/a&gt; 链接伪类选择器&lt;/h6&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IJqEWt&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/09/IJqEWt.png&#34; alt=&#34;IJqEWt.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;X:GGGG {}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;X 可以是你的选择器中的任何&lt;br&gt;
：后面可以添加 4 中元素 (其中 hover 最经常使用)：&lt;br&gt;
link: 未访问链接：把没有点击过的链接选择出来&lt;br&gt;
 visited: 访问过的链接，把点击过的链接选择出来&lt;br&gt;
 hover: 当鼠标经过时&lt;br&gt;
 active: 鼠标点击但是还未弹起来时&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IQmxMj&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/06/IQmxMj.png&#34; alt=&#34;IQmxMj.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h6 id=&#34;focus选择器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#focus选择器&#34;&gt;#&lt;/a&gt; focus 选择器&lt;/h6&gt;
&lt;p&gt;把获得光标的 input 选择显示出来&lt;br&gt;
下面是代码，可以通过自己运行来进行查看&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IQnPoV&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/06/IQnPoV.png&#34; alt=&#34;IQnPoV.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;8元素显示模式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#8元素显示模式&#34;&gt;#&lt;/a&gt; 8. 元素显示模式&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IJqmy8&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/09/IJqmy8.png&#34; alt=&#34;IJqmy8.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h6 id=&#34;块级元素&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#块级元素&#34;&gt;#&lt;/a&gt; 块级元素&lt;/h6&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IQnkJU&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/06/IQnkJU.png&#34; alt=&#34;IQnkJU.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h6 id=&#34;行内元素&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#行内元素&#34;&gt;#&lt;/a&gt; 行内元素&lt;/h6&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IQnAWF&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/06/IQnAWF.png&#34; alt=&#34;IQnAWF.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h6 id=&#34;行内块元素&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#行内块元素&#34;&gt;#&lt;/a&gt; 行内块元素&lt;/h6&gt;
&lt;p&gt;特殊情况，同时具有块级元素和行内元素的特点，可以进行的大小设置，也可以书写汉字，但是大小会随着汉字的多少而改变&lt;/p&gt;
&lt;h6 id=&#34;元素显示模式转换&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#元素显示模式转换&#34;&gt;#&lt;/a&gt; 元素显示模式转换&lt;/h6&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt; display:   ;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;inline: 行内元素&lt;br&gt;
 block: 块级元素&lt;br&gt;
 inline-block: 行内块元素&lt;br&gt;
&lt;strong&gt;学到这里去做一下小米侧边栏试试吧&lt;/strong&gt;&lt;/p&gt;
&lt;h6 id=&#34;单行文字垂直居中&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#单行文字垂直居中&#34;&gt;#&lt;/a&gt; 单行文字垂直居中&lt;/h6&gt;
&lt;p&gt;也就是上面和大家提及过的，这里让 height 和 line-height 相同即可&lt;/p&gt;
&lt;h4 id=&#34;9背景&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#9背景&#34;&gt;#&lt;/a&gt; 9. 背景&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IQ6dHA&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/06/IQ6dHA.png&#34; alt=&#34;IQ6dHA.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h6 id=&#34;背景颜色&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#背景颜色&#34;&gt;#&lt;/a&gt; 背景颜色&lt;/h6&gt;
&lt;blockquote&gt;
&lt;p&gt;background-color: ;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;后面的元素参照前面 color 属性&lt;/p&gt;
&lt;h6 id=&#34;背景图片&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#背景图片&#34;&gt;#&lt;/a&gt; 背景图片&lt;/h6&gt;
&lt;blockquote&gt;
&lt;p&gt;background-image: url (链接 / 地址)；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h6 id=&#34;背景平铺&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#背景平铺&#34;&gt;#&lt;/a&gt; 背景平铺&lt;/h6&gt;
&lt;blockquote&gt;
&lt;p&gt;background-repeat: ;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;no-repeat (常用): 不平铺&lt;br&gt;
 repeat (默认): 平铺&lt;br&gt;
 repeat-x: 沿着 X 轴平铺&lt;br&gt;
 repeat-y: 沿着 Y 轴平铺&lt;br&gt;
&lt;strong&gt;背景图片会压住背景颜色&lt;/strong&gt;&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IQnFiT&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/06/IQnFiT.png&#34; alt=&#34;IQnFiT.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h6 id=&#34;背景位置&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#背景位置&#34;&gt;#&lt;/a&gt; 背景位置&lt;/h6&gt;
&lt;blockquote&gt;
&lt;p&gt;background-position: ;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;left top center right bottom&lt;br&gt;
 也可以用 right center 等同时使用 但是有几点需要注意&lt;br&gt;
 1. 如果是方位名词  right center 和 center right 效果是等价的 跟顺序没有关系&lt;br&gt;
 2. 当有参数省略时，并且不全是方位名字时，例如 right top ,&lt;br&gt;
 省略 right，此时 top 会自动顶部对齐，而省略的会被判定为水平居中&lt;br&gt;
省略 top，则会被判定为垂直居中&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IQnEz4&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/06/IQnEz4.png&#34; alt=&#34;IQnEz4.png&#34;&gt;&lt;/a&gt;&lt;br&gt;
 也可以用具体的数据来进行移动，主要用于精灵图&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IQney9&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/06/IQney9.png&#34; alt=&#34;IQney9.png&#34;&gt;&lt;/a&gt;&lt;br&gt;
 需要注意的时，html 的 X 轴向右，而 y 轴是向下的，需要向反方向移动时可以添加负号&lt;/p&gt;
&lt;h6 id=&#34;背景固定&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#背景固定&#34;&gt;#&lt;/a&gt; 背景固定&lt;/h6&gt;
&lt;blockquote&gt;
&lt;p&gt;backgrounf-attachment: fixed;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;将背景图片固定，这样滑动鼠标滚轮时，背景图片会一直存在于网页上，并不会滑走&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IQnmLR&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/06/IQnmLR.png&#34; alt=&#34;IQnmLR.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h6 id=&#34;背景属性复合写法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#背景属性复合写法&#34;&gt;#&lt;/a&gt; 背景属性复合写法&lt;/h6&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IQ6tje&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/06/IQ6tje.png&#34; alt=&#34;IQ6tje.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h6 id=&#34;背景半透明&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#背景半透明&#34;&gt;#&lt;/a&gt; 背景半透明&lt;/h6&gt;
&lt;p&gt;主要这个不是放在 background-color 中&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;background: rgba(X,X,X,X);&lt;/p&gt;
&lt;/blockquote&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://github.com/YogMas/YogMas.github.io/2021/11/06/css2/</guid>
            <title>Css-second</title>
            <link>https://github.com/YogMas/YogMas.github.io/2021/11/06/css2/</link>
            <category>Css</category>
            <pubDate>Sat, 06 Nov 2021 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;css2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#css2&#34;&gt;#&lt;/a&gt; css2&lt;/h1&gt;
&lt;h3 id=&#34;the-article-from-yogmas-also-sam&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#the-article-from-yogmas-also-sam&#34;&gt;#&lt;/a&gt; the article from yogmas also sam&lt;/h3&gt;
&lt;h4 id=&#34;1css选择器的性质&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1css选择器的性质&#34;&gt;#&lt;/a&gt; 1.css 选择器的性质&lt;/h4&gt;
&lt;h6 id=&#34;css层叠性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#css层叠性&#34;&gt;#&lt;/a&gt; css 层叠性&lt;/h6&gt;
&lt;p&gt;长江后浪推前浪，前浪死在沙滩上&lt;br&gt;
当两个完全相同的选择器写在一起时，此时根据就近原则处理&lt;/p&gt;
&lt;h6 id=&#34;css继承性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#css继承性&#34;&gt;#&lt;/a&gt; css 继承性&lt;/h6&gt;
&lt;p&gt;大元素中的小元素会继承写在大元素中的属性&lt;/p&gt;
&lt;h6 id=&#34;行高的继承&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#行高的继承&#34;&gt;#&lt;/a&gt; 行高的继承&lt;/h6&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IQ6YcD&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/06/IQ6YcD.png&#34; alt=&#34;IQ6YcD.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;孩子拥有 font-size 元素会优先使用定义在自身的，而后面的倍数孩子自身没有就会继承父亲的倍数&lt;/p&gt;
&lt;h6 id=&#34;css优先级&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#css优先级&#34;&gt;#&lt;/a&gt; css 优先级&lt;/h6&gt;
&lt;p&gt;这个主要是根据后面的权重的大小而判定的，权重大的优先。&lt;/p&gt;
&lt;h6 id=&#34;css权重&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#css权重&#34;&gt;#&lt;/a&gt; css 权重&lt;/h6&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IQ6UnH&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/06/IQ6UnH.png&#34; alt=&#34;IQ6UnH.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h6 id=&#34;权重的叠加&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#权重的叠加&#34;&gt;#&lt;/a&gt; 权重的叠加&lt;/h6&gt;
&lt;p&gt;权重的叠加可以用加减法来计算&lt;br&gt;
例如 0,1,0,0 相当于 100&lt;/p&gt;
&lt;h4 id=&#34;2盒子模型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2盒子模型&#34;&gt;#&lt;/a&gt; 2. 盒子模型&lt;/h4&gt;
&lt;p&gt;盒子通常是块级元素&lt;br&gt;
也可以通过 display 将其变成块级元素 a 元素通常使用这种方法&lt;/p&gt;
&lt;h6 id=&#34;盒子边框&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#盒子边框&#34;&gt;#&lt;/a&gt; 盒子边框&lt;/h6&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IQ6aBd&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/06/IQ6aBd.png&#34; alt=&#34;IQ6aBd.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;border-width: ;&lt;br&gt;
border-style: ;&lt;br&gt;
border-color: ;&lt;br&gt;
border:width style color ; 复合写法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这边建议大家使用复合写法&lt;br&gt;
 style:solid 实线 dotted 虚线 dashed 更大点的虚线&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;边框会影响盒子的实际大小&lt;/strong&gt;&lt;/p&gt;
&lt;h6 id=&#34;盒子内边框&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#盒子内边框&#34;&gt;#&lt;/a&gt; 盒子内边框&lt;/h6&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IQ66gS&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/06/IQ66gS.png&#34; alt=&#34;IQ66gS.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;padding: ;&lt;br&gt;
padding-left: ;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;同理 left 可以换成其他的方位&lt;/p&gt;
&lt;p&gt;内边距复合写法：从顶部顺时针数&lt;br&gt;
&lt;strong&gt;内边距会影响盒子的大小&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;内边距不会影响盒子大小的情况:&lt;br&gt;
 当盒子内没有给宽时，padding-left/right 不会影响&lt;br&gt;
没有给高时 padding-top/bottom 不会影响&lt;/p&gt;
&lt;h6 id=&#34;盒子外边距&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#盒子外边距&#34;&gt;#&lt;/a&gt; 盒子外边距&lt;/h6&gt;
&lt;blockquote&gt;
&lt;p&gt;margin:  ;&lt;br&gt;
margin-top/XXX: ;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;复合写法和内边距同理&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;外边距典型应用&lt;/strong&gt;:&lt;br&gt;
margin: XXXpx auto;&lt;br&gt;
 此时 auto 代表左右两边自动设置可以让盒子水平对齐&lt;/p&gt;
&lt;h6 id=&#34;行内元素或行内块元素水平居中对齐&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#行内元素或行内块元素水平居中对齐&#34;&gt;#&lt;/a&gt; 行内元素或行内块元素水平居中对齐&lt;/h6&gt;
&lt;p&gt;margin 对行内元素没有作用，但是可以给这两种元素的父盒子添加 text-align:center;&lt;/p&gt;
&lt;h6 id=&#34;外边距合并&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#外边距合并&#34;&gt;#&lt;/a&gt; 外边距合并&lt;/h6&gt;
&lt;p&gt;当子盒子给 margin 时，父盒子和子盒子会塌陷，两个盒子会边框重合&lt;/p&gt;
&lt;h6 id=&#34;清除内外边距&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#清除内外边距&#34;&gt;#&lt;/a&gt; 清除内外边距&lt;/h6&gt;
&lt;p&gt;通常浏览器会自带内外边距这时就需要使用通用符选择器将浏览器自带的边距出去&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;* {padding:0 ;
   margin:0;}
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h6 id=&#34;圆角边框&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#圆角边框&#34;&gt;#&lt;/a&gt; 圆角边框&lt;/h6&gt;
&lt;blockquote&gt;
&lt;p&gt;border-radius: Xpx ;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;原理：利用一个半径为 Xpx 的圆，与边角重叠，然后切去没有重叠的边角；&lt;/p&gt;
&lt;h6 id=&#34;盒子阴影&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#盒子阴影&#34;&gt;#&lt;/a&gt; 盒子阴影&lt;/h6&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IQCJfI&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/06/IQCJfI.png&#34; alt=&#34;IQCJfI.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;box-shadow: X X X X X;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;由左到右依次为 往右边移动的距离 往下面移动的距离 阴影发散度 (往四面八方发散)  往四面八方扩散的距离 颜色 (通常是 rgba 控制)&lt;/p&gt;
&lt;h6 id=&#34;文字阴影&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#文字阴影&#34;&gt;#&lt;/a&gt; 文字阴影&lt;/h6&gt;
&lt;blockquote&gt;
&lt;p&gt;text-shadow:X X X rgba;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;分别是 往右边移动的距离 往下面移动的距离 虚实度 (越大越虚)&lt;/p&gt;
&lt;h6 id=&#34;行内块元素中间有缝隙&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#行内块元素中间有缝隙&#34;&gt;#&lt;/a&gt; 行内块元素中间有缝隙&lt;/h6&gt;
&lt;h4 id=&#34;3浮动&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3浮动&#34;&gt;#&lt;/a&gt; 3. 浮动&lt;/h4&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  float: left/right;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h6 id=&#34;浮动特性-脱标&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#浮动特性-脱标&#34;&gt;#&lt;/a&gt; 浮动特性 - 脱标&lt;/h6&gt;
&lt;p&gt;1. 脱离标准普通流的控制（浮）移动到指定位置（动）。&lt;br&gt;
2. 浮动的盒子不在保留原先的位置&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;浮动元素具有行内块元素的特点&lt;/strong&gt;&lt;br&gt;
浮动盒子通常搭配标准流父盒子&lt;/p&gt;
&lt;h6 id=&#34;浮动的注意点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#浮动的注意点&#34;&gt;#&lt;/a&gt; 浮动的注意点&lt;/h6&gt;
&lt;p&gt;1. 如果一个子元素浮动了，尽量其他盒子也浮动，这样保证这些子元素一行显示&lt;/p&gt;
&lt;h6 id=&#34;清除浮动的方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#清除浮动的方法&#34;&gt;#&lt;/a&gt; 清除浮动的方法&lt;/h6&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IQCN1P&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/06/IQCN1P.png&#34; alt=&#34;IQCN1P.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IJqJS0&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/09/IJqJS0.png&#34; alt=&#34;IJqJS0.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;额外标签法：在子盒子的最后新增一个块级盒子 并且用 css 给快捷盒子加上 clear:both; 属性&lt;/p&gt;
&lt;p&gt;父元素 overflow: 给父元素加上一个 overflow: hidden; 的 css 属性&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IJqtyT&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/09/IJqtyT.png&#34; alt=&#34;IJqtyT.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;伪元素清除:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;.clearfix:after {&lt;br&gt;
content: “”;&lt;br&gt;
display: block;&lt;br&gt;
height: 0;&lt;br&gt;
clear: both;&lt;br&gt;
visibility: hidden;&lt;br&gt;
}&lt;br&gt;
.clearfix {&lt;br&gt;
IE6、7 专有&lt;br&gt;
 zoom: 1;&lt;br&gt;
}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IQ60AI&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/06/IQ60AI.png&#34; alt=&#34;IQ60AI.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给父盒子一个 class 为 clearfix 然后将这串代码心如 css 中&lt;/p&gt;
&lt;p&gt;双伪元素清除:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;.clearfix:before,&lt;br&gt;
.clearfix:after {&lt;br&gt;
content: “”;&lt;br&gt;
display: table;&lt;br&gt;
}&lt;br&gt;
.clearfix:after {&lt;br&gt;
clear: both;&lt;br&gt;
}&lt;br&gt;
.clearfix {&lt;br&gt;
*zoom: 1;&lt;br&gt;
}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;同理给一个 clearfix 标签，然后将这串代码写入 css 中&lt;/p&gt;
&lt;h4 id=&#34;4定位&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4定位&#34;&gt;#&lt;/a&gt; 4. 定位&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IQCGtA&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/06/IQCGtA.png&#34; alt=&#34;IQCGtA.png&#34;&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IJqwTJ&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/09/IJqwTJ.png&#34; alt=&#34;IJqwTJ.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;position: ;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;static: 默认静态定位&lt;br&gt;
 absolute: 绝对定位&lt;br&gt;
 relative: 相对定位&lt;br&gt;
 fixed: 固定定位&lt;br&gt;
 sticky: 粘性定位&lt;/p&gt;
&lt;p&gt;相对定位：可以进行定位，但依旧会占用空间&lt;br&gt;
绝对定位&lt;br&gt;
如果没施加绝对定位的盒子没有父盒子，那么绝对定位就是在浏览器的基础上的&lt;br&gt;
如果绝对定位的盒子有父盒子，那么绝对定位就是在父盒子的基础上，并且&lt;strong&gt;父盒子一定要有定位，否则绝对定位就会失效&lt;/strong&gt;所以通常说相对定位就是给绝对定位当爹的&lt;/p&gt;
&lt;p&gt;固定定位：会固定在屏幕上，无视浏览器的滑块移动&lt;/p&gt;
&lt;p&gt;粘性定位：会先随着浏览器滑块的滑动而滑动，但是后来会静止，并且无法滑出浏览器屏幕&lt;/p&gt;
&lt;h6 id=&#34;定位的堆叠顺序&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#定位的堆叠顺序&#34;&gt;#&lt;/a&gt; 定位的堆叠顺序&lt;/h6&gt;
&lt;p&gt;如果有很多个绝对定位，可能会放在同一个位置，这时候需要确定谁放置在最上面&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;z-index: ;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;默认为 0，数值越大显示等级越高&lt;/p&gt;
&lt;h6 id=&#34;小技巧-绝对定位的水平垂直居中&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#小技巧-绝对定位的水平垂直居中&#34;&gt;#&lt;/a&gt; 小技巧 - 绝对定位的水平垂直居中&lt;/h6&gt;
&lt;p&gt;1.left 走 50%  父容器宽度的一半&lt;br&gt;
 2.margin 负值 往左边走 自己盒子宽度的一半&lt;/p&gt;
&lt;h6 id=&#34;定位的特殊特性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#定位的特殊特性&#34;&gt;#&lt;/a&gt; 定位的特殊特性&lt;/h6&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IQC1TH&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/06/IQC1TH.png&#34; alt=&#34;IQC1TH.png&#34;&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IQCtpt&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/06/IQCtpt.png&#34; alt=&#34;IQCtpt.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h6 id=&#34;定位和浮动的差异&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#定位和浮动的差异&#34;&gt;#&lt;/a&gt; 定位和浮动的差异&lt;/h6&gt;
&lt;p&gt;定位和浮动有相似部分，类如都会转化为行内块元素，都会压住盒子，但是浮动不会压住文字，定位会将所有东西压住&lt;/p&gt;
&lt;h4 id=&#34;5显示隐藏&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#5显示隐藏&#34;&gt;#&lt;/a&gt; 5. 显示隐藏&lt;/h4&gt;
&lt;h6 id=&#34;display&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#display&#34;&gt;#&lt;/a&gt; display&lt;/h6&gt;
&lt;blockquote&gt;
&lt;p&gt;display: ;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IQCaX8&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/06/IQCaX8.png&#34; alt=&#34;IQCaX8.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h6 id=&#34;visibility&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#visibility&#34;&gt;#&lt;/a&gt; visibility&lt;/h6&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IQCwnS&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/06/IQCwnS.png&#34; alt=&#34;IQCwnS.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h6 id=&#34;overflow&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#overflow&#34;&gt;#&lt;/a&gt; overflow&lt;/h6&gt;
&lt;blockquote&gt;
&lt;p&gt;overflow: ;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IQC00g&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/06/IQC00g.png&#34; alt=&#34;IQC00g.png&#34;&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IQCB7Q&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/06/IQCB7Q.png&#34; alt=&#34;IQCB7Q.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;6精灵图&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#6精灵图&#34;&gt;#&lt;/a&gt; 6. 精灵图&lt;/h4&gt;
&lt;p&gt;这里不好介绍怎样操作只能简单而言&lt;br&gt;
一张包含各种小图片的大图片&lt;br&gt;
利用前面所讲的背景图片位置的移动使其只能显示出一张小图片来&lt;br&gt;
问：为什么需要精灵图&lt;br&gt;
利用精灵图可以将多张图片整合在一起，从而可以减少信息的发送和接受量，减少服务器的负担&lt;/p&gt;
&lt;h4 id=&#34;7字体图标的使用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#7字体图标的使用&#34;&gt;#&lt;/a&gt; 7. 字体图标的使用&lt;/h4&gt;
&lt;p&gt;通过在网站上寻找字体图标，下载&lt;/p&gt;
&lt;p&gt;然后将代码写入 css 中&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;@font-face {&lt;br&gt;
font-family: ‘icomoon’;&lt;br&gt;
src:  url(‘fonts/icomoon.eot?p4ssmb’);&lt;br&gt;
src:  url(‘fonts/icomoon.eot?p4ssmb#iefix’) format(‘embedded-opentype’),&lt;br&gt;
url(‘fonts/icomoon.ttf?p4ssmb’) format(‘truetype’),&lt;br&gt;
url(‘fonts/icomoon.woff?p4ssmb’) format(‘woff’),&lt;br&gt;
url(‘fonts/icomoon.svg?p4ssmb#icomoon’) format(‘svg’);&lt;br&gt;
font-weight: normal;&lt;br&gt;
font-style: normal;&lt;br&gt;
font-display: block;&lt;br&gt;
}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;font 文件夹移动到主文件夹中&lt;/p&gt;
&lt;p&gt;此时就可以用字体图标代码来进行表示字体图标&lt;/p&gt;
&lt;p&gt;好处：可以对图标进行改变颜色大小等等的改变字体时用到的属性&lt;/p&gt;
&lt;h4 id=&#34;8css三角的制作&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#8css三角的制作&#34;&gt;#&lt;/a&gt; 8.css 三角的制作&lt;/h4&gt;
&lt;p&gt;利用 cssborder 属性来进行三角的制作&lt;br&gt;
由于不好叙述，自己输入，理解并体验这几组代码，应该就能理解 css 三角的制作&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IQCsts&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/06/IQCsts.png&#34; alt=&#34;IQCsts.png&#34;&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IQCrkj&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/06/IQCrkj.png&#34; alt=&#34;IQCrkj.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;9用户界面样式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#9用户界面样式&#34;&gt;#&lt;/a&gt; 9. 用户界面样式&lt;/h4&gt;
&lt;h6 id=&#34;表单轮廓&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#表单轮廓&#34;&gt;#&lt;/a&gt; 表单轮廓&lt;/h6&gt;
&lt;p&gt;由于点击表单或者 text 文本框时边框上会出现颜色变化边框变大拖拽文本域等一系列的反应，从而利用 css 取消边框的轮廓&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;outline: none;  (input,textarea)
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;resize:none; (textarea)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;用来防止拖拽文本域的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h6 id=&#34;鼠标样式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#鼠标样式&#34;&gt;#&lt;/a&gt; 鼠标样式&lt;/h6&gt;
&lt;blockquote&gt;
&lt;p&gt;cursor: ;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;default: 小白鼠标样式&lt;br&gt;
 pointer: 鼠标小手样式&lt;br&gt;
 move: 鼠标移动样式&lt;br&gt;
 text: 鼠标文本样式&lt;br&gt;
 not-allowed: 鼠标禁止样式&lt;/p&gt;
&lt;h6 id=&#34;图片文字垂直居中&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#图片文字垂直居中&#34;&gt;#&lt;/a&gt; 图片文字垂直居中&lt;/h6&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IJqrf1&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/09/IJqrf1.png&#34; alt=&#34;IJqrf1.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h6 id=&#34;图片底侧有空白缝隙的解决方案&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#图片底侧有空白缝隙的解决方案&#34;&gt;#&lt;/a&gt; 图片底侧有空白缝隙的解决方案&lt;/h6&gt;
&lt;p&gt;先将图片变为块级元素，然后再给块级元素设置边框就可以解决&lt;/p&gt;
&lt;h4 id=&#34;10文字溢出显示&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#10文字溢出显示&#34;&gt;#&lt;/a&gt; 10. 文字溢出显示&lt;/h4&gt;
&lt;h6 id=&#34;单行文字溢出显示&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#单行文字溢出显示&#34;&gt;#&lt;/a&gt; 单行文字溢出显示&lt;/h6&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IQCyhn&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/06/IQCyhn.png&#34; alt=&#34;IQCyhn.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h6 id=&#34;多行文字溢出显示&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#多行文字溢出显示&#34;&gt;#&lt;/a&gt; 多行文字溢出显示&lt;/h6&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IJqc6K&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/09/IJqc6K.png&#34; alt=&#34;IJqc6K.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;11margin负值的巧妙运动&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#11margin负值的巧妙运动&#34;&gt;#&lt;/a&gt; 11.margin 负值的巧妙运动&lt;/h4&gt;
&lt;p&gt;如果多个盒子都有边框，此时相交部分边框会重合在一起，从而增加边框的大小，此时只需要写入 margin-left: -1px; 就可以得到解决&lt;/p&gt;
&lt;h4 id=&#34;12文字围绕浮动元素&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#12文字围绕浮动元素&#34;&gt;#&lt;/a&gt; 12. 文字围绕浮动元素&lt;/h4&gt;
&lt;p&gt;众所周知浮动元素是不占用空间的，此时如果将一个照片浮动，而需要在照片旁边写入汉字的话，汉字是否会出现在图片的下方呢，答案是不会，因为汉字会围绕浮动元素&lt;/p&gt;
&lt;h4 id=&#34;13css初始化&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#13css初始化&#34;&gt;#&lt;/a&gt; 13.css 初始化&lt;/h4&gt;
&lt;p&gt;这里给出一串代码，初始化网页，将网页元素自带的一些 css 属性给去掉&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;/* 把我们所有标签的内外边距清零 &lt;em&gt;/&lt;br&gt;
* {&lt;br&gt;
margin: 0;&lt;br&gt;
padding: 0&lt;br&gt;
}&lt;br&gt;
/&lt;/em&gt;em 和 i 斜体的文字不倾斜 &lt;em&gt;/&lt;br&gt;
em,&lt;br&gt;
i {&lt;br&gt;
font-style: normal&lt;br&gt;
}&lt;br&gt;
/&lt;/em&gt; 去掉 li 的小圆点 &lt;em&gt;/&lt;br&gt;
li {&lt;br&gt;
list-style: none&lt;br&gt;
}&lt;br&gt;
img {&lt;br&gt;
/&lt;/em&gt;border 0 照顾低版本浏览器 如果 图片外面包含了链接会有边框的问题 &lt;em&gt;/&lt;br&gt;
border: 0;&lt;br&gt;
/&lt;/em&gt; 取消图片底侧有空白缝隙的问题 &lt;em&gt;/&lt;br&gt;
vertical-align: middle&lt;br&gt;
}&lt;br&gt;
button {&lt;br&gt;
/&lt;/em&gt; 当我们鼠标经过 button 按钮的时候，鼠标变成小手 &lt;em&gt;/&lt;br&gt;
cursor: pointer&lt;br&gt;
}&lt;br&gt;
a {&lt;br&gt;
color: #666;&lt;br&gt;
text-decoration: none&lt;br&gt;
}&lt;br&gt;
a:hover {&lt;br&gt;
color: #c81623&lt;br&gt;
}&lt;br&gt;
button,&lt;br&gt;
input {&lt;br&gt;
/&lt;/em&gt; “\5B8B\4F53” 就是宋体的意思 这样浏览器兼容性比较好 &lt;em&gt;/&lt;br&gt;
font-family: Microsoft YaHei, Heiti SC, tahoma, arial, Hiragino Sans GB, “\5B8B\4F53”, sans-serif&lt;br&gt;
}&lt;br&gt;
body {&lt;br&gt;
/&lt;/em&gt; CSS3 抗锯齿形 让文字显示的更加清晰 &lt;em&gt;/&lt;br&gt;
-webkit-font-smoothing: antialiased;&lt;br&gt;
background-color: #fff;&lt;br&gt;
font: 12px/1.5 Microsoft YaHei, Heiti SC, tahoma, arial, Hiragino Sans GB, “\5B8B\4F53”, sans-serif;&lt;br&gt;
color: #666&lt;br&gt;
}&lt;br&gt;
.hide,&lt;br&gt;
.none {&lt;br&gt;
display: none&lt;br&gt;
}&lt;br&gt;
/&lt;/em&gt; 清除浮动 */&lt;br&gt;
.clearfix:after {&lt;br&gt;
visibility: hidden;&lt;br&gt;
clear: both;&lt;br&gt;
display: block;&lt;br&gt;
content: “.”;&lt;br&gt;
height: 0&lt;br&gt;
}&lt;br&gt;
.clearfix {&lt;br&gt;
*zoom: 1&lt;br&gt;
}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;14css新增属性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#14css新增属性&#34;&gt;#&lt;/a&gt; 14.css 新增属性&lt;/h4&gt;
&lt;h6 id=&#34;新增属性选择器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#新增属性选择器&#34;&gt;#&lt;/a&gt; 新增属性选择器&lt;/h6&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IJqRmD&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/09/IJqRmD.png&#34; alt=&#34;IJqRmD.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;通过举例进行说明&lt;br&gt;
 input [type=text] {}&lt;br&gt;
 这个表示选出 input 中 type=text 的元素&lt;/p&gt;
&lt;p&gt;div [class^=XXX]: 选出以 XXX 开头的元素&lt;/p&gt;
&lt;p&gt;div [class$=XXX]: 选出以 XXX 结尾的元素&lt;/p&gt;
&lt;h6 id=&#34;结构伪类选择器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#结构伪类选择器&#34;&gt;#&lt;/a&gt; 结构伪类选择器&lt;/h6&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IJqgOO&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/09/IJqgOO.png&#34; alt=&#34;IJqgOO.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;xxx:firstchild
xxx:secondchild
xxx:nth-child(number)
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;都是选出第几个子元素的意思&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IJq4kd&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/09/IJq4kd.png&#34; alt=&#34;IJq4kd.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;括号里面不仅仅可以跟数字，也可以很有特殊意义的单词，甚至可以跟公式 n 将取自然数&lt;/p&gt;
&lt;p&gt;nth-of-type 选择器&lt;/p&gt;
&lt;p&gt;两个选择器的区别如下&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IJqfTH&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/09/IJqfTH.png&#34; alt=&#34;IJqfTH.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;举例子来说明:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;p&amp;gt;光头强&amp;lt;/p&amp;gt;
&amp;lt;div&amp;gt;熊大&amp;lt;/div&amp;gt;
&amp;lt;div&amp;gt;熊二&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;此时如果给一个 section div:nth-child (1) { background-color: red; } 指令，你觉得谁会被加上红色呢&lt;br&gt;
答案是都不会&lt;br&gt;
 child 先看后面的数字 1   ，此时第一个孩子是 p，然后再来看前面的 div，发现 div 不是 P，所以不成立 谁都不给&lt;/p&gt;
&lt;p&gt;但如果给一个 section div:nth-of-type (1) {&lt;br&gt;
background-color: blue;} 指令呢&lt;br&gt;
答案是会给熊大，type 先看前面的 div，找出 div，再发现后面的 1，所以会给 div 中的第一个孩子&lt;/p&gt;
&lt;h6 id=&#34;伪元素选择器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#伪元素选择器&#34;&gt;#&lt;/a&gt; 伪元素选择器&lt;/h6&gt;
&lt;blockquote&gt;
&lt;p&gt;XXX::before/after {&lt;br&gt;
content:’’;&lt;br&gt;
}&lt;br&gt;
 这里面的 content 是必须加的，表示里面的内容，即使你没有内容要写，也需要写出 content 否则无效，注意是单引号&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;用处：可以里面 css 来个父元素添加盒子 词的的 before 表示出现在父元素的左边 after 表示出现在父元素的右边&lt;/p&gt;
&lt;h6 id=&#34;css3盒子模型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#css3盒子模型&#34;&gt;#&lt;/a&gt; css3 盒子模型&lt;/h6&gt;
&lt;p&gt;前面我们说了 padding 和边框都会撑大盒子，所以说我们使用 border 和 padding 还需要减去其尺寸，现在我们提供了修复的方法&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;box-sizing:  ;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;content-box: 按照原来会撑大盒子的方式&lt;br&gt;
 border-box: 会自动减去撑大的尺寸，保证盒子的尺寸不变&lt;/p&gt;
&lt;h6 id=&#34;图片模糊处理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#图片模糊处理&#34;&gt;#&lt;/a&gt; 图片模糊处理&lt;/h6&gt;
&lt;blockquote&gt;
&lt;p&gt;filter:blur()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;blur 是一个函数 小括号里面数值越大，图片越模糊 注意数值要加 px 单位&lt;/p&gt;
&lt;h6 id=&#34;css3宽度calc函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#css3宽度calc函数&#34;&gt;#&lt;/a&gt; css3 宽度 calc 函数&lt;/h6&gt;
&lt;p&gt;calc 函数主要提供了一个计算的方法&lt;br&gt;
例如在有一个父盒子的前提下，子盒子写出这样一个函数 width: calc (100% - 30px); 表示在父亲 100% 尺寸的前提下始终减去 30px 的宽度&lt;/p&gt;
&lt;h6 id=&#34;过渡效果&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#过渡效果&#34;&gt;#&lt;/a&gt; 过渡效果&lt;/h6&gt;
&lt;p&gt;大概来说就是将一个瞬间变化的过程转化成阶段性有时间长短的变化&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IJqTpt&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/09/IJqTpt.png&#34; alt=&#34;IJqTpt.png&#34;&gt;&lt;/a&gt;&lt;br&gt;
 在这里 0s 开始一般可以不写而省略，变化曲线也一遍使用 ease 这是最常用的变化曲线&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://github.com/YogMas/YogMas.github.io/2021/11/06/html-xia/</guid>
            <title>Html-second</title>
            <link>https://github.com/YogMas/YogMas.github.io/2021/11/06/html-xia/</link>
            <category>Html</category>
            <pubDate>Sat, 06 Nov 2021 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;。&lt;/p&gt;
&lt;h1 id=&#34;html下&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#html下&#34;&gt;#&lt;/a&gt; Html (下)&lt;/h1&gt;
&lt;h3 id=&#34;the-article-from-yogmas-also-sam&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#the-article-from-yogmas-also-sam&#34;&gt;#&lt;/a&gt; the article from yogmas also sam&lt;/h3&gt;
&lt;h4 id=&#34;1表格&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1表格&#34;&gt;#&lt;/a&gt; 1. 表格&lt;/h4&gt;
&lt;h6 id=&#34;表格基本语法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#表格基本语法&#34;&gt;#&lt;/a&gt; 表格基本语法&lt;/h6&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;table&amp;gt;
  &amp;lt;tr&amp;gt;&amp;lt;th&amp;gt;&amp;lt;/th&amp;gt;&amp;lt;/tr&amp;gt;
  &amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;
&amp;lt;/table&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h6 id=&#34;表头单元格标签&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#表头单元格标签&#34;&gt;#&lt;/a&gt; 表头单元格标签&lt;/h6&gt;
&lt;blockquote&gt;
&lt;p&gt;align=&#34;&#34;&lt;br&gt;
border=&#34;&#34;&lt;br&gt;
cellpadding=&#34;&#34;&lt;br&gt;
cellspacing=&#34;&#34;&lt;br&gt;
width=&#34;&#34;&lt;br&gt;
height=&#34;&#34;&lt;br&gt;
&lt;strong&gt; 这些标签要写到 table 里面去&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;align: 表格中的文字所处的文字 eg.center 就是未于中间类似的还有 left,right&lt;br&gt;
border：表示表格边框的大小 0 表示没有 &lt;strong&gt;此属性的参数值是数字&lt;/strong&gt;&lt;br&gt;
 cellpadding：代表单元格边框到内容之间的距离（留白）&lt;br&gt;
cellspacing：用来指定表格各单元格之间的空隙。&lt;strong&gt;此属性的参数值是数字&lt;/strong&gt;，表示单元格间隙所占的像素点数。&lt;br&gt;
同样 width,height 已经介绍过了 ，大多数时候都会用&lt;strong&gt; CSS&lt;/strong&gt; 来写&lt;/p&gt;
&lt;h6 id=&#34;合并单元格&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#合并单元格&#34;&gt;#&lt;/a&gt; 合并单元格&lt;/h6&gt;
&lt;blockquote&gt;
&lt;p&gt;rowspan=“合并单元格数目”&lt;br&gt;
colspan=“合并单元格数目”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;rowspan: 合并行 (也就是将一列上的各行合并)&lt;br&gt;
 colspan: 合并列 (也就是将一行上的各列合并)&lt;br&gt;
 合并准则：如果 rowspan 就在最上面的表格的标签里面加上 rowspan=&#34;合并数目&#34; 并且删除已经被合并的表格&lt;br&gt;
 colspan 同理，注意 colspan 加在最左边的表格标签&lt;br&gt;
 eg.&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;tr&amp;gt;
     &amp;lt;td&amp;gt;&amp;lt;/td&amp;gt;
      &amp;lt;td colspan=&#34;2&#34;&amp;gt;&amp;lt;/td&amp;gt;

  &amp;lt;/tr&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;表示合并一行上的 2 列 第三列删除 colspan 写在第二列的 td 表格标签内&lt;/p&gt;
&lt;h4 id=&#34;2列表&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2列表&#34;&gt;#&lt;/a&gt; 2. 列表&lt;/h4&gt;
&lt;h6 id=&#34;无序列表&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#无序列表&#34;&gt;#&lt;/a&gt; 无序列表&lt;/h6&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;ul&amp;gt;
  &amp;lt;li&amp;gt;&amp;lt;/li&amp;gt;
    …………
  &amp;lt;li&amp;gt;&amp;lt;/li&amp;gt;
  &amp;lt;li&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;其中的 li 标签各位根据需要而定&lt;br&gt;
 ul:unorderlist&lt;br&gt;
li:list&lt;/p&gt;
&lt;h6 id=&#34;有序列表&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#有序列表&#34;&gt;#&lt;/a&gt; 有序列表&lt;/h6&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;ol&amp;gt;
  &amp;lt;li&amp;gt;&amp;lt;/li&amp;gt;
    …………
  &amp;lt;li&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ol&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;ol:orderlist&lt;br&gt;
li:list&lt;/p&gt;
&lt;h6 id=&#34;自定义列表&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#自定义列表&#34;&gt;#&lt;/a&gt; 自定义列表&lt;/h6&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt; &amp;lt;dl&amp;gt;
   &amp;lt;dt&amp;gt;&amp;lt;/dt&amp;gt;顶部总标签
   &amp;lt;dd&amp;gt;&amp;lt;/dd&amp;gt;
   &amp;lt;dt&amp;gt;&amp;lt;/dt&amp;gt;
   &amp;lt;dd&amp;gt;&amp;lt;/dd
 &amp;lt;/dl&amp;gt;
 一个&amp;lt;dt&amp;gt;和&amp;lt;/dt&amp;gt;标签出现代表一列
 直到下一个&amp;lt;dt&amp;gt;和&amp;lt;/dt&amp;gt;出现才换列
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;3表单&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3表单&#34;&gt;#&lt;/a&gt; 3. 表单&lt;/h4&gt;
&lt;h6 id=&#34;表单域&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#表单域&#34;&gt;#&lt;/a&gt; 表单域&lt;/h6&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;form action=&#34;&#34; method=&#34;&#34; name=&#34;&#34;&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;表单域需要与后端结合使用只是接下来的一系列需要传输数据到后端的都需要写到表单域内&lt;br&gt;
附：此时作者还不知道表单域的 action 等标签充当的角色和用处&lt;/p&gt;
&lt;h6 id=&#34;input表单元素&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#input表单元素&#34;&gt;#&lt;/a&gt; input 表单元素&lt;/h6&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;input type=&#34;&#34; value=&#34;&#34; name=&#34;&#34; &amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IJqbX8&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/09/IJqbX8.png&#34; alt=&#34;IJqbX8.png&#34;&gt;&lt;/a&gt;&lt;br&gt;
type 里面可以填写的元素&lt;br&gt;
 text: 文本框，用户可以输入任何文字，但可以用 maxlength 等来加以限定&lt;br&gt;
 password：密码框，可以对你输入的数字进行保密 此时显示 *******&lt;br&gt;
radio: 单选按钮&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;将两个 input+radio 元素的标签 name 设置成相同 才可以进行单选 具体下面看图&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;checkbox: 复选框，可以进行多个选择&lt;br&gt;
 submit: 提交按钮，点击可以将数据提交给后端&lt;br&gt;
 reset: 重新填写&lt;br&gt;
 button: 点击  例如：获取短信验证码需要使用&lt;/p&gt;
&lt;p&gt;与 type 同等级的元素作用&lt;br&gt;
 value：提前显示在文本框内的文字&lt;br&gt;
 name：传送给后端时的数据名称，radio 只有 name 相同才能单选&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IQmXRg&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/06/IQmXRg.png&#34; alt=&#34;IQmXRg.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h6 id=&#34;label标签&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#label标签&#34;&gt;#&lt;/a&gt; label 标签&lt;/h6&gt;
&lt;p&gt;点击添加了 label 标签的元素等于点击 label 标签的输出端&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;label for=&#34;XXX&#34;&amp;gt; &amp;lt;/label&amp;gt;
&amp;lt;input type=&#34;&#34; id=&#34;XXX&#34;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;并不一定要是 input 只是在 input 等填写数据中较为广泛地使用，xxx 可以换成任何自己命名的单词字母等&lt;br&gt;
 for 和 id 中填写的必须相同&lt;/p&gt;
&lt;h6 id=&#34;select下拉表单&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#select下拉表单&#34;&gt;#&lt;/a&gt; select 下拉表单&lt;/h6&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;select&amp;gt;
&amp;lt;option&amp;gt;&amp;lt;/option&amp;gt;
&amp;lt;option selected=&#34;selected&#34;&amp;gt; &amp;lt;/potion&amp;gt;
&amp;lt;/select&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;option 标签中间填写下拉菜单中的文字等&lt;br&gt;
添加了 selected 元素的表示 未下拉时显示在表面的选项&lt;/p&gt;
&lt;h6 id=&#34;textarea文本域&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#textarea文本域&#34;&gt;#&lt;/a&gt; textarea 文本域&lt;/h6&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;textarea cols=&#34;&#34; rows=&#34;&#34;&amp;gt;
&amp;lt;/textarea&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;文本域通常很大所以用 cols 和 rows 来进行限定&lt;br&gt;
 cols 限定一行的字数 rows 限定行数&lt;br&gt;
在后期的学习中可以用&lt;strong&gt; css&lt;/strong&gt; 将文本域的右下角拉伸和上下滑动进行去除，增加美观性&lt;/p&gt;
&lt;h4 id=&#34;4html5新增&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4html5新增&#34;&gt;#&lt;/a&gt; 4.html5 新增&lt;/h4&gt;
&lt;h6 id=&#34;语义化标签&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#语义化标签&#34;&gt;#&lt;/a&gt; 语义化标签&lt;/h6&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;header&amp;gt;头部标签&amp;lt;/header&amp;gt;

&amp;lt;nav&amp;gt;导航栏标签&amp;lt;/nav&amp;gt;   
&amp;lt;section&amp;gt;某个区域&amp;lt;/section&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h6 id=&#34;视频标签&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#视频标签&#34;&gt;#&lt;/a&gt; 视频标签&lt;/h6&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;video src=&#34;&#34; autoplay=&#34;&#34;muted=&#34;muted&#34;  loop=&#34;loop&#34; poster=&#34;media/mi9.jpg&#34;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;src: 路径&lt;br&gt;
 autoplay: 写入 autoplay 代表自动播放&lt;br&gt;
 mute: 播放时静音&lt;br&gt;
 loop: 预先加载&lt;br&gt;
 poster: 播放还没有加载出来的时候显示的图片&lt;br&gt;
 controls: 是否显示控制按钮&lt;/p&gt;
&lt;h6 id=&#34;音频标签&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#音频标签&#34;&gt;#&lt;/a&gt; 音频标签&lt;/h6&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;audio src=&#34;media/music.mp3&#34; autoplay=&#34;autoplay&#34; controls=&#34;controls&#34;&amp;gt;&amp;lt;/audio&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;与视频标签相差无几&lt;/p&gt;
&lt;h6 id=&#34;input表单&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#input表单&#34;&gt;#&lt;/a&gt; input 表单&lt;/h6&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IJqLnS&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/09/IJqLnS.png&#34; alt=&#34;IJqLnS.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h6 id=&#34;表单属性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#表单属性&#34;&gt;#&lt;/a&gt; 表单属性&lt;/h6&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;input type=&#34;search&#34; name=&#34;sear&#34; id=&#34;&#34; required=&#34;required&#34; placeholder=&#34;pink老师&#34; autofocus=&#34;autofocus&#34; autocomplete=&#34;off&#34;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt; &amp;lt;input type=&#34;file&#34; name=&#34;&#34; id=&#34;&#34; multiple=&#34;multiple&#34;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;required: 需要填写才能点确定&lt;br&gt;
 placeholder: 还没有填写时候显示的文字&lt;br&gt;
 autofocus: 打开网页时，指标会自动点一下这里&lt;br&gt;
 autocomplete: 自动储存你输入过的信息 (容易暴露信息，所以一般都会关闭)&lt;br&gt;
 multiple: 可以选取多个文件&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://github.com/YogMas/YogMas.github.io/2021/11/06/javascript-ji-chu-ban/</guid>
            <title>Javascript基础(未完待续)</title>
            <link>https://github.com/YogMas/YogMas.github.io/2021/11/06/javascript-ji-chu-ban/</link>
            <category>Javascript</category>
            <pubDate>Sat, 06 Nov 2021 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;javascript&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#javascript&#34;&gt;#&lt;/a&gt; javascript&lt;/h1&gt;
&lt;h2 id=&#34;article-by-yogmas&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#article-by-yogmas&#34;&gt;#&lt;/a&gt; Article By Yogmas&lt;/h2&gt;
&lt;h3 id=&#34;js的组成&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#js的组成&#34;&gt;#&lt;/a&gt; js 的组成&lt;/h3&gt;
&lt;p&gt;1.ECNscript:JS 语法&lt;br&gt;
 2.DOM: 页面文档模型&lt;br&gt;
 3.BOM: 浏览器对象模型&lt;/p&gt;
&lt;h4 id=&#34;js初体验&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#js初体验&#34;&gt;#&lt;/a&gt; js 初体验&lt;/h4&gt;
&lt;p&gt;1. 行内式 js: 直接写到元素的内部&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGFyQJ&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGFyQJ.png&#34; alt=&#34;IGFyQJ.png&#34;&gt;&lt;/a&gt;&lt;br&gt;
2. 内嵌式的 js:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;head&amp;gt;&amp;lt;script&amp;gt; &amp;lt;/script&amp;gt;&amp;lt;/head&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;3. 外部式 js: 创建 XXX.js 文件在通过标签引出到 html 文件中&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGF2e1&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGF2e1.png&#34; alt=&#34;IGF2e1.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;js注释&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#js注释&#34;&gt;#&lt;/a&gt; js 注释&lt;/h4&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;1.单行注释    //    ctrl + /
2.多行注释     /*    */    shift + alt + a
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;js输入输出语句&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#js输入输出语句&#34;&gt;#&lt;/a&gt; js 输入输出语句&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGFWo6&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGFWo6.png&#34; alt=&#34;IGFWo6.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;prompt(&#39;&#39;) 输入框 
alert(&#39;&#39;)警示框  展示给用户的
console 控制台打印的信息 给程序员看的
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;变量概述&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#变量概述&#34;&gt;#&lt;/a&gt; 变量概述&lt;/h3&gt;
&lt;h4 id=&#34;什么是变量&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#什么是变量&#34;&gt;#&lt;/a&gt; 什么是变量&lt;/h4&gt;
&lt;p&gt;变量是用来存放数据的容器，简而言之就是一个装东西的盒子&lt;br&gt;
变量是内存中申请的一部分用来存放数据的空间&lt;/p&gt;
&lt;h3 id=&#34;变量的使用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#变量的使用&#34;&gt;#&lt;/a&gt; 变量的使用&lt;/h3&gt;
&lt;h4 id=&#34;声明变量&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#声明变量&#34;&gt;#&lt;/a&gt; 声明变量&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;var age;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;var 是一个 js 关键字用来声明变量&lt;br&gt;
 age 是程序员取的名字&lt;/p&gt;
&lt;h4 id=&#34;赋值&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#赋值&#34;&gt;#&lt;/a&gt; 赋值&lt;/h4&gt;
&lt;p&gt;赋值就是把值存入变量中&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;age=10&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这里的 = 是赋值的意思 在变量中存储一个数据&lt;/p&gt;
&lt;h4 id=&#34;变量的初始化&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#变量的初始化&#34;&gt;#&lt;/a&gt; 变量的初始化&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;var age=18;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在声明变量的同时赋值给 18  使程序变得更加简便&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;var myname = prompt(&#39;请输入你的名字&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;这样在弹出的对话框里面输入的名字 可以储存到变量 myname 中去&lt;/p&gt;
&lt;h4 id=&#34;变量语法扩展&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#变量语法扩展&#34;&gt;#&lt;/a&gt; 变量语法扩展&lt;/h4&gt;
&lt;h5 id=&#34;更新变量&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#更新变量&#34;&gt;#&lt;/a&gt; 更新变量&lt;/h5&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt; var myname = &#39;pink&#39;;
 console.log(myname);
  myname = &#39;迪丽热巴&#39;;
  console.log(myname);
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;这样从上到下 第一次输出的 pink 第二次输出的是迪丽热巴  变量在不断更新&lt;/p&gt;
&lt;h5 id=&#34;声明多个变量&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#声明多个变量&#34;&gt;#&lt;/a&gt; 声明多个变量&lt;/h5&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;eg:var age=18,address=&#39;火影村&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;这里声明了 age 和 address 多个变量，变量与变量之间通过英文的逗号隔开&lt;/p&gt;
&lt;h5 id=&#34;声明变量的特殊情况&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#声明变量的特殊情况&#34;&gt;#&lt;/a&gt; 声明变量的特殊情况&lt;/h5&gt;
&lt;p&gt;1. 只声明不赋值 这时候输出的结果是 undefined (未定义的)&lt;br&gt;
 2. 不声明不赋值 直接使用 浏览器会进行报错&lt;br&gt;
 3. 不声明直接赋值使用 在 js 之中只可以使用的&lt;/p&gt;
&lt;p&gt;注意:js 是从上到下处理的，如果中间有错误的代码，那么错误代码下面的代码将不再被 js 处理&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IG0QRf&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IG0QRf.png&#34; alt=&#34;IG0QRf.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&#34;变量命名规范&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#变量命名规范&#34;&gt;#&lt;/a&gt; 变量命名规范&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGieEV&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGieEV.png&#34; alt=&#34;IGieEV.png&#34;&gt;&lt;/a&gt;&lt;br&gt;
 尽量不要直接使用 name 作为变量名，name 在大部分浏览器中有变量含义&lt;/p&gt;
&lt;h4 id=&#34;小结&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#小结&#34;&gt;#&lt;/a&gt; 小结&lt;/h4&gt;
&lt;p&gt;自我问答环节&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGin4U&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGin4U.png&#34; alt=&#34;IGin4U.png&#34;&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGiM34&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGiM34.png&#34; alt=&#34;IGiM34.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;数据类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数据类型&#34;&gt;#&lt;/a&gt; 数据类型&lt;/h3&gt;
&lt;h4 id=&#34;简介&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#简介&#34;&gt;#&lt;/a&gt; 简介&lt;/h4&gt;
&lt;p&gt;不同的数据占用的存储空间不同，为了充分利用存储空间，于是定义了不同的数据类型.&lt;/p&gt;
&lt;h4 id=&#34;变量的数据类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#变量的数据类型&#34;&gt;#&lt;/a&gt; 变量的数据类型&lt;/h4&gt;
&lt;p&gt;js 是一种弱类型或者说动态语言，这意味着不用提前声明变量的类型，在程序运行的过程中，类型会自动确定.&lt;/p&gt;
&lt;p&gt;js 的变量数据类型是只有程序在运行过程中，根据等号右边的值来确定的.&lt;/p&gt;
&lt;p&gt;js 是动态语言，变量的数据类型是可以变化的&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;var x = 10;x 是数字型&lt;br&gt;
 var x = ‘yogmas’; x 是字符串型&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;简单数据类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#简单数据类型&#34;&gt;#&lt;/a&gt; 简单数据类型&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGFTQH&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGFTQH.png&#34; alt=&#34;IGFTQH.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h6 id=&#34;数字型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数字型&#34;&gt;#&lt;/a&gt; 数字型&lt;/h6&gt;
&lt;p&gt;1. 在我们程序里面数字前面加 0 表示 8 进制&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;eg:var num = 010 转化为10进制就是8
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;2. 十六进制 0~9 a~f&lt;br&gt;
 在数字前面加 0x 表示 16 进制&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;eg:var num = 0xa 转外为10进制就是10
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;3. 数字型的最大值&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;console.log(Number.MAX_VALUE)  1.7976e+308
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;4. 数字型的最小值&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;console.log(Number.MIN_VALUE)  5e-324
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;数字型的三个特殊数值&lt;br&gt;
 alert (infinity) 无穷大&lt;br&gt;
 alert (-infinity) 无穷小&lt;br&gt;
这两个数都可以通过将前面的最大数或者最小数通过加减乘除扩大或缩小得到&lt;br&gt;
 alert (NAN) 非数值&lt;/p&gt;
&lt;p&gt;可以通过 isNAN 用来判断非数字 并且返回一个值， 如果是数值返回的是 false 如果不是数字 返回的是 true&lt;br&gt;
console.log(isNaN(XX));&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGFOTP&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGFOTP.png&#34; alt=&#34;IGFOTP.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&#34;字符串型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#字符串型&#34;&gt;#&lt;/a&gt; 字符串型&lt;/h5&gt;
&lt;p&gt;字符串数据类型用单引号圈出 (字符串必须加引号，不然会提示错误)&lt;/p&gt;
&lt;p&gt;注意引号内不能内嵌引号，如果要引号内嵌，使用不同的引号 (&lt;strong&gt;引号判定是就近一致原则&lt;/strong&gt;)&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;例如:var str = &#34;我是一个&#39;高富帅&#39;程序员&#34;;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h6 id=&#34;字符串长度&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#字符串长度&#34;&gt;#&lt;/a&gt; 字符串长度&lt;/h6&gt;
&lt;p&gt;检测获取字符串的长度 用 length&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;        var str = &#39;my name is andy &#39;;
        console.log(str.length)
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h6 id=&#34;字符转义符&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#字符转义符&#34;&gt;#&lt;/a&gt; 字符转义符&lt;/h6&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGkmpF&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGkmpF.png&#34; alt=&#34;IGkmpF.png&#34;&gt;&lt;/a&gt;&lt;br&gt;
 都是以 \ 开头 ，但是这些转义字符要写到引号里面&lt;/p&gt;
&lt;h6 id=&#34;字符串的拼接&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#字符串的拼接&#34;&gt;#&lt;/a&gt; 字符串的拼接&lt;/h6&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;console.log (&#39;&#39; + &#39;&#39; + &#39;&#39;)字符串之间通过加号连接
eg:console.log (&#39;沙漠&#39;+&#39;骆驼 &#39;) = &#39;沙漠骆驼&#39;
console.log (&#39;12&#39; + 12) 最后为1212  这是字符串的相加   
console.log (12 + 12) 最后为24   这是数字型的相加
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;只要有一个是字符串 其他全部都会以字符串相连&lt;br&gt;
&lt;strong&gt;数字相加，字符相连&lt;/strong&gt;&lt;/p&gt;
&lt;h6 id=&#34;字符串拼接加强&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#字符串拼接加强&#34;&gt;#&lt;/a&gt; 字符串拼接加强&lt;/h6&gt;
&lt;p&gt;通过改变变量中的值 来改变显示中的值&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;eg:var age = 18;
   console.log(&#39;pink老师&#39;+age+&#39;岁&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;需要注意的时，&lt;strong&gt;变量不要写到字符串里面，是通过和字符串相连的方式实现的&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  console.log (&#39;pink老师age岁&#39;)
  console.log (&#39;pink老师&#39;+&#39;age&#39;+&#39;岁&#39;)
  console.log (&#39;pink老师&#39;+&#39;age岁&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;如上这些等等做法，都是不能实现的.&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGku6J&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGku6J.png&#34; alt=&#34;IGku6J.png&#34;&gt;&lt;/a&gt;&lt;br&gt;
 交互编程：&lt;/p&gt;
&lt;p&gt;用户输入 → 处理 → 输出&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;eg         var age = prompt(&#39;请输入您的年龄&#39;);
           var str = &#39;你今年已经&#39; + age + &#39;岁了&#39;;
           alert(str);
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;布尔型boolean&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#布尔型boolean&#34;&gt;#&lt;/a&gt; 布尔型 Boolean&lt;/h5&gt;
&lt;p&gt;布尔型中有两个值 true 和 false&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;eg         var flag = true; 布尔型
           var flag1 = false; 布尔型
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;需要注意的是参与加法运算时布尔型 true 就是 1，false 就是 0.&lt;/p&gt;
&lt;h5 id=&#34;undefined-和null&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#undefined-和null&#34;&gt;#&lt;/a&gt; Undefined 和 Null&lt;/h5&gt;
&lt;p&gt;如果一个变量声明未赋值 就是 undefined 未定义数据类型&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;   eg: var str;
       console.log(var);
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;未定义和字符串相加，最终的结果是 undefined+ 字符串的内容&lt;/p&gt;
&lt;p&gt;undefined 和数字相加 最后得到的结果是 NaN: not a number&lt;/p&gt;
&lt;p&gt;null : 空值&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;var space = null
console.log(space + &#39;yogmas&#39;)  输出的结果是 spaceyogmas
console.log(space + 1) 输出的结果是1  (和undefined区别)
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;获取变量数据类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#获取变量数据类型&#34;&gt;#&lt;/a&gt; 获取变量数据类型&lt;/h4&gt;
&lt;h5 id=&#34;使用typeof来检测&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#使用typeof来检测&#34;&gt;#&lt;/a&gt; 使用 typeof 来检测&lt;/h5&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;   eg:   var num = 10;
         console.log(typeof num);
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;比较特殊的是 在这里对 null 进行数据类型检测 输出来的是 object (对象)&lt;/p&gt;
&lt;p&gt;经过检测发现 我们 prompt 取过来的值是字符型的&lt;/p&gt;
&lt;h5 id=&#34;观察控制台中的数据颜色&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#观察控制台中的数据颜色&#34;&gt;#&lt;/a&gt; 观察控制台中的数据颜色&lt;/h5&gt;
&lt;p&gt;数字型 浅蓝色&lt;br&gt;
字符型 黑色&lt;br&gt;
布尔型 深蓝色&lt;br&gt;
 undefined 和 null 灰色&lt;/p&gt;
&lt;h4 id=&#34;字面量&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#字面量&#34;&gt;#&lt;/a&gt; 字面量&lt;/h4&gt;
&lt;p&gt;字面量是在源代码中一个固定值得表示法，通俗来说，就是字面量表示如何表达这个值&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGkQmR&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGkQmR.png&#34; alt=&#34;IGkQmR.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;数据类型转换&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数据类型转换&#34;&gt;#&lt;/a&gt; 数据类型转换&lt;/h4&gt;
&lt;p&gt;通常会实现 3 中方式的转换&lt;br&gt;
 1. 转换为字符串类型&lt;br&gt;
 2. 转换为数字型&lt;br&gt;
 3. 转换为布尔型&lt;/p&gt;
&lt;h5 id=&#34;转换成字符串型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#转换成字符串型&#34;&gt;#&lt;/a&gt; 转换成字符串型&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGkGtK&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGkGtK.png&#34; alt=&#34;IGkGtK.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;var num = 18;
console.log(num.toString())
console.log(String(num))
console.log(num + &#39;&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;注意:toString () 和 String () 的使用方法不同&lt;br&gt;
三种方法中 其中拼接转换字符串最为实用&lt;/p&gt;
&lt;h5 id=&#34;转换为数字型重点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#转换为数字型重点&#34;&gt;#&lt;/a&gt; 转换为数字型 (重点)&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGkN1e&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGkN1e.png&#34; alt=&#34;IGkN1e.png&#34;&gt;&lt;/a&gt;&lt;br&gt;
 其中前两个较为实用&lt;br&gt;
 1.parseInt (变量) 可以把字符型的转换为数字型 但是得到的是整数 并且约分不会四舍五入，会直接去掉小数点后面的数字 如果数字后面有单位，也会去掉单位，如果以字母开头那么输出的为 NaN&lt;br&gt;
2.paseFloat (变量) 可以把字符型的转化为数字型，得到的是浮点数也就是小数，但同样也会把后面的单位去掉&lt;br&gt;
 3.Number (变量)&lt;br&gt;
 4. 利用了算数运算 - * / 隐式转换&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGk2cQ&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGk2cQ.png&#34; alt=&#34;IGk2cQ.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;   console.log(parseInt(&#39;123&#39;));
   console.log(parseFloat(&#39;123&#39;));
   console.log(Number(&#39;123&#39;));
   console.log(&#39;12&#39; - 0);
   console.log(&#39;123&#39; - &#39;123&#39;);
   console.log(&#39;123&#39; * 1);
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;转化为布尔型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#转化为布尔型&#34;&gt;#&lt;/a&gt; 转化为布尔型&lt;/h5&gt;
&lt;p&gt;代表&lt;strong&gt;空，否定&lt;/strong&gt;的值会被转化为 false，如’’,0,NaN,null,undefined. 其他的值都会被转化成 true&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGkjBR&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGkjBR.png&#34; alt=&#34;IGkjBR.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;eg: console.log(Boolean(&#39;&#39;));      这是false
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;解释型语言和编译型语言&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#解释型语言和编译型语言&#34;&gt;#&lt;/a&gt; 解释型语言和编译型语言&lt;/h4&gt;
&lt;p&gt;编译型语言：全部编译成功后再执行代码.(做好菜 再吃饭)&lt;br&gt;
 解释型语言：解释一行代码后就执行一行代码.(吃火锅：边吃边涮)&lt;/p&gt;
&lt;h4 id=&#34;标识符关键字保留字&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#标识符关键字保留字&#34;&gt;#&lt;/a&gt; 标识符，关键字，保留字&lt;/h4&gt;
&lt;p&gt;标识符：开发人员为变量，属性，函数，参数取的名字&lt;br&gt;
&lt;strong&gt;标识符不能是关键字和保留字&lt;/strong&gt;&lt;br&gt;
关键字：是指 js 本身已经使用了子，不能充当变量名和方法名&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGBhAs&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGBhAs.png&#34; alt=&#34;IGBhAs.png&#34;&gt;&lt;/a&gt;&lt;br&gt;
 保留字：预留的关键字，未来可能会成为关键字&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGBHjU&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGBHjU.png&#34; alt=&#34;IGBHjU.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;运算符&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#运算符&#34;&gt;#&lt;/a&gt; 运算符&lt;/h3&gt;
&lt;h4 id=&#34;算数运算符&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#算数运算符&#34;&gt;#&lt;/a&gt; 算数运算符&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGAQgg&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGAQgg.png&#34; alt=&#34;IGAQgg.png&#34;&gt;&lt;/a&gt;&lt;br&gt;
 需要注意的是浮点数在算数运算里面会有问题 (会有一定的误差)&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;eg:console.log(0.07*100); 最终的结果是7.000000000000001
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGAaCT&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGAaCT.png&#34; alt=&#34;IGAaCT.png&#34;&gt;&lt;/a&gt;&lt;br&gt;
 我们不能拿着浮点数来进行相比较是否相等&lt;/p&gt;
&lt;h5 id=&#34;表达式返回值&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#表达式返回值&#34;&gt;#&lt;/a&gt; 表达式，返回值&lt;/h5&gt;
&lt;p&gt;由数字，运算符，变量等组成的式子&lt;/p&gt;
&lt;p&gt;在程序中的计算是把右边表达式计算完毕把返回值给左边&lt;/p&gt;
&lt;p&gt;式子通过计算得到的结果 称为返回值&lt;/p&gt;
&lt;h4 id=&#34;自增和自减运算符&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#自增和自减运算符&#34;&gt;#&lt;/a&gt; 自增和自减运算符&lt;/h4&gt;
&lt;p&gt;反复用给数字变量添加或者减去 1，可以用 ++ 或者–来实现&lt;br&gt;
在 js 中，自增自减运算符既可以放在变量前面又可以放在变量后面，称为前置或者后置.&lt;br&gt;
 需要注意的是 这个运算符必须和变量配合才能使用&lt;br&gt;
前置和后置有区别的是，前置表示先自增或自减再返回，后置表示先返回再自增或自减&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGYJ4U&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGYJ4U.png&#34; alt=&#34;IGYJ4U.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;比较运算符关系运算符&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#比较运算符关系运算符&#34;&gt;#&lt;/a&gt; 比较运算符 &amp;amp; 关系运算符&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGYwuR&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGYwuR.png&#34; alt=&#34;IGYwuR.png&#34;&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGYy4O&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGYy4O.png&#34; alt=&#34;IGYy4O.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;逻辑运算符&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#逻辑运算符&#34;&gt;#&lt;/a&gt; 逻辑运算符&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGYhDI&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGYhDI.png&#34; alt=&#34;IGYhDI.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&#34;短路运算逻辑中断&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#短路运算逻辑中断&#34;&gt;#&lt;/a&gt; 短路运算 (逻辑中断)&lt;/h5&gt;
&lt;p&gt;原理：左边表达式的值可以确定结果时，就不再继续运算右边的值&lt;/p&gt;
&lt;p&gt;逻辑与：如果表达式 1 结果为真，则返回表达式 2. 如果表达式 1 结果为假，则返回表达式 1&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGYIVP&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGYIVP.png&#34; alt=&#34;IGYIVP.png&#34;&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGYoUf&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGYoUf.png&#34; alt=&#34;IGYoUf.png&#34;&gt;&lt;/a&gt;&lt;br&gt;
 逻辑或：如果表达式 1 结果为真，则返回表达式 1. 如果表达式 1 结果为假，则返回表达式 2.&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGYT58&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGYT58.png&#34; alt=&#34;IGYT58.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&#34;赋值运算符&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#赋值运算符&#34;&gt;#&lt;/a&gt; 赋值运算符&lt;/h5&gt;
&lt;p&gt;把右边的数据赋给左边的变量&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGYLvj&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGYLvj.png&#34; alt=&#34;IGYLvj.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&#34;运算符优先级&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#运算符优先级&#34;&gt;#&lt;/a&gt; 运算符优先级&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGtSaV&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGtSaV.png&#34; alt=&#34;IGtSaV.png&#34;&gt;&lt;/a&gt;&lt;br&gt;
 注意逻辑与的权重大于逻辑或的权重&lt;/p&gt;
&lt;h3 id=&#34;流程控制-分支&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#流程控制-分支&#34;&gt;#&lt;/a&gt; 流程控制 - 分支&lt;/h3&gt;
&lt;h4 id=&#34;流程控制&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#流程控制&#34;&gt;#&lt;/a&gt; 流程控制&lt;/h4&gt;
&lt;p&gt;控制代码按照什么结构顺序来执行&lt;/p&gt;
&lt;p&gt;流程控制有三种结构，分别是顺序结构，分支结构和循环结构&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGti24&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGti24.png&#34; alt=&#34;IGti24.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&#34;顺序流程控制&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#顺序流程控制&#34;&gt;#&lt;/a&gt; 顺序流程控制&lt;/h5&gt;
&lt;p&gt;按照写的代码的顺序从上到下执行，我们现在的代码大多数都是按照顺序流程控制来写的&lt;/p&gt;
&lt;h5 id=&#34;分支流程控制&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#分支流程控制&#34;&gt;#&lt;/a&gt; 分支流程控制&lt;/h5&gt;
&lt;p&gt;从上到下执行代码的过程中，根据不同的条件，执行不同的路径代码，从而得到不同的结果&lt;/p&gt;
&lt;h4 id=&#34;if分支语句&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#if分支语句&#34;&gt;#&lt;/a&gt; if 分支语句&lt;/h4&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;if (条件表达式) {执行语句}
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果条件表达式结果为真就执行大括号里面的执行语句&lt;br&gt;
如果条件表达式结果为假就执行 if 语句后面的代码&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGBOHJ&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGBOHJ.png&#34; alt=&#34;IGBOHJ.png&#34;&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGBx41&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGBx41.png&#34; alt=&#34;IGBx41.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&#34;if-else-双分支语句&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#if-else-双分支语句&#34;&gt;#&lt;/a&gt; if else 双分支语句&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGDp36&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGDp36.png&#34; alt=&#34;IGDp36.png&#34;&gt;&lt;/a&gt;&lt;br&gt;
 如果表达式结果为真，那么执行语句 1 否则执行语句 2&lt;br&gt;
 语句 1 和语句 2 只能二选一执行&lt;br&gt;
 else 后面直接加大括号而不是小括号&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGDVUA&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGDVUA.png&#34; alt=&#34;IGDVUA.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&#34;if-else-多分支语句&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#if-else-多分支语句&#34;&gt;#&lt;/a&gt; if else 多分支语句&lt;/h5&gt;
&lt;p&gt;利用多个条件来选择不同的语句执行，得到不同的结果，是多选 1 的过程&lt;/p&gt;
&lt;p&gt;语法规范:&lt;br&gt;
if (条件表达式 1) {&lt;/p&gt;
&lt;p&gt;} else if (条件表达式 2) {&lt;/p&gt;
&lt;p&gt;} else if …{&lt;/p&gt;
&lt;p&gt;} else {&lt;br&gt;
最后的语句&lt;br&gt;
}&lt;br&gt;
 如果条件表达式 1 满足就执行语句 1，执行完毕后退出整个 if 分支语句&lt;br&gt;
如果条件 1 不满足就判断表达式 2 以此类推&lt;br&gt;
如果全都不成立，则执行最后的 else 里面的语句&lt;br&gt;
注意&lt;br&gt;
 1. 多分支语句还是多选 1 最后只有 1 个语句能执行&lt;br&gt;
 2.else if 里面的条件理论上是可以任意多个的&lt;br&gt;
 3.else if 中间有个空格&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGD9gK&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGD9gK.png&#34; alt=&#34;IGD9gK.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;三元表达式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#三元表达式&#34;&gt;#&lt;/a&gt; 三元表达式&lt;/h4&gt;
&lt;p&gt;有三元运算符组成的式子我们称为三元表达式&lt;/p&gt;
&lt;p&gt;条件表达式 1? 表达式 1: 表达式 2&lt;/p&gt;
&lt;p&gt;如果条件表达式结果为真，则返回表达式 1 的值，如果条件表达式的结果为假，则返回表达式 2 的值&lt;/p&gt;
&lt;h4 id=&#34;switch语句&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#switch语句&#34;&gt;#&lt;/a&gt; switch 语句&lt;/h4&gt;
&lt;p&gt;也是多分支语句可以实现多选 1 的效果&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGDn8P&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGDn8P.png&#34; alt=&#34;IGDn8P.png&#34;&gt;&lt;/a&gt;&lt;br&gt;
 语法结构:&lt;br&gt;
switch (表达式) {&lt;br&gt;
case value1:&lt;br&gt;
 执行语句 1;&lt;br&gt;
break;&lt;br&gt;
case value2:&lt;br&gt;
 执行语句 2;&lt;br&gt;
break;&lt;br&gt;
…………&lt;br&gt;
default :&lt;br&gt;
 执行最后的语句；&lt;br&gt;
}&lt;br&gt;
 利用表达式的值和 case 里面的选项匹配如果匹配上就执行相应的 case 里面的值，如果都没有匹配上就执行 default 里面的语句&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGDKv8&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGDKv8.png&#34; alt=&#34;IGDKv8.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;switch语句和-if-else-if语句的区别&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#switch语句和-if-else-if语句的区别&#34;&gt;#&lt;/a&gt; switch 语句和 if else if 语句的区别&lt;/h4&gt;
&lt;p&gt;一般情况下，他们两个语句可以相互替换&lt;br&gt;
 switch…case 语句 一般在 case 为比较固定值得情况下而 if…else 语句一般来判断范围&lt;br&gt;
 switch 判断时直接跳到判断语句上而 if 语句从上往下一次判断，这样 switch 语句的效率更高一点，但是如果分支少的话 if else if 的效率会更高一点，分支多的时候 switch 语句的效率更高&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGDQKS&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGDQKS.png&#34; alt=&#34;IGDQKS.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;流程控制-循环&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#流程控制-循环&#34;&gt;#&lt;/a&gt; 流程控制 - 循环&lt;/h3&gt;
&lt;p&gt;可以反复不断地循环执行某些代码&lt;/p&gt;
&lt;h4 id=&#34;for循环&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#for循环&#34;&gt;#&lt;/a&gt; for 循环&lt;/h4&gt;
&lt;p&gt;for 循环重复执行某些代码，通常和计数有关&lt;br&gt;
被重复的语句称为循环体，是否重复执行取决于循环的终止条件，由循环体及循环的终止条件&lt;br&gt;
初始化变量 就是用 var 声明的一个普通变量，通常用于作为计数器使用&lt;br&gt;
条件表达式 就是用来决定每一次循环是否继续执行 就是终止的条件&lt;br&gt;
操作表达式 是每次循环最后执行的代码，经常用来对我们的计数器进行更新 (递增或者递减)&lt;/p&gt;
&lt;h5 id=&#34;断点调试&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#断点调试&#34;&gt;#&lt;/a&gt; 断点调试&lt;/h5&gt;
&lt;p&gt;自己在程序的某一行设置一个断点，调试时，程序运行到这一行就会停住，然后你可以一步一步往下调试，调试过程中可以看着各个变量当前的值，出错的话，调试到出错的代码行及硻错误，停下.&lt;/p&gt;
&lt;p&gt;在浏览器调试中的 source 中可以进行断点调试&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGtai8&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGtai8.png&#34; alt=&#34;IGtai8.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&#34;for循环重复相同的代码&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#for循环重复相同的代码&#34;&gt;#&lt;/a&gt; for 循环重复相同的代码&lt;/h5&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;   var num = prompt(&#39;请输入重复的次数&#39;);
   for (i = 1; i &amp;lt;= num; i++) {
   console.log(&#39;你是大傻逼&#39;);
   }
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;for循环重复不同的代码&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#for循环重复不同的代码&#34;&gt;#&lt;/a&gt; for 循环重复不同的代码&lt;/h5&gt;
&lt;p&gt;循环可以重复执行不同的代码，因为计数器变量 i 的存在 i 每次循环值都会变化&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;   for (var i = 1; i &amp;lt;= 100; i++) {
   console.log(&#39;这个人今年&#39; + i + &#39;岁了&#39;);
   }
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;for循环重复相同的操作&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#for循环重复相同的操作&#34;&gt;#&lt;/a&gt; for 循环重复相同的操作&lt;/h5&gt;
&lt;p&gt;例如:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;   var sum = 0, aver = 0;
   for (var i = 1; i &amp;lt;= 100; i++) {
   sum += i
   }
   aver = sum / i
   console.log(aver);
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;双重for循环&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#双重for循环&#34;&gt;#&lt;/a&gt; 双重 for 循环&lt;/h5&gt;
&lt;p&gt;也就是 for 循环嵌套，在一个循环语句中 再定义一个循环语句.&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;for (外层的初始化变量;外层的条件表达式;外层的操作表达式) {
     for (初始化变量;条件表达式;操作表达式){
     }
     }
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;里层的循环可以看成是外层循环的语句&lt;/p&gt;
&lt;h5 id=&#34;for循环小结&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#for循环小结&#34;&gt;#&lt;/a&gt; for 循环小结&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGD1bQ&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGD1bQ.png&#34; alt=&#34;IGD1bQ.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;while循环&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#while循环&#34;&gt;#&lt;/a&gt; while 循环&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGD8Ej&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGD8Ej.png&#34; alt=&#34;IGD8Ej.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;条件表达式结果为 true 则执行循环体 否则 退出循环&lt;/p&gt;
&lt;p&gt;while 循环中应该也有计数器初始化变量，也该有操作表达式完成计数器的更新防止死循环&lt;/p&gt;
&lt;h4 id=&#34;do-while-循环&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#do-while-循环&#34;&gt;#&lt;/a&gt; do while 循环&lt;/h4&gt;
&lt;p&gt;语法结构&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;do {循环体} while (条件表达式)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;执行思路不同的地方跟 while 在于 do whild 先执行一遍循环体再判断条件&lt;br&gt;
 do while 语句至少执行一次循环体&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGDwKU&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGDwKU.png&#34; alt=&#34;IGDwKU.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;循环小结&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#循环小结&#34;&gt;#&lt;/a&gt; 循环小结&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGtwRg&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGtwRg.png&#34; alt=&#34;IGtwRg.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;continue关键字&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#continue关键字&#34;&gt;#&lt;/a&gt; continue 关键字&lt;/h3&gt;
&lt;p&gt;用于立即跳出本次循环，继续下一次循环.&lt;/p&gt;
&lt;h3 id=&#34;break关键字&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#break关键字&#34;&gt;#&lt;/a&gt; break 关键字&lt;/h3&gt;
&lt;p&gt;break 退出整个循环，使循环立马结束&lt;/p&gt;
&lt;h3 id=&#34;命名规范&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#命名规范&#34;&gt;#&lt;/a&gt; 命名规范&lt;/h3&gt;
&lt;h4 id=&#34;标志符命名规范&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#标志符命名规范&#34;&gt;#&lt;/a&gt; 标志符命名规范&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGtrss&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGtrss.png&#34; alt=&#34;IGtrss.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;操作符规范&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#操作符规范&#34;&gt;#&lt;/a&gt; 操作符规范&lt;/h4&gt;
&lt;p&gt;操作符左右两侧各保留一个空格&lt;br&gt;
单行注释在 // 后面敲个空格&lt;/p&gt;
&lt;h4 id=&#34;循环作业&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#循环作业&#34;&gt;#&lt;/a&gt; 循环作业&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGtgoV&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGtgoV.png&#34; alt=&#34;IGtgoV.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;javascript数组&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#javascript数组&#34;&gt;#&lt;/a&gt; javascript 数组&lt;/h3&gt;
&lt;h4 id=&#34;数组的概念&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数组的概念&#34;&gt;#&lt;/a&gt; 数组的概念&lt;/h4&gt;
&lt;p&gt;数组是一组数据的集合，其中每个数据都被称为元素，在数组中可以存放任何类型的元素，数组是可以将数据存储在单个变量下的优雅方式&lt;/p&gt;
&lt;h4 id=&#34;创建数组&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#创建数组&#34;&gt;#&lt;/a&gt; 创建数组&lt;/h4&gt;
&lt;p&gt;1.new 创建数组&lt;br&gt;
 2. 利用数组关键字创造数组&lt;/p&gt;
&lt;h5 id=&#34;利用new创建数组&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#利用new创建数组&#34;&gt;#&lt;/a&gt; 利用 new 创建数组&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGrSaj&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGrSaj.png&#34; alt=&#34;IGrSaj.png&#34;&gt;&lt;/a&gt;&lt;br&gt;
 注意 Array 的 A 要大写&lt;/p&gt;
&lt;h5 id=&#34;利用数组字面量创建数组&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#利用数组字面量创建数组&#34;&gt;#&lt;/a&gt; 利用数组字面量创建数组&lt;/h5&gt;
&lt;p&gt;[] 是数组的的字面量&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;var arr = [];&lt;br&gt;
 这样便创建了一个空的数组&lt;br&gt;
 var arr = [1,1,2,3,‘pink’,true]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在数组内可以放任何的数据类型，但是每一个数据之间必须用逗号分隔.&lt;/p&gt;
&lt;h4 id=&#34;获取数组元素&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#获取数组元素&#34;&gt;#&lt;/a&gt; 获取数组元素&lt;/h4&gt;
&lt;h5 id=&#34;数组的索引&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数组的索引&#34;&gt;#&lt;/a&gt; 数组的索引&lt;/h5&gt;
&lt;p&gt;索引又被称为下标：用来访问数组元素的序号 (数组下标从 0 开始)&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGNAfS&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGNAfS.png&#34; alt=&#34;IGNAfS.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt; 数组名[索引号]
 console.log(arr[1])
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;索引号从 0 开始&lt;/strong&gt;&lt;br&gt;
如果没有该数组元素 就会输出 undefined&lt;/p&gt;
&lt;h4 id=&#34;遍历数组&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#遍历数组&#34;&gt;#&lt;/a&gt; 遍历数组&lt;/h4&gt;
&lt;p&gt;遍历：就是把数组中的每个元素从头到尾访问一次&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;eg:var arr = [1, 2, 3, 4, 5, &#39;pink&#39;];
   for (i = 0; i &amp;lt; 6; i++) {
   console.log(arr[i]);
   }
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;输出的时候计数器当索引号来用&lt;/p&gt;
&lt;h5 id=&#34;数组长度&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数组长度&#34;&gt;#&lt;/a&gt; 数组长度&lt;/h5&gt;
&lt;p&gt;数组名.length  可以访问数组中的数组元素的数量&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;console.log(arr.length);
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;同时 数组名.length 可以动态检测数组元素的个数&lt;/p&gt;
&lt;h4 id=&#34;数组中新增元素&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数组中新增元素&#34;&gt;#&lt;/a&gt; 数组中新增元素&lt;/h4&gt;
&lt;h5 id=&#34;通过修改length长度新增数组长度&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#通过修改length长度新增数组长度&#34;&gt;#&lt;/a&gt; 通过修改 length 长度新增数组长度&lt;/h5&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;   var arr = [&#39;pink&#39;, &#39;red&#39;, &#39;blue&#39;];
   arr.length = 5
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果扩容的数组元素中没有给值，其中的元素是 undefined&lt;/p&gt;
&lt;h5 id=&#34;修改索引号-增加数组元素&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#修改索引号-增加数组元素&#34;&gt;#&lt;/a&gt; 修改索引号 增加数组元素&lt;/h5&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;var arr = [&#39;pink&#39;, &#39;red&#39;, &#39;blue&#39;];
arr[3] = &#39;pink&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果这个索引号原先已经被占用，就会替换原来的数组元素&lt;br&gt;
&lt;strong&gt;不要直接给数组名赋值，否则会覆盖掉以前的数据，导致数据一个都没有了&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;筛选数组的方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#筛选数组的方法&#34;&gt;#&lt;/a&gt; 筛选数组的方法&lt;/h4&gt;
&lt;h5 id=&#34;方法1&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#方法1&#34;&gt;#&lt;/a&gt; 方法 1&lt;/h5&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;   var arr = [1, 2, 3, 4, 5, 6, 8, 11, 45, 13, 48, 46, 13];
   var newArr = [];
   var j = 0;
   for (var i = 0; i &amp;lt; arr.length; i++) {
       if (arr[i] &amp;gt; 10) {
           newArr[j] = arr[i]
           j++
       }
   }
   console.log(newArr);
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;这里通过声明一个变量 j 来使新数组从 0 开始&lt;/p&gt;
&lt;h5 id=&#34;方法2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#方法2&#34;&gt;#&lt;/a&gt; 方法 2&lt;/h5&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;   var arr = [1, 2, 3, 4, 5, 6, 8, 11, 45, 13, 48, 46, 13];
   var newArr = [];
   for (var i = 0; i &amp;lt; arr.length; i++) {
       if (arr[i] &amp;gt; 10) {
           newArr[newArr.length] = arr[i]
       }
   }
   console.log(newArr);
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;将 j 替换成 newArr, 最开始当新数组里面没有元素时是 0，当有元素时 newArr.length 开始不断增多&lt;/p&gt;
&lt;h4 id=&#34;翻转数组&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#翻转数组&#34;&gt;#&lt;/a&gt; 翻转数组&lt;/h4&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;   var arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];
   var newArr = [];
   for (i = arr.length - 1; i &amp;gt;= 0; i--) {
       newArr[newArr.length] = arr[i]
   }
   console.log(newArr);
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;这里需要注意的是：元素的索引号的最大值等于数组长度 - 1&lt;/p&gt;
&lt;h4 id=&#34;冒泡排序&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#冒泡排序&#34;&gt;#&lt;/a&gt; 冒泡排序&lt;/h4&gt;
&lt;p&gt;是一种算法，把一系列数组按照一定的顺序进行排列显示 (从小到大或者从大到小)&lt;br&gt;
 算法：观察执行过程，从而找到其中的规律，并且找到代码&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;   var arr = [1, 5, 4, 3, 2];
   for (var i = 0; i &amp;lt; arr.length - 1; i++) { // 外层循环次数
       for (var j = 0; j &amp;lt; arr.length - i - 1; j++) { // 内层循环次数
           if (arr[j] &amp;gt; arr[j + 1]) {
               var temp = arr[j]
               arr[j] = arr[j + 1]
               arr[j + 1] = temp
           }
       }
   }
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;javascript函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#javascript函数&#34;&gt;#&lt;/a&gt; javascript 函数&lt;/h3&gt;
&lt;h4 id=&#34;函数的概念&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#函数的概念&#34;&gt;#&lt;/a&gt; 函数的概念&lt;/h4&gt;
&lt;p&gt;js 中经常会定义相同的代码，这些代码可能会大量使用&lt;br&gt;
函数：就是封装了一段可被重复调用执行的代码块，通过调用代码块可以实现大量代码的重复使用.&lt;/p&gt;
&lt;h4 id=&#34;函数的使用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#函数的使用&#34;&gt;#&lt;/a&gt; 函数的使用&lt;/h4&gt;
&lt;p&gt;步骤：1. 声明函数 2. 调用函数&lt;/p&gt;
&lt;h5 id=&#34;声明函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#声明函数&#34;&gt;#&lt;/a&gt; 声明函数&lt;/h5&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;function 函数名() {函数体}
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;注意事项：1.function 声明函数的关键字 全部小写 2. 函数是做某件事情，函数名一般是动词 3. 函数不调用自己不会执行&lt;/p&gt;
&lt;h5 id=&#34;调用函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#调用函数&#34;&gt;#&lt;/a&gt; 调用函数&lt;/h5&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;函数名();
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;调用函数时，千万不要忘了加小括号.&lt;/p&gt;
&lt;h5 id=&#34;函数的参数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#函数的参数&#34;&gt;#&lt;/a&gt; 函数的参数&lt;/h5&gt;
&lt;p&gt;我们可以利用函数的参数实现函数重复不同的代码&lt;br&gt;
参数: 1. 形参 2. 实参&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGrNod&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGrNod.png&#34; alt=&#34;IGrNod.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;function (形参1,形参2,....) {  在声明函数的小括号里面是形参
 }
函数名(实参1,实参2...)     在函数调用的小括号里面是实参
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;形参类似于一个变量来接受实参的&lt;br&gt;
函数的参数可以有也可以没有，个数不限&lt;br&gt;
多个参数之间用逗号隔开&lt;/p&gt;
&lt;h6 id=&#34;函数形参实参个数匹配&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#函数形参实参个数匹配&#34;&gt;#&lt;/a&gt; 函数形参实参个数匹配&lt;/h6&gt;
&lt;p&gt;1. 如果实参的个数和形参的个数一直，则正常输出结果&lt;br&gt;
 2. 如果实参的个数多于形参的个数，会取到形参的个数，实参中多的自动忽略&lt;br&gt;
 3. 如果实参的个数小于形参的个数，num2 可以看做一个变量但是没有接收值，所以最终的结果就是 undefined&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGN3fU&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGN3fU.png&#34; alt=&#34;IGN3fU.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h6 id=&#34;函数参数小结&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#函数参数小结&#34;&gt;#&lt;/a&gt; 函数参数小结&lt;/h6&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGrBSP&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGrBSP.png&#34; alt=&#34;IGrBSP.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&#34;函数的返回值&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#函数的返回值&#34;&gt;#&lt;/a&gt; 函数的返回值&lt;/h5&gt;
&lt;h6 id=&#34;return语句&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#return语句&#34;&gt;#&lt;/a&gt; return 语句&lt;/h6&gt;
&lt;p&gt;函数只是实现某种功能，最终的结果需要返回给函数的调用者函数名 () 通过 return 实现&lt;br&gt;
只要函数遇到 return 就把后面的结果返回给函数的调用者 函数名 ()=return 后面的结果&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt; function 函数名() {
       return 需要返回的结果;
 }
 函数名();
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;代码验证&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;   function getSum(num1, num2) {
       return num1 + num2;
   }
   console.log(getSum(1, 3));
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;这样输出的结果就是 4 (来自于 1+3)&lt;/p&gt;
&lt;p&gt;return 终止函数：函数遇到 return 就终止函数&lt;br&gt;
 return 的返回值:return 只能返回一个值，如果有多个值，return 只返回最后一个值&lt;br&gt;
如果想要返回多个数值时，我们可以将数值放在一个数组里面，一个数组代表一个结果&lt;br&gt;
函数如果 return 则返回的是 return 后面的值，如果函数没有 return 就返回 undefined&lt;br&gt;
break,continue,return 的区别:&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGrDQf&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGrDQf.png&#34; alt=&#34;IGrDQf.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;函数的理解&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#函数的理解&#34;&gt;#&lt;/a&gt; 函数的理解&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGNJl4&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGNJl4.png&#34; alt=&#34;IGNJl4.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;函数的作业&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#函数的作业&#34;&gt;#&lt;/a&gt; 函数的作业&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGrWYn&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGrWYn.png&#34; alt=&#34;IGrWYn.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;arguments的作用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#arguments的作用&#34;&gt;#&lt;/a&gt; arguments 的作用&lt;/h4&gt;
&lt;p&gt;当我们不确定有多少个参数传递时，可以用 argument 在获取，他实际上是当前函数的一个内置对象，arguements 存储了传递过来的所有实参&lt;/p&gt;
&lt;p&gt;arguments 实际上是伪数组.&lt;br&gt;
 伪数组:&lt;br&gt;
1. 具有数组的 length 属性.&lt;br&gt;
2. 按照索引的方式进行存储.&lt;br&gt;
3. 没有真正数组的一些方法:pop () 等&lt;/p&gt;
&lt;h4 id=&#34;函数可以调用另外一个函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#函数可以调用另外一个函数&#34;&gt;#&lt;/a&gt; 函数可以调用另外一个函数&lt;/h4&gt;
&lt;h4 id=&#34;函数的两种声明方式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#函数的两种声明方式&#34;&gt;#&lt;/a&gt; 函数的两种声明方式&lt;/h4&gt;
&lt;p&gt;1. 利用函数关键字自定义函数&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;function fn() {
}
fn()
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;也被称为命名函数&lt;/p&gt;
&lt;p&gt;2. 函数表达式&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;var 变量名 = function() {}
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;又被叫做匿名函数&lt;br&gt;
这是变量名不是函数名&lt;br&gt;
函数表达式声明方式跟声明变量差不多，只不过变量里面存的是值，而函数表达式里面存的是函数。&lt;/p&gt;
&lt;h3 id=&#34;作用域&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#作用域&#34;&gt;#&lt;/a&gt; 作用域&lt;/h3&gt;
&lt;h4 id=&#34;作用域概述&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#作用域概述&#34;&gt;#&lt;/a&gt; 作用域概述&lt;/h4&gt;
&lt;p&gt;1.js 的作用域就是代码名字在某个范围内起作用和效果 目的是为了提高程序的可靠性，重要的是减少命名冲突&lt;br&gt;
 2.js 的作用域 (es6) 之前：全局作用域 和 局部作用域&lt;br&gt;
 3. 全局作用域：整个 script 标签 或者是一个单独的 js 文件&lt;br&gt;
 4. 局部作用域：在函数内部就是局部作用域，这个代码的名字只在函数内部起作用和效果 又叫做函数作用域&lt;/p&gt;
&lt;h4 id=&#34;变量的作用域&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#变量的作用域&#34;&gt;#&lt;/a&gt; 变量的作用域&lt;/h4&gt;
&lt;p&gt;根据作用域的不同我们变量分为全局变量和局部变量&lt;br&gt;
 1. 全局变量：在全局作用域下的变量 在全局下都可以使用 (当然包括函数内部)&lt;br&gt;
 2. 局部变量：在局部作用域下的变量 在函数内部的变量就是局部变量 只能在函数内部使用&lt;br&gt;
 3. 特殊情况：如果在函数内部没有声明直接赋值的变量也称为全局变量，函数的形参也可以看成局部变量&lt;/p&gt;
&lt;p&gt;从执行效率来看全局变量和局部变量&lt;br&gt;
 1. 全局变量只有浏览器关闭的时候才会销毁，比较占内存资源&lt;br&gt;
 2. 局部变量 当我们程序执行完毕就会销毁，比较节约内存支援&lt;br&gt;
&lt;strong&gt;现阶段 js 没有块级作用域&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;作用域链&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#作用域链&#34;&gt;#&lt;/a&gt; 作用域链&lt;/h4&gt;
&lt;p&gt;内部函数访问外部函数的电量，采取的是链式查找的方式来决定取哪种值，这种结构我们称为作用域链&lt;br&gt;
内部函数是可以访问外部函数的变量的&lt;/p&gt;
&lt;h3 id=&#34;javascript预解析&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#javascript预解析&#34;&gt;#&lt;/a&gt; javascript 预解析&lt;/h3&gt;
&lt;p&gt;1.js 解析器在运行 js 代码的时候分为两部分：先进行预解析，再进行代码执行&lt;br&gt;
 (2). 预解析:js 引擎会把 js 里面所有的 var 还有 function 提升到当前作用域的最前面&lt;br&gt;
 (3). 代码执行：按照代码书写的顺序从上往下执行.&lt;br&gt;
2. 预解析分为变量预解析 (变量提升) 和函数预解析 (函数执行)&lt;br&gt;
(1). 变量提升：就是把所有的变量声明提升到当前的作用域最前面 不提升赋值&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;console.log(num);
var num= 10;
在预解析的时候执行顺序是这样的
var num;
console.log(num);
num=10
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;(2). 函数声明：就是先把函数声明提升到当前作用域的最前面，不执行函数.&lt;/p&gt;
&lt;h3 id=&#34;js对象&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#js对象&#34;&gt;#&lt;/a&gt; js 对象&lt;/h3&gt;
&lt;h4 id=&#34;对象概念&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#对象概念&#34;&gt;#&lt;/a&gt; 对象概念&lt;/h4&gt;
&lt;p&gt;对象是一个具体的事物 (不是泛指)&lt;br&gt;
 比如 明星不是对象 但刘德华是对象&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGNspD&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGNspD.png&#34; alt=&#34;IGNspD.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;对象的使用方向&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#对象的使用方向&#34;&gt;#&lt;/a&gt; 对象的使用方向&lt;/h4&gt;
&lt;p&gt;保存一个值可以使用变量，保存多个值可以使用数组，但如果保存一个人的完整信就需要用到对象了&lt;/p&gt;
&lt;h4 id=&#34;创建对象的三种方式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#创建对象的三种方式&#34;&gt;#&lt;/a&gt; 创建对象的三种方式&lt;/h4&gt;
&lt;p&gt;1. 利用字面量创建对象&lt;br&gt;
 2. 利用 new Object 创建对象&lt;br&gt;
 3. 利用构造函数创建对象&lt;/p&gt;
&lt;h4 id=&#34;对象字面量&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#对象字面量&#34;&gt;#&lt;/a&gt; 对象字面量&lt;/h4&gt;
&lt;p&gt;{} 是对象的字面量&lt;br&gt;
 1. 里面的属性或者方法我们采取键值对的形式 键 属性名：值 属性值&lt;br&gt;
 2. 多个属性或者方法中间用逗号隔开，函数后面加；而不加逗号&lt;br&gt;
 3. 方法冒号后面跟的是一个匿名函数&lt;/p&gt;
&lt;h4 id=&#34;使用对象&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#使用对象&#34;&gt;#&lt;/a&gt; 使用对象&lt;/h4&gt;
&lt;p&gt;调用对象的属性 我们采取 对象名。属性名&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;console.log(obj.uname)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;其中这个。我们可以理解为的 比如说对象的属性&lt;br&gt;
调用属性还有一种方法 对象名 [‘属性名’]&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;console.log(abj[‘age’])&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;需要注意的是 后面这种方法需要’&#39; 而前面一种方法不需要&lt;br&gt;
调用对象中的函数时，千万不要忘记添加小括号&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGN66H&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGN66H.png&#34; alt=&#34;IGN66H.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;变量-属性-函数-方法的区别&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#变量-属性-函数-方法的区别&#34;&gt;#&lt;/a&gt; 变量 属性 函数 方法的区别&lt;/h4&gt;
&lt;p&gt;相同点：都是用来存储数据的&lt;br&gt;
不同点：1. 变量 单独声明并赋值 使用的时候直接写变量名 单独存在&lt;br&gt;
 2. 属性 在对象里面的不需要声明的 使用的时候必须是 对象。属性&lt;/p&gt;
&lt;p&gt;函数和方法&lt;br&gt;
相同点：都是实现某种功能 做某件事&lt;br&gt;
不同点：函数时单独声明 并且调用的 是单独存在的&lt;br&gt;
方法 在对象里面&lt;/p&gt;
&lt;h4 id=&#34;利用new-object来创建对象&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#利用new-object来创建对象&#34;&gt;#&lt;/a&gt; 利用 new Object 来创建对象&lt;/h4&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;var obj = new Object();   创建了一个空的对象
obj.uname = &#39;张三丰&#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;利用 等号 = 赋值的方法 添加对象的属性和方法&lt;br&gt;
每个属性和方法之间用分号结束&lt;/p&gt;
&lt;h4 id=&#34;利用构造函数创建对象&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#利用构造函数创建对象&#34;&gt;#&lt;/a&gt; 利用构造函数创建对象&lt;/h4&gt;
&lt;p&gt;构造函数 就是把我们对象里面一些相同的属性和方法抽象出来封装到函数里面&lt;br&gt;
语法格式:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;function 构造函数名() {
    this.属性 = 值;
    this.方法 = function() {}
 }
使用: new 构造函数名();
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;1. 构造函数名的首字母要大写&lt;br&gt;
 2. 构造函数 不需要 return 就可以返回结果&lt;br&gt;
 3. 我们调用构造函数必须使用 new&lt;br&gt;
4. 属性和方法前面必须添加 this&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGroOU&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGroOU.png&#34; alt=&#34;IGroOU.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;for-in遍历我们的对象&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#for-in遍历我们的对象&#34;&gt;#&lt;/a&gt; for in 遍历我们的对象&lt;/h4&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;for (变量 in 对象) {
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;javascript内置对象&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#javascript内置对象&#34;&gt;#&lt;/a&gt; javascript 内置对象&lt;/h3&gt;
&lt;p&gt;1. 自定义对象&lt;br&gt;
 2. 内置对象&lt;br&gt;
 3. 浏览器对象 (js 特有)&lt;/p&gt;
&lt;p&gt;内置对象是 js 语言自带的一些对象，这些对象供开发者使用，并提供了一些常用的或者是最基本的属性和方法&lt;br&gt;
 Math Date Array String&lt;/p&gt;
&lt;h4 id=&#34;查阅文档&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#查阅文档&#34;&gt;#&lt;/a&gt; 查阅文档&lt;/h4&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;https://developer.mozilla.org/zh-CN
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGNW7t&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGNW7t.png&#34; alt=&#34;IGNW7t.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;math对象&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#math对象&#34;&gt;#&lt;/a&gt; Math 对象&lt;/h4&gt;
&lt;p&gt;不是一个构造函数，不用 new 来调用，直接使用即可&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGr7mF&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGr7mF.png&#34; alt=&#34;IGr7mF.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Math.round 四舍五入中.5 是特殊数字 他往大了去  比如 - 1.5 的结果是 - 1&lt;/p&gt;
&lt;h5 id=&#34;math随机数法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#math随机数法&#34;&gt;#&lt;/a&gt; Math 随机数法&lt;/h5&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;console.log(Math.random());
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;date日期数法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#date日期数法&#34;&gt;#&lt;/a&gt; Date 日期数法&lt;/h4&gt;
&lt;p&gt;是一个构造函数 必须使用 new 来调用创建我们的日期对象&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;   var day = new Date();
   console.log(day);
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;使用 date 如果没有参数 返回当前系统的当前时间&lt;br&gt;
参数常用的写法 数字型 2019,10,01 或者是字符串型’2019-10-01’&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGrbTJ&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGrbTJ.png&#34; alt=&#34;IGrbTJ.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&#34;日期格式化date&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#日期格式化date&#34;&gt;#&lt;/a&gt; 日期格式化 Date&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGNo9S&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGNo9S.png&#34; alt=&#34;IGNo9S.png&#34;&gt;&lt;/a&gt;&lt;br&gt;
 返回的月份小一个月 记得月份 +1&lt;/p&gt;
&lt;h5 id=&#34;获取日期的总的毫秒形式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#获取日期的总的毫秒形式&#34;&gt;#&lt;/a&gt; 获取日期的总的毫秒形式&lt;/h5&gt;
&lt;p&gt;Date 对象是基于 1970 年 1 月 1 日 (世界标准时间) 起的毫秒数&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;1.valueOf()    getTime()
2.var date1= +new Date();
3.H5新增 console(Date.now());
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;数组对象array&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数组对象array&#34;&gt;#&lt;/a&gt; 数组对象 Array&lt;/h4&gt;
&lt;p&gt;1. 数组字面量创建&lt;br&gt;
 2. 利用 new Array () 创建&lt;/p&gt;
&lt;p&gt;检测是非为数组&lt;br&gt;
 1.instanceof Array&lt;br&gt;
2.Array.isArray (参数)&lt;/p&gt;
&lt;h5 id=&#34;添加删除数组元素的方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#添加删除数组元素的方法&#34;&gt;#&lt;/a&gt; 添加删除数组元素的方法&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGN7cQ&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGN7cQ.png&#34; alt=&#34;IGN7cQ.png&#34;&gt;&lt;/a&gt;&lt;br&gt;
 添加:arr.push ();arr.unshift ();&lt;br&gt;
 删除:arr.pop ();arr.shift;&lt;/p&gt;
&lt;h5 id=&#34;数组排序&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数组排序&#34;&gt;#&lt;/a&gt; 数组排序&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGNqns&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGNqns.png&#34; alt=&#34;IGNqns.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;       arr1.sort(function (a, b) {
       return a - b //升序的顺序排列
       //return b - a 是降序的顺序排列
        });
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;数组索引方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数组索引方法&#34;&gt;#&lt;/a&gt; 数组索引方法&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGNO7q&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGNO7q.png&#34; alt=&#34;IGNO7q.png&#34;&gt;&lt;/a&gt;&lt;br&gt;
 注意，如果有两个重复 只范湖第一个满足条件的索引号。如果里面没有相对元素返回的结果是 - 1;&lt;/p&gt;
&lt;h5 id=&#34;数组转化成字符串&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数组转化成字符串&#34;&gt;#&lt;/a&gt; 数组转化成字符串&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGUiu9&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGUiu9.png&#34; alt=&#34;IGUiu9.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;字符串对象&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#字符串对象&#34;&gt;#&lt;/a&gt; 字符串对象&lt;/h4&gt;
&lt;p&gt;基本包装类型：就是把简单数据类型 包装称为了 复杂数据类型&lt;br&gt;
 (1) 把简单数据类型包装称为复杂数据类型&lt;br&gt;
 var temp = new String (‘Andy’)&lt;br&gt;
(2) 把临时变量的值给 str&lt;br&gt;
str=temp&lt;br&gt;
 (3) 销毁这个临时变量&lt;br&gt;
 temp = null&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGrOYR&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGrOYR.png&#34; alt=&#34;IGrOYR.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&#34;字符串的不可变型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#字符串的不可变型&#34;&gt;#&lt;/a&gt; 字符串的不可变型&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGU1HI&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGU1HI.png&#34; alt=&#34;IGU1HI.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;   var str = &#39;改革吹风吹满地&#39;
   console.log(str.indexOf(&#39;吹&#39;,3));
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;根据位置返回字符&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#根据位置返回字符&#34;&gt;#&lt;/a&gt; 根据位置返回字符&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGUUgg&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGUUgg.png&#34; alt=&#34;IGUUgg.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&#34;字符串操作方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#字符串操作方法&#34;&gt;#&lt;/a&gt; 字符串操作方法&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGUavQ&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGUavQ.png&#34; alt=&#34;IGUavQ.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;   var str = &#39;改革春风吹满地&#39;
   console.log(str.substr(2, 2));  //第一个2是索引号的2  第二个2是取几个字符
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;替换字符串&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#替换字符串&#34;&gt;#&lt;/a&gt; 替换字符串&lt;/h5&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;replace(&#39;被替换的字符&#39;,&#39;替换为的字符&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果有相同的两个字符 只会替换前面一个字符&lt;/p&gt;
&lt;h5 id=&#34;把字符串转化成数组&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#把字符串转化成数组&#34;&gt;#&lt;/a&gt; 把字符串转化成数组&lt;/h5&gt;
&lt;p&gt;split (‘分隔符’) 把字符转换成数组&lt;br&gt;
 join (‘分隔符’) 把数组转换成字符串&lt;/p&gt;
&lt;p&gt;split 中的分隔符取决于原字符串中的分隔符是什么&lt;/p&gt;
&lt;h3 id=&#34;web-apis&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#web-apis&#34;&gt;#&lt;/a&gt; Web APIs&lt;/h3&gt;
&lt;p&gt;浏览器提供的一套操作浏览器功能和页面元素的 API&lt;/p&gt;
&lt;h4 id=&#34;dom&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#dom&#34;&gt;#&lt;/a&gt; DOM&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGrvSx&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGrvSx.png&#34; alt=&#34;IGrvSx.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;获取页面元素&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#获取页面元素&#34;&gt;#&lt;/a&gt; 获取页面元素&lt;/h4&gt;
&lt;h5 id=&#34;id获取&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#id获取&#34;&gt;#&lt;/a&gt; ID 获取&lt;/h5&gt;
&lt;p&gt;getElementByld()&lt;br&gt;
 console.dir (); 打印我们返回的元素对象 更好地查看里面的属性和方法&lt;/p&gt;
&lt;h5 id=&#34;根据标签名来获取&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#根据标签名来获取&#34;&gt;#&lt;/a&gt; 根据标签名来获取&lt;/h5&gt;
&lt;p&gt;element.getElementsByTagName (‘标签名’)&lt;br&gt;
 1. 获取过来元素对象的集合 以伪数组的形式储存&lt;br&gt;
 2. 如果页面中只有一个元素 返回的还是伪数组的形式&lt;br&gt;
 3. 如果页面中没有这个元素 返回的是空的伪数组&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;   var lis = document.getElementsByTagName(&#39;ul&#39;)
   var li = lis[0].getElementsByTagName(&#39;li&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;根据类型来获取新增html5属性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#根据类型来获取新增html5属性&#34;&gt;#&lt;/a&gt; 根据类型来获取 (新增 Html5 属性)&lt;/h5&gt;
&lt;p&gt;document.getElementsByClassName (‘类名’)&lt;br&gt;
 document.querySelector (‘选择器’) 根据选择器返回第一个元素对象&lt;br&gt;
 document.querySelectorAll (‘选择器’) 根据选择器返回所有的集合&lt;/p&gt;
&lt;h5 id=&#34;获取特殊元素&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#获取特殊元素&#34;&gt;#&lt;/a&gt; 获取特殊元素&lt;/h5&gt;
&lt;p&gt;1. 获取 body 元素&lt;br&gt;
 document.body&lt;br&gt;
2. 获取 html 元素&lt;br&gt;
 document.documentElement&lt;/p&gt;
&lt;h4 id=&#34;事件基础&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#事件基础&#34;&gt;#&lt;/a&gt; 事件基础&lt;/h4&gt;
&lt;p&gt;js 让我们有能力创建动态页面，而时间是可以被 js 侦测到的行为&lt;br&gt;
在网页中每个元素都可以产生某些触发 js 的事件&lt;/p&gt;
&lt;p&gt;事件的组成部分&lt;br&gt;
 1. 事件源：事件被触发的对象&lt;br&gt;
 2. 事件类型：如何触发 什么事件 比如 鼠标点击 (onclick) 触发  还是鼠标经过触发&lt;br&gt;
 3. 事件处理程序：通过函数赋值的方式完成&lt;/p&gt;
&lt;h5 id=&#34;执行事件的步骤&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#执行事件的步骤&#34;&gt;#&lt;/a&gt; 执行事件的步骤&lt;/h5&gt;
&lt;p&gt;1. 获取事件源&lt;br&gt;
 2. 绑定事件&lt;br&gt;
 3. 添加事件处理程序 (采取函数赋值的形式)&lt;/p&gt;
&lt;h4 id=&#34;操作元素&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#操作元素&#34;&gt;#&lt;/a&gt; 操作元素&lt;/h4&gt;
&lt;h5 id=&#34;改变元素内容&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#改变元素内容&#34;&gt;#&lt;/a&gt; 改变元素内容&lt;/h5&gt;
&lt;p&gt;element.innerText&lt;br&gt;
element.innerHTML&lt;br&gt;
 这两个属性是可读写的 可以获取元素里面的内容&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGUy5V&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGUy5V.png&#34; alt=&#34;IGUy5V.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&#34;改变元素属性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#改变元素属性&#34;&gt;#&lt;/a&gt; 改变元素属性&lt;/h5&gt;
&lt;h5 id=&#34;表单元素属性设置&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#表单元素属性设置&#34;&gt;#&lt;/a&gt; 表单元素属性设置&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGURv4&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGURv4.png&#34; alt=&#34;IGURv4.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&#34;修改样式属性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#修改样式属性&#34;&gt;#&lt;/a&gt; 修改样式属性&lt;/h5&gt;
&lt;p&gt;element.style 行内样式操作&lt;br&gt;
 element.className 类名样式操作&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGaMGT&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGaMGT.png&#34; alt=&#34;IGaMGT.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;onfocus 获得焦点事件&lt;br&gt;
 onblur 失去焦点事件&lt;/p&gt;
&lt;h5 id=&#34;操作元素总结&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#操作元素总结&#34;&gt;#&lt;/a&gt; 操作元素总结&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGaNIx&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGaNIx.png&#34; alt=&#34;IGaNIx.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&#34;排他思想&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#排他思想&#34;&gt;#&lt;/a&gt; 排他思想&lt;/h5&gt;
&lt;p&gt;先清除样式，再给当前元素设置样式&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;   var btn = document.getElementsByTagName(&#39;button&#39;)
   for (i = 0; i &amp;lt; btn.length; i++) {
       btn[i].onclick = function () {
           for (i = 0; i &amp;lt; btn.length; i++) {
               btn[i].style.backgroundColor = &#39;white&#39;
           }
           this.style.backgroundColor = &#39;pink&#39;
       }
   }
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;鼠标经过 onmouseover&lt;br&gt;
 鼠标离开 onmouseout&lt;/p&gt;
&lt;h5 id=&#34;自定义属性值的操作&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#自定义属性值的操作&#34;&gt;#&lt;/a&gt; 自定义属性值的操作&lt;/h5&gt;
&lt;h6 id=&#34;获取属性值&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#获取属性值&#34;&gt;#&lt;/a&gt; 获取属性值&lt;/h6&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGa0zD&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGa0zD.png&#34; alt=&#34;IGa0zD.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h6 id=&#34;设置属性值&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#设置属性值&#34;&gt;#&lt;/a&gt; 设置属性值&lt;/h6&gt;
&lt;p&gt;element. 属性 = ‘值’&lt;br&gt;
element.setAttribute (‘属性’,‘值’)&lt;/p&gt;
&lt;p&gt;setAttribute 主要用于设置自定义属性&lt;/p&gt;
&lt;p&gt;removeAttribute 移除属性&lt;/p&gt;
&lt;h6 id=&#34;h5自定义属性值&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#h5自定义属性值&#34;&gt;#&lt;/a&gt; H5 自定义属性值&lt;/h6&gt;
&lt;p&gt;H5 新规范：自定义属性都用 data- 开头&lt;br&gt;
 H5 新增的获取自定义属性的方法 &lt;a href=&#34;http://element.dataset.XXX&#34;&gt;element.dataset.XXX&lt;/a&gt;&lt;br&gt;
dataset 是一个集合 里面存放了所有以 data 开头的自定义属性&lt;br&gt;
如果自定义属性里面有多个 - 链接的单词，我们获取的时候采取驼峰命名法&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGrz6K&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGrz6K.png&#34; alt=&#34;IGrz6K.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;节点操作&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#节点操作&#34;&gt;#&lt;/a&gt; 节点操作&lt;/h4&gt;
&lt;p&gt;为什么要学节点操作&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGaRFP&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGaRFP.png&#34; alt=&#34;IGaRFP.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&#34;节点概述&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#节点概述&#34;&gt;#&lt;/a&gt; 节点概述&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGa4SS&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGa4SS.png&#34; alt=&#34;IGa4SS.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&#34;节点层级&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#节点层级&#34;&gt;#&lt;/a&gt; 节点层级&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGaIyQ&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGaIyQ.png&#34; alt=&#34;IGaIyQ.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&#34;父节点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#父节点&#34;&gt;#&lt;/a&gt; 父节点&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGaHwn&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGaHwn.png&#34; alt=&#34;IGaHwn.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&#34;子节点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#子节点&#34;&gt;#&lt;/a&gt; 子节点&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGaLF0&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGaLF0.png&#34; alt=&#34;IGaLF0.png&#34;&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGaboq&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGaboq.png&#34; alt=&#34;IGaboq.png&#34;&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGdSOJ&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGdSOJ.png&#34; alt=&#34;IGdSOJ.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&#34;兄弟节点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#兄弟节点&#34;&gt;#&lt;/a&gt; 兄弟节点&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGdCwR&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGdCwR.png&#34; alt=&#34;IGdCwR.png&#34;&gt;&lt;/a&gt;&lt;br&gt;
 解决兄弟节点的兼容性问题:&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGdumd&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGdumd.png&#34; alt=&#34;IGdumd.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&#34;创建和删除节点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#创建和删除节点&#34;&gt;#&lt;/a&gt; 创建和删除节点&lt;/h5&gt;
&lt;h6 id=&#34;创建节点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#创建节点&#34;&gt;#&lt;/a&gt; 创建节点&lt;/h6&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGsC0e&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGsC0e.png&#34; alt=&#34;IGsC0e.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h6 id=&#34;添加节点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#添加节点&#34;&gt;#&lt;/a&gt; 添加节点&lt;/h6&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGdGp8&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGdGp8.png&#34; alt=&#34;IGdGp8.png&#34;&gt;&lt;/a&gt;&lt;br&gt;
node.appendChild(child)&lt;br&gt;
 node.insertbefore (child, 指定元素);&lt;/p&gt;
&lt;h6 id=&#34;删除节点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#删除节点&#34;&gt;#&lt;/a&gt; 删除节点&lt;/h6&gt;
&lt;p&gt;code.removeChild (节点)&lt;br&gt;
eg:ul.removeChild(ul.children[0])&lt;/p&gt;
&lt;h6 id=&#34;复制节点克隆节点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#复制节点克隆节点&#34;&gt;#&lt;/a&gt; 复制节点 (克隆节点)&lt;/h6&gt;
&lt;p&gt;node.cloneNode()&lt;br&gt;
 如果括号为空，则只复制标签 不复制里面的内容&lt;br&gt;
括号里面为 true 则里面的内容也跟着赋值&lt;/p&gt;
&lt;h6 id=&#34;三种动态创建元素区别&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#三种动态创建元素区别&#34;&gt;#&lt;/a&gt; 三种动态创建元素区别&lt;/h6&gt;
&lt;p&gt;document.write () 如果页面加载完毕 再执行这个指令 会导致页面全部重绘&lt;br&gt;
 innerHTML&lt;br&gt;
document.createElement(’’)&lt;br&gt;
 最后两个大致上没有区别 但是如果需要创造很多个元素 最后一个的效率会大大提高，因为最后一个不是拼接字符串 而是在电脑中重新开辟一个新的空间&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGdDhV&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGdDhV.png&#34; alt=&#34;IGdDhV.png&#34;&gt;&lt;/a&gt;&lt;br&gt;
 改进方法:innerHTML 不采用拼接字符串的方式，而是采用数组形式拼接，现在数组中拼接字符串，然后将数组引入到 innerHTML 中&lt;/p&gt;
&lt;h4 id=&#34;dom重点核心&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#dom重点核心&#34;&gt;#&lt;/a&gt; DOM 重点核心&lt;/h4&gt;
&lt;p&gt;(一) 创建&lt;br&gt;
 1.document.write&lt;br&gt;
2.innerHTML&lt;br&gt;
3.createElement&lt;br&gt;
 (二) 增&lt;br&gt;
 1.appendChild&lt;br&gt;
2.innerBefore&lt;br&gt;
 (三) 删&lt;br&gt;
 1.removeChild&lt;br&gt;
 (四) 改&lt;br&gt;
 1. 修改元素属性:src,href,title&lt;br&gt;
2. 修改普通元素内容:innerHTML,innerText&lt;br&gt;
3. 修改表单元素:value,type,disabled&lt;br&gt;
4. 修改元素样式:style,className&lt;br&gt;
 (五) 查&lt;br&gt;
 1.DOM 提供的 API 方法:getElementById,getElementsByTagName  (&lt;strong&gt;古老用法不推荐&lt;/strong&gt;)&lt;br&gt;
 2.H5 提供的新方法:querySelector,querySelectorAll 提倡&lt;br&gt;
 3. 利用节点获取元素：父 (parentNode), 子 (children), 兄 (previousElementSibing,nextElementSibing) 提倡&lt;br&gt;
 (六) 属性操作&lt;br&gt;
 1.setAttribute: 设置 dom 的属性值&lt;br&gt;
 2.getAttribute: 得到 dom 的属性值&lt;br&gt;
 3.removeAttribute: 移除属性&lt;br&gt;
 (七) 事件操作&lt;br&gt;
 onclick: 鼠标点击左键触发&lt;br&gt;
 onmouseover: 鼠标经过触发&lt;br&gt;
 onmouseout: 鼠标离开触发&lt;br&gt;
 onfocus: 获得鼠标焦点触发&lt;br&gt;
 onblur: 失去鼠标焦点触发&lt;br&gt;
 onmousemove: 鼠标移动触发&lt;br&gt;
 onmouseup: 鼠标弹起触发&lt;br&gt;
 onmousedown: 鼠标按下触发&lt;/p&gt;
&lt;h4 id=&#34;事件高级导读&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#事件高级导读&#34;&gt;#&lt;/a&gt; 事件高级导读&lt;/h4&gt;
&lt;h5 id=&#34;注册事件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#注册事件&#34;&gt;#&lt;/a&gt; 注册事件&lt;/h5&gt;
&lt;p&gt;传统方式和方法监听注册方式&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGd6cF&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGd6cF.png&#34; alt=&#34;IGd6cF.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;eventTarget.addEventListener(type,listener[,useCapture])
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGsktA&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGsktA.png&#34; alt=&#34;IGsktA.png&#34;&gt;&lt;/a&gt;&lt;br&gt;
 里面的事件类型是字符串 必定加引号 不带 on&lt;br&gt;
 同一个元素 同一个事件可以添加多个侦听器 (事件处理程序)&lt;/p&gt;
&lt;p&gt;AttachEvent 事件监听方式 (&lt;strong&gt;不提倡仅供了解&lt;/strong&gt;)&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGsVpt&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGsVpt.png&#34; alt=&#34;IGsVpt.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;注册事件兼容性解决方法&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGdW7R&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGdW7R.png&#34; alt=&#34;IGdW7R.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&#34;删除事件解绑事件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#删除事件解绑事件&#34;&gt;#&lt;/a&gt; 删除事件 (解绑事件)&lt;/h5&gt;
&lt;p&gt;1. 传统法式:element.onclick = null&lt;br&gt;
2. 方法监听事件: eventTarget.removeEventListener (type,listener [,useCapture])&lt;br&gt;
 删除事件兼容性解决方案:&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGd4tx&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGd4tx.png&#34; alt=&#34;IGd4tx.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&#34;dom事件流&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#dom事件流&#34;&gt;#&lt;/a&gt; DOM 事件流&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGsunS&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGsunS.png&#34; alt=&#34;IGsunS.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;注意事项&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGsGpq&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGsGpq.png&#34; alt=&#34;IGsGpq.png&#34;&gt;&lt;/a&gt;&lt;br&gt;
 捕获阶段&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGs3hn&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGs3hn.png&#34; alt=&#34;IGs3hn.png&#34;&gt;&lt;/a&gt;&lt;br&gt;
 冒泡阶段&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGs1ts&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGs1ts.png&#34; alt=&#34;IGs1ts.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;事件对象&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#事件对象&#34;&gt;#&lt;/a&gt; 事件对象&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGdqnH&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGdqnH.png&#34; alt=&#34;IGdqnH.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&#34;事件对象的常见属性和方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#事件对象的常见属性和方法&#34;&gt;#&lt;/a&gt; 事件对象的常见属性和方法&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGdLBd&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGdLBd.png&#34; alt=&#34;IGdLBd.png&#34;&gt;&lt;/a&gt;&lt;br&gt;
e.target 返回的是触发事件的对象 而 this 返回的是绑定事件的对象，currentTarget 和 this 一样返回的是绑定事件的对象 ie678 不认识 currentTarget&lt;br&gt;
e.type: 返回事件类型 例如 click,mouseover&lt;/p&gt;
&lt;p&gt;组织默认事件 让链接不跳转 或者让提交按钮不提交 e.preventDefault ();&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGdx4P&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGdx4P.png&#34; alt=&#34;IGdx4P.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;组织事件冒泡 e.stopPropagation ()&lt;br&gt;
 兼容性解决方法&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGdvNt&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGdvNt.png&#34; alt=&#34;IGdvNt.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&#34;事件委托&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#事件委托&#34;&gt;#&lt;/a&gt; 事件委托&lt;/h5&gt;
&lt;p&gt;原理：给父节点添加侦听器，利用事件冒泡影响每一个子节点&lt;/p&gt;
&lt;h5 id=&#34;常用的鼠标事件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#常用的鼠标事件&#34;&gt;#&lt;/a&gt; 常用的鼠标事件&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGw9gS&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGw9gS.png&#34; alt=&#34;IGw9gS.png&#34;&gt;&lt;/a&gt;&lt;br&gt;
 禁止鼠标右键菜单:contextmenu 主要控制应该在何时显示上下文菜单，主要用于程序员取消默认的上下文菜单&lt;br&gt;
禁止鼠标选中:selectstart&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;   document.addEventListener(&#39;contextmenu&#39;, function (e) {
       e.preventDefault();
   })
   document.addEventListener(&#39;selectstart&#39;, function (e) {
       e.preventDefault();
   })
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;鼠标事件对象&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#鼠标事件对象&#34;&gt;#&lt;/a&gt; 鼠标事件对象&lt;/h5&gt;
&lt;p&gt;Mouseevent 鼠标事件对象&lt;br&gt;
 keyboard 键盘事件对象&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGwCjg&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGwCjg.png&#34; alt=&#34;IGwCjg.png&#34;&gt;&lt;/a&gt;&lt;br&gt;
client 以可视区为主 跟屏幕滚动没有关系&lt;br&gt;
 page 相对于文档页面的 X 和 Y 坐标&lt;br&gt;
 screen 鼠标相当于电脑屏幕的 X 和 Y 坐标 (当浏览器缩小或者放大时会变化)&lt;br&gt;
 mousemove 鼠标移动事件&lt;/p&gt;
&lt;h5 id=&#34;键盘事件对象&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#键盘事件对象&#34;&gt;#&lt;/a&gt; 键盘事件对象&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGwkHs&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGwkHs.png&#34; alt=&#34;IGwkHs.png&#34;&gt;&lt;/a&gt;&lt;br&gt;
 三个事件的执行顺序是 keydown keypress keyup&lt;/p&gt;
&lt;p&gt;KeyCode 返回键盘按键的 ASCII 的值&lt;br&gt;
 keyup 和 keydown 事件不区分字母大小写 a 和 A 得到的就是 65&lt;br&gt;
keypress 区分字母大小写&lt;/p&gt;
&lt;h3 id=&#34;bom浏览器对象模型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#bom浏览器对象模型&#34;&gt;#&lt;/a&gt; BOM 浏览器对象模型&lt;/h3&gt;
&lt;h4 id=&#34;bom概述&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#bom概述&#34;&gt;#&lt;/a&gt; BOM 概述&lt;/h4&gt;
&lt;p&gt;BOM: 浏览器对象模型&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IJFREt&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IJFREt.png&#34; alt=&#34;IJFREt.png&#34;&gt;&lt;/a&gt;&lt;br&gt;
BOM 的构成&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IJFf4f&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IJFf4f.png&#34; alt=&#34;IJFf4f.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;浏览器顶级对象window&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#浏览器顶级对象window&#34;&gt;#&lt;/a&gt; 浏览器顶级对象 window&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IJF4C8&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IJF4C8.png&#34; alt=&#34;IJF4C8.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&#34;窗口加载事件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#窗口加载事件&#34;&gt;#&lt;/a&gt; 窗口加载事件&lt;/h5&gt;
&lt;p&gt;window.onload 窗口加载事件，当文档内容完全加载完成后会触发该事件 (包括图像 css 脚本等等)&lt;br&gt;
 注意:&lt;br&gt;
1. 有了 window.onload 我们就可以将 js 写在任何位置 onload 是等页面文档加载完成后 最后加载的东西&lt;br&gt;
 2.window,onload 传统注册事件只能写一次，如果有多个，会以最后一个 window.onload 为准&lt;br&gt;
 3. 如果使用 AddEventListener 则没有限制&lt;br&gt;
 document.addEventListener (‘DOMContentLoaded’,function (){})&lt;br&gt;
 仅当 DOM 加载完成就开始触发，不包括样式表，图片，flash 等等&lt;br&gt;
后一个加载更快，如果是图片较多的网站等 会因为图片刷新过快 如果使用第一个方式 有可能无法加载出 js 文件 而使用后一个方式 则在 DOM 加载完成后 就加载 js&lt;/p&gt;
&lt;h5 id=&#34;调整窗口大小事件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#调整窗口大小事件&#34;&gt;#&lt;/a&gt; 调整窗口大小事件&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGwEEn&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGwEEn.png&#34; alt=&#34;IGwEEn.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;定时器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#定时器&#34;&gt;#&lt;/a&gt; 定时器&lt;/h4&gt;
&lt;h5 id=&#34;settimeout定时器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#settimeout定时器&#34;&gt;#&lt;/a&gt; setTimeout () 定时器&lt;/h5&gt;
&lt;p&gt;window.setTimeout (调用函数，[延迟的毫秒数]);&lt;br&gt;
 在定时器到期后执行函数&lt;br&gt;
 1.window 在调用的时候可以省略&lt;br&gt;
 2. 时间单位是毫秒，可以省略 如果省略默认为 0&lt;br&gt;
3. 页面中可能有很多的定时器 我们经常给定时器起一个标识符&lt;/p&gt;
&lt;p&gt;callback 回调函数&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IJFovQ&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IJFovQ.png&#34; alt=&#34;IJFovQ.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h6 id=&#34;停止settimeout定时器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#停止settimeout定时器&#34;&gt;#&lt;/a&gt; 停止 setTimeout () 定时器&lt;/h6&gt;
&lt;p&gt;window.clearaTimeout (定时器名字)&lt;/p&gt;
&lt;h5 id=&#34;setinterval定时器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#setinterval定时器&#34;&gt;#&lt;/a&gt; setInterval () 定时器&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IJFLEq&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IJFLEq.png&#34; alt=&#34;IJFLEq.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;区别:setTimeout 只调用一次回调函数&lt;br&gt;
 setInterval 会一直调用函数&lt;/p&gt;
&lt;h4 id=&#34;this指向问题&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#this指向问题&#34;&gt;#&lt;/a&gt; this 指向问题&lt;/h4&gt;
&lt;p&gt;1. 全局作用域或者普通函数中 this 指向全局对象 window (定时器里面的 this 指向 window)&lt;br&gt;
 2. 方法调用中谁调用 this 指向谁&lt;br&gt;
 3. 构造函数中 this 可以指向构造函数&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/oSEMu9&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/22/oSEMu9.png&#34; alt=&#34;oSEMu9.png&#34;&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/oSEQBR&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/22/oSEQBR.png&#34; alt=&#34;oSEQBR.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;js的执行队列&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#js的执行队列&#34;&gt;#&lt;/a&gt; js 的执行队列&lt;/h4&gt;
&lt;p&gt;js 是单线程的 同一个时间只能做一件事&lt;br&gt;
为了解决这个问题，利用多核 CPU 的计算能力，HTML5 允许 js 脚本创建多个线程，于是 js 中出现了同步和异步&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGwugU&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGwugU.png&#34; alt=&#34;IGwugU.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&#34;js执行机制&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#js执行机制&#34;&gt;#&lt;/a&gt; js 执行机制&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGw1b9&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGw1b9.png&#34; alt=&#34;IGw1b9.png&#34;&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IGwQu4&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGwQu4.png&#34; alt=&#34;IGwQu4.png&#34;&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IJkczF&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IJkczF.png&#34; alt=&#34;IJkczF.png&#34;&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IJFz2F&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IJFz2F.png&#34; alt=&#34;IJFz2F.png&#34;&gt;&lt;/a&gt;&lt;br&gt;
 事件循环：主线程不断的城府获得任务 执行任务 再获取任务 执行任务&lt;/p&gt;
&lt;h4 id=&#34;location对象&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#location对象&#34;&gt;#&lt;/a&gt; location 对象&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IJAmF0&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IJAmF0.png&#34; alt=&#34;IJAmF0.png&#34;&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IJAnYV&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IJAnYV.png&#34; alt=&#34;IJAnYV.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&#34;location对象方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#location对象方法&#34;&gt;#&lt;/a&gt; location 对象方法&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IGwJ4x&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IGwJ4x.png&#34; alt=&#34;IGwJ4x.png&#34;&gt;&lt;/a&gt;&lt;br&gt;
assign 能够记录历史 可以实现后退功能&lt;/p&gt;
&lt;h4 id=&#34;navigator对象&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#navigator对象&#34;&gt;#&lt;/a&gt; navigator 对象&lt;/h4&gt;
&lt;p&gt;包含浏览器的信息 有很多属性 我们最常用的属性是 userAgent 该属性可以返回由客户机发送服务器的 user-agent 头部的值&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IJAuWT&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IJAuWT.png&#34; alt=&#34;IJAuWT.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;history对象&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#history对象&#34;&gt;#&lt;/a&gt; history 对象&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IJAQlF&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/08/IJAQlF.png&#34; alt=&#34;IJAQlF.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;btn.addEventListener(&#39;click&#39;,function(){
history.forward();  
})
back() 和 go() 同理
其中go(-1) 表示后退一页 go(-1)表示后退两页
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;pc端网页特效&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#pc端网页特效&#34;&gt;#&lt;/a&gt; PC 端网页特效&lt;/h3&gt;
&lt;h4 id=&#34;元素偏移量offset系列&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#元素偏移量offset系列&#34;&gt;#&lt;/a&gt; 元素偏移量 offset 系列&lt;/h4&gt;
&lt;p&gt;动态获取元素位置和大小&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;获取元素距离带有定位父元素的位置&lt;/li&gt;
&lt;li&gt;获得元素自身的大小 (包含 padding 和 border)&lt;/li&gt;
&lt;li&gt;返回的数值不带单位&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/oih8C6&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/24/oih8C6.png&#34; alt=&#34;oih8C6.png&#34;&gt;&lt;/a&gt;&lt;br&gt;
offsetParent  返回的是带有定位的父元素 (没有则返回 body)&lt;br&gt;
 parentNode 返回的是最近一级的父元素 不管父元素有没有定位&lt;/p&gt;
&lt;h5 id=&#34;offset和style的区别&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#offset和style的区别&#34;&gt;#&lt;/a&gt; offset 和 style 的区别&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;offsetWidth 与 style.width&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/oiTCtA&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/24/oiTCtA.png&#34; alt=&#34;oiTCtA.png&#34;&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;元素可视区client系列&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#元素可视区client系列&#34;&gt;#&lt;/a&gt; 元素可视区 client 系列&lt;/h4&gt;
&lt;p&gt;使用 client 系列的相关属性获取元素可视区的相关信息&lt;br&gt;
通过 client 系列的相关属性可以动态得到该元素的边框大小，元素大小等&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/oib09s&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/24/oib09s.png&#34; alt=&#34;oib09s.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;淘宝源码分析&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#淘宝源码分析&#34;&gt;#&lt;/a&gt; 淘宝源码分析&lt;/h4&gt;
&lt;h5 id=&#34;立即执行函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#立即执行函数&#34;&gt;#&lt;/a&gt; 立即执行函数&lt;/h5&gt;
&lt;p&gt;不需要调用 立即执行&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;(function XXX() { })()  第二个小括号可以看成调用函数 也可以传递参数
(function XXX(){}()) 第二个小括号可以看成调用函数 也可以传递参数
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;XXX 为函数名 可以省略&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;多个立即执行函数之间必须使用分号隔开&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;好处：独立创建了一个作用域 里面所有的变量都是局部变量 避免了命名冲突的问题&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;元素滚动scroll系列&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#元素滚动scroll系列&#34;&gt;#&lt;/a&gt; 元素滚动 scroll 系列&lt;/h4&gt;
&lt;p&gt;得到元素的大小 滚动距离 与页面中的滚动条有关&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/oAwKnP&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/25/oAwKnP.png&#34; alt=&#34;oAwKnP.png&#34;&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt; 不包含边框 包含 padding 值&lt;/strong&gt;&lt;br&gt;
对于超出父元素的汉字 会按照所有汉字叠加的高度计算 (真正的内容实际大小)&lt;br&gt;
 与 client 不同的是 client 并不会计算超出的大小 而只是原有父元素的大小&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/oA0u8J&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/25/oA0u8J.png&#34; alt=&#34;oA0u8J.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&#34;scroll事件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#scroll事件&#34;&gt;#&lt;/a&gt; scroll 事件&lt;/h5&gt;
&lt;p&gt;当滚动条发生变化时会触发的事件&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;XXX.document.addEventListener(&#39;scroll&#39;,function(){})
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;动画函数封装&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#动画函数封装&#34;&gt;#&lt;/a&gt; 动画函数封装&lt;/h4&gt;
&lt;p&gt;通过定时器 setInterval () 不断移动盒子的位置&lt;br&gt;
 1. 获取当前位置&lt;br&gt;
 2. 给当前位置加一个移动距离&lt;br&gt;
 3. 利用定时器不断重复这个操作&lt;br&gt;
 4. 结束定时器&lt;br&gt;
&lt;strong&gt; 5. 元素需要添加定位才能使用 element.style.left&lt;/strong&gt;&lt;/p&gt;
&lt;h5 id=&#34;动画函数简单封装&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#动画函数简单封装&#34;&gt;#&lt;/a&gt; 动画函数简单封装&lt;/h5&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;function animate(obj, target) {
    clearInterval(obj.timer)
    obj.timer = setInterval(function () {
        if (obj.offsetLeft &amp;gt;= target) {
            clearInterval(obj.timer)
        } else
            obj.style.left = obj.offsetLeft + 2 + &#39;px&#39;;
    }, 30)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;缓动动画&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#缓动动画&#34;&gt;#&lt;/a&gt; 缓动动画&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;让盒子每次移动的距离慢慢变小 速度就会慢慢慢下来&lt;/li&gt;
&lt;li&gt;核心算法：(目标值 - 现在的位置)/10&lt;/li&gt;
&lt;li&gt;盒子等于目标位置就停止计时器&lt;/li&gt;
&lt;/ol&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://github.com/YogMas/YogMas.github.io/2021/11/06/html-shang/</guid>
            <title>Html-first</title>
            <link>https://github.com/YogMas/YogMas.github.io/2021/11/06/html-shang/</link>
            <category>Html</category>
            <pubDate>Sat, 06 Nov 2021 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;html上&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#html上&#34;&gt;#&lt;/a&gt; Html (上)&lt;/h1&gt;
&lt;h3 id=&#34;the-article-from-yogmas-also-sam&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#the-article-from-yogmas-also-sam&#34;&gt;#&lt;/a&gt; the article from yogmas also sam&lt;/h3&gt;
&lt;h4 id=&#34;1基本架构&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1基本架构&#34;&gt;#&lt;/a&gt; 1. 基本架构&lt;/h4&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;html&amp;gt; 
&amp;lt;head&amp;gt;&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;2html标签&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2html标签&#34;&gt;#&lt;/a&gt; 2.html 标签&lt;/h4&gt;
&lt;h6 id=&#34;标题标签&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#标题标签&#34;&gt;#&lt;/a&gt; 标题标签&lt;/h6&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;h1&amp;gt;&amp;lt;/h1&amp;gt;   ……  &amp;lt;h6&amp;gt;&amp;lt;/h6&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;一共六级标题，文字加粗，由大到小依次减小。&lt;br&gt;
&lt;strong&gt;大多数标签都是成对存在的，只有少数例如 br 的单标签&lt;/strong&gt;&lt;/p&gt;
&lt;h6 id=&#34;段落和换行标签&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#段落和换行标签&#34;&gt;#&lt;/a&gt; 段落和换行标签&lt;/h6&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;/br&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;p 标签会自动换行，不用添加 br&lt;/p&gt;
&lt;h6 id=&#34;文本格式化标签&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#文本格式化标签&#34;&gt;#&lt;/a&gt; 文本格式化标签&lt;/h6&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;strong&amp;gt;加粗&amp;lt;/strong&amp;gt; 或者 &amp;lt;b&amp;gt;加粗&amp;lt;/b&amp;gt;
&amp;lt;em&amp;gt;倾斜&amp;lt;/em&amp;gt; 或者 &amp;lt;i&amp;gt;倾斜&amp;lt;/i&amp;gt;
&amp;lt;del&amp;gt;删除线&amp;lt;/del&amp;gt; 或者 &amp;lt;s&amp;gt;删除线&amp;lt;/s&amp;gt;
&amp;lt;ins&amp;gt;下划线&amp;lt;/ins&amp;gt; 或者 &amp;lt;u&amp;gt;下划线&amp;lt;/u&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h6 id=&#34;div和span标签&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#div和span标签&#34;&gt;#&lt;/a&gt; div 和 span 标签&lt;/h6&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;形象来说 div 是一个大盒子，span 通常是用来放在大盒子里面的小盒子（后期 div 在页面构造中非常常用)&lt;/p&gt;
&lt;h6 id=&#34;图像标签&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#图像标签&#34;&gt;#&lt;/a&gt; 图像标签&lt;/h6&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;img src=&#34;路径&#34; alt=&#34;图片不显示时显示出来的&#34; 
title=&#34;鼠标放在图片上面显示出来的文字&#34; 
width=&#34;&#34; height=&#34;&#34; border=&#34;&#34;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;在后期使用的 width,height,border, 都会放入&lt;strong&gt; css&lt;/strong&gt; 中来运行使用不会单独列入 img 中&lt;br&gt;
图像标签的路径&lt;br&gt;
 1. 同一级路径&lt;br&gt;
 eg:(img.jpg)&lt;br&gt;
 2. 下一级路径&lt;br&gt;
 eg:(images/img.jpg)&lt;br&gt;
 3. 绝对路径&lt;br&gt;
 eg:(C:\Users\apple\Desktop\ 前端基础第一天 - HTML\ 案例 \img.jpg)&lt;br&gt;
eg：(&lt;a href=&#34;http://www.itcast.cn/2018czgw/images/logo.png&#34;&gt;http://www.itcast.cn/2018czgw/images/logo.png&lt;/a&gt;)&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IQmLi8&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/06/IQmLi8.png&#34; alt=&#34;IQmLi8.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h6 id=&#34;超链接标签&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#超链接标签&#34;&gt;#&lt;/a&gt; 超链接标签&lt;/h6&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;a href=&#34;链接&#34;&amp;gt;LOL&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;LOL 可以以图片文字等等代替，点击就可以跳转到 href 所在的链接&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;可以添加的元素：target=“X”&lt;br&gt;
X 包括_self (覆盖当前页面)&lt;br&gt;
 和_blank 重新启动新的页面&lt;br&gt;
链接分类&lt;br&gt;
 1. 内部链接：存放在你网站前端的链接也就是你写前端时电脑里面的链接&lt;br&gt;
 2. 外部链接：例如 http 这类的其他网站的链接&lt;br&gt;
 3. 空链接：当你还没有链接可以填时，留出空位用 #代替&lt;br&gt;
 4. 下载链接：通常是以.zip 结尾的压缩包&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IQC8kd&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/06/IQC8kd.png&#34; alt=&#34;IQC8kd.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h6 id=&#34;锚点定位&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#锚点定位&#34;&gt;#&lt;/a&gt; 锚点定位&lt;/h6&gt;
&lt;p&gt;由两个相互呼应的标签组成&lt;br&gt;
可以从页面的一个地方跳转到当前页面的另外一个地方&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;a href=&#34;#ID&#34;&amp;gt;&amp;lt;/a&amp;gt;
&amp;lt;h3 id=&#34;ID&#34;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;ID 可以写成任何你定义的名称&lt;br&gt;
 h3 并不是固定的，可以换成任意标签&lt;br&gt;
当你点击 a 中携带的元素或标签时你将会跳转到拥有 id=“” 且和 a 相同 id 的标签这&lt;/p&gt;
&lt;h6 id=&#34;注释标签和特殊字符&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#注释标签和特殊字符&#34;&gt;#&lt;/a&gt; 注释标签和特殊字符&lt;/h6&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;!-- 注释内容 --&amp;gt; 
&amp;lt;用&amp;amp;lt  &amp;gt;用&amp;amp;gt；(由于&amp;lt;&amp;gt;符号在html中的特殊性)
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;特殊内容可以用 ctrl+l 快速注释&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
