{
    "version": "https://jsonfeed.org/version/1",
    "title": "S1m",
    "description": "博客记录个人学习笔记,处于不断完善中",
    "home_page_url": "https://github.com/YogMas/YogMas.github.io",
    "items": [
        {
            "id": "https://github.com/YogMas/YogMas.github.io/2022/10/09/suan-fa/",
            "url": "https://github.com/YogMas/YogMas.github.io/2022/10/09/suan-fa/",
            "title": "算法",
            "date_published": "2022-10-08T16:00:00.000Z",
            "content_html": "<h1 id=\"算法\"><a class=\"markdownIt-Anchor\" href=\"#算法\">#</a> 算法</h1>\n<p>基于 Acwing 算法课</p>\n<h2 id=\"算法基础课\"><a class=\"markdownIt-Anchor\" href=\"#算法基础课\">#</a> 算法基础课</h2>\n<h3 id=\"基础算法\"><a class=\"markdownIt-Anchor\" href=\"#基础算法\">#</a> 基础算法</h3>\n<p>算法：以空间来换取时间</p>\n<h4 id=\"快速排序\"><a class=\"markdownIt-Anchor\" href=\"#快速排序\">#</a> 快速排序</h4>\n<p>快速排序基于分治的思想，选取数<strong> x</strong> (从数组中任选), 将大于 x 的数放置于数组的左边，小于 x 的数放置于数组的右边</p>\n<p>处理过程采用<strong>双指针</strong>和<strong>递归</strong>进行处理</p>\n<p>时间复杂度最快<strong> O (nlogn)</strong> 最慢<strong> O (n^2)</strong>  取决于每一次随机选取的数在数组中的大小关系</p>\n<ul>\n<li>\n<p>时间复杂度最快</p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/java%E5%BF%AB%E6%8E%92%E6%9C%80%E5%BF%AB.png\" alt=\"快排最快\"></p>\n</li>\n<li>\n<p>时间复杂度最慢</p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/java195AF8FC790A2FAFE29FCFC35CCD6B87.png\" alt=\"时间复杂度最慢\"></p>\n</li>\n</ul>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">//快速排序基本模板\nvoid quick_sort(int q[],int l,int r)\n{\n    if(l &gt;= r) return;\n    int x = q[l]; //int x = q[r], int x = q[l+r &gt;&gt;1] 都可以 因为是随机选择\n    //这里有个边界问题, 如果后面以j为边界,这里就不能为q[r]  \n    //如果后面以i为边界,这里就不能为q[l];\n    int i = l -1,j = r + 1; // 先- 先+ 因为后面do while循环 会先进行-- 和++\n    while(i &lt; j)\n    {\n        //比较条件没有等号\n        do i++;while(q[i] &lt;x);\n        do j--;while(q[j] &gt;x);\n        if(i &lt; j) swap(q[i],q[j]);\n    }\n    quick_sort(q,l,j);\n    quick_sort(q,j+1,r);\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"快速查找\"><a class=\"markdownIt-Anchor\" href=\"#快速查找\">#</a> 快速 / 查找</h5>\n<p>快速查找采用的是<strong>快速排序 + 二分</strong>的思想，在排序过程中，如果可以确定值在两半的哪一半，就继续去查找那一半，另外一半就不需要查找了，这样</p>\n<ul>\n<li>最快的时间复杂度是 O (n);</li>\n<li>最慢仍然是 O (n^2);</li>\n</ul>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">//查找第k小的数\nint quick_search(int q[],int l,int r,int k)\n{\n    if(l &gt;= r) return q[l];\n    int x = q[l + r &gt;&gt;1],i = l - 1, j = r +1;\n    while(i&lt;j)\n    {\n        do i++;while(q[i] &lt; x);\n        do j--;while(q[j] &gt; x);\n        if(i &lt; j) swap(q[i],q[j]);\n    }\n    if(k &lt; j- l +1) return quick_search(q,l,j,k);\n    else return quick_search(q,j+1,r,k - (j -l +1));\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"归并排序\"><a class=\"markdownIt-Anchor\" href=\"#归并排序\">#</a> 归并排序</h4>\n<p>经典采取分治的思想，时间复杂度为 O (nlogn)</p>\n<ul>\n<li>优点：时间复杂度为 O (nlogn);</li>\n<li>缺点：使用了多余的空间</li>\n</ul>\n<p>通过不断递归，将整个数组无限二等分，直到最后分成单个，在通过比较，将分割后的数组合并起来.</p>\n<p>时间复杂度证明可以参照上面的<strong>快排最优</strong></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">//归并排序基本模板\nvoid merge_sort(int q[],int l,int r)\n{\n    if(l &gt;= r) return;\n    int mid = l + r &gt;&gt; 1;\n    \n    //递归不断二等分\n    merge_sort(q,l,mid);\n    merge_sort(q,mid + 1,r);\n    \n    //进行数组合并\n    int i =l,j = mid +1,k =0;\n    while(i &lt;= mid &amp;&amp; j &lt;= r)\n    {\n        if(q[i] &lt;= q[j]) tmp[k++] =q[i++];                //tmp数组 用空间换时间 临时存储\n            else tmp[k++] = q[j++];\n    }\n    while(i &lt;= mid) tmp[k++] = q[i++];\n    while(j &lt;= r) tmp[k++] = q[j++];\t\n    //将tmp排序好的数组重新赋值到原本的数组中\n    for(int i = l,j = 0;i &lt;= r;i++,j++)\n    \tq[i] = tmp[j];\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"二分查找\"><a class=\"markdownIt-Anchor\" href=\"#二分查找\">#</a> 二分查找</h4>\n<h5 id=\"整数二分\"><a class=\"markdownIt-Anchor\" href=\"#整数二分\">#</a> 整数二分</h5>\n<p>二分也是采用<strong>分治</strong>的方法，不断将一个<strong>有序</strong>数组分成两半，然后判断满足条件的数 (<strong>要查找的数</strong>) 是在左边还是右边</p>\n<p>二分存在<strong>边界问题</strong>，所以记忆一个模板可以<strong>有效避免边界问题</strong>。</p>\n<pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">//当l = r 的时候停止，此时无论是取l 或者 取 r 输出都可以\n// 模板1\nvoid find(int q[],int l,int r)\n{\n    while(l &lt; r)\n    {\n       \tint mid = l + r &gt;&gt;1;\n        if(check(mid)) r = mid;  //check(mid)表示是否满足条件\n        else l = mid + 1;\n    }\n}\n\n//模板2\nvoid find(int q[],int l,int r)\n{\n    while(l &lt; r)\n    {\n       \tint mid = l + r + 1 &gt;&gt; 1\n        if(check(mid)) l = mid;  //check(mid)表示中心点是否满足条件\n        else r = mid - 1;\n    }\n}\n\n//通过check函数来判断使用哪个二分\n//注意对mid的使用 是导致边界问题的原因<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>部分问题，查找一个数的值，但数组中有<strong>多个一样的值都满足条件</strong>，如果确定搜到的答案 是所有满足条件的答案里面<strong>最左边的还是最右边的</strong></p>\n<p>这个时候需要根据模板 模拟一下，<strong> 当条件满足的时候</strong>，二分是在往左边查找，还是往右边查找.</p>\n<ul>\n<li>往右边查找 最后得到的就是最右边的值</li>\n<li>往左边不断查找，最后得到的就是最左边的值</li>\n<li>我们可以通过改变 check () 判断函数和模板的切换 来人为控制往左边查找和往右边查找的过程</li>\n</ul>\n<p><strong>边界</strong></p>\n<p>选择模板为了避免边界问题，灵活记忆</p>\n<ul>\n<li>如果满足条件的时候，需要 <code>l = mid</code> , 这个时候求 mid 就是 + 1</li>\n<li>如果满足条件的时候，需要 <code>r = mid</code> , 这个时候求 mid 就不需要 + 1, 就是普通的 (l + r) / 2;</li>\n</ul>\n<h5 id=\"小数二分\"><a class=\"markdownIt-Anchor\" href=\"#小数二分\">#</a> 小数二分</h5>\n<p>因为小数二分<strong>不存在这个边界问题</strong>，就非常简单</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">void find(int q[],int l,int r)\n{\n    while(l &lt; r)\n    {\n       \tint mid = l + r &gt;&gt;1;\n        if(check(mid)) r = mid;  //check(mid)表示是否满足条件\n        else l = mid;\n    }\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"高精度\"><a class=\"markdownIt-Anchor\" href=\"#高精度\">#</a> 高精度</h4>\n<p><strong>C++<strong> 中对</strong>大数存储不支持</strong>，所以需要用<strong>数组来存储</strong>大数，然后通过小时候学习的<strong>加法竖式等等</strong>的原理对数组进行处理，从而达到大数计算的目的</p>\n<p><strong>注意</strong>：因为<strong>进位</strong>的问题，所以在<strong>加减乘三个运算</strong>中反着输入数组，最后再将数组颠倒</p>\n<ul>\n<li>因为存在<strong>借位</strong>问题，减法的最后可能因为被借了一位被判断为 0，所以需要去除这个 0, 去除这个 0 的时候要考虑特例，这个 0 就是答案，所以还要判断是不是只有 1 个 0, 只有满足不止一位数，且最后一位是 0, 才去除这个 0</li>\n<li>同样减法也可能存在<strong>前置 0</strong>, 需要去除</li>\n</ul>\n<h5 id=\"高精度加法\"><a class=\"markdownIt-Anchor\" href=\"#高精度加法\">#</a> 高精度加法</h5>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">//进位问题 输入的数组都是反向存的\nvector&lt;int&gt; add(vector&lt;int&gt; &amp;a,vector&lt;int&gt; &amp;b)\n{\n    vector&lt;int&gt; c;\n    for(int i = 0 ,t = 0; t ||i &lt; a.size() || i &lt;b.size();i++)\n    {\n        if(i &lt;a.size()) t += a[i];\n        if(i &lt; b.size()) t += b[i];\n        c.push_back(t % 10);\n        t /= 10;\n    }\n    reverse(c.begin(),c.end());\n    return c;\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"高精度减法\"><a class=\"markdownIt-Anchor\" href=\"#高精度减法\">#</a> 高精度减法</h5>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">//可以在外面先写个函数 保证输入减函数内部的时候一定是 a &gt;= b的\nbool cmp(vector&lt;int&gt; &amp;a,vector&lt;int&gt; &amp;b) //a &gt;= b 则返回true 否则返回false\n{\n    if(a.size()!= b.size()) return a.size() &gt;b.size(); //长度不一样的时候,显然长度大的更大\n    else\n    {\n        for(int i = 0 ; i &lt; a.size();i++)\n        {\n            if(a[i] != b[i]) return a[i] &gt;= b[i]; //当某个位置出现不一样的时候,该位置大的更大\n        }\n    }\n    return true; //长度相同 每个位置也相同 说明两个大数相等返回true\n}\n//默认输入的时候a &gt;= b;\nvector&lt;int&gt; sub(vector&lt;int&gt; &amp;a,vector&lt;int&gt; &amp;b)\n{\n    if(!cpm(a,b)) return sub(b,a); //如果a &lt; b 就进行b - a的操作\n    vector&lt;int&gt; c;\n    for(int i = 0, t = 0;i &lt; a.size();i++)\n    {\n        t += a[i];\n        if(i &lt;b.size()) t = t - b[i];\n        c.push_back((t +10) % 10); //保证插入的是正数\n        if(t &lt; 0) t = -1;\n        else t = 0;\n    }\n    while(c.size() &gt;1 &amp;&amp; c.back() == 0) c.pop_back(); //删除前置0,如果最后一个为0 并且不只有1个0(正确答案)，就将最后一位山区\n    reverse(c.begin(),c.end(0));\n    return c;\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"高精度乘法\"><a class=\"markdownIt-Anchor\" href=\"#高精度乘法\">#</a> 高精度乘法</h5>\n<p>依据乘法<strong>竖式</strong></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">//高精度乘法一般是一个大数和一个小数相乘,不会出现大数乘大数\nvector&lt;int&gt; mul(vector&lt;int&gt; &amp;a,int b)\n{\n    vector&lt;int&gt; c;\n    for(int i = 0,t = 0 ; t || i &lt;a.size();i++)\n    {\n        if(i&lt; a.size())t += a[i] * b;\n        c.push_back(t % 10);\n        t /= 10;\n    }\n    reverse(c.begin(),c.end())\n    return c;\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"高精度除法\"><a class=\"markdownIt-Anchor\" href=\"#高精度除法\">#</a> 高精度除法</h5>\n<p>高精度除法，不存在<strong>借位和进位</strong>的问题，所以按照原来的数组存储，但是最后需要<strong>翻转两次</strong>来<strong>去掉前缀 0</strong></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">//高精度除法,一般也为一个大数和一个小数相除\nvector&lt;int&gt; div(vector&lt;int&gt; a,int b,int &amp;r) // r用来存储余数 默认为0\n{\n    vector&lt;int&gt; c;\n    for(int i = 0,r = 0; i&lt; a.size();i++)\n    {\n        r = r * 10 + a[i];\n        c.push_back(r / b); //不够除的时候 自然传入的是0 所以也会有前缀0的问题\n        r = r % b; //取余数\n    }\n    reverse(c.begin(),c.end());\n    while(c.size() &gt;1 &amp;&amp; c.back() == 0) a.pop_back();\n    reverse(c.begin(),c.end());\n    return c;\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"前缀和与差分\"><a class=\"markdownIt-Anchor\" href=\"#前缀和与差分\">#</a> 前缀和与差分</h4>\n<p><code>Sn = a1 + a2 + ... + an</code></p>\n<p>这里的数组 a1 到 an 就是差分数组</p>\n<p>而 s1 到 sn 就是前缀和数组，他以 O (1) 的时间复杂度得到了差分数组的前 n 个数的和</p>\n<p><strong>核心</strong>：进行<strong>区间部分数加减</strong>的时候可以做到<strong> O (1)<strong> 的时间复杂度，最后一个需要遍历 n 个数，但前面所有加减操作是</strong> O (1)</strong>, 所以平均下来是 O (1)</p>\n<p>同时<strong>前缀和数组</strong>，可以 **O (1)** 获得前缀和 典型的预处理</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">int S[N]\nint a[N]\nvoid add(int x,int y , int c)  //对S数组的第x个数 到第y个数 都加上一个数据c        //其实就是对差分数组的第x个数加上c  第y+1减去c\n{\n    a[x] += c;\n    a[y+1] -= c;\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>那么如何得到一个数组的差分数组呢？</strong></p>\n<p>我们在对原数组进行读入的时候，对每一个数据都使用 add (x,x,c) 就可以得到差分数组的，然后再求下差分数组的前缀和数组就是原数组了</p>\n<h4 id=\"双指针算法\"><a class=\"markdownIt-Anchor\" href=\"#双指针算法\">#</a> 双指针算法</h4>\n<p>双指针算法本质就是利用两个指针移动判断条件，然后达到一个对 O (n^2) 的时间复杂度的遍历 进行一个优化  使用条件依题意</p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/%E5%8F%8C%E6%8C%87%E9%92%88%E5%9B%BE%E7%A4%BA.png\" alt=\"双指针图示\"></p>\n<pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">//板子\nfor(int i = 0 ; i &lt; n ;i++)\n{\n    while()     //\n    {\n        j++\n    }\n    j = i;\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"位运算\"><a class=\"markdownIt-Anchor\" href=\"#位运算\">#</a> 位运算</h4>\n<p>介绍位运算中常用的<strong>两个操作</strong>:</p>\n<ul>\n<li>\n<p>求 x 的第 k 位数组:  <code>x &gt;&gt;k &amp; 1</code></p>\n</li>\n<li>\n<p>返回 x 的最后一位 1:  <code>lowbit(x) = x &amp; -x</code></p>\n</li>\n<li>\n<p>求二进制数中<strong>最后一个 1</strong> 出现的位置（前两个操作复合而成）</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">int lowbit(int x)\n{\n    for(int i = 0 ; i &lt; 32 ; i++)  //32为int(4 bytes 32 bits)的默认存储位数\n    {\n        if((x &gt;&gt; i) &amp; 1)\n            return i;\n    }\n}\n//计算机中采用补码存储 补码存储将会使其所有位翻转 再末尾加1 这样就只有最后1位1 编程补码后不会变  其他的1 都会变成0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/%E4%BD%8D%E8%BF%90%E7%AE%97.png\" alt=\"位运算\"></p>\n<h4 id=\"离散化\"><a class=\"markdownIt-Anchor\" href=\"#离散化\">#</a> 离散化</h4>\n<p>适用于<strong>存储下标非常大</strong> (导致数组无法放下), 而存储空间<strong>非常稀疏</strong></p>\n<p>这时候就要应用映射，将原数组进行<strong>离散化</strong></p>\n<p>离散化可以看成是特殊的<strong> Hash</strong>, 都是利用了一个映射的关系</p>\n<p>这里需要用到一个操作，排序 + 去重</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">sort(nums.begin(),nums.end());  //使用unique之前需要先排序,因为unique函数 是不断将当前数和后面一个数做对比,如果相同就把后面一个相同的数放到最后 所以需要先排序\nnums.erase(unique(nums.begin().nums.end()),nums.end())  //unique函数去重后 会将重复元素放在末尾 并且返回无重复数组的末尾 利用erase将末尾重复部分去除掉<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/%E7%A6%BB%E6%95%A3%E5%8C%96%E6%98%A0%E5%B0%84%E8%BF%87%E7%A8%8B.png\" alt=\"离散化映射过程\"></p>\n<p>因为数组下标过大，数组不支持这么大的下标，所以要先将下标存储在一个数组 a 中，然后将操作 {a,b}（s [a] 加上 b）存储在一个数组中，并且对下标数组进行去重 (不能有多重映射)</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">int find(int x)  //二分查找 用于查找数组下标所对应的映射在另外一个数组中的位置\n{\n    int l = 0, r = num.size() -1;\n    while(l &lt; r)\n    {\n        int mid = l + r &gt;&gt; 1;\n        if(num[mid] &gt;= x)\n            r = mid;\n            else\n            l = mid + 1;\n    }\n    return r + 1;\n}\nvector&lt;int&gt; num; //下标数组\nvector&lt;pair&lt;int,int&gt;&gt; add;//存储操作数组 \nint main()\n{\n    //读入数组s[x] += c\n     {\n       \tint x,c;\n        cin &gt;&gt; x &gt;&gt; c;\n        add.push_back({x,c}); //操作存入\n        num.push_back(x);  //下标存入\n    }\n        //对num数组去重排序\n    sort(num.begin(),num.end());\n    num.erase(unique(num.begin(),num.end()),num.end());\n    //将数据离散化\n    for(auto s : add)\n    {\n        int x = find(s.first);\n        b[x] += s.second;  \n    }\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"数据结构\"><a class=\"markdownIt-Anchor\" href=\"#数据结构\">#</a> 数据结构</h3>\n<h3 id=\"数学\"><a class=\"markdownIt-Anchor\" href=\"#数学\">#</a> 数学</h3>\n<h4 id=\"质数\"><a class=\"markdownIt-Anchor\" href=\"#质数\">#</a> 质数</h4>\n<h5 id=\"判断质因数\"><a class=\"markdownIt-Anchor\" href=\"#判断质因数\">#</a> 判断质因数</h5>\n<p>如果一个数除了表示成 1 和他自身的乘积外 还能表示成另外两个数的乘积  这个数就不是质因数</p>\n<p>反之一个数如果只能表示成 1 和他自身的乘积，那么这个数是质因数</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">bool is_prime(int x)\n{\n\tfor(int i = 2 ; i &lt;= x /i ;i++) //做了优化  将O(n)时间复杂度降到O(sqrt(n))  这里x/i不写成sqrt(x) sqrt()函数运行较慢 这样每次比较的时候,都会调用sqrt()函数 会大大提高时间\n    {\n        if(x % i == 0) return false\n    }\n    return true;\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h6 id=\"优化\"><a class=\"markdownIt-Anchor\" href=\"#优化\">#</a> 优化</h6>\n<p>一个数 表示成两个数的乘积 显然这两个数是<strong>一大一小</strong>的</p>\n<p>如果 x 可以表示成 a *  b 的话  假设 a &lt; b 那么显然 <strong>a &lt; x / a</strong> 即  <strong>a &lt; sqrt(x)</strong></p>\n<h5 id=\"分解质因数\"><a class=\"markdownIt-Anchor\" href=\"#分解质因数\">#</a> 分解质因数</h5>\n<p>例如 12 = 2 * 2 * 3 一个合数可以被分解成若干个质数的乘积</p>\n<p>分解质因数就是找出一个合数 他所可以分解成的所有质因数</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">void get_primes(int x)\n{\n    for(int i = 2; i &lt;= x/ i;i++ )\n    {\n        if(x % i == 0)\n        {\n            int s = 0; \n            while(x % i == 0) //将一个质数 判断到底\n            {\n                x = x / i;\n                s++;\n            }\n            cout &lt;&lt; i &lt;&lt; s;\n        }\n    }\n    if(x &gt; x / i) cout &lt;&lt; x &lt;&lt;endl; //优化 数据单独处理\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h6 id=\"优化-2\"><a class=\"markdownIt-Anchor\" href=\"#优化-2\">#</a> 优化</h6>\n<p>分解质因数中 最多只存在一个质数大于<strong> sqrt (x)</strong></p>\n<p>所以将最后一个数 脱离出来<strong>单独处理</strong> 可以将时间复杂度 进行一个降低</p>\n<p>前半部分采用遍历的方式 最后一个数据单独处理</p>\n<h5 id=\"筛质数\"><a class=\"markdownIt-Anchor\" href=\"#筛质数\">#</a> 筛质数</h5>\n<p>给出一个数 x 把小于等于他的<strong>质数</strong>全部筛出来</p>\n<h6 id=\"埃式筛法onloglogn\"><a class=\"markdownIt-Anchor\" href=\"#埃式筛法onloglogn\">#</a> 埃式筛法 O (nloglogn)</h6>\n<p>从左往右遍历，找到一个质数的同时，就把 &lt;= n 范围内 他的所有倍数打上标签 (这个数不是质数)  遍历过程中没有打上标签的就是质数</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">int primes[N]; // 存储所有质数\nbool st[N]; //这个数是否被筛过了\nint get_primes(int n)\n{\n    int cnt = 0 ;\n    for(int i = 2 ; i &lt;= n;i++)\n    {\n        if(st[i]) continue; //被筛过了 就跳过\n        prime[cnt++] = i;\n        for(int j = i + i; j &lt;= n; j += i)   //这里似乎 j 可以直接从i * i 开始 没理解\n        {\n            st[j] = true;\n        }\n    }\n    return cnt;\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h6 id=\"欧式筛法线性筛法-on\"><a class=\"markdownIt-Anchor\" href=\"#欧式筛法线性筛法-on\">#</a> 欧式筛法 (线性筛法) O (n)</h6>\n<p>时间复杂度是线性的</p>\n<p>埃式筛法 筛查过程中存在大量的重复筛的问题 比如 2  * 2 = 4 已经被筛过了 但是在到 4 的同时还会被再筛查一遍</p>\n<p>所以欧式筛法采用的一个优化的方法 就是筛一个数的时候 只通过最小质因数来筛，这样每个数都只会被筛一遍</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">bool st[N];\nint primes[N];\nint get_primes(int n)\n{\n    int cnt = 0;\n    for(int i = 2 ; i &lt;= n;i++)\n    {\n        if(!st[i]) prime[cnt++] = i;\n        for(int j = 0 ; j &lt; cnt &amp;&amp; primes[j] &lt;= n \\ i;j++)\n        {\n            st[i * primes[j]] = true;\n            if(i % primes[j] == 0) break; //优化所在 如果i是primes[j]的倍数 显然后面 primes[j+1]就不会是最小的质因数了 就break\n        }\n    }\n    return cnt;\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"约数\"><a class=\"markdownIt-Anchor\" href=\"#约数\">#</a> 约数</h4>\n<h5 id=\"试除法求约数\"><a class=\"markdownIt-Anchor\" href=\"#试除法求约数\">#</a> 试除法求约数</h5>\n<p><strong>与前面判断质因数相同</strong></p>\n<h5 id=\"约数个数\"><a class=\"markdownIt-Anchor\" href=\"#约数个数\">#</a> 约数个数</h5>\n<p>对于一个大于 1 正整数 n 可以<a href=\"https://baike.baidu.com/item/%E5%88%86%E8%A7%A3%E8%B4%A8%E5%9B%A0%E6%95%B0?fromModule=lemma_inlink\">分解质因数</a>：</p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/javaafef3bf76b93359a0067ea80e57bca0e.svg\" alt=\"img\"></p>\n<p>则 n 的<a href=\"https://baike.baidu.com/item/%E6%AD%A3%E7%BA%A6%E6%95%B0/882466?fromModule=lemma_inlink\">正约数</a>的个数就是</p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/java21c38a03ef417a187c0a202b37ce59c4.svg\" alt=\"img\"></p>\n<p>其中 a1、a2、a3…ak 是 p1、p2、p3，…pk 的指数。首先同上，n 可以<a href=\"https://baike.baidu.com/item/%E5%88%86%E8%A7%A3%E8%B4%A8%E5%9B%A0%E6%95%B0/2253749?fromModule=lemma_inlink\">分解质因数</a>：</p>\n<p><img src=\"https://bkimg.cdn.bcebos.com/formula/7acc0c37dfea06c873d081dba44b2164.svg\" alt=\"img\"></p>\n<p><strong>证明</strong></p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/java%E7%BA%A6%E6%95%B0%E4%B8%AA%E6%95%B0%E5%AE%9A%E7%90%86%E8%AF%81%E6%98%8E.png\" alt=\"约数个数定理证明\"></p>\n<p>所以进行程序书写的时候，可以先用<strong>质数中的分解质因数</strong>的方法，找到所有的质数和他们的指数，然后进行计算</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">unordered_map&lt;int,int&gt;prime;\nint getnum(int x)\n{\n    for(int i = 0 ; i &lt;= n/i;i++) //筛质数\n    {\n        while(x % i == 0)\n        {\n            x /= i;\n            prime[i]++; //存储指数\n        }\n    }   \n    if(x &gt;1) prime[x]++; //现在已经将所有的质数和他们的指数筛出来了\n    int res = 1;\n    for(auto p:prime)\n    {\n        res *= p.second +1;\n    }\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"约数之和\"><a class=\"markdownIt-Anchor\" href=\"#约数之和\">#</a> 约数之和</h5>\n<p>同样利用公式</p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/java%E7%BA%A6%E6%95%B0%E5%92%8C%E5%AE%9A%E7%90%86.png\" alt=\"约数和定理\"></p>\n<p><strong>证明</strong>：进行乘法分配律将括号打开，得到的就是所有因数的和</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">unordered_map&lt;int,int&gt;prime;\nint getallnum(int x)\n{\n    for(int i = 0 ; i &lt;= n/i;i++) //筛质数\n    {\n        while(x % i == 0)\n        {\n            x /= i;\n            prime[i]++; //存储指数\n        }\n    }\n    int res = 1;\n    for(auto p : prime)\n    {\n        int ans = 0;\n        int x = p.first;\n        int y = p.second;\n        while(y--)  ans = ans * p + 1;\n        res *= ans;\n    }\n    return res;\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"最大公约数\"><a class=\"markdownIt-Anchor\" href=\"#最大公约数\">#</a> 最大公约数</h5>\n<p><strong>(a,b) 的最大公约数等于（b,a % b）的最大公约数</strong></p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/java%E8%BE%97%E8%BD%AC%E7%9B%B8%E9%99%A4%E5%8E%9F%E7%90%86%E8%AF%81%E6%98%8E.png\" alt=\"辗转相除原理证明\"></p>\n<p>通过这个式子可以利用递归，不断减小，直到 a% b 等于 0, 此时最大公约数就找到了</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">int gck(int a,int b)\n{\n  \treturn b?gck(b,a%b):a;\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"欧拉函数\"><a class=\"markdownIt-Anchor\" href=\"#欧拉函数\">#</a> 欧拉函数</h4>\n<p>求 1∼N 中与 N 互质的数的个数被称为欧拉函数，记为 ϕ(N)</p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/java%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0.png\" alt=\"欧拉函数\"></p>\n<p>其中 p1 ~ pk 是 N 的所有质因子</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">int getola(int x)\n{\n    int res =x;\n    for(int i = 2 ; i &lt;= x\\i;i++)\n    {\n        if(x % i == 0)\n        {\n            res = (long long )res *(i -1)/ i;\n            while(x % i == 0) x /= i;\n        }\n    }\n    if(x &gt;1) res = (long long)res *(x - 1)/x;\n    return res;\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"欧拉定理小费马定理\"><a class=\"markdownIt-Anchor\" href=\"#欧拉定理小费马定理\">#</a> 欧拉定理 + 小费马定理</h5>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img%E6%AC%A7%E6%8B%89%E5%AE%9A%E7%90%86%E5%B0%8F%E8%B4%B9%E9%A9%AC%E5%AE%9A%E7%90%86.png\" alt=\"欧拉定理小费马定理\"></p>\n<h5 id=\"筛发求欧拉函数\"><a class=\"markdownIt-Anchor\" href=\"#筛发求欧拉函数\">#</a> 筛发求欧拉函数</h5>\n<p>求出所有小于 N 的数的欧拉值</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">bool st[N];\nint cnt,primes[N],ola[N];\nlong long getallola(int n)\n{\n    ola[1] = 1;\n    for(int i = 2; i &lt;= n;i++)\n    {\n        if(!st[i]) \n        {\n        \tprimes[cnt++] = i;\n            ola[i] = i -1; //显然一个数如果是质数 他的欧拉值 比他小的所有数的和\n        }\n        for(int j = 0; primes[j] &lt;= n/i;j++)\n        {\n            st[i * primes[j]] = true;\n            if(i % primes[j] == 0)\n            {\n                ola[i * primes[j]] = primes[j] * ola[i];\n                break;\n            }\n            else ola[i * primes[j]] = ola[i] * (primes[j] - 1);\n        }\n    }\n    long long res = 0;\n       for(int i = 1 ; i &lt;= n ; i++)\n        res += (long long)ola[i];\n    return res;\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/javaPNN~XFP6Q74$8QXO4YY%5B9%60J.png\" alt=\"从欧筛中延伸\"></p>\n<h4 id=\"快速幂\"><a class=\"markdownIt-Anchor\" href=\"#快速幂\">#</a> 快速幂</h4>\n<p>时间复杂度从 O (n) 降低到 O (logn);</p>\n<p>将质数不断切分成平方形式，切分<strong> logn</strong> 次</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">qmi</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> k <span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> p<span class=\"token punctuation\">)</span> <span class=\"token comment\">//求a^^k % p的结果</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> res  <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>k <span class=\"token operator\">&amp;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> res <span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span> res <span class=\"token operator\">*</span> a <span class=\"token operator\">%</span> p<span class=\"token punctuation\">;</span>\n        k <span class=\"token operator\">&gt;&gt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        a <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span>a <span class=\"token operator\">*</span> a <span class=\"token operator\">%</span> p<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"扩展欧几里得算法\"><a class=\"markdownIt-Anchor\" href=\"#扩展欧几里得算法\">#</a> 扩展欧几里得算法</h4>\n<p>存在 x 和 y 使得 ax + by = gcd (a,b)</p>\n<p>扩展欧几里得算法求出 x 和 y</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">// 通过引用获取x和y的值\nint exgcd(int a,int b,int &amp;x,int &amp;y)\n{\n    if(!b)\n    {\n        x =1 ;\n        y = 0;\n        return a;\n    }\n    int x1,y1,d;\n    d = exgcd(b,a%b,x1,y1);\n    x = y1;\n    y = x1 - a/b * y1;\n    return d;\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img%E6%89%A9%E5%B1%95%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E7%AE%97%E6%B3%95.png\" alt=\"扩展欧几里得算法\"></p>\n<h4 id=\"中国剩余定理\"><a class=\"markdownIt-Anchor\" href=\"#中国剩余定理\">#</a> 中国剩余定理</h4>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/%E4%B8%AD%E5%9B%BD%E5%89%A9%E4%BD%99%E5%AE%9A%E7%90%86.png\" alt=\"中国剩余定理\"></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">typedef long long ll;\nll a[],m[]; //a[] 为余数数组, m[]为模数数组\n//扩展欧几里得算法\nll exgcd(ll a ,ll b, ll &amp;x, ll &amp;y)\n{\n    if(!b)\n    {\n        x =1 ;\n        y = 0 ;\n        return a;\n    }\n    int x1,y1,d;\n    d = exgcd(b,a%b,x1,y1);\n    x = y1;\n    y = x1 - a/b * y1;\n    return d;\n}\n//通过扩展欧几里得算法求逆元\nll inverse(ll Mi,ll mi)\n{\n    int x,y;\n    exgcd(Mi,mi,x,y)\n        return (x % p + p) % p //保证逆元是正数\n}\nll CRT(ll a[],m[],int n) //余数数组, 模数数组, 数组大小n\n{\n    ll p =0;\n    for(int i = 0 ; i &lt; n ;i++)\n        p += m[i];                    //求和M\n   \tfor(int i = 0 ; i &lt; n ; i++)\n    {\n        x += (a[i]*(p/m[i])* inverse(p/m[i],m[i])) % p;   // ai * Mi * Mi ^ -1 \n    }\n    return x % p;\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"扩展中国剩余定理\"><a class=\"markdownIt-Anchor\" href=\"#扩展中国剩余定理\">#</a> 扩展中国剩余定理</h5>\n<p>中国剩余定理要求所有的模数是互质的，扩展中国剩余定理则没有任何限制</p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/%E6%89%A9%E5%B1%95%E4%B8%AD%E5%9B%BD%E5%89%A9%E4%BD%99%E5%AE%9A%E7%90%86.png\" alt=\"扩展中国剩余定理\"></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">// https://www.acwing.com/problem/content/206/\n#include &lt;iostream&gt;\n\nusing namespace std;\n\ntypedef long long ll;\n\nbool has_answer = true;\n\nll exgcd(ll a, ll b , ll &amp;x,ll &amp;y)\n{\n    if(!b)\n    {\n        x =1 ;\n        y = 0 ;\n        return a;\n    }\n    ll x1,y1,d;\n    d = exgcd(b,a%b,x1,y1);\n    x = y1;\n    y = x1 - a/b * y1;\n    return d;\n}\nint main()\n{\n    cin.tie(0);\n    ios::sync_with_stdio(false);\n    int n;\n    cin &gt;&gt; n;\n    ll a1,m1;\n    cin &gt;&gt; a1 &gt;&gt; m1;\n    ll x;\n    for(int i = 0 ; i &lt; n -1 ; i++)\n    {\n        ll a2,m2;\n        cin &gt;&gt; a2 &gt;&gt; m2;\n        ll k1,k2;\n        ll d = exgcd(a1,a2,k1,k2);\n        if((m2 - m1) %d != 0 )\n        {\n            has_answer = false;\n            break;\n        }\n        k1 *=(m2 -m1) /d;\n        k1 = (k1 % (a2/d) + (a2/d)) % (a2/d);\n        m1 = (k1 * a1) + m1;\n        a1 = (a1 * a2) / d;\n    }\n    if(has_answer)\n    {\n              x =  (m1 % a1 + a1) % a1;\n                      cout &lt;&lt; x &lt;&lt; endl;\n    }\n    else    \n        cout &lt;&lt; -1 &lt;&lt; endl;\n    return 0;\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n",
            "tags": [
                "算法啊"
            ]
        },
        {
            "id": "https://github.com/YogMas/YogMas.github.io/2022/09/16/git/",
            "url": "https://github.com/YogMas/YogMas.github.io/2022/09/16/git/",
            "title": "Git",
            "date_published": "2022-09-15T16:00:00.000Z",
            "content_html": "<h1 id=\"git\"><a class=\"markdownIt-Anchor\" href=\"#git\">#</a> Git</h1>\n<h2 id=\"常用指令\"><a class=\"markdownIt-Anchor\" href=\"#常用指令\">#</a> 常用指令</h2>\n<ul>\n<li><code>git add 文件名</code> ：添加到缓存区</li>\n<li><code>git commit -m \"提交说明\"</code>   : 提交到本地代码库</li>\n<li><code>git init</code>  : 初始化 git 仓库</li>\n<li><code>git status</code> : 时刻掌握仓库当前的状态</li>\n<li><code>git diff</code> : 查看仓库更改中的不同</li>\n<li><code>git log （--pretty=online）</code> : 显示从最近到最远的提交日志 后面的参数可以简化显示</li>\n<li><code>git reset --hard HEAD^ (commit ID)</code> : 文件版本回退</li>\n<li><code>git reflog</code> : 显示你之前的每一次命令</li>\n<li><code>git checkout -- file</code> : 把 file 文件在工作区的修改全部撤销，原理是用版本库里的版本替换工作区的版本</li>\n<li><code>git reset HEAD &lt;file&gt;</code> : 把暂存区的修改撤销掉，重新放回工作区</li>\n<li><code>git rm</code> : 删除文件，执行后再 <code>git commit</code>  才能从版本库中删除</li>\n<li></li>\n</ul>\n<h2 id=\"基本知识\"><a class=\"markdownIt-Anchor\" href=\"#基本知识\">#</a> 基本知识</h2>\n<p>git 中使用 <code>HEAD</code>  来表示当前版本  <code>HEAD^</code>  来表示上一个版本  <code>HEAD^^</code>  来表示上上个版本 还可以写作  <code>HEAD~100</code>  来表示前一百个版本</p>\n",
            "tags": [
                "Git"
            ]
        },
        {
            "id": "https://github.com/YogMas/YogMas.github.io/2022/09/13/java/",
            "url": "https://github.com/YogMas/YogMas.github.io/2022/09/13/java/",
            "title": "java",
            "date_published": "2022-09-12T16:00:00.000Z",
            "content_html": "<h1 id=\"java\"><a class=\"markdownIt-Anchor\" href=\"#java\">#</a> Java</h1>\n<p>软件工程课程中 java 学习的记录</p>\n<h2 id=\"java开发\"><a class=\"markdownIt-Anchor\" href=\"#java开发\">#</a> Java 开发</h2>\n<p>java 是面向对象语言</p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/javajava%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86.png\" alt=\"java编译原理\"></p>\n<p>java 语言具有两种机制:</p>\n<ul>\n<li>虚拟机机制 (JVM): 保证 java 程序的跨平台特性</li>\n<li>垃圾回收机制：保证 java 更安全，更高效</li>\n</ul>\n<h3 id=\"java虚拟机\"><a class=\"markdownIt-Anchor\" href=\"#java虚拟机\">#</a> java 虚拟机</h3>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/javajava%E8%99%9A%E6%8B%9F%E6%9C%BA.png\" alt=\"java虚拟机\"></p>\n<ul>\n<li>java(<strong>j</strong>ava <strong>v</strong>isual <strong>M</strong>achine) 虚拟机是可运行 java 字节码的虚拟计算机系统</li>\n<li>使用 java 语言编写的程序，实际上是运行在 JVM 之上</li>\n<li>JVM 有一个解释器组件，可以实现 Java 字节码和操作系统的通信</li>\n</ul>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/javajava%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%BF%90%E8%A1%8C%E8%BF%87%E7%A8%8B.png\" alt=\"java虚拟机运行过程\"></p>\n<h3 id=\"运行环境\"><a class=\"markdownIt-Anchor\" href=\"#运行环境\">#</a> 运行环境</h3>\n<ul>\n<li>下载 JDK 包，并配置系统环境</li>\n<li>Eclipse 开发环境</li>\n</ul>\n<h2 id=\"java程序基本结构\"><a class=\"markdownIt-Anchor\" href=\"#java程序基本结构\">#</a> Java 程序基本结构</h2>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">database</span>   <span class=\"token comment\">//包声明语句</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>applet<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">App</span> <span class=\"token comment\">//任意数量的引入语句</span>\n    \n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloWorld</span>    <span class=\"token comment\">//一个源文件至多有一个public的class声明 且public类名要与文件名相同</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HelloWorld\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"包声明package\"><a class=\"markdownIt-Anchor\" href=\"#包声明package\">#</a> 包声明:package</h3>\n<ul>\n<li>包是类和接口的集合，即为类库</li>\n<li>在一个源程序中，只能有一个包声明语句，且是程序的第一条语句</li>\n</ul>\n<h3 id=\"引入语句import\"><a class=\"markdownIt-Anchor\" href=\"#引入语句import\">#</a> 引入语句:import</h3>\n<ul>\n<li>程序编译时，会将需要的在引入语句中的类引入到程序中</li>\n<li>import 的两种形式\n<ol>\n<li>import 包名。类名</li>\n<li>import 包名.*    * 表示全部</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"类和接口声明\"><a class=\"markdownIt-Anchor\" href=\"#类和接口声明\">#</a> 类和接口声明</h3>\n<ul>\n<li>类和接口是程序的基本组成单元</li>\n<li>类是由成员变量和成员方法组成，表示了对象的基本属性和行为</li>\n<li>接口表现了对象所具有的行为规范</li>\n<li>源程序中至少有一个类或接口创建</li>\n</ul>\n<h3 id=\"注释\"><a class=\"markdownIt-Anchor\" href=\"#注释\">#</a> 注释</h3>\n<ul>\n<li><code>//</code> ：由 <code>//</code>  开始到行末为注释内容</li>\n<li><code>/*  */</code> ：两者之间为注释内容，可以多行注释</li>\n<li><code>/**    */</code> ：文档注释</li>\n</ul>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/java%E6%96%87%E6%A1%A3%E6%B3%A8%E9%87%8A.png\" alt=\"文档注释\"></p>\n<h2 id=\"java基础语法\"><a class=\"markdownIt-Anchor\" href=\"#java基础语法\">#</a> Java 基础语法</h2>\n<h3 id=\"数据类型\"><a class=\"markdownIt-Anchor\" href=\"#数据类型\">#</a> 数据类型</h3>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/java%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B1.png\" alt=\"数据类型1\"></p>\n<h4 id=\"简单数据类型\"><a class=\"markdownIt-Anchor\" href=\"#简单数据类型\">#</a> 简单数据类型</h4>\n<h4 id=\"简单数据类型-2\"><a class=\"markdownIt-Anchor\" href=\"#简单数据类型-2\">#</a> <img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/java%E7%AE%80%E5%8D%95%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.png\" alt=\"简单数据类型\"></h4>\n<p>Java 中的数值类型都是有符号的，使用最高位来表示数据的正负号</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">boolean</span> b <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//基本数据类型声明</span>\n<span class=\"token keyword\">short</span> si <span class=\"token operator\">=</span> <span class=\"token number\">128</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">,</span>k <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">99</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">long</span> l <span class=\"token operator\">=</span> <span class=\"token number\">123456789</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> ch <span class=\"token operator\">=</span> <span class=\"token string\">'J'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> chc <span class=\"token operator\">=</span> <span class=\"token string\">'中'</span> <span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> f <span class=\"token operator\">=</span> <span class=\"token number\">3.1415926f</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">double</span> d <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1.04E-5</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> “信息工程”<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"整数数据类型\"><a class=\"markdownIt-Anchor\" href=\"#整数数据类型\">#</a> 整数数据类型</h5>\n<ul>\n<li>int 是经常使用的，碰见较大的数用 long</li>\n<li>byte,shrot 主要用于特定的场合，如占用大量存储空间的大数组或者底层的 文件处理等</li>\n<li>java 中有三种进制表示整数:\n<ol>\n<li>十进制:  x = 678</li>\n<li>八进制:   x = <strong>0</strong>456   前面加<strong> 0</strong> 表示为八进制</li>\n<li>十六进制: x = <strong>0x</strong>a9b1   前面加<strong> 0x</strong> 表示为十六进制</li>\n</ol>\n</li>\n</ul>\n<h5 id=\"浮点数据类型\"><a class=\"markdownIt-Anchor\" href=\"#浮点数据类型\">#</a> 浮点数据类型</h5>\n<p>浮点型表示有小数部分的数值，包括 float 型和 double 型。这两种数据类型全部为有符号数</p>\n<ul>\n<li>浮点型默认为 double 型</li>\n<li>使用 float 型，必须添加后缀 F 或者 f</li>\n<li>double 型，可以添加后缀 D 或者 d, 也可以不添加</li>\n<li>没有后缀时，默认为 double 型</li>\n</ul>\n<h5 id=\"char型数据类型\"><a class=\"markdownIt-Anchor\" href=\"#char型数据类型\">#</a> char 型数据类型</h5>\n<ul>\n<li>char 型用来表示字符。每个 char 型变量占两个字节。在 Java 中，字符的编码是采用 Unicode 编码。</li>\n<li>Unicode 编码字符是用 16 位无符号整数表示，有 216 个可能值，即 0～65 535。可以表示世界上的大部分文字语言中的字符。</li>\n<li>char 类型数据被表示为用一对单引号包含的单个字符 例:  <code>char ch = 'a'</code></li>\n</ul>\n<h5 id=\"boolean型数据类型\"><a class=\"markdownIt-Anchor\" href=\"#boolean型数据类型\">#</a> boolean 型数据类型</h5>\n<ul>\n<li>boolean 只有两个取值 true 和 false 即 真和假</li>\n<li>在 C++ 中用数值或指针可以代替 boolean 值，0 相当于 false，非 0 相当于 true。</li>\n<li>在 Java 中没有这样的规定，<strong>boolean 型的值不能与任何其他基本类型的值进行转换代替</strong>。</li>\n</ul>\n<h4 id=\"引用数据类型\"><a class=\"markdownIt-Anchor\" href=\"#引用数据类型\">#</a> 引用数据类型</h4>\n<ul>\n<li>引用数据类型声明变量时，不会为变量分配存储空间，因为他们声明的是数据的引用，不是数据本身，需要用<strong> new 运算符</strong>来为引用类型的变量分配存储空间</li>\n<li>引用：类似与 C++ 中的指针，又不同与指针</li>\n</ul>\n<h4 id=\"基本数据类型值间的转换\"><a class=\"markdownIt-Anchor\" href=\"#基本数据类型值间的转换\">#</a> 基本数据类型值间的转换</h4>\n<ul>\n<li>自动转换</li>\n<li>强制类型转换</li>\n</ul>\n<h5 id=\"自动转换\"><a class=\"markdownIt-Anchor\" href=\"#自动转换\">#</a> 自动转换</h5>\n<ul>\n<li>从低到高的顺序转换</li>\n<li>优先关系为:byte,short,char-&gt; int -&gt; long -&gt; float -&gt; double</li>\n<li>不同数据类型先转换成同一数据类型，再进行运算</li>\n</ul>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/java%E8%87%AA%E5%8A%A8%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2.png\" alt=\"自动类型转换\"></p>\n<h5 id=\"强制类型转换\"><a class=\"markdownIt-Anchor\" href=\"#强制类型转换\">#</a> 强制类型转换</h5>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">double</span> y<span class=\"token punctuation\">;</span>\n\tx <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token number\">34.56</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token number\">11.2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 丢失精度</span>\n\ty <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span>x <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span><span class=\"token number\">10</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 提高精度</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x=\"</span> <span class=\"token operator\">+</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"y=\"</span> <span class=\"token operator\">+</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"变量类型\"><a class=\"markdownIt-Anchor\" href=\"#变量类型\">#</a> 变量类型</h3>\n<ul>\n<li>局部变量</li>\n<li>实例变量 (全局变量)</li>\n<li>类变量 (静态变量):  <code>static</code>  关键字声明</li>\n<li>实例变量和类变量统称为成员变量</li>\n</ul>\n<p>与 C++ 变量类似 略</p>\n<h3 id=\"运算符\"><a class=\"markdownIt-Anchor\" href=\"#运算符\">#</a> 运算符</h3>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/javajava%E8%BF%90%E7%AE%97%E7%AC%A6.png\" alt=\"java运算符\"></p>\n<h4 id=\"位运算符\"><a class=\"markdownIt-Anchor\" href=\"#位运算符\">#</a> 位运算符</h4>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/javajava%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6.png\" alt=\"java位运算符\"></p>\n<h5 id=\"右移位\"><a class=\"markdownIt-Anchor\" href=\"#右移位\">#</a> 右移位</h5>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/java%E5%8F%B3%E7%A7%BB%E4%BD%8D.png\" alt=\"右移位\"></p>\n<h5 id=\"左移位\"><a class=\"markdownIt-Anchor\" href=\"#左移位\">#</a> 左移位</h5>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/java%E5%B7%A6%E7%A7%BB%E4%BD%8D.png\" alt=\"左移位\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">60</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 60 = 0011 1100 */</span> \n<span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">13</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 13 = 0000 1101 */</span>\n<span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\nc <span class=\"token operator\">=</span> a <span class=\"token operator\">&amp;</span> b<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 12 = 0000 1100 */</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a &amp; b = \"</span> <span class=\"token operator\">+</span> c <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nc <span class=\"token operator\">=</span> a <span class=\"token operator\">|</span> b<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 61 = 0011 1101 */</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a | b = \"</span> <span class=\"token operator\">+</span> c <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nc <span class=\"token operator\">=</span> a <span class=\"token operator\">^</span> b<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 49 = 0011 0001 */</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a ^ b = \"</span> <span class=\"token operator\">+</span> c <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nc <span class=\"token operator\">=</span> <span class=\"token operator\">~</span>a<span class=\"token punctuation\">;</span> <span class=\"token comment\">/*-61 = 1100 0011 */</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"~a = \"</span> <span class=\"token operator\">+</span> c <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nc <span class=\"token operator\">=</span> a <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 240 = 1111 0000 */</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a &lt;&lt; 2 = \"</span> <span class=\"token operator\">+</span> c <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nc <span class=\"token operator\">=</span> a <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 15 = 1111 */</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a &gt;&gt; 2 = \"</span> <span class=\"token operator\">+</span> c <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nc <span class=\"token operator\">=</span> a <span class=\"token operator\">&gt;&gt;&gt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 15 = 0000 1111 */</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a &gt;&gt;&gt; 2 = \"</span> <span class=\"token operator\">+</span> c <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/*\n编译结果\na &amp; b = 12\na | b = 61\na ^ b = 49\n~a = -61\na &lt;&lt; 2 = 240\na &gt;&gt; 15\na &gt;&gt;&gt; 15\n*/</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"条件运算符\"><a class=\"markdownIt-Anchor\" href=\"#条件运算符\">#</a> 条件运算符</h4>\n<p><code>variable x = (expression) ? value if true : value if false</code></p>\n<h3 id=\"流程控制语句\"><a class=\"markdownIt-Anchor\" href=\"#流程控制语句\">#</a> 流程控制语句</h3>\n<p><code>if switch while for do while</code>  与 C++ 类似 略</p>\n<h3 id=\"数组\"><a class=\"markdownIt-Anchor\" href=\"#数组\">#</a> 数组</h3>\n<p>原理与 C++ 类似，声明方法不同</p>\n<ol>\n<li>声明数组  <code>int[] a;</code></li>\n<li>分配空间   <code>a = new int[5];</code></li>\n<li>赋值:  <code>a[0] = 3;</code></li>\n<li>处理数据:  <code>a[0] = a[0] * 10;</code></li>\n</ol>\n<p>1，2 步可以合并为  <code>数据类型[ ] 数组名 = new 数据类型[大小] ;</code></p>\n<h4 id=\"赋值\"><a class=\"markdownIt-Anchor\" href=\"#赋值\">#</a> 赋值</h4>\n<ul>\n<li>\n<p>边声明边赋值 (静态初始化)</p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/java%E6%95%B0%E7%BB%84%E9%9D%99%E6%80%81%E8%B5%8B%E5%80%BC.png\" alt=\"数组静态赋值\"></p>\n</li>\n<li>\n<p>动态从键盘边录入边赋值</p>\n</li>\n</ul>\n<h4 id=\"数组边界\"><a class=\"markdownIt-Anchor\" href=\"#数组边界\">#</a> 数组边界</h4>\n<ul>\n<li>数组类中有唯一的成员变量：length，用来表示数组的长度，即数组元素的个数。</li>\n<li>与 C、C++ 中不同，Java 对数组元素要进行越界检查，若发生越界访问，则会抛出一个异常</li>\n<li>使用 new 创建数组对象时，自动给 length 赋值，数组一旦创建完毕，length 就确定下来， 除非重新使用 new 创建新的数组对象。</li>\n</ul>\n<h4 id=\"二维数组\"><a class=\"markdownIt-Anchor\" href=\"#二维数组\">#</a> 二维数组</h4>\n<p><code>类型名[][] 数组名=new 类型名[][]；</code></p>\n<p>二维数组的每一维大小允许不同</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> intArray<span class=\"token punctuation\">[</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span> <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span> <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\na<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\na<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>数组变量是引用变量，简单的用 = 复制数组，只是将引用进行了复制，并没有对数组的元素进行复制</p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/java%E6%95%B0%E7%BB%84%E5%BC%95%E7%94%A8%E6%8B%B7%E8%B4%9D.png\" alt=\"数组引用拷贝\"></p>\n<p>使用 clone () 方法进行深拷贝</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//使用clone方法</span>\n<span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span> <span class=\"token punctuation\">]</span> group1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span><span class=\"token number\">170</span><span class=\"token punctuation\">,</span><span class=\"token number\">60</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> group2<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> group1<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n…<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>对于二位数组 clone 方法也无法深拷贝，只有对二维数组中的每一个元素使用 clone 才能进行深拷贝</p>\n<h3 id=\"字符串\"><a class=\"markdownIt-Anchor\" href=\"#字符串\">#</a> 字符串</h3>\n<p>JAVA 字符串分为两类</p>\n<ul>\n<li>String: 在程序中不会被改变长度的不变字符串</li>\n<li>StringBuffer: 是在程序中会被 改变长度的可变字符串</li>\n</ul>\n<h4 id=\"创建字符串\"><a class=\"markdownIt-Anchor\" href=\"#创建字符串\">#</a> 创建字符串</h4>\n<ul>\n<li><code>String str=new（\"This is a String\");</code></li>\n<li><code>String str=\"This is a String\";</code></li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">StringDemo</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token class-name\">String</span> site <span class=\"token operator\">=</span> <span class=\"token string\">\"www.uestc.edu.cn\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> site<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"电子科大域名长度 : \"</span> <span class=\"token operator\">+</span> len <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"创建格式化字符串\"><a class=\"markdownIt-Anchor\" href=\"#创建格式化字符串\">#</a> 创建格式化字符串</h5>\n<p>采用 <code>printf()</code>  和  <code>format()</code>  方法</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"浮点型变量的值为 \"</span> <span class=\"token operator\">+</span><span class=\"token string\">\"%f, 整型变量的值为 \"</span> <span class=\"token operator\">+</span>\n<span class=\"token string\">\" %d, 字符串变量的值为 \"</span> <span class=\"token operator\">+</span><span class=\"token string\">\"is %s\"</span><span class=\"token punctuation\">,</span> floatVar<span class=\"token punctuation\">,</span> intVar<span class=\"token punctuation\">,</span> stringVar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> fs <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"浮点型变量的值为 \"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"%f, 整型变量的值为 \"</span> <span class=\"token operator\">+</span> \n<span class=\"token string\">\" %d, 字符串变量的值为 \"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" %s\"</span><span class=\"token punctuation\">,</span> floatVar<span class=\"token punctuation\">,</span> intVar<span class=\"token punctuation\">,</span> stringVar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>静态方法 <code>format()</code>  返回一个 String 对象而不是 PrintStream 对象。</p>\n<p>所以 <code>format()</code>  能用来创建可复用的格式化字符串，而不仅仅是用于 一次打印输出。</p>\n<h4 id=\"字符串的连接\"><a class=\"markdownIt-Anchor\" href=\"#字符串的连接\">#</a> 字符串的连接</h4>\n<p>字符串可以通过 “+” 连接，基本数据类型与字符串进行 “+” 操作，一般也会自动转换为字符串。</p>\n<h4 id=\"函数\"><a class=\"markdownIt-Anchor\" href=\"#函数\">#</a> 函数</h4>\n<ul>\n<li><code>str.length()</code> : 得到 string 的长度</li>\n<li><code>str.indexof(subString,startIndex)</code> : 确定字符串中指定字符或子字符串在给定字符串的位置，substring 为子字符串，从下标 startIndex 开始查找，返回 substring 首字母的在 str 中的下标</li>\n<li><code>lastIndexOf(subString)</code> : 从后往前查找</li>\n<li><code>str.equals(String)</code> : 判断两个字符串是否相等</li>\n<li><code>str.charAt(索引值)</code> : 得到指定位置的字符</li>\n<li><code>str.getChars(int a,int b,char s[],startindex)</code> : 得到字符串的一部字符串，下标 [a,b) 中的字符串复制到 s 数组中，从 s 数组中的 startindex 开始记录</li>\n<li><code>str.substring(start,end)</code> : 截取下标索引为 [start,end) 内的子字符串</li>\n<li><code>str.replace(a,b)</code> : 将字符串中的 a 用 b 来代替</li>\n<li><code>str.concat(string)</code> : 将两个字符串合并</li>\n<li><code>str.toUpperCase()</code> : 字符串全部转换成大写</li>\n<li><code>str.toLowerCase()</code> : 字符串全部转换成小写</li>\n<li><code>str.trim()</code> : 将开头和结尾处的空格去掉</li>\n<li><code>String.valueOf(x)</code> : 将任何类型的数据对象 x 转换成字符串</li>\n<li><code>String strArr[] = str.split(\"_\");</code> : 将字符串进行分隔，分隔结果储存在数组中</li>\n</ul>\n<h4 id=\"可变字符串\"><a class=\"markdownIt-Anchor\" href=\"#可变字符串\">#</a> 可变字符串</h4>\n<p>修改可变字符串的方法</p>\n<ul>\n<li>在字符串后面追加：用 append () 方法将各种对象加入到字符串中。</li>\n<li>在字符串中间插入：用 insert () 方法。</li>\n<li>改变某个位置所在的字符，用 setCharAt () 方法。</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">StringBuffer</span> str<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuffer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Thisis a String\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"test \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//输出： Thisis a test String</span>\n<span class=\"token class-name\">StringBuffer</span> sb <span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuffer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"aaaaaa\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsb<span class=\"token punctuation\">.</span><span class=\"token function\">setCharAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>‘b’<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// sb 的值 aabaaa</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>sb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"日期和时间\"><a class=\"markdownIt-Anchor\" href=\"#日期和时间\">#</a> 日期和时间</h3>\n<p>java.util 包提供了 Date 类来封装当前的日期和时间。 Date 类提供两个构造函数 来实例化 Date 对象。</p>\n<ul>\n<li>第一个构造函数使用当前日期和时间来初始化对象。 <code>Date()</code></li>\n<li>第二个构造函数接收一个参数，该参数是从 1970 年 1 月 1 日起的毫秒数。 <code>Date(long millisec)</code></li>\n</ul>\n<h4 id=\"获取当前时间\"><a class=\"markdownIt-Anchor\" href=\"#获取当前时间\">#</a> 获取当前时间</h4>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Date</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DateDemo</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// 初始化 Date 对象</span>\n\t<span class=\"token class-name\">Date</span> date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 使用 toString() 函数显示日期时间</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"格式化日期\"><a class=\"markdownIt-Anchor\" href=\"#格式化日期\">#</a> 格式化日期</h4>\n<ol>\n<li>使用 SimpleDateFormat 格式化日期</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span> \n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DateDemo</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">Date</span> dNow <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">SimpleDateFormat</span> ft <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleDateFormat</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"E yyyy.MM.dd 'at' hh:mm:ss a zzz\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Current Date: \"</span> <span class=\"token operator\">+</span> ft<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span>dNow<span class=\"token punctuation\">)</span> \t\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//yyyy 是公元年，MM 是月份，dd 是日期，HH:mm:ss 是时、分、秒。</span>\n        <span class=\"token comment\">//SimpleDateFormat 允许选择任何自定义日期时间格式.</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol start=\"2\">\n<li>\n<p>使用 printf 格式化日期<br>\n printf 方法可以很轻松地格式化时间和日期。使用两个字母格式，它以 % t 开头并且 以下面表格中的一个字母结尾</p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/javaprintf%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%97%A5%E6%9C%9F.png\" alt=\"printf格式化日期\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Date</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DateDemo</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token class-name\">Date</span> date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 初始化 Date 对象</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"全部日期和时间信息: %tc%n\"</span><span class=\"token punctuation\">,</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//c的使用</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"年-月-日格式: %tF%n\"</span><span class=\"token punctuation\">,</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//f的使用</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"月/日/年格式: %tD%n\"</span><span class=\"token punctuation\">,</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//d的使用</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HH:MM:SS PM格式(12时制):%tr%n\"</span><span class=\"token punctuation\">,</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//r的使用</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HH:MM:SS格式(24时制): %tT%n\"</span><span class=\"token punctuation\">,</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//t的使用</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HH:MM格式(24时制): %tR\"</span><span class=\"token punctuation\">,</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//R的使用</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/javaprintf%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%97%A5%E6%9C%9F%E7%BB%93%E6%9E%9C.png\" alt=\"printf格式化日期结果\"></p>\n</li>\n</ol>\n<h2 id=\"面向对象设计\"><a class=\"markdownIt-Anchor\" href=\"#面向对象设计\">#</a> 面向对象设计</h2>\n<h3 id=\"类的创建\"><a class=\"markdownIt-Anchor\" href=\"#类的创建\">#</a> 类的创建</h3>\n<p>三个特征:</p>\n<ul>\n<li>封装性</li>\n<li>多态性</li>\n<li>继承性</li>\n</ul>\n<p>类的体包含</p>\n<ul>\n<li>成员变量</li>\n<li>成员方法</li>\n<li>类的构造器</li>\n</ul>\n<p>类的创建</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// [public] class &lt;className&gt; extends &lt;superClass&gt; implements &lt;interface&gt;</span>\n<span class=\"token comment\">//[public]为可选项 可以有public abstract final等等 表示类的种类</span>\n<span class=\"token comment\">//extends表示继承 继承父类</span>\n<span class=\"token comment\">// implements 表示接口 </span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"成员变量\"><a class=\"markdownIt-Anchor\" href=\"#成员变量\">#</a> 成员变量</h4>\n<p>在类中创建的变量，表示类的属性</p>\n<p>作用域是全局的，能被类中所有方法所访问</p>\n<p>创建时具有初始化值</p>\n<ul>\n<li>访问修饰符:public,protected,private 等等</li>\n<li>使用限制的修饰符:final,abstract,static,synchronized,transient,volatile 等</li>\n</ul>\n<ol>\n<li>初始化\n<ul>\n<li>创建变量时初始化：不进行赋值就会自动初始化一个 java 里默认的数值</li>\n<li>创建时赋初值</li>\n<li>构造器中对成员变量赋初值</li>\n</ul>\n</li>\n<li>常量\n<ul>\n<li>使用 final 修饰的变量，因为不能更改，就可以像常量一样使用</li>\n<li>常量符号数据只能读取，不能改变，全用大写字母，单词间用 \"_\" 分隔 eg:MAX_MONTH</li>\n</ul>\n</li>\n</ol>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/java%E5%88%9D%E5%A7%8B%E5%80%BC.png\" alt=\"成员变量初始化值\"></p>\n<h4 id=\"成员方法与c的函数类似\"><a class=\"markdownIt-Anchor\" href=\"#成员方法与c的函数类似\">#</a> 成员方法 (与 C 的函数类似)</h4>\n<p>方法的创建分为 方法声明和方法体</p>\n<p><code>[修饰符l] 返回类型 方法名称(形式参数) {方法体}</code></p>\n<p>方法体中包含</p>\n<ul>\n<li>局部变量</li>\n<li>流程控制语句</li>\n<li>语句块</li>\n<li>return 语句</li>\n</ul>\n<p>有返回类型，必须有 return 语句和返回值，为 void 无返回类型 可以有 return 语句 但是不能带表达式</p>\n<h5 id=\"参数传递\"><a class=\"markdownIt-Anchor\" href=\"#参数传递\">#</a> 参数传递</h5>\n<ul>\n<li>简单数据类型：将数据赋值给形式参数，由形式参数传入方法内部</li>\n<li>引用类型：传入的是引用，所有方法内部对于引用中变量值的改变会影响到实际参数引用中变量的值，当在方法内部改变了引用，其值不受影响</li>\n</ul>\n<h4 id=\"方法过载\"><a class=\"markdownIt-Anchor\" href=\"#方法过载\">#</a> 方法过载</h4>\n<p>同一个类中创建具有相同方法名，但是参数不同（数量，对应类型）不同的方法</p>\n<p>方法重载中方法由调用时的形参决定调用的方法是哪个</p>\n<h4 id=\"类的构造器\"><a class=\"markdownIt-Anchor\" href=\"#类的构造器\">#</a> 类的构造器</h4>\n<ul>\n<li>以类名作为构造方法名</li>\n<li>没有返回类型，具有参数和预聚体</li>\n<li>不是类的成员方法，所以不能用对象调用他</li>\n<li>由 new 运算符调用构造方法</li>\n<li>构造方法可以运用方法过载从而实现多个构造方法</li>\n<li>构造方法返回的是这个类的实例引用</li>\n<li>构造方法中的语句实现对成员变量的初始化</li>\n<li><strong>构造方法之间通过 this () 相互调用</strong></li>\n</ul>\n<p>类的构造器分为默认构造方法和非默认构造方法</p>\n<ul>\n<li>默认构造方法：不带参数的构造方法</li>\n<li>非构造方法：带参数的构造方法</li>\n</ul>\n<p>类创建时，如果没有创建构造器，编译器会自动添加一个默认构造器</p>\n<h3 id=\"类成员和实例成员\"><a class=\"markdownIt-Anchor\" href=\"#类成员和实例成员\">#</a> 类成员和实例成员</h3>\n<h4 id=\"实例成员\"><a class=\"markdownIt-Anchor\" href=\"#实例成员\">#</a> 实例成员</h4>\n<p>创建实例才能访问和使用的成员，通过创建实例对象，由对象访问 (不能由类名直接访问)</p>\n<p>无 static 修饰的成员为实例成员</p>\n<h4 id=\"static关键字\"><a class=\"markdownIt-Anchor\" href=\"#static关键字\">#</a> static 关键字</h4>\n<p>一旦将成员设为 static, 数据或者方法就不会同类的任何实例对象联系在一起</p>\n<p>即使从未创建那个类的一个对象，仍然能调用一个 static 方法，或访问一些 static 数据</p>\n<h5 id=\"类成员静态成员\"><a class=\"markdownIt-Anchor\" href=\"#类成员静态成员\">#</a> 类成员（静态成员）</h5>\n<p>类成员提供了事实上的<strong>全局变量和全局方法</strong></p>\n<ul>\n<li>类成员：可以由类名直接访问</li>\n<li>类成员也可以通过对象名访问，但是该类所有对象都共享类成员变量</li>\n</ul>\n<h5 id=\"static方法和static块\"><a class=\"markdownIt-Anchor\" href=\"#static方法和static块\">#</a> static 方法和 static 块</h5>\n<p>声明为 static 的方法的限制</p>\n<ul>\n<li>仅能调用其他的 static 方法</li>\n<li>只能访问 static 数据</li>\n<li>不能以任何方式引用 this 或 super</li>\n</ul>\n<p>static 块:</p>\n<ul>\n<li>如果你需要通过计算来初始化你的 static 变量，你可以声明一个 static 块</li>\n<li>static 块仅在该类被加载时执行一次</li>\n<li>static 块是最早执行的代码块</li>\n</ul>\n<h4 id=\"对象创建和使用\"><a class=\"markdownIt-Anchor\" href=\"#对象创建和使用\">#</a> 对象创建和使用</h4>\n<p>对象，实例，引用之间的关系：</p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/java%E5%AF%B9%E8%B1%A1,%E5%AE%9E%E4%BE%8B,%E5%BC%95%E7%94%A8.png\" alt=\"对象,实例,引用\"></p>\n<p>创建属于某类的对象：</p>\n<ol>\n<li>声明指向 \"由类所创建的对象\" 的变量</li>\n<li>利用 new 创建新的对象，并指派给先前所创建的变量</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">person p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//声明person对象p并实例化此对象</span>\n<span class=\"token comment\">//对象只有实例化之后才能被使用，而实例化对象的关键字就是new</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/java%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E5%9C%A8%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%86%85%E7%9A%84%E9%80%94%E5%BE%84.png\" alt=\"创建对象在计算机内的途径\"></p>\n<p>对象的生命周期分为<strong>创建，使用和销毁</strong></p>\n<ul>\n<li>通过声明，实例化进行创建</li>\n<li>通过垃圾回收进行实例开销的回收 由 JVM 自动完成</li>\n</ul>\n<p>java 程序运行时，系统通过垃圾收集，周期性地释放不再被对象引用所占用的内存，完成对象的清除</p>\n<h4 id=\"封装\"><a class=\"markdownIt-Anchor\" href=\"#封装\">#</a> 封装</h4>\n<p>OOP (面向对象设计) 的好处之一是对数据和操作该数据的代码的封装，通过类来封装不用担心类的实现细节和在内部数据实际上是如何管理的，我们只需要通过类的方法使用它</p>\n<h3 id=\"超类子类和继承性\"><a class=\"markdownIt-Anchor\" href=\"#超类子类和继承性\">#</a> 超类，子类和继承性</h3>\n<h4 id=\"类的继承性\"><a class=\"markdownIt-Anchor\" href=\"#类的继承性\">#</a> 类的继承性</h4>\n<p>类继承一个类，这个类除了创建自己的成员外，还能够继承或扩展另外一个类的成员</p>\n<ul>\n<li>超类：被继承的类</li>\n<li>子类：继承超类的类</li>\n</ul>\n<p>继承的特性</p>\n<ul>\n<li>单一继承性：子类只能有一个超类，超类可以有多个子类</li>\n<li>子类继承超类的所有成员，子类可以创建自己的成员.</li>\n<li>子类不能继承超类的构造器，子类的构造器要首先调用超类的构造器</li>\n<li>多态性之一：子类的成员隐藏和覆盖超类中相同的成员</li>\n<li>多态性之二：超类的对象可以对子类的实例引用</li>\n<li>由 abstract 修饰的类只能被继承</li>\n<li>由 final 修饰的类不能被继承</li>\n</ul>\n<p><code>[abstract|final] class Subclass extends Superclass {SubClassBody}</code></p>\n<ul>\n<li>abstract 修饰的是抽象类，其对象引用的必须是子类实例</li>\n<li>final 修饰的是终结类，其类不能被继承，不能有子类</li>\n<li>extends 为继承关键字，指示两个类存在的继承关系 <strong>子类 exteds 超类</strong></li>\n</ul>\n<p>创建类时，如缺省 extends, 该类就会 ovject 类的直接子类</p>\n<p>子类继承了超类的所有成员，但是无法访问某些受限的成员 (但是可以使用超类 public 访问对超类受限的成员进行访问)</p>\n<p>超类中，由 <code>private</code>  修饰的访问权限的成员变量和方法，虽然被子类继承，但是子类不能访问</p>\n<p>子类中可以访问从超类继承下来的三种访问权限设定的成员</p>\n<ul>\n<li>public</li>\n<li>protected</li>\n<li>缺省</li>\n</ul>\n<h4 id=\"成员变量的隐藏和方法覆盖\"><a class=\"markdownIt-Anchor\" href=\"#成员变量的隐藏和方法覆盖\">#</a> 成员变量的隐藏和方法覆盖</h4>\n<p>在子类的创建中，如果出现了与超类中相同的成员变量，则超类中的成员变量被子类中的成员变量所<strong>隐藏</strong></p>\n<p>如果出现了与超类中有相同名，同参数以及同返回类型的成员方法，则超类中的成员方法被子类中的成员方法所<strong>覆盖</strong></p>\n<h5 id=\"方法覆盖\"><a class=\"markdownIt-Anchor\" href=\"#方法覆盖\">#</a> 方法覆盖</h5>\n<ul>\n<li>子类的创建中，具有与超类相同的方法名，相同的参数以及相同的返回类型</li>\n<li>具有比超类中覆盖方法更大的可访问性</li>\n<li>不同于方法过载，方法过载是在一个类中具有相同方法名的方法</li>\n</ul>\n<p>方法覆盖的条件</p>\n<ul>\n<li>有<strong>继承关系</strong></li>\n<li>重写的方法和之前的方法具有与超类相同的方法名，相同的参数以及相同的返回类型</li>\n<li>重写的方法的访问权限不能比之前的方法权限更低</li>\n<li>重写方法的抛出异常数不能比之前放的抛出异常数更多</li>\n</ul>\n<p>注意事项:</p>\n<ul>\n<li>父类的私有方法无法覆盖</li>\n<li>覆盖只是针对方法，与成员变量无关</li>\n<li>构造方法不能被继承也不能被覆盖</li>\n<li>方法覆盖只是针对实例方法，静态方法覆盖没有意义</li>\n</ul>\n<h4 id=\"nullthis和super\"><a class=\"markdownIt-Anchor\" href=\"#nullthis和super\">#</a> null,this 和 super</h4>\n<ul>\n<li><code>null</code> : 表示空，用于表示对象或数组还没有相应的实例引用，注意大小写，null 是任何引用类型的默认值</li>\n<li><code>this</code> : 表示对类的实例访问，在类中可以指向成员变量与非成员变量区分，构造器中使用 this () 对另一个构造器的调用，类的创建中需要表示对自身实例的访问时，用 this 表示</li>\n<li><code>super</code> : 在子类中用于访问被隐藏的超类变量，被覆盖的超类方法</li>\n<li>super () 必须是子类构造函数的第一个执行语句，如果 super () 没有被用到，每个超类的默认的或五参数的构造函数将执行</li>\n</ul>\n<h4 id=\"运行时的多态\"><a class=\"markdownIt-Anchor\" href=\"#运行时的多态\">#</a> 运行时的多态</h4>\n<ul>\n<li>超类的对象可以引用子类的实例</li>\n<li>该对象仍然只能够调用超类中定义的方法和变量</li>\n<li>对于覆盖或继承的方法，java 运行时系统根据调用该方法的实参的类型来决定选择哪个方法调用</li>\n<li>对子类的一个实例，如果覆盖了超类的方法，则运行时系统调用子类的方法</li>\n<li>如果子类继承了超类的方法，则运行时系统调用超类的 l 方法</li>\n<li>当超类的对象对子类实例引用时，这个对象所访问的成员必须是超类中所具有的</li>\n<li>这个对象不能访问子类自己创建的成员</li>\n<li>当这个对象访问的是<strong>被覆盖的方法</strong>，则调用的是子类中覆盖方法</li>\n<li>只有当这个对象被强制转换成子类类型时，这个子类的所有成员才有可能被访问</li>\n</ul>\n<h4 id=\"final和abstract\"><a class=\"markdownIt-Anchor\" href=\"#final和abstract\">#</a> final 和 abstract</h4>\n<h5 id=\"final关键字\"><a class=\"markdownIt-Anchor\" href=\"#final关键字\">#</a> final 关键字</h5>\n<ul>\n<li>final 修饰的类不能被继承</li>\n<li>final 修饰的方法不能被子类重写</li>\n<li>final 修饰的变量是常量，初始化后不能再修改</li>\n</ul>\n<p>在编译时，如果 final 变量是<strong>基本类型或 String 类型</strong>，则编译器会把它当成<strong>编译器常量</strong>，其他类型会成为<strong>运行时常量</strong></p>\n<p>空白 final</p>\n<h2 id=\"输入输出流\"><a class=\"markdownIt-Anchor\" href=\"#输入输出流\">#</a> 输入输出流</h2>\n<h3 id=\"file类\"><a class=\"markdownIt-Anchor\" href=\"#file类\">#</a> File 类</h3>\n<p>具有查询文件属性、状态和文件名等功能，但不能 访问文件内容</p>\n<ul>\n<li><code>boolean createNewFile()</code>  不存在返回 true 存在返回 false</li>\n<li><code>boolean mkdir()</code>  创建目录</li>\n<li><code>boolean mkdirs()</code>  创建多级目录</li>\n<li><code>boolean delete()</code>  用于删除文件或删除空目录</li>\n<li><code>boolean deleteOnExit()</code>  文件使用完成后删除</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">File</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FileDemo2</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token class-name\">File</span> f <span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"d:\\\\1.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span><span class=\"token function\">createNewFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//当文件存在时返回false</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//当文件不存在时返回false</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// TODO Auto-generated catch block</span>\n\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"查询文件状态和属性\"><a class=\"markdownIt-Anchor\" href=\"#查询文件状态和属性\">#</a> 查询文件状态和属性</h5>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/java%E6%9F%A5%E8%AF%A2%E6%96%87%E4%BB%B6%E5%B1%9E%E6%80%A7.png\" alt=\"查询文件属性\"></p>\n<h5 id=\"查询文件目录管理\"><a class=\"markdownIt-Anchor\" href=\"#查询文件目录管理\">#</a> 查询文件目录管理</h5>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/java%E6%9F%A5%E8%AF%A2%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95%E7%AE%A1%E7%90%86.png\" alt=\"查询文件目录管理\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//列出磁盘下文件或文件夹的例子</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">File</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FileDemo3</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token class-name\">File</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> files <span class=\"token operator\">=</span><span class=\"token class-name\">File</span><span class=\"token punctuation\">.</span><span class=\"token function\">listRoots</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//列出的磁盘盘符</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">File</span> file<span class=\"token operator\">:</span>files<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&gt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> filenames <span class=\"token operator\">=</span>file<span class=\"token punctuation\">.</span><span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//列出磁盘文件</span>\n\t\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> filename<span class=\"token operator\">:</span>filenames<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"randomaccessfile类\"><a class=\"markdownIt-Anchor\" href=\"#randomaccessfile类\">#</a> RandomAccessFile 类</h3>\n<p>在 java.io 包中 RandomAccessFile 类和输入输出流类具有<strong>读写文件</strong>的功能</p>\n<p>提供了两个构造函数</p>\n<ul>\n<li>public RandomAccessFile(String name, String <strong>mode</strong>) throws IOException;</li>\n<li>public RandomAccessFile(File file, String <strong>mode</strong>) throws IOException;</li>\n</ul>\n<p>name 表示文件名，file 为 File 类对象，mode 为读写方式 w (write),r (read)</p>\n<p>当以读写方式生成 randomAccessFile 对象时</p>\n<ul>\n<li>文件不存在，就创建该文件，进行读写</li>\n<li>如果文件存在，就对文件进行覆盖 (有文件指针从文件头开始，当写入一个文件指针往后指，直接写入操作结果)</li>\n</ul>\n<p>RandomAccessFile 对象生成的时候，文件就相当于被打开了，文件指针位于开头</p>\n<h4 id=\"randomaccessfile的成员方法\"><a class=\"markdownIt-Anchor\" href=\"#randomaccessfile的成员方法\">#</a> RandomAccessFile 的成员方法</h4>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/javaRandomAccessFile%E7%B1%BB%E6%88%90%E5%91%98%E6%96%B9%E6%B3%95.png\" alt=\"RandomAccessFile类成员方法\"></p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/javaRandomAccessFile%E7%B1%BB%E6%88%90%E5%91%98%E6%96%B9%E6%B3%95(1).png\" alt=\"RandomAccessFile类成员方法(1)\"></p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/javaRandomAccessFile%E7%B1%BB%E6%88%90%E5%91%98%E6%96%B9%E6%B3%95%20(2).png\" alt=\"RandomAccessFile类成员方法 (2)\"></p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/javaRandomAccessFile%E7%B1%BB%E6%88%90%E5%91%98%E6%96%B9%E6%B3%95%20(3).png\" alt=\"RandomAccessFile类成员方法 (3)\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// RandomAccessFile 写出文件</span>\n<span class=\"token keyword\">package</span> <span class=\"token namespace\">stream</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RandomAccessFile</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">File</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestStream</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">File</span> f <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"F:\\\\javatest\\\\1.text\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">RandomAccessFile</span> rf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RandomAccessFile</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span><span class=\"token string\">\"rw\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> age <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\tname <span class=\"token operator\">=</span> <span class=\"token string\">\"zhangsan\"</span><span class=\"token punctuation\">;</span> age <span class=\"token operator\">=</span> <span class=\"token number\">18</span><span class=\"token punctuation\">;</span>\n\t\trf<span class=\"token punctuation\">.</span><span class=\"token function\">writeBytes</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\trf<span class=\"token punctuation\">.</span><span class=\"token function\">writeInt</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tname <span class=\"token operator\">=</span> <span class=\"token string\">\"lisi    \"</span><span class=\"token punctuation\">;</span> age <span class=\"token operator\">=</span> <span class=\"token number\">31</span><span class=\"token punctuation\">;</span>\n\t\trf<span class=\"token punctuation\">.</span><span class=\"token function\">writeBytes</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\trf<span class=\"token punctuation\">.</span><span class=\"token function\">writeInt</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\trf<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//RandomAccessFile 读出文件中的内容</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">File</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RandomAccessFile</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RandomAccessFileDemo02</span><span class=\"token punctuation\">{</span> <span class=\"token comment\">// 所有的异常直接抛出，程序中不再进行处理</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">File</span> f <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"d:\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">.</span>separator <span class=\"token operator\">+</span> <span class=\"token string\">\"test.dat\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// 指定要操作的文件</span>\n\t\t<span class=\"token class-name\">RandomAccessFile</span> rdf <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// 声明RandomAccessFile类的对象</span>\n\t\trdf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RandomAccessFile</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span><span class=\"token string\">\"r\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// 以只读的方式打开文件</span>\n\t\t<span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">;</span> <span class=\"token keyword\">int</span> age <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">byte</span> b<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// 开辟byte数组</span>\n\t\t<span class=\"token comment\">/* 读取第二个人的信息，意味着要空出第一个人的信息*/</span>\n\t\trdf<span class=\"token punctuation\">.</span><span class=\"token function\">skipBytes</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// 跳过第一个人的信息</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>b<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tb<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> rdf<span class=\"token punctuation\">.</span><span class=\"token function\">readByte</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// 读取一个字节</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tname <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将读取出来的byte数组变为字符串</span>\n\t\tage <span class=\"token operator\">=</span> rdf<span class=\"token punctuation\">.</span><span class=\"token function\">readInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// 读取数字</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"第二个人的信息 --&gt; 姓名：\"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token string\">\"；年龄：\"</span> <span class=\"token operator\">+</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n\t\trdf<span class=\"token punctuation\">.</span><span class=\"token function\">seek</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// 指针回到文件的开头，读取第一个人的信息</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>b<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tb<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> rdf<span class=\"token punctuation\">.</span><span class=\"token function\">readByte</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// 读取一个字节</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tname <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将读取出来的byte数组变为字符串</span>\n\t\tage <span class=\"token operator\">=</span> rdf<span class=\"token punctuation\">.</span><span class=\"token function\">readInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// 读取数字</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"第一个人的信息 --&gt; 姓名：\"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token string\">\"；年龄：\"</span> <span class=\"token operator\">+</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n\t\trdf<span class=\"token punctuation\">.</span><span class=\"token function\">skipBytes</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// 空出第二个人的信息</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>b<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tb<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> rdf<span class=\"token punctuation\">.</span><span class=\"token function\">readByte</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// 读取一个字节</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tname <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将读取出来的byte数组变为字符串</span>\n\t\tage <span class=\"token operator\">=</span> rdf<span class=\"token punctuation\">.</span><span class=\"token function\">readInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// 读取数字</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"第三个人的信息 --&gt; 姓名：\"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token string\">\"；年龄：\"</span> <span class=\"token operator\">+</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n\t\trdf<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// 关闭</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"字节流\"><a class=\"markdownIt-Anchor\" href=\"#字节流\">#</a> 字节流</h3>\n<h5 id=\"inputstream-和-outputstream\"><a class=\"markdownIt-Anchor\" href=\"#inputstream-和-outputstream\">#</a> <strong>InputStream</strong> 和 <strong>OutputStream</strong></h5>\n<p>字节流由两个类层次结构定义，在顶层有两个抽象类： <strong>InputStream</strong> 和 <strong>OutputStream</strong></p>\n<p>每个抽象楼都有多个具体的子类，这些子类对不同的外设进行处理</p>\n<ul>\n<li>抽象类 InputStream 和 OutputStream 定义了实现其他流类的关键方法。</li>\n<li>最重要的两种方法是<strong> read ()<strong> 和</strong> write ()</strong>，它们分别对数据以字节为单位进行读写。</li>\n<li>两种方法都在 InputStream 和 OutputStream 中被定义为<strong>抽象方法</strong>，它们被派生的流类<strong>重载</strong>。</li>\n</ul>\n<ol>\n<li>InputSteam 类有关读入数据的方法</li>\n</ol>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/javainput%E7%B1%BB%E8%AF%BB%E5%85%A5%E6%95%B0%E6%8D%AE%E7%9A%84%E6%96%B9%E6%B3%95.png\" alt=\"input类读入数据的方法\"></p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/javainputstream%E7%B1%BB%E7%9A%84%E5%85%B6%E4%BB%96%E6%96%B9%E6%B3%95.png\" alt=\"inputstream类的其他方法\"></p>\n<p>所有 InputStream 的子类都是针对不同的输入数据源，其类名的 前缀清楚地表示出输入数据源，FileInputStream 类的数据源是文 件，PipedInputStream 类的数据源是管道等等</p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/javaInputStream%E8%AF%BB%E5%85%A5%E7%B1%BB%E5%B1%82%E6%AC%A1.png\" alt=\"InputStream读入类层次\"></p>\n<ol start=\"2\">\n<li>\n<p>output 类</p>\n<ul>\n<li><code>int write (int)</code>  向流的末尾写入一个字节的数据。</li>\n<li><code>int write (byte[])</code>  将数组 b 中的数据依次写入当前的流对象中</li>\n<li><code>int write (byte[],int,int)</code>  将数组中从开始下标 (包含)，后续长度的数据依次写入到流对象中</li>\n<li><code>void close()</code>  关闭当前流对象，并释放该流对象占用的资源</li>\n<li><code>void flush()</code>  将当前流对象中的缓冲数据强制输出出去。使用该方法可以实现立 即输出</li>\n</ul>\n<p>所有 OutputStream 的子类与 InputStream 的子类相似，针对不同 的输出数据源，其类名的前缀清楚地表示出输出数据源</p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/javaoutput%E8%BE%93%E5%87%BA%E7%B1%BB%E5%B1%82%E6%AC%A1.png\" alt=\"output输出类层次\"></p>\n</li>\n</ol>\n<h5 id=\"fileinputstream和outinputstream\"><a class=\"markdownIt-Anchor\" href=\"#fileinputstream和outinputstream\">#</a> <strong>FileInputStream</strong> 和<strong> OutInputStream</strong></h5>\n<p>这两个类属于节点流，分别完成对文件的输入输出（读写）操作</p>\n<ol>\n<li>\n<p>FileInputStream</p>\n<p>构造器：</p>\n<ul>\n<li>FileInputStream (String) 参数 String 对象表示文件名</li>\n<li>FileInputStream (File) 参数 File 对象表示文件名</li>\n<li>FileInputStream (FileDescriptor) 参数 FileDescriptor 定义一个本地文件系统对象表示的文件名。</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//FileInputStream类显示文件内容的程序的示例</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">File</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FileInputStreamDemo01</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">File</span> file <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"d:/javaFileIO.java\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">FileInputStream</span> fis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Total file size to read (in bytes) : \"</span><span class=\"token operator\">+</span> fis<span class=\"token punctuation\">.</span><span class=\"token function\">available</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">int</span> content<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>content <span class=\"token operator\">=</span> fis<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span> content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// convert to char and display it</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>FileOutputStream</p>\n<p>构造器:</p>\n<ul>\n<li>FileOutputStream(String)</li>\n<li>FileOutputStream(String,boolean)</li>\n<li>FileOutputStream(File)</li>\n<li>FileOutputStream(FileDescriptor)</li>\n</ul>\n<p>生成 FileOutputStream 对象时，如果文件不存在，则创建该文件供 程序输出数据</p>\n<p>如果文件已经存在，则有改写和附加两种输出数据的方式：</p>\n<ol>\n<li>改写的含义是先把原文件长度截为零，原文件数据被丢弃， 然后再输出数据。(第二个构造器的 boolean 参数为 false 值和其 它构造器的对象)</li>\n<li>附加的含义是在原文件末尾追加输出数据，原文件数据仍然 存在。(第二个构造器的 boolean 参数为 true)</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">import java.io.FileOutputStream;\nimport java.io.IOException;\npublic class FileOutputStreamDemo2 {\n\tpublic static void main(String[] args) throws IOException { //创建字节输出流对象\n\t\tFileOutputStream fos = new FileOutputStream(\"d:\\\\testfout.txt\");\n\t\t//如果没有testfout.txt文件则会自动创建这个文件\n\t\tfos.write(97); //调用write()方法\n\t\tfos.write(57); //调用write()方法\n\t\tfos.write(55); //调用write()方法\n\t\tbyte[] bys = {97,98,99,100,101};\n\t\tfos.write(bys); //public void write(byte[] b):写一个字节数组\n\t\tfos.write(bys,1,3); //public void write(byte[] b,int off,int len)\n\t\tfos.close(); //释放资源\n}\n}\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<h5 id=\"dateinputstream和dataoutstream\"><a class=\"markdownIt-Anchor\" href=\"#dateinputstream和dataoutstream\">#</a> DateInputStream 和 DataOutStream</h5>\n<ul>\n<li>\n<p>这两个类创建对象分别被称为数据输入流和数据输出流。</p>\n</li>\n<li>\n<p>它们分别实现了 DataInput 接口和 DataOutput 接口。</p>\n</li>\n<li>\n<p>它们允许程序按与机器无关的风格读写 Java 数据。</p>\n</li>\n<li>\n<p>这两个流也是过滤器流，常以其它流如 InputStream 或 OutputStream 作为它们的输入或输出。</p>\n</li>\n<li>\n<p>它们输入和输出几乎是对应的，每种基本数据类型的读写方法可以从 其后缀名字识别。</p>\n<p>例如：</p>\n<p><code>readInt() writeInt() readBoolean() writeBoolean() readChar() writeChar() readDouble() writeDouble()</code></p>\n</li>\n</ul>\n<h3 id=\"字符流\"><a class=\"markdownIt-Anchor\" href=\"#字符流\">#</a> 字符流</h3>\n<p>字符流主要是用来<strong>处理字符</strong>的。它们在读写流内数据时是<strong>以字符为单位</strong>。</p>\n<p>字符流类由两个类层次结构定义。顶层有两个<strong>抽象</strong>类：<strong>Reader 和 Writer</strong>。 这些抽象类处理统一编码的字符流。</p>\n<ul>\n<li>抽象类 Reader 和 Writer 定义了实现其他流类的关键方法。其中两 个最重要的是 read () 和 write ()，它们分别进行字符数据的读和写。 <strong>这些方法被派生流类重载</strong>。</li>\n<li><strong>Reader 及 Writer 类</strong>和它们子类的方法，与<strong> InputStream 及 OutputStream 类</strong>及它们子类的使用方法非常类似。</li>\n</ul>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/javaReader%E7%9A%84%E7%B1%BB%E5%B1%82%E6%AC%A1.png\" alt=\"Reader的类层次\"></p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/javaWrite%E7%9A%84%E7%B1%BB%E5%B1%82%E6%AC%A1.png\" alt=\"Write的类层次\"></p>\n<ul>\n<li>\n<p><strong>InputStreamReader</strong> 类和<strong> OutputStreamWriter</strong> 类</p>\n<p>在构造这两个类对应的流时，它们会自动进行转换，将平台缺 省的编码集编码的字节转换为 Unicode 字符。对英语环境，其缺 省的编码集一般为 ISO8859-1。</p>\n</li>\n<li>\n<p><strong>BufferedReader</strong> 类和<strong> BufferedWriter</strong> 类</p>\n<p>这两个类对应的流使用了缓冲，能大大提高输入输出效率。这 两个也是过滤器流，常用来对 InputStreamReader 和 OutputStreamWriter 进行处理。</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//字节流和字符流示例</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FileNotFoundException</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BufferedReaderDemo01</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">String</span> fileName <span class=\"token operator\">=</span> <span class=\"token string\">\"d:\\\\javaFileIO.java\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">BufferedReader</span> fromFile <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token class-name\">FileReader</span> fr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tfromFile <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">(</span>fr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The file \"</span> <span class=\"token operator\">+</span> fileName<span class=\"token operator\">+</span> <span class=\"token string\">\" contains the following lines:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token class-name\">String</span> line <span class=\"token operator\">=</span> fromFile<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>line <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> line <span class=\"token operator\">=</span> fromFile<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// throw IOException</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">FileNotFoundException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error opening the file \"</span> <span class=\"token operator\">+</span> fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error reading the file \"</span> <span class=\"token operator\">+</span> fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fromFile <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> fromFile<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// throw IOException</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error closing the file \"</span> <span class=\"token operator\">+</span> fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"pipedinputstream和pipedoutputstream管道输入输出流类\"><a class=\"markdownIt-Anchor\" href=\"#pipedinputstream和pipedoutputstream管道输入输出流类\">#</a> PipedInputStream 和 PipedOutputStream 管道输入输出流类</h5>\n<ul>\n<li>\n<p>管道是 UNIX 的发明，它大大增强了流的概念。</p>\n</li>\n<li>\n<p>管道 (pipe) 提供一种线程之间的通信方法，可用于 IPC (进程间通信) 或是 ITC (线程间通信)。</p>\n</li>\n<li>\n<p>输入管道是用来接收输出管道所写出的数据。</p>\n</li>\n<li>\n<p>这两个类必须同时使用，所以它们除了不带参数的构造器外，互为构 造器中的参数</p>\n</li>\n<li>\n<p>PipedInputStream(PipedOutputStream)</p>\n</li>\n<li>\n<p>PipedOutputStream(PipedInputStream)</p>\n</li>\n</ul>\n<h4 id=\"io流链接及处理流\"><a class=\"markdownIt-Anchor\" href=\"#io流链接及处理流\">#</a> I/O 流链接及处理流</h4>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/java%E5%A4%84%E7%90%86%E6%B5%81.png\" alt=\"处理流\"></p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/java%E5%AD%97%E7%AC%A6%E6%B5%81%E5%92%8C%E5%AD%97%E8%8A%82%E6%B5%81%E5%A4%84%E7%90%86%E5%AF%B9%E5%BA%94%E8%A1%A8.png\" alt=\"字符流和字节流处理对应表\"></p>\n<h3 id=\"对象序列化处理\"><a class=\"markdownIt-Anchor\" href=\"#对象序列化处理\">#</a> 对象序列化处理</h3>\n<p>“对象序列化”（Object Serialization）是 Java 一种特性。类实现 <strong>Serializable 接口</strong>。</p>\n<p>实现了 Serializable 接口的对象，可将它们转换成<strong>一系列字节</strong>，并可在以后完全恢复回原来的样子。</p>\n<p>网络传输时进行序列化，能自动弥补操作系统间的差异。</p>\n<p>可以实现 “有限持久化” ，意味着对象的 “生存时间” 取决于程序的每一次调用之间。</p>\n<p>首先要创建某些 OutputStream 对象，然后将其封装到 ObjectOutputStream 对象内。</p>\n<p>再需调用 writeObject () 即可完成对象的序列化，并将其发送给 OutputStream。</p>\n<p>相反将一个 InputStream 封装到 ObjectInputStream 内，然后调用 readObject ()。</p>\n<p>最后获得的是一个 Object 对象的引用，以便能够直接设置。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//对象序列化例子</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Serializable</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Serializable</span>\n\t<span class=\"token punctuation\">{</span> \t\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">char</span> sex<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> year<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">double</span> gpa<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span> sex<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> year<span class=\"token punctuation\">,</span><span class=\"token keyword\">double</span> gpa<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sex <span class=\"token operator\">=</span> sex<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>year <span class=\"token operator\">=</span> year<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>gpa <span class=\"token operator\">=</span> gpa<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setSex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> sex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sex <span class=\"token operator\">=</span> sex<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setYear</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> year<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>year <span class=\"token operator\">=</span> year<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setGpa</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> gpa<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>gpa <span class=\"token operator\">=</span> gpa<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    \t<span class=\"token keyword\">public</span> <span class=\"token keyword\">char</span> <span class=\"token function\">getSex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sex<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>year<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">getGpa</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>gpa<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UseStudent</span>\n\t<span class=\"token punctuation\">{</span> \t\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{</span> <span class=\"token class-name\">Student</span> st <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Tom\"</span>\n\t\t<span class=\"token punctuation\">,</span>\n\t\t<span class=\"token string\">'M'</span>\n\t\t<span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">File</span> file <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"d:\\\\student.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">createNewFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">//Student对象序列化过程</span>\n\t\t<span class=\"token class-name\">FileOutputStream</span> fos <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">ObjectOutputStream</span> oos <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectOutputStream</span><span class=\"token punctuation\">(</span>fos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\toos<span class=\"token punctuation\">.</span><span class=\"token function\">writeObject</span><span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\toos<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\toos<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tfos<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//Student对象反序列化过程</span>\n\t\t<span class=\"token class-name\">FileInputStream</span> fis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">ObjectInputStream</span> ois <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectInputStream</span><span class=\"token punctuation\">(</span>fis<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">Student</span> st1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">)</span> ois<span class=\"token punctuation\">.</span><span class=\"token function\">readObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name = \"</span> <span class=\"token operator\">+</span> st1<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sex = \"</span> <span class=\"token operator\">+</span> st1<span class=\"token punctuation\">.</span><span class=\"token function\">getSex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"year = \"</span> <span class=\"token operator\">+</span> st1<span class=\"token punctuation\">.</span><span class=\"token function\">getYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"gpa = \"</span> <span class=\"token operator\">+</span> st1<span class=\"token punctuation\">.</span><span class=\"token function\">getGpa</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tois<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tfis<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ClassNotFoundException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n",
            "tags": [
                "java"
            ]
        },
        {
            "id": "https://github.com/YogMas/YogMas.github.io/2022/09/10/vue/",
            "url": "https://github.com/YogMas/YogMas.github.io/2022/09/10/vue/",
            "title": "vue",
            "date_published": "2022-09-09T16:00:00.000Z",
            "content_html": "<h1 id=\"vue\"><a class=\"markdownIt-Anchor\" href=\"#vue\">#</a> Vue</h1>\n<h2 id=\"vue2\"><a class=\"markdownIt-Anchor\" href=\"#vue2\">#</a> Vue2</h2>\n<h3 id=\"vue核心\"><a class=\"markdownIt-Anchor\" href=\"#vue核心\">#</a> Vue 核心</h3>\n<h4 id=\"初识vue\"><a class=\"markdownIt-Anchor\" href=\"#初识vue\">#</a> 初识 Vue</h4>\n<p>Vue 通过创造一个<strong> Vue 实例</strong>来进行工作，其中需要传入一个<strong>配置对象</strong></p>\n<ul>\n<li><code>el</code> : 表示 Vue 实例为哪一个<strong>容器</strong>服务</li>\n<li><code>data</code> : 存储数据供 el 中的容器使用</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>     <span class=\"token comment\">//创建一个Vue实例  传入配置对象</span>\n    el<span class=\"token operator\">:</span> <span class=\"token string\">'#root'</span><span class=\"token punctuation\">,</span>    <span class=\"token comment\">//Vue为哪个容器服务  这里为ID为root的容器服务</span>\n    data<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        name<span class=\"token operator\">:</span> <span class=\"token string\">'s1m'</span><span class=\"token punctuation\">,</span>    <span class=\"token comment\">//存储的数据</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>容器中的代码仍然符合 html 规范，只不过引入了一些特殊的 Vue 语法</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span> <span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span> <span class=\"token punctuation\">\"</span>root<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n           \t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span>\n                hello {{name}}  <span class=\"token comment\">&lt;!-- 此时就去调用了Vue中name数据--&gt;</span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">&gt;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li><code>{{}}`内的内容并不是只能写Vue实例中存在的数据,可以写**js表达式**(表达式:一个表达式会产生一个值,可以放在任何一个需要值的地方)\n- 一个容器只能由一个实例接管  必须**一对一**,真实开发中只有一个Vue实例,配合着Vue中的组件进行使用\n\n#### 模板语法\n\n##### 插值语法\n\n`{{}}</code> : 用在<strong>标签体</strong>中，也就是放在标签内，用于读取 data 中的内容，会将其内的内容转化成<strong> js 表达式</strong></li>\n</ul>\n<h5 id=\"指令语法\"><a class=\"markdownIt-Anchor\" href=\"#指令语法\">#</a> 指令语法</h5>\n<p>用于解析<strong>标签</strong> 属性 内容 绑定事件等等</p>\n<p>Vue 中的指令语法 一般都是 <code>v-xxx:</code></p>\n<h4 id=\"数据绑定\"><a class=\"markdownIt-Anchor\" href=\"#数据绑定\">#</a> 数据绑定</h4>\n<ul>\n<li>单向数据绑定:  <code>v-bind:</code> Vue 实例中的数据发生改变，页面中的数据也发生改变，但是发过来不改变</li>\n<li>双向数据绑定: <code>v-model:</code>  页面中的数据和 Vue 实例中的数据双向绑定，一个改变另一个就发生改变</li>\n</ul>\n<p><u><strong>并不是所有支持单向数据绑定的就能双向绑定</strong></u></p>\n<p><code>v-model</code>  只能应用在<strong>表单类</strong>元素上面，即有 <code>value</code>  属性，</p>\n<p>显然 <code>v-model</code>  是用来与用户产生交互的，不是表单类元素，无法捕获到用户的输入，根本没有必要进行双向绑定</p>\n<h5 id=\"简写\"><a class=\"markdownIt-Anchor\" href=\"#简写\">#</a> 简写</h5>\n<p><code>v-bind:</code>  可以<strong>简写</strong>为 <code>:</code></p>\n<p><code>v-model:value</code>  可以<strong>简写</strong>为 <code>v-model</code>  因为 <code>v-model</code>  本来就是对 <code>value</code>  属性进行捕获</p>\n<h4 id=\"el和data的两种写法\"><a class=\"markdownIt-Anchor\" href=\"#el和data的两种写法\">#</a> el 和 data 的两种写法</h4>\n<h5 id=\"el的写法\"><a class=\"markdownIt-Anchor\" href=\"#el的写法\">#</a> el 的写法</h5>\n<ol>\n<li>在初始化 Vue 实例中传入配置化对象，配置化对象中包含 <code>el:''</code>  来指定挂载对象</li>\n<li>通过对 Vue 实例进行挂载</li>\n</ol>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//第一种写法</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    el<span class=\"token operator\">:</span><span class=\"token string\">\"#root\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> \n\n<span class=\"token comment\">//第二种写法</span>\n<span class=\"token keyword\">const</span> v <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv<span class=\"token punctuation\">.</span><span class=\"token function\">$mount</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#root'</span><span class=\"token punctuation\">)</span>进行挂载<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"data的写法\"><a class=\"markdownIt-Anchor\" href=\"#data的写法\">#</a> data 的写法</h5>\n<ol>\n<li>对象式：通过 <code>data:{}</code></li>\n<li>函数式: <code>data:function() {return {}}</code>  通过函数的返回值返回数据</li>\n</ol>\n<p>写项目组件时，必须得使用函数式</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//第一种写法 对象式</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//对象式</span>\n    data<span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token punctuation\">}</span>\n    \n    \n    <span class=\"token comment\">//函数式</span>\n    <span class=\"token function-variable function\">data</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//此处的this是Vue对象</span>\n    <span class=\"token comment\">//此处的函数不能使用箭头函数 因为箭头函数没有自己的this 他会往外找 然后找到window全局对象   所以此处只能写成普通函数</span>\n    \t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token comment\">//数据  </span>\n        <span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">//在对象里面写函数 一般会写成这种简写形式</span>\n\t<span class=\"token function\">data</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        \n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><u><strong>由 Vue 所管理的函数，一定不要写成箭头函数，一旦写成箭头函数，this 就不再是 Vue 实例了，就变成 window 全局对象了</strong></u></p>\n<h4 id=\"mvvm模型\"><a class=\"markdownIt-Anchor\" href=\"#mvvm模型\">#</a> MVVM 模型</h4>\n<p><strong>Vue 设计受 MVVM 模型的启发</strong></p>\n<ol>\n<li>M: 模型 (Model): 对应 data 中的数据</li>\n<li>V: 视图 (View): 模板</li>\n<li>VM: 视图模型 (ViewModel): Vue 实例对象</li>\n</ol>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/C0DE41AAD7ED441C2C288D4E7A7AA07E.png\" alt=\"img\"></p>\n<p>将 Dom 结构和数据进行链接</p>\n<p>Vue 中通常使用<strong> vm</strong> 来作为 Vue 实例的名称</p>\n<p>插值语法可以获取到所有<strong> VM 中的数据</strong> (data 数据也在 VM 中)</p>\n<h4 id=\"数据代理\"><a class=\"markdownIt-Anchor\" href=\"#数据代理\">#</a> 数据代理</h4>\n<h5 id=\"defineproperty-方法\"><a class=\"markdownIt-Anchor\" href=\"#defineproperty-方法\">#</a> defineproperty 方法</h5>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//js代码</span>\n<span class=\"token keyword\">let</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    name： <span class=\"token string\">\"s1m\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineproperty</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">,</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span>\n    value<span class=\"token operator\">:</span><span class=\"token number\">18</span><span class=\"token punctuation\">,</span>\n    enumerable<span class=\"token operator\">:</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//属性是否可以被枚举 默认为false</span>\n    writable<span class=\"token operator\">:</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//属性是否可以被修改 默认为false</span>\n    configurable<span class=\"token operator\">:</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//属性是否可以被修改 默认为false</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//传入三个参数 第一个为修改对象,第二个为添加的key值 第三个为参数</span>\n\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineproperty</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">,</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">get</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//当有人获取 age的值的时候进行调用 且返回值为age的value</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">set</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    \t<span class=\"token comment\">//当有人 修改 age的值的时候调用</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"什么是数据代理\"><a class=\"markdownIt-Anchor\" href=\"#什么是数据代理\">#</a> 什么是数据代理</h5>\n<p>数据代理：通过一个对象代理对另一个对象中属性的操作 (读 / 写)</p>\n<p>通过修改一个对象的属性可以对另一个对象的属性同样进行修改</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">        <span class=\"token keyword\">let</span> obj1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>x<span class=\"token operator\">:</span><span class=\"token number\">100</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> obj2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>y<span class=\"token operator\">:</span><span class=\"token number\">200</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>obj2<span class=\"token punctuation\">,</span><span class=\"token string\">'x'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span>\n            <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> obj1<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>   <span class=\"token comment\">//当访问obj2的x的属性时候 返回的是obj1的属性</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token function\">set</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                obj1<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span> <span class=\"token comment\">//当对obj2的x改的时候,修改的obj1的x</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> \n<span class=\"token comment\">//当对obj2的x值更改的时候 更改的是obj1的x值</span>\n<span class=\"token comment\">//获取obj2的x值的时候,获取的是obj1的值</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"vue中的数据代理\"><a class=\"markdownIt-Anchor\" href=\"#vue中的数据代理\">#</a> Vue 中的数据代理</h5>\n<p><strong>data 中的数据都代理在 vm 中</strong></p>\n<p>通过 vm 对象来代理 data 中属性的操作</p>\n<ul>\n<li>当获取 vm 中的数据时，vm 触发 getter, 返回 data 中的数据</li>\n<li>当修改 vm 中的数据时，vm 触发 setter, 修改 data 中的数据</li>\n</ul>\n<p>data 中的数据存储在了 vm 中的_data 中</p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/ED11289633F8ED8EA2D312E86600F0F9.png\" alt=\"img\"></p>\n<p>没有数据代理的话 每次访问数据就得写_data.xxx 更加地麻烦</p>\n<h4 id=\"事件处理\"><a class=\"markdownIt-Anchor\" href=\"#事件处理\">#</a> 事件处理</h4>\n<h5 id=\"事件的基本使用\"><a class=\"markdownIt-Anchor\" href=\"#事件的基本使用\">#</a> 事件的基本使用</h5>\n<p><strong><u>所有被 Vue 管理的函数都写成普通函数</u></strong>, 为了保证 this</p>\n<p>事件的基本使用</p>\n<ul>\n<li>使用 <code>v-on:xxx</code>  或者 <code>@xxx</code>  绑定事件</li>\n<li>事件的回调配置在 methods 对象中，最终会在 vm 上</li>\n<li>methods 中配置的函数，不要用箭头函数，否则 this 将发生改变</li>\n<li><code>@click=\"demo\"</code>  和 <code>@click=\"demo($event)\"</code>  效果一致，但是后者可以传参</li>\n<li><code>@click=\"xxx\"</code>  xxx 可以写一些简单的 js 语句，当语句过多时，还是建议写到 methods 方法中去</li>\n</ul>\n<h5 id=\"事件修饰符\"><a class=\"markdownIt-Anchor\" href=\"#事件修饰符\">#</a> 事件修饰符</h5>\n<ol>\n<li><code>prevent</code> : 阻止默认事件</li>\n<li><code>stop</code> : 阻止时间冒泡</li>\n<li><code>once</code> : 事件只触发一次</li>\n<li><code>capture</code> : 使用事件的捕获方式</li>\n<li><code>self</code> : 只有 event.target 是当前操作的元素时才触发事件</li>\n<li><code>passive</code> : 事件的默认行为立即执行，无需等待时间回调执行完毕</li>\n</ol>\n<p>eg:  <code>@click.prevent = \"showInfo\"</code></p>\n<h5 id=\"键盘事件\"><a class=\"markdownIt-Anchor\" href=\"#键盘事件\">#</a> 键盘事件</h5>\n<ol>\n<li>Vue 常用的按键别名\n<ul>\n<li>回车:enter</li>\n<li>删除:delete</li>\n<li>退出:esc</li>\n<li>空格:space</li>\n<li>换行:tab (特殊，必须配合 keydown 使用)</li>\n<li>上:up</li>\n<li>下:down</li>\n<li>左:left</li>\n<li>右:right</li>\n</ul>\n</li>\n<li>原始 key 值绑定，<strong> 由多个单词组成的 key 值需要将多个单词用 <code>-</code>  连接</strong></li>\n<li>系统修饰键:ctrl,alt,shift,meta (特殊用法)\n<ul>\n<li>配合 <code>keyup</code>  使用：按下修饰键的同时，再按下其他键，随后释放其他键，时间才被触发  要实现同时按下修饰符和普通符 可以 <code>@keyup.修饰符.普通键</code></li>\n<li>配合 <code>keydown</code>  使用：正常触发事件</li>\n</ul>\n</li>\n<li>也可以使用 keyCode 去指定具体的按键 (<u>不推荐</u>), 因为不同的键盘编码可能不统一</li>\n<li><code>Vue.config.keyCodes.自定义键名 = 键码</code>  可以定制按键别名</li>\n</ol>\n<h4 id=\"计算属性\"><a class=\"markdownIt-Anchor\" href=\"#计算属性\">#</a> 计算属性</h4>\n<p>Vue 中只要模板中的数据发生改变，Vue 就会重新解析一遍模板，然后将更改的部分渲染到页面上</p>\n<p>Vue 认为 data 里面的数据是<strong>属性</strong></p>\n<p><strong>计算属性</strong>：对已有的属性进行加工计算，从而得到一个全新的属性</p>\n<ul>\n<li>定义：要用的属性不存在，要通过<strong>已有属性</strong><u>计算</u>得来</li>\n<li>原理：底层借助 <code>Object.defineproperty</code>  方法提供的 getter 和 setter</li>\n<li>get 函数的调用时机:\n<ol>\n<li>初次读取时</li>\n<li>当依赖的数据发生改变的时候</li>\n</ol>\n</li>\n<li>优势：与 methods 相比，内部有缓存机制，效率更高</li>\n<li>计算属性最终会出现在 vm 上，直接读取使用就可以，如果计算属性会被修改，就要写 set 函数</li>\n</ul>\n<h5 id=\"计算属性的简写\"><a class=\"markdownIt-Anchor\" href=\"#计算属性的简写\">#</a> 计算属性的简写</h5>\n<p>一般情况下计算属性用不到 set, 只需要用 get</p>\n<p><strong>不考虑修改的情况下才可以简写</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//完整情况</span>\ncomputed<span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>\n    fullName<span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> lastName <span class=\"token operator\">+</span> firstName<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">set</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            \n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//简写</span>\ncomputed<span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fullName</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> lastName <span class=\"token operator\">+</span> firstName\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"监视属性\"><a class=\"markdownIt-Anchor\" href=\"#监视属性\">#</a> 监视属性</h4>\n<ol>\n<li><strong>当被监视的属性发生变化</strong>的时候，回调函数自动调用</li>\n<li>监视的属性必须<strong>存在</strong>，才能进行监视</li>\n<li>监视的两种写法:\n<ol>\n<li>.new Vue 的时候传入 watch 配置</li>\n<li>通过 vm.$watch 监视</li>\n</ol>\n</li>\n</ol>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token comment\">//第一种监视写法</span>\n<span class=\"token number\">0</span>const vm <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\twatch<span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>\n        isHot<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">//监视属性 isHot</span>\n             immediate<span class=\"token operator\">:</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//可以不写 默认为false 为true表示,初始化的时候也调用handler</span>\n        \t<span class=\"token function\">handler</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">newValue<span class=\"token punctuation\">,</span>oldValue</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">//表示当isHot属性的值发生改变的时候,会调用handler函数,并传入新的值和旧的值</span>\n            <span class=\"token comment\">//计算出来的属性也可以监视</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\">//第二种监视的写法</span>\n<span class=\"token keyword\">const</span> vm <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nvm<span class=\"token punctuation\">.</span><span class=\"token function\">$watch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'isHot'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//和上面相同</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"深度监视\"><a class=\"markdownIt-Anchor\" href=\"#深度监视\">#</a> 深度监视</h5>\n<ul>\n<li>Vue 中的<strong> watch</strong> 默认不监测对象内部值的改变 (一层)       (Vue 是可以监视的 但是 Watch 不行)</li>\n<li>配置 <code>deep:true</code>  可以检测到对象内部值的改变 (多层次)</li>\n</ul>\n<h5 id=\"监视的简写形式\"><a class=\"markdownIt-Anchor\" href=\"#监视的简写形式\">#</a> 监视的简写形式</h5>\n<p><strong><u>不需要 immediate 和 deep 的时候，才可以简写</u></strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">watch <span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//正常写法</span>\n    isHot<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">handler</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">newValue<span class=\"token punctuation\">,</span>oldValue</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"正常写法\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>  \n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">//简写形式</span>\n    <span class=\"token function\">isHot</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">newValue<span class=\"token punctuation\">,</span>oldValue</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"简写写法\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"watch对比computed\"><a class=\"markdownIt-Anchor\" href=\"#watch对比computed\">#</a> Watch 对比 Computed</h4>\n<ol>\n<li>Computed 可以完成的，watch 能完成的</li>\n<li>Watch 能完成，computed 不一定能完成</li>\n<li>Computed 不支持异步操作，Watch 支持</li>\n<li>在都可以实现的时候，哪个容易写哪个</li>\n</ol>\n<h4 id=\"两个重要小原则\"><a class=\"markdownIt-Anchor\" href=\"#两个重要小原则\">#</a> 两个重要小原则</h4>\n<ol>\n<li>被 Vue 管理的函数，都写成普通函数，这样 this 指定的才是 vue</li>\n<li>所有不被 Vue 所管理的函数 (定时器，ajax) 最好写成箭头函数，这样 this 的指向才是 vue</li>\n</ol>\n<h4 id=\"class与style绑定\"><a class=\"markdownIt-Anchor\" href=\"#class与style绑定\">#</a> Class 与 style 绑定</h4>\n<h5 id=\"绑定class样式\"><a class=\"markdownIt-Anchor\" href=\"#绑定class样式\">#</a> 绑定 class 样式</h5>\n<ul>\n<li><strong>字符串写法</strong>：适用于样式的类名不确定，需要动态指定</li>\n<li>** 数组写法:** 适用于样式的个数和名字都不确定</li>\n<li><strong>对象写法</strong>：适用于要绑定的样式用不用不确定</li>\n</ul>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token style\"><span class=\"token language-css\">\n //省略\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>root<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n\t// 字符串写法\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">:class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Mode<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>changeMode<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    \n    //数组写法\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">:class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ModeArr<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    \n    //对象写法\n    \n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">:class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ModeObj<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\">\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        el<span class=\"token operator\">:</span><span class=\"token string\">\"#root\"</span><span class=\"token punctuation\">,</span>\n        data<span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>\n            Mode<span class=\"token operator\">:</span><span class=\"token string\">'happy'</span><span class=\"token punctuation\">,</span>\n            ModeArr<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token string\">'happy'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'normal'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'bad'</span><span class=\"token punctuation\">]</span>\n            ModeObj<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            \thappy<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n            \tbad<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        methods<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">changeMode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>Mode <span class=\"token operator\">=</span> <span class=\"token string\">'normal'</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"绑定style\"><a class=\"markdownIt-Anchor\" href=\"#绑定style\">#</a> 绑定 style</h5>\n<ol>\n<li><code>:style=\"{fontSize: xxx}\"</code>   其中 xxx 是动态值</li>\n<li>也可以像下面代码中一样 (常用)</li>\n<li>注意必须写成 <strong><u>驼峰命名</u></strong></li>\n</ol>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>root<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">:style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>styleObj<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n\t\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\">\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            el<span class=\"token operator\">:</span><span class=\"token string\">\"#root\"</span><span class=\"token punctuation\">,</span>\n            data<span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>\n                styleObj<span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>\n                \tfontSize<span class=\"token operator\">:</span> <span class=\"token string\">'40px'</span><span class=\"token punctuation\">,</span>      <span class=\"token comment\">//要切换成驼峰命名</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            methods<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"条件渲染\"><a class=\"markdownIt-Anchor\" href=\"#条件渲染\">#</a> 条件渲染</h4>\n<ol>\n<li><code>v-show</code>  做条件渲染，只是使用 display 将其隐藏了，但是本身还存在在 DOM 树里面</li>\n<li><code>v-if</code>  做条件渲染，直接在 DOM 树里面增添或者删除这个结点</li>\n</ol>\n<p>如果频繁切换，推荐用 <code>v-show</code></p>\n<h5 id=\"v-if与v-if-else于v-else\"><a class=\"markdownIt-Anchor\" href=\"#v-if与v-if-else于v-else\">#</a> v-if 与 v-if-else 于 v-else</h5>\n<p>使用与 <code>if      else if      else</code>  一样，但是进行判断的标签必须紧紧相连</p>\n<p>如果要对一堆元素进行管理，可以在最外层加上一个 <code>&lt;template v-if=\"true\"&gt;</code> , 这样不影响结构</p>\n<p>另外 templace 只能和 <code>v-if</code>  配合使用，不能和 <code>v-show</code>  配合使用</p>\n<h4 id=\"列表渲染important\"><a class=\"markdownIt-Anchor\" href=\"#列表渲染important\">#</a> 列表渲染 (important)</h4>\n<p><code>v-for</code>  指令用于展示列表数据</p>\n<ol>\n<li>语法:  <code>v-for=\"(item,index) in xxx\" :key=\"yyy\"</code></li>\n<li>可以遍历：数组，对象，字符串 (用得少), 指定次数 (用得少)</li>\n</ol>\n<h5 id=\"key作用与原理\"><a class=\"markdownIt-Anchor\" href=\"#key作用与原理\">#</a> key 作用与原理</h5>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/C9F8A6E7AC902688BD253CBFCB33AE47.png\" alt=\"index作为key\"></p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/ACF36FEC23900F414FD48E7CC5EFF9DE.png\" alt=\"id作为key\"></p>\n<ol>\n<li>\n<p>虚拟 DOM 中 key 的作用</p>\n<p>key 是虚拟 DOM 对象的标识，当数据发生变化的时候，Vue 会根据<strong>新数据</strong>，生成新的虚拟 DOM，随后 Vue 进行新虚拟 DOM 与旧虚拟 DOM 的差异比较，比较规则如下</p>\n</li>\n<li>\n<p>对比规则:</p>\n<ol>\n<li>旧虚拟 DOM 找到了与新虚拟 DOM 相同的 key\n<ol>\n<li>若虚拟 DOM 中内容没变，直接使用旧的真实 DOM</li>\n<li>若虚拟 DOM 的内容变了，则生成新的真实 DOM, 并替换掉页面中之前的真实 DOM</li>\n</ol>\n</li>\n<li>旧虚拟 DOM 没找到与新虚拟 DOM 相同的 key\n<ol>\n<li>创建新的真实 DOM, 随后渲染到页面</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>用 index 作为 key 可能会引发的问题</p>\n<ol>\n<li>若对数据进行逆序添加，逆序删除等破坏顺序的操作，会产生没有必要的真实 DOM 更新，使<strong>效率降低</strong></li>\n<li>如果结构中还包括输入类的 DOM, 会产生错误的 DOM 更新，<strong> 使界面有问题</strong></li>\n</ol>\n</li>\n<li>\n<p>最好选择唯一标识作为 key 值</p>\n</li>\n</ol>\n<h5 id=\"列表过滤\"><a class=\"markdownIt-Anchor\" href=\"#列表过滤\">#</a> 列表过滤</h5>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> vm <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n          <span class=\"token function\">data</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token keyword\">return</span><span class=\"token punctuation\">{</span>\n                  keyWord<span class=\"token operator\">:</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n                  persons<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n                      id<span class=\"token operator\">:</span><span class=\"token number\">001</span><span class=\"token punctuation\">,</span>\n                      name<span class=\"token operator\">:</span><span class=\"token string\">\"张三东\"</span><span class=\"token punctuation\">,</span>\n                      sex<span class=\"token operator\">:</span><span class=\"token string\">'男'</span><span class=\"token punctuation\">,</span>\n                      age<span class=\"token operator\">:</span><span class=\"token number\">19</span><span class=\"token punctuation\">,</span>\n                  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span>\n                      id<span class=\"token operator\">:</span><span class=\"token number\">002</span><span class=\"token punctuation\">,</span>\n                      name<span class=\"token operator\">:</span><span class=\"token string\">\"李四东伦\"</span><span class=\"token punctuation\">,</span>\n                      sex<span class=\"token operator\">:</span><span class=\"token string\">'女'</span><span class=\"token punctuation\">,</span>\n                      age<span class=\"token operator\">:</span><span class=\"token number\">18</span><span class=\"token punctuation\">,</span>\n                  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span>\n                      id<span class=\"token operator\">:</span><span class=\"token number\">003</span><span class=\"token punctuation\">,</span>\n                      name<span class=\"token operator\">:</span><span class=\"token string\">\"王伦五\"</span><span class=\"token punctuation\">,</span>\n                      sex<span class=\"token operator\">:</span><span class=\"token string\">'男'</span><span class=\"token punctuation\">,</span>\n                      age<span class=\"token operator\">:</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span>\n                  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n              <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n              computed<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                  <span class=\"token function\">filpersons</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>persons<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">person</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n                          <span class=\"token keyword\">return</span> person<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>keyWord<span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n                      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n                  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n              <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          methods<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n              \n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      vm<span class=\"token punctuation\">.</span><span class=\"token function\">$mount</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#root'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"列表排序\"><a class=\"markdownIt-Anchor\" href=\"#列表排序\">#</a> 列表排序</h5>\n<p>在 data 中使用一个变量来存储此时排序的状态</p>\n<p>通过对状态的检测 来进行排序，当点击按钮的时，状态更改，重新进行渲染</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">computed<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">filpersons</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span>  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>persons<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">person</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n                            <span class=\"token keyword\">return</span> person<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>keyWord<span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n                        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token comment\">//不需要排序 直接返回</span>\n                        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sortType<span class=\"token punctuation\">)</span>\n                        <span class=\"token comment\">//进行排序</span>\n                            arr<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n                                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sortType <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n                                <span class=\"token keyword\">return</span> b<span class=\"token punctuation\">.</span>age <span class=\"token operator\">-</span> a<span class=\"token punctuation\">.</span>age\n                                <span class=\"token keyword\">else</span> \n                                <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">.</span>age <span class=\"token operator\">-</span> b<span class=\"token punctuation\">.</span>age\n                            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"vue监测数据改变的原理\"><a class=\"markdownIt-Anchor\" href=\"#vue监测数据改变的原理\">#</a> Vue 监测数据改变的原理</h4>\n<h5 id=\"监测对象的改变\"><a class=\"markdownIt-Anchor\" href=\"#监测对象的改变\">#</a> 监测对象的改变</h5>\n<p>通过 setter 和 getter 进行监测，只要一改变，就进行重新渲染</p>\n<p>且底层使用递归，如果有多个对象叠对象，Vue 会找到最底层的数据进行监测</p>\n<h5 id=\"监测数组的改变\"><a class=\"markdownIt-Anchor\" href=\"#监测数组的改变\">#</a> 监测数组的改变</h5>\n<p>调用包裹数组更新元素的方法实现，本质就是做了两件事</p>\n<ul>\n<li>调用原生对应的方法对数组进行更新</li>\n<li>重新解析模板，进而更新页面</li>\n</ul>\n<h5 id=\"vueset的使用\"><a class=\"markdownIt-Anchor\" href=\"#vueset的使用\">#</a> Vue.set () 的使用</h5>\n<p>vue 对象中追加的数据，不做响应式处理，必须使用 vue.set () 方法</p>\n<p><code>Vue.set(target,key,value)</code> : 往 target 身上添加 key:value 的<strong>响应式数据</strong></p>\n<p><code>this.$set()</code>  和 <code>vue.set()</code>  相同</p>\n<p>否则后期添加的键值对不会是响应式的</p>\n<h5 id=\"vue修改数组中某个元素\"><a class=\"markdownIt-Anchor\" href=\"#vue修改数组中某个元素\">#</a> vue 修改数组中某个元素</h5>\n<p>直接对数组进行更新，vue 不会监测到，只有通过以下方法，vue 才会监测到</p>\n<p>使用如下方法</p>\n<ul>\n<li><code>push()</code> , <code>pop()</code> , <code>shift()</code> , <code>unshift()</code> , <code>splice()</code> , <code>sort()</code> , <code>reverse()</code></li>\n</ul>\n<h4 id=\"收集表单数据\"><a class=\"markdownIt-Anchor\" href=\"#收集表单数据\">#</a> 收集表单数据</h4>\n<ul>\n<li><code>&lt;input type=\"text\"&gt;</code> :v-model 双向绑定，<strong> 用户输入的就是 value 值</strong></li>\n<li><code>&lt;input type=\"radio\"&gt;</code> :v-model 双向绑定，收集到的是 value 值，需要<strong>手动配置 value 值</strong></li>\n<li><code>&lt;input type=\"checkbox\"&gt;</code>\n<ul>\n<li>没有配置 input 的 value 属性，收集到的是 checked 的<strong>布尔值</strong></li>\n<li>配置了 value 属性，如果是非数组收集到的也是布尔值，<strong>是数组收集到的就是选中的 value 组成的数组</strong></li>\n</ul>\n</li>\n</ul>\n<h5 id=\"v-model的三个修饰符\"><a class=\"markdownIt-Anchor\" href=\"#v-model的三个修饰符\">#</a> v-model 的三个修饰符</h5>\n<ul>\n<li>lazy: 失去焦点再收集数据</li>\n<li>number: 输入字符串转为有效数字</li>\n<li>trim: 输入首尾空格过滤</li>\n</ul>\n<h4 id=\"过滤器\"><a class=\"markdownIt-Anchor\" href=\"#过滤器\">#</a> 过滤器</h4>\n<p>对要显示的数据进行特定格式化后再显示 (使用于一些简单逻辑的处理)</p>\n<ol>\n<li>语法\n<ul>\n<li>注册过滤器: <code>Vue.filter(name,callback)</code>  或者  <code>new Vue(filters:{})</code></li>\n<li>使用过滤器: <code>{{xxx|过滤器名}}</code>  或者  <code>v-bind:属性 =\"xxx|过滤器名\"</code></li>\n</ul>\n</li>\n<li>备注\n<ul>\n<li>过滤器也可以接受额外参数</li>\n<li>多个过滤器可以串联</li>\n<li>过滤器并<strong>没有改变原本的数据</strong>，只是产生了新的数据</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"内置指令\"><a class=\"markdownIt-Anchor\" href=\"#内置指令\">#</a> 内置指令</h4>\n<h5 id=\"常用\"><a class=\"markdownIt-Anchor\" href=\"#常用\">#</a> 常用</h5>\n<ul>\n<li><code>v-bind</code> : 单向绑定解析表达式</li>\n<li><code>v-model</code> : 双向数据绑定</li>\n<li><code>v-for</code> : 遍历数组 / 对象 / 字符串</li>\n<li><code>v-on</code> : 绑定事件监听，可简写为 @</li>\n<li><code>v-if</code> : 条件渲染 (动态控制节点是否存在)</li>\n<li><code>v-else</code> : 条件渲染 (动态控制节点是否存在)</li>\n<li><code>v-show</code> : 条件渲染 (动态控制节点是否展示)</li>\n</ul>\n<h5 id=\"其他\"><a class=\"markdownIt-Anchor\" href=\"#其他\">#</a> 其他</h5>\n<ol>\n<li>\n<p><code>v-text</code></p>\n<ul>\n<li>作用：向其所在的节点中渲染文本内容</li>\n<li>与插值语法的区别:v-text 会替换掉节点中的<strong>全部内容</strong>，插值语法不会</li>\n</ul>\n</li>\n<li>\n<p><code>v-html</code></p>\n<ul>\n<li>作用：向指定节点中渲染包含 html 结构的内容</li>\n<li>与插值语法的区别\n<ol>\n<li>可以识别 html 结构</li>\n<li>会替换掉节点中的全部内容</li>\n</ol>\n</li>\n<li>注意！\n<ol>\n<li>在网站上动态渲染 html 非常危险，容易导致 XSS 攻击</li>\n<li>一定要在可信的内容上使用 v-html, 不要再用户提交的内容上</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>\n<p><code>v-cloak</code></p>\n<ol>\n<li>本质是一个特殊属性，Vue 实例创建完毕并接管容器后，会删掉 v-cloak 属性</li>\n<li>使用 css 配合 v-cloak 可以解决网速慢时直接将模板展示在浏览器中的问题</li>\n</ol>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token style\"><span class=\"token language-css\">\n    <span class=\"token selector\">[v-cloak]</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span> <span class=\"token attr-name\">v-cloak</span><span class=\"token punctuation\">&gt;</span></span>\n        你好\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p><code>v-once</code></p>\n<ol>\n<li><code>v-once</code>  所在节点在初始动态渲染后，就视为静态内容了</li>\n<li>以后数据的改变不会引起 <code>v-once</code>  所在结构的更新，可以用于优化性能</li>\n</ol>\n</li>\n<li>\n<p><code>v-pre</code></p>\n<ol>\n<li>跳过其所在节点的编译过程</li>\n<li>可利用他跳过：没有使用指令语法，没有使用插值语法的节点，可以加快编译</li>\n</ol>\n</li>\n</ol>\n<h5 id=\"自定义指令\"><a class=\"markdownIt-Anchor\" href=\"#自定义指令\">#</a> 自定义指令</h5>\n<h6 id=\"函数式\"><a class=\"markdownIt-Anchor\" href=\"#函数式\">#</a> 函数式</h6>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">http-equiv</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>X-UA-Compatible<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>IE=edge<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span> <span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>../js/vue.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">&gt;</span></span>Document<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>root<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">&gt;</span></span>当前的n值是<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">v-text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>n<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">&gt;</span></span>放大十倍后的n值是<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">v-big</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>n<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>n++<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>点我n加1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\">\n        <span class=\"token comment\">//定义一个v-big指令,和v-text类似 会把绑定的数值放大10倍</span>\n        <span class=\"token keyword\">const</span> vm <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            <span class=\"token function\">data</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span><span class=\"token punctuation\">{</span>\n                    n<span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            methods<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                \n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            directives<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">//big函数什么时候会被调用</span>\n                <span class=\"token comment\">// 1.指令和元素成功绑定时(初次)</span>\n                <span class=\"token comment\">// 2.指令所在的模板 被重新解析的时候</span>\n                <span class=\"token function\">big</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">element<span class=\"token punctuation\">,</span>binding</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    element<span class=\"token punctuation\">.</span>innerText <span class=\"token operator\">=</span> binding<span class=\"token punctuation\">.</span>value <span class=\"token operator\">*</span> <span class=\"token number\">10</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        vm<span class=\"token punctuation\">.</span><span class=\"token function\">$mount</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#root'</span><span class=\"token punctuation\">)</span>\n    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">&gt;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h6 id=\"对象式\"><a class=\"markdownIt-Anchor\" href=\"#对象式\">#</a> 对象式</h6>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">directives: {\n                XXX:{\n                    //当指令与元素成功绑定时调用\n                    bind() {},\n                    //指令所在元素被插入页面时调用\n                    inserted() {},\n                    //指令所在模板被重新解析时调用\n                    update(){},\n                }\n            },<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>函数式就是只用了 <code>bind</code>  和 <code>update</code>  没用 <code>insert</code></p>\n<h6 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\">#</a> 总结</h6>\n<ol>\n<li>\n<p>定义语法:</p>\n<ol>\n<li>\n<p>局部指令</p>\n<p><code>new Vue({directives:{指令名:配置对象}})</code></p>\n</li>\n<li>\n<p>全局指令</p>\n<p><code>Vue.directive(指令名,配置对象)</code></p>\n</li>\n</ol>\n</li>\n<li>\n<p>配置对象中常用的三个回调</p>\n<ol>\n<li><code>bind</code> : 指令与元素<strong>成功绑定</strong>时调用</li>\n<li><code>inserted</code> : 指令所在元素被<strong>插入页面</strong>时调用</li>\n<li><code>update</code> : 指令所在模板被<strong>重新解析</strong>时调用</li>\n</ol>\n</li>\n<li>\n<p>备注</p>\n<ol>\n<li>指令定义时不加 v-, 但使用时要加</li>\n<li>指令名如果是多个单词，要使用<strong> kebab-case 命名</strong>，不要用 camelCase 命名</li>\n</ol>\n</li>\n</ol>\n<h4 id=\"生命周期\"><a class=\"markdownIt-Anchor\" href=\"#生命周期\">#</a> 生命周期</h4>\n<ol>\n<li>生命周期函数是 Vue 在关键时刻帮我们调用的一些特殊名称的函数</li>\n<li>生命周期函数的名字不可更改，但函数的具体内容是程序员根据需求编写的</li>\n<li>生命周期函数中的 this 指向是 vm 或组件实例对象</li>\n</ol>\n<p>常用的周期钩子</p>\n<ol>\n<li><code>mounted</code> : 发送 ajax 请求，启动定时器，绑定自定义事件，订阅消息等<strong>初始化操作</strong></li>\n<li><code>beforeDestroy</code> : 清除定时器，解绑自定义时间，取消订阅消息等<strong>收尾工作</strong></li>\n</ol>\n<p>关于销毁 Vue 实例</p>\n<ol>\n<li>销毁后借助 Vue 开发者工具看不到任何信息</li>\n<li>销毁后自定义事件会失效，但<strong>原生 DOM 事件仍然有效</strong></li>\n<li>一般不会用 beforeDestroy 操作数据，因为即使操作数据，也<strong>不会再触发更新流程</strong>了</li>\n</ol>\n<h3 id=\"vue组件化编程\"><a class=\"markdownIt-Anchor\" href=\"#vue组件化编程\">#</a> Vue 组件化编程</h3>\n<p>组件：实现应用中局部功能代码和资源的集合</p>\n<h4 id=\"非单文件组件\"><a class=\"markdownIt-Anchor\" href=\"#非单文件组件\">#</a> 非单文件组件</h4>\n<p>一个文件中包含有 n 个组件</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">http-equiv</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>X-UA-Compatible<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>IE=edge<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span> <span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>../js/vue.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">&gt;</span></span>Document<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>root<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>school</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>school</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>hr</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>student</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>student</span><span class=\"token punctuation\">&gt;</span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\">\n        <span class=\"token comment\">//第一步创建组件</span>\n\n        <span class=\"token comment\">//创建school组件</span>\n        <span class=\"token comment\">//不要写el配置项,一定不要写el配置项</span>\n        <span class=\"token keyword\">const</span> school <span class=\"token operator\">=</span> Vue<span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            template<span class=\"token operator\">:</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;div&gt;\n                &lt;h2&gt;学校名称:{{schoolName}}&lt;/h2&gt;\n        &lt;h2&gt;学校地址:{{schoolAddress}}&lt;/h2&gt;\n                &lt;/div&gt;</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n            <span class=\"token function\">data</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span><span class=\"token punctuation\">{</span>\n                    schoolName<span class=\"token operator\">:</span><span class=\"token string\">'UESTC'</span><span class=\"token punctuation\">,</span>\n                    schoolAddress<span class=\"token operator\">:</span><span class=\"token string\">'沙河'</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            methods<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                \n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">//创建student组件</span>\n        <span class=\"token keyword\">const</span> student <span class=\"token operator\">=</span> Vue<span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            template<span class=\"token operator\">:</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;div&gt;\n                &lt;h2&gt;学生名称:{{studentName}}&lt;/h2&gt;\n        &lt;h2&gt;学校年龄:{{studentAge}}&lt;/h2&gt;\n                &lt;/div&gt;</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n            <span class=\"token function\">data</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span><span class=\"token punctuation\">{</span>\n                    studentName<span class=\"token operator\">:</span><span class=\"token string\">'s1m'</span><span class=\"token punctuation\">,</span>\n                    studentAge<span class=\"token operator\">:</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            methods<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                \n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    \n        \n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>       \n            el<span class=\"token operator\">:</span><span class=\"token string\">'#root'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token comment\">//第二步 局部注册组件</span>\n            components<span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>school<span class=\"token punctuation\">,</span>student<span class=\"token punctuation\">,</span><span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n\n\n        <span class=\"token comment\">// const vm = new Vue({</span>\n        <span class=\"token comment\">//     data () {</span>\n        <span class=\"token comment\">//         return{</span>\n        <span class=\"token comment\">//             schoolName:'UESTC',</span>\n        <span class=\"token comment\">//             schoolAddress:'沙河',</span>\n        <span class=\"token comment\">//             studentName:'s1m',</span>\n        <span class=\"token comment\">//             studentAge:20,</span>\n        <span class=\"token comment\">//         }},</span>\n        <span class=\"token comment\">//     methods: {</span>\n                \n        <span class=\"token comment\">//     }</span>\n        <span class=\"token comment\">// })</span>\n        <span class=\"token comment\">// vm.$mount('#root')</span>\n    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">&gt;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>Vue 中使用组件的三大步骤</p>\n<ol>\n<li>定义组件 (创建组件)</li>\n<li>注册组件</li>\n<li>使用组件 (写组件标签)</li>\n</ol>\n<h5 id=\"如何定义一个组件\"><a class=\"markdownIt-Anchor\" href=\"#如何定义一个组件\">#</a> 如何定义一个组件</h5>\n<p>使用 Vue.extend (options) 创建，其中 options 和 new Vue (options) 时传入的那个 options 几乎一样，区别如下:</p>\n<ol>\n<li>el 不要写</li>\n<li>data 必须写成函数 (<strong>避免组件被复用时的引用问题</strong>)</li>\n</ol>\n<p>备注：使用 <code>template</code>  可以配置组件结构</p>\n<h5 id=\"如何注册组件\"><a class=\"markdownIt-Anchor\" href=\"#如何注册组件\">#</a> 如何注册组件</h5>\n<ol>\n<li>局部注册：靠 new Vue 的时候传入 components 选项</li>\n<li>全局注册：靠 Vue.component (‘组件名’, 组件)</li>\n</ol>\n<h5 id=\"编写组件标签\"><a class=\"markdownIt-Anchor\" href=\"#编写组件标签\">#</a> 编写组件标签</h5>\n<p>eg: <code>&lt;school&gt;&lt;/school&gt;</code></p>\n<h5 id=\"几个注意点\"><a class=\"markdownIt-Anchor\" href=\"#几个注意点\">#</a> 几个注意点</h5>\n<ol>\n<li>\n<p>组件名</p>\n<ol>\n<li>一个单词组成：首字母大小写都可以</li>\n<li>多个单词组成\n<ul>\n<li>第一种：(kebab-case 命名) my-school</li>\n<li>第二种：(CamelCase 命名) MySchool (<strong>需要 Vue 脚手架支持</strong>)</li>\n</ul>\n</li>\n<li>备注\n<ul>\n<li>组件名尽可能回避 HTML 中已存的元素名称</li>\n<li>可以使用 name 配置项指定组件在开发者工具中呈现的名字</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>\n<p>关于组件标签</p>\n<ul>\n<li>第一种写法: <code>&lt;school&gt;&lt;/school&gt;</code></li>\n<li>第二种写法: <code>&lt;school/&gt;</code></li>\n<li>备注：不使用脚手架时， <code>&lt;school/&gt;</code>  会导致后续组件不能渲染</li>\n</ul>\n</li>\n<li>\n<p>一个简写方式</p>\n<p><code>const school = Vue.extend(options)</code>  可以写成  <code>const school = options</code></p>\n</li>\n</ol>\n<h5 id=\"组件的嵌套\"><a class=\"markdownIt-Anchor\" href=\"#组件的嵌套\">#</a> 组件的嵌套</h5>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> student <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n       template<span class=\"token operator\">:</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;div&gt;\n           &lt;h2&gt;学生姓名:{{studentName}}&lt;/h2&gt;\n   &lt;h2&gt;学生年龄:{{studentAge}}&lt;/h2&gt;\n           &lt;/div&gt;</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n       <span class=\"token function\">data</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n           <span class=\"token keyword\">return</span><span class=\"token punctuation\">{</span>\n               studentName<span class=\"token operator\">:</span><span class=\"token string\">'s1mm'</span><span class=\"token punctuation\">,</span>\n               studentAge<span class=\"token operator\">:</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span>\n           <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n       methods<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n           \n       <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">const</span> school <span class=\"token operator\">=</span> Vue<span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n       template<span class=\"token operator\">:</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;div&gt;\n           &lt;h2&gt;学校名称:{{schoolName}}&lt;/h2&gt;\n   &lt;h2&gt;学校地址:{{schoolAddress}}&lt;/h2&gt;\n   &lt;hr&gt;\n   &lt;student&gt;&lt;/student&gt;\n           &lt;/div&gt;</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n           components<span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>student<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n       <span class=\"token function\">data</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n           <span class=\"token keyword\">return</span><span class=\"token punctuation\">{</span>\n               schoolName<span class=\"token operator\">:</span><span class=\"token string\">'UESTC'</span><span class=\"token punctuation\">,</span>\n               schoolAddress<span class=\"token operator\">:</span><span class=\"token string\">'沙河'</span><span class=\"token punctuation\">,</span>\n           <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n       methods<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n           \n       <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n   <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>       \n       el<span class=\"token operator\">:</span><span class=\"token string\">'#root'</span><span class=\"token punctuation\">,</span>\n       <span class=\"token comment\">//第二步 局部注册组件</span>\n       components<span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>school<span class=\"token punctuation\">,</span><span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"vuecomponent\"><a class=\"markdownIt-Anchor\" href=\"#vuecomponent\">#</a> VueComponent</h5>\n<ol>\n<li>\n<p>组件本质是一个名为 VueComponnent 的构造函数，不是程序员定义的，是 Vue.extend () 生成的</p>\n</li>\n<li>\n<p>我们只需要写 <code>&lt;school/&gt;</code> ,Vue 解析时会帮我们创建 school 组件的实例对象，即 Vue 帮我们执行的:new VueComponent (options)</p>\n</li>\n<li>\n<p>特别注意：每次调用 Vue.extend, 返回的都是一个全新的 VueComponent</p>\n</li>\n<li>\n<p>关于 this 指向:</p>\n<ol>\n<li>\n<p>组件配置中:</p>\n<p>data 函数，methods 函数，watch 中的函数，computed 中的函数，他们的 sthis 都是<strong> VueComponent 实例对象</strong></p>\n</li>\n<li>\n<p>new Vue (options) 中</p>\n<p>data 函数，methods 函数，watch 中的函数，computed 中的函数，他们的 sthis 都是<strong> Vue 实例对象</strong></p>\n</li>\n</ol>\n</li>\n</ol>\n<h4 id=\"单文件组件\"><a class=\"markdownIt-Anchor\" href=\"#单文件组件\">#</a> 单文件组件</h4>\n<p>通过 VM 组件管理 APP 组件，再通过 APP 组件管理一堆组件</p>\n<pre class=\"line-numbers language-Vue\" data-language=\"Vue\"><code class=\"language-Vue\">&lt;template&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\n&lt;/script&gt;\n\n&lt;style&gt;\nnpm in&lt;/style&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"vue脚手架\"><a class=\"markdownIt-Anchor\" href=\"#vue脚手架\">#</a> Vue 脚手架</h3>\n<h4 id=\"创建vue脚手架\"><a class=\"markdownIt-Anchor\" href=\"#创建vue脚手架\">#</a> 创建 Vue 脚手架</h4>\n<ol>\n<li><code>npm install -g @vue/cli</code> , 全局安装 vue/cli</li>\n<li><code>vue create xxx</code>  创建项目</li>\n<li><code>npm run serve</code>  启动项目</li>\n</ol>\n<h4 id=\"分析脚手架\"><a class=\"markdownIt-Anchor\" href=\"#分析脚手架\">#</a> 分析脚手架</h4>\n<h5 id=\"render函数\"><a class=\"markdownIt-Anchor\" href=\"#render函数\">#</a> render 函数</h5>\n<ol>\n<li>vue.js 是完整版的 vue, 包含核心功能 + 模板解析器</li>\n<li>vue.runtime.xxx.js 是运行版的 vue, 只包含核心功能，没有模板解析器</li>\n<li>因为 <code>vue.runtime.xxx.js</code>  没有模板解析器，所以不能使用 template 配置项，需要使用<strong> render 函数</strong>接收到的<strong> createElement 函数去指定具体内容</strong></li>\n</ol>\n<h5 id=\"修改默认配置\"><a class=\"markdownIt-Anchor\" href=\"#修改默认配置\">#</a> 修改默认配置</h5>\n<p>可以在 <code>vue.config.js</code>  中添加个性化配置，vue 会将个性化配置和 webpack 中的默认配置对比，并且进行替换</p>\n<h4 id=\"ref属性\"><a class=\"markdownIt-Anchor\" href=\"#ref属性\">#</a> ref 属性</h4>\n<ol>\n<li>被用来给元素或<strong>子组件</strong>注册引用信息 (id 的替代者)</li>\n<li>应用在 html 标签上获取的是真实 DOM 元素，应用在组件标签上是组件实例对象（vc）</li>\n<li>使用方式\n<ul>\n<li>打标识  <code>&lt;h1 ref=\"xxx\"&gt; ... &lt;h1&gt;</code>  或  <code>&lt;School ref = \"xxx\"&gt;&lt;/School&gt;</code></li>\n<li>获取: <code>this.$refs.xxx</code></li>\n</ul>\n</li>\n</ol>\n<h4 id=\"props配置\"><a class=\"markdownIt-Anchor\" href=\"#props配置\">#</a> props 配置</h4>\n<p>功能：让组件接收外部传过来的数据</p>\n<ol>\n<li>\n<p>传递数据</p>\n<p><code>&lt;Demo name=\"xxx\" /&gt;</code></p>\n</li>\n<li>\n<p>接收数据 如下三种方式</p>\n</li>\n</ol>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//最简单写法</span>\nprops<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'sex'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'age'</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">//第二种写法 - 限制数据类型</span>\nprops<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>                        <span class=\"token comment\">//限制数据类型</span>\n         name<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n         age<span class=\"token operator\">:</span> Number<span class=\"token punctuation\">,</span>\n         sex<span class=\"token operator\">:</span> Number<span class=\"token punctuation\">,</span>\n     <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//完整写法  可以限制数据类型 + 必需性 + 默认值</span>\nprops<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        name<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            type<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>    <span class=\"token comment\">//类型</span>\n            required<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//名字是必须传的</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        age<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            type<span class=\"token operator\">:</span> Number<span class=\"token punctuation\">,</span>    <span class=\"token comment\">//类型</span>\n            <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token number\">31</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//默认值</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>备注:props 是<strong>只读</strong>的，Vue 底层会监测 props 的修改，如果进行了修改，就会发出警告，<u>如果业务需求需要修改，那么请复制 props 的内容到 data 中一份，然后去修改 data 中的数据</u></p>\n<h4 id=\"mixin混入\"><a class=\"markdownIt-Anchor\" href=\"#mixin混入\">#</a> mixin 混入</h4>\n<p>功能：可以把多个组件共用的配置提取成一个混入对象</p>\n<p>使用方式:</p>\n<ol>\n<li>\n<p>定义混合：在外部创建 js 文件并且引入 比如:</p>\n<p>const hunhe = {</p>\n<p>​\tdata(){}</p>\n<p>}</p>\n</li>\n<li>\n<p>第二部使用混入，例如</p>\n<ol>\n<li>全局混入：Vue.mixin (xxx)</li>\n<li>局部混入:mixins:[‘xxx’]</li>\n</ol>\n</li>\n</ol>\n<h4 id=\"插件\"><a class=\"markdownIt-Anchor\" href=\"#插件\">#</a> 插件</h4>\n<p>功能：增强 Vue</p>\n<p>本质：包含 install 方法的一个对象，install 方法的第一个参数是 Vue，第二个以后的参数是插件使用者传递的数据</p>\n<p>定义插件:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> plugins <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">install</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    \t<span class=\"token comment\">//添加全局过滤器</span>\n      \t<span class=\"token comment\">//添加全局指令</span>\n      <span class=\"token comment\">//配置全局混入</span>\n      <span class=\"token comment\">//添加实例方法</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> plugins<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>使用插件: Vue.use (‘xxx’)</p>\n<h4 id=\"scoped样式\"><a class=\"markdownIt-Anchor\" href=\"#scoped样式\">#</a> scoped 样式</h4>\n<p>作用：让样式在局部生效，防止冲突</p>\n<p>写法:  <code>&lt;style scoped&gt; &lt;/style&gt;</code></p>\n<h4 id=\"数据之间的基础传输\"><a class=\"markdownIt-Anchor\" href=\"#数据之间的基础传输\">#</a> 数据之间的<strong>基础</strong>传输</h4>\n<p>传递给下级组件：通过 props 接受数据，</p>\n<p>传递给上级组件：通过父组件定义函数，传入子组件，子组件通过 props 得到传入的函数，通过调用函数返回值</p>\n<h4 id=\"组件化编码流程\"><a class=\"markdownIt-Anchor\" href=\"#组件化编码流程\">#</a> 组件化编码流程</h4>\n<ol>\n<li>拆分静态组件：组件要按照功能点拆分，命名不要和 html 元素冲突</li>\n<li>实现动态组件：考虑好数据的存放位置，数据是一个组件在用，还是一些组件在用\n<ol>\n<li>一个组件在用：放在组件自身</li>\n<li>一些组件在用：放在共同的父组件身上</li>\n</ol>\n</li>\n</ol>\n<h4 id=\"props使用于\"><a class=\"markdownIt-Anchor\" href=\"#props使用于\">#</a> props 使用于</h4>\n<ol>\n<li>父组件到子组件通信</li>\n<li>子组件到父组件通信 (通过父组件向子组件传递函数)</li>\n</ol>\n<p>v-model 不能绑定 props 传送过来的值，因为 props 不可以修改</p>\n<h4 id=\"浏览器本地存储\"><a class=\"markdownIt-Anchor\" href=\"#浏览器本地存储\">#</a> 浏览器本地存储</h4>\n<h5 id=\"localstorage\"><a class=\"markdownIt-Anchor\" href=\"#localstorage\">#</a> localstorage</h5>\n<ul>\n<li><code>localstorage.setItem(key,value)</code> : 保存数据，且数据为键值对形式，key 和 value 都必须是字符串</li>\n<li><code>localstorage.getItem(key)</code> : 读取数据</li>\n<li><code>localstorage.removeItem(key,value)</code> : 删除数据</li>\n<li><code>localstorage.clear()</code> : 清空所有数据</li>\n</ul>\n<h6 id=\"json对象和字符串相互转换\"><a class=\"markdownIt-Anchor\" href=\"#json对象和字符串相互转换\">#</a> JSON 对象和字符串相互转换</h6>\n<ul>\n<li><code>JSON.parse(String)</code> :json 字符串转对象</li>\n<li><code>JSON.stringify(Object)</code> :json 对象转字符串</li>\n</ul>\n<h5 id=\"sessionstorage\"><a class=\"markdownIt-Anchor\" href=\"#sessionstorage\">#</a> sessionstorage</h5>\n<p>跟 localstorage 的 Api 相同</p>\n<h5 id=\"不同点\"><a class=\"markdownIt-Anchor\" href=\"#不同点\">#</a> 不同点</h5>\n<p>localStorage 一直存储在浏览器</p>\n<p>sessionstorage 关闭浏览器数据就消失</p>\n<h4 id=\"组件自定义事件\"><a class=\"markdownIt-Anchor\" href=\"#组件自定义事件\">#</a> 组件自定义事件</h4>\n<ol>\n<li>\n<p>一种组件间的通信方式，适用于 <strong>子组件 ===&gt; 父组件</strong></p>\n</li>\n<li>\n<p>第二种方式，在父组件中：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;Demo ref=\"xxx\"/&gt;\n.......\nmounted () {\n\tthis.$ref.xxx.$on('自定义事件',this.test)\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>如果想让自定义时间只能触发一次，可以使用 <code>once</code>  修饰符，或者 <code>$once</code>  方法</p>\n</li>\n<li>\n<p>触发自定义事件: <code>this.$emit('自定义事件',数据)</code></p>\n</li>\n<li>\n<p>解绑自定义事件: <code>this.$off('自定义事件')</code></p>\n</li>\n<li>\n<p>组件上也可以绑定原生 DOM 事件，需要使用 <code>native</code>  修饰符</p>\n</li>\n<li>\n<p>注意：通过 this.<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi><mi>e</mi><mi>f</mi><mi>s</mi><mi mathvariant=\"normal\">.</mi><mi>x</mi><mi>x</mi><mi>x</mi><mi mathvariant=\"normal\">.</mi></mrow><annotation encoding=\"application/x-tex\">refs.xxx.</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">s</span><span class=\"mord\">.</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">x</span><span class=\"mord\">.</span></span></span></span>on (‘自定义事件’, 回调函数) 绑定自定义事件时，回调<strong>要么配置在 methods 中，要么用箭头函数</strong>，否则 this 指向会出问题！</p>\n</li>\n</ol>\n<h4 id=\"全局事件总线globaleventbus\"><a class=\"markdownIt-Anchor\" href=\"#全局事件总线globaleventbus\">#</a> 全局事件总线 (GlobalEventBus)</h4>\n<ol>\n<li>\n<p>可以实现任意<strong>组件之间的通信</strong></p>\n</li>\n<li>\n<p>安装全局事件总线:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token operator\">...</span><span class=\"token operator\">...</span>\n\t<span class=\"token function\">beforecreate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">Vue</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>$bus <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span> \n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token operator\">...</span><span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>使用全局事件总线:</p>\n<ol>\n<li>\n<p>接受数据：A 组件想接受数据，则在 A 组件中给 $bus 绑定自定义事件，事件的<strong>回调在 A 组件自身，</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">methods() {\n\tdemo(data){......}\n}\n......\nmounted() {\n\tthis.$bus.$on('xxx',this.demo)\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>提供数据:this.<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi><mi>u</mi><mi>s</mi><mi mathvariant=\"normal\">.</mi></mrow><annotation encoding=\"application/x-tex\">bus.</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">s</span><span class=\"mord\">.</span></span></span></span>emit (‘xxx’, 数据)</p>\n</li>\n</ol>\n</li>\n<li>\n<p>最好在 beforeDestroy 钩子中，用 $off 解绑<strong>当前组件所用到的</strong>事件</p>\n</li>\n</ol>\n<h4 id=\"消息订阅与发布_pubsub\"><a class=\"markdownIt-Anchor\" href=\"#消息订阅与发布_pubsub\">#</a> 消息订阅与发布_pubsub</h4>\n<ol>\n<li>\n<p>一种组件间通信的方式，适用于<strong>任意组件间通信</strong></p>\n</li>\n<li>\n<p>使用步骤:</p>\n<ol>\n<li>\n<p>安装 pubsub: <code>npm i pubsub-js</code></p>\n</li>\n<li>\n<p>引入:  <code>import pubsub from 'pubsub-js'</code></p>\n</li>\n<li>\n<p>接受数据: A 组件想接收数据，则在 A 组件中订阅消息，订阅的<strong>回调在 A 组件自身</strong></p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token function\">methods</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">demo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">msgName<span class=\"token punctuation\">,</span>data</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">...</span><span class=\"token operator\">...</span>\n<span class=\"token function\">mounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pubId <span class=\"token operator\">=</span> pubsub<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'xxx'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">)</span> <span class=\"token comment\">//订阅消息</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>提供数据:  <code>pubsub.public('xxx',数据)</code></p>\n</li>\n<li>\n<p>最好在 beforeDestroy 钩子中，用 Pubsub.unsubscibe (pubId) 取消订阅</p>\n</li>\n</ol>\n</li>\n</ol>\n<h4 id=\"nexttick\"><a class=\"markdownIt-Anchor\" href=\"#nexttick\">#</a> nextTick</h4>\n<ol>\n<li>语法:  <code>this.$nextTick(function () { 代码})</code></li>\n<li>作用：在下一次 DOM 更新结束后执行其指定的回调函数</li>\n<li>什么时候用：当改变数据后，要基于更新后的新 DOM 进行某些操作时，要在 nextTick 所指定的回调函数中执行</li>\n</ol>\n<h4 id=\"过渡与动画\"><a class=\"markdownIt-Anchor\" href=\"#过渡与动画\">#</a> 过渡与动画</h4>\n<p>暂放</p>\n<h3 id=\"vue中的ajax\"><a class=\"markdownIt-Anchor\" href=\"#vue中的ajax\">#</a> Vue 中的 ajax</h3>\n<h4 id=\"vue脚手架配置代理\"><a class=\"markdownIt-Anchor\" href=\"#vue脚手架配置代理\">#</a> Vue 脚手架配置代理</h4>\n<h5 id=\"方法一\"><a class=\"markdownIt-Anchor\" href=\"#方法一\">#</a> 方法一</h5>\n<p>​\t在 Vue.config.js 中添加如下配置:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">devServer<span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>\n\tproxy<span class=\"token operator\">:</span><span class=\"token string\">\"http://localhost:5000\"</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>说明:</p>\n<pre><code>1. 优点:配置简单,请求资源时直接发给前端(8080)即可\n1. 缺点:不能配置多个代理,不能灵活的控制请求是否走代理.\n1. 工作方式:若按照上述配置代理,当请求了前端不存在的资源时,那么该请求会转发给服务器(优先匹配前端资源)\n</code></pre>\n<h5 id=\"方法二\"><a class=\"markdownIt-Anchor\" href=\"#方法二\">#</a> 方法二</h5>\n<p>编写 Vue.config.js 配置具体代理规则:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">moduel<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\tdevServer<span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>\n\t\tproxy<span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token string\">'/api1'</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{</span><span class=\"token comment\">//匹配所有以'/api1/开头的请求路径</span>\n\t\t\t\ttarget<span class=\"token operator\">:</span><span class=\"token string\">'http://localhost:5000'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//代理目标的基础路径</span>\n                changeOrigin<span class=\"token operator\">:</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n                pathRewrite<span class=\"token operator\">:</span><span class=\"token punctuation\">{</span><span class=\"token string\">'^api1'</span><span class=\"token operator\">:</span><span class=\"token string\">''</span><span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'/api2'</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{</span><span class=\"token comment\">//匹配所有以'/api2/开头的请求路径</span>\n\t\t\t\ttarget<span class=\"token operator\">:</span><span class=\"token string\">'http://localhost:5000'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//代理目标的基础路径</span>\n                changeOrigin<span class=\"token operator\">:</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n                pathRewrite<span class=\"token operator\">:</span><span class=\"token punctuation\">{</span><span class=\"token string\">'^api2'</span><span class=\"token operator\">:</span><span class=\"token string\">''</span><span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>说明:</p>\n<pre><code>1. 优点：可以配置多个代理，且可以灵活的控制请求是否走代理。\n1. 缺点：配置略微繁琐，请求资源时必须加前缀\n</code></pre>\n<h4 id=\"vue项目中常用的ajax库\"><a class=\"markdownIt-Anchor\" href=\"#vue项目中常用的ajax库\">#</a> vue 项目中常用的 ajax 库</h4>\n<h5 id=\"axios库使用\"><a class=\"markdownIt-Anchor\" href=\"#axios库使用\">#</a> axios 库使用</h5>\n<p>安装  <code>npm i axios</code></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//先引入</span>\n<span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span>\n<span class=\"token comment\">//使用</span>\n  axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">api</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>\n                <span class=\"token parameter\">response</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n                    \n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                <span class=\"token parameter\">error</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n                    \n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"vue-resource\"><a class=\"markdownIt-Anchor\" href=\"#vue-resource\">#</a> vue-resource</h5>\n<p>vue 自身的插件库，也封装了 ajax, 现在不常用 推荐还是使用 axios</p>\n<p><code>this.$http.get(' ').then( Response =&gt; { }, error =&gt; {})</code></p>\n<h4 id=\"slot插槽\"><a class=\"markdownIt-Anchor\" href=\"#slot插槽\">#</a> Slot 插槽</h4>\n<h5 id=\"默认插槽\"><a class=\"markdownIt-Anchor\" href=\"#默认插槽\">#</a> 默认插槽</h5>\n<p>slot 标签中包含的就是父组件中传入子组件标签中的内容</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">//父组件中\n&lt;Category&gt;\n\t&lt;h1&gt; 你好 &lt;h1&gt;\n&lt;/Category&gt;\n\n//Category标签中\n&lt;slot&gt;&lt;/slot&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"具名插槽\"><a class=\"markdownIt-Anchor\" href=\"#具名插槽\">#</a> 具名插槽</h5>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">//父组件中\n&lt;Category&gt;\n\t&lt;h1 slot=\"demo\"&gt; 你好 &lt;h1&gt;\n\t&lt;h1 slot=\"demo2\"&gt; 你好啊 &lt;h1&gt;\n&lt;/Category&gt;\n\n//Category标签中\n&lt;slot name=\"demo\"&gt;&lt;/slot&gt;\n&lt;slot name=\"demo2\"&gt;&lt;/slot&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><code>slot</code>  与 <code>name</code>  相<strong>对应</strong></p>\n<p>template 标签中用 v-slot</p>\n<h5 id=\"作用域插槽\"><a class=\"markdownIt-Anchor\" href=\"#作用域插槽\">#</a> 作用域插槽</h5>\n<p>数据在组件自身，但根据数据生成的机构需要组件的使用者来决定</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;Category&gt;\n&lt;template scope=\"nihao\"&gt;\n\t&lt;h1&gt; {{nihao.xxx}} &lt;h1&gt;  //相当于 games.xxx\n\t&lt;h1&gt; 你好啊 &lt;h1&gt;\n&lt;/template&gt;\n\n&lt;/Category&gt;\n\n//Category标签中\n&lt;slot :game=\"games\"&gt;&lt;/slot&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"vuex\"><a class=\"markdownIt-Anchor\" href=\"#vuex\">#</a> Vuex</h3>\n<p>在 Vue 中实现集中式数据管理的一个 Vue<strong> 插件</strong>，对 Vue 应用中多个组件的共享状态进行集中式的管理 (读 / 写), 也是一种组件间通信的方式，且使用于<strong>任何组件间</strong>通信</p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/vuex.png\" alt=\"vuex\"></p>\n<h4 id=\"搭建vuex环境\"><a class=\"markdownIt-Anchor\" href=\"#搭建vuex环境\">#</a> 搭建 Vuex 环境</h4>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">//在main.js中 传入store\n\nimport Vue from \"vue\";\nimport App from \"./App.vue\";\nimport store from \"./store/index\";\n\nnew Vue({\n  render: (h) =&gt; h(App),\n  store,\n  beforeCreate() {\n    Vue.prototype.$bus = this;\n  },\n}).$mount(\"#app\");\n\n//在store文件夹中store.js中\n\nimport Vue from \"vue\";\nimport Vuex from \"vuex\";\n\nVue.use(Vuex);\n//准备 actions 用于响应组件中的动作\n\nconst actions = {} //响应组件中的数据\nconst mutations = {} //用于操作数据\nconst state = {} //存储数据\n\nconst store = new Vuex.Store({actions,mutations,state}) //创建store\n\nexport default store<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"基本使用\"><a class=\"markdownIt-Anchor\" href=\"#基本使用\">#</a> 基本使用</h4>\n<ol>\n<li>组件读取 Vuex 中的数据:  <code>$store.state.sum</code></li>\n<li>组件修改 vuex 中的数据:  <code>$store.dispatch('action中的方法名',数据)</code>  或者 <code>$store.commit('mutations中的方法名',数据)</code></li>\n</ol>\n<h4 id=\"getters配置项\"><a class=\"markdownIt-Anchor\" href=\"#getters配置项\">#</a> getters 配置项</h4>\n<p>用于对 state 中的数据进行加工，相当于 vuex 中的计算属性</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> getters <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">bigSum</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> state<span class=\"token punctuation\">.</span>sum <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"mapstate与mapgetters\"><a class=\"markdownIt-Anchor\" href=\"#mapstate与mapgetters\">#</a> mapState 与 mapGetters</h4>\n<ol>\n<li>\n<p><strong>mapState</strong> 方法：帮助映射 state 中的数据成为计算属性</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">computed: {\n\t//对象写法\n\t...mapState({sum:'sum'})\n\t//数组写法\n\t...mapState(['sum'])\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>mapGetters 方法：帮助我们映射 getters 中的数据成为计算属性</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">computed: {\n\t//对象写法\n\t...mapGetters({bigSum:'bigSum'})\n\t//数组写法\n\t...mapGetters(['bigSum'])\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<h4 id=\"mapactions和mapmutations\"><a class=\"markdownIt-Anchor\" href=\"#mapactions和mapmutations\">#</a> mapActions 和 mapMutations</h4>\n<ol>\n<li>\n<p><code>mapActions</code> : 帮助我们生成与 <code>actions</code>  对话的方法，即：包含 <code>$store.dispatch(xxx)</code>  的函数</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">methods: {\n\t//对象\n\tmapActions({increment:\"jia\"})\n\t//数组\n\tmapActions(['jia'])\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p><code>mapMutations</code> : 帮助生成与 <code>mutations</code>  对话的方法</p>\n<p>类似 略</p>\n<p><strong>注意</strong>，现在参数通过在标签中事件触发传递 <code>@click=\"increment(n)\"</code></p>\n</li>\n</ol>\n<h4 id=\"vue模块化\"><a class=\"markdownIt-Anchor\" href=\"#vue模块化\">#</a> Vue 模块化</h4>\n<ol>\n<li>\n<p>目的：让代码更好维护，让多种数据分类更加准确</p>\n</li>\n<li>\n<p>修改 store.js</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">const countAbout = {\n\tnamespaced:true,\n\tstate:{}.\n\tactions:{},\n\tmutations:{},\n\tgetters:{\n\t\n\t}\n}\n\nconst store = new Vuex.Store({moduels:{countAbout}})<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>开启命名空间后，组件中读取 state 数据</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">//方式1 自己读取\nthis.$store.state.personAbout.list\n//方式二：借助mapState读取\n...mapState('personAbout',['sum','school','subject'])<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>开启命名空间后读取 getters 中的数据</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">//方式1 自己读取\nthis.$store.getters['personAbout/firstPersonName']\n//方式二：借助mapGetters\n...mapGetters('countAbout',['bigSum'])<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>开启命名空间后，组件中调用 dispatch</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">//方式1 自己直接dispatch\nthis.$store.dispatch('personAbout/addPerson',person)\n//方式二：借助mapActions读取\n...mapActions('countAbout',['jia'])<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>开启命名空间后，组件中调用 commit\\</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">//方式1 自己直接commit\nthis.$store.commit('personAbout/ADD_PERSON',person)\n//方式二：借助mapActions读取\n...mapMutations('mapMutations',['JIA'])<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<h3 id=\"vue-router路由\"><a class=\"markdownIt-Anchor\" href=\"#vue-router路由\">#</a> Vue-Router 路由</h3>\n<p>Vue 的一个插件库，实现 Single Page Application</p>\n<h4 id=\"1基本使用\"><a class=\"markdownIt-Anchor\" href=\"#1基本使用\">#</a> 1. 基本使用</h4>\n<ol>\n<li>\n<p>安装 <code>vue-router</code> , 命令:  <code>npm i vue-router</code></p>\n</li>\n<li>\n<p>应用插件  <code>Vue.use(VueRouter)</code></p>\n</li>\n<li>\n<p>编写 router 配置项</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//创建整个应用的路由</span>\n<span class=\"token keyword\">import</span> VueRouter <span class=\"token keyword\">from</span> <span class=\"token string\">\"vue-router\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> AboutView <span class=\"token keyword\">from</span> <span class=\"token string\">\"../components/AboutView\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> HomeView <span class=\"token keyword\">from</span> <span class=\"token string\">\"../components/HomeView\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//创建一个路由器</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">VueRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  routes<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      path<span class=\"token operator\">:</span> <span class=\"token string\">\"/about\"</span><span class=\"token punctuation\">,</span>\n      component<span class=\"token operator\">:</span> AboutView<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      path<span class=\"token operator\">:</span> <span class=\"token string\">\"/home\"</span><span class=\"token punctuation\">,</span>\n      component<span class=\"token operator\">:</span> HomeView<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>实现切换</p>\n<p><code>&lt;router-link class=\"list-group-item\" active-class=\"active\" to=\"/about\"&gt;About&lt;/router-link&gt;</code></p>\n</li>\n<li>\n<p>指定展示位置</p>\n<p><code>&lt;router-view&gt;</code></p>\n</li>\n</ol>\n<h4 id=\"2几个注意点\"><a class=\"markdownIt-Anchor\" href=\"#2几个注意点\">#</a> 2. 几个注意点</h4>\n<ol>\n<li>路由组件通常放在 pages 文件夹，一般组件通常存放在 components 文件夹</li>\n<li>通过切换，隐藏了的路由组件，默认是被销毁了</li>\n<li>每个组件都有自己的 $route 属性，里面存储着自己的路由信息</li>\n<li>整个应用只有一个 router, 可以通过组件的 $router 属性获取</li>\n</ol>\n<h4 id=\"3嵌套路由\"><a class=\"markdownIt-Anchor\" href=\"#3嵌套路由\">#</a> 3. 嵌套路由</h4>\n<ol>\n<li>\n<p>配置路由规则，使用<strong> children</strong> 配置项</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">routes:[\n\t{\n\t\tpath:'/home'\n\t\tcomponent:AboutView,\n\t\tchildren:[\n\t\t\t{\n\t\t\t\tpath:'news',\n\t\t\t\tcomponent:NewsView\n\t\t\t}\n\t\t]\n\t}\n]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>跳转 (要写<strong>完整路径</strong>)</p>\n<p><code>&lt;router-link to=\"/home/news\"&gt; &lt;router-link&gt;</code></p>\n</li>\n</ol>\n<h4 id=\"4路由传参\"><a class=\"markdownIt-Anchor\" href=\"#4路由传参\">#</a> 4. 路由传参</h4>\n<h5 id=\"41-query参数\"><a class=\"markdownIt-Anchor\" href=\"#41-query参数\">#</a> 4.1 query 参数</h5>\n<ol>\n<li>\n<p>传递参数</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">跳转并携带query参数,to的字符串写法\n&lt;router-link :to=\"/home/message/detail?id=666&amp;title=你好\"&gt;跳转 &lt;router-link&gt;\n\nto的对象写法\n&lt;router-link :to=\"{\n\tpath:'/home/message/detail',\n\tquery:{\n\t\tid:666,\n\t\ttitle:'你好',\n\t}\n}\"&gt;跳转 &lt;router-link&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>接收参数</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">$route.query.id\n$route.query.title<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<p><strong>不打扰路由器的配置</strong></p>\n<h5 id=\"42-命名路由\"><a class=\"markdownIt-Anchor\" href=\"#42-命名路由\">#</a> 4.2 命名路由</h5>\n<ol>\n<li>作用：简化路由的跳转</li>\n<li>如何使用:\n<ol>\n<li>给路由加上 <code>name:xxx</code>  属性，给路由命名</li>\n<li>在跳转的 to 的对象写法中 不写 path 直接写 <code>name:xxx</code>  即可实现跳转</li>\n</ol>\n</li>\n</ol>\n<h5 id=\"43-params参数\"><a class=\"markdownIt-Anchor\" href=\"#43-params参数\">#</a> 4.3 params 参数</h5>\n<ol>\n<li>\n<p>配置路由，声明接受 params 参数</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">routes:[\n\t{\n\t\tpath:'/home'\n\t\tcomponent:AboutView,\n\t\tchildren:[\n\t\t\t{\n\t\t\t\tpath:'news/:id/:title',\n\t\t\t\tcomponent:NewsView\n\t\t\t}\n\t\t]\n\t}\n]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>传递参数</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">跳转并携带query参数,to的字符串写法\n&lt;router-link :to=\"/home/message/detail/666/你好\"&gt;跳转 &lt;router-link&gt;\n\nto的对象写法\n&lt;router-link :to=\"{\n\tname:xxx      \n\tparams:{\n\t\tid:666,\n\t\ttitle:'你好',\n\t}\n}\"&gt;跳转 &lt;router-link&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong><u>使用 params 传递参数 不能使用 path 直接使用 name</u></strong></p>\n</li>\n<li>\n<p>接受参数</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">$route.params.id\n$route.params.title<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<h5 id=\"44-路由的props配置\"><a class=\"markdownIt-Anchor\" href=\"#44-路由的props配置\">#</a> 4.4 路由的 props 配置</h5>\n<p>让路由组件更加方便地收到参数</p>\n<ol>\n<li>\n<p>props 的第一种写法 (对象)</p>\n<p>该写法中的所有 key-value 都会以 props 的形式传给 Detail 组件</p>\n<p>死数据 不常用</p>\n</li>\n<li>\n<p>props 的第二种写法，值为布尔值</p>\n<p>若布尔值为真，就会把该路由组件收到的所有 params 组件以 props 的形式传给组件</p>\n</li>\n<li>\n<p>props 的第三种写法，值为函数</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">props($route) {\n\treturn {id:$route.query.id,title:$route.query.title}\n}\n\nprops({query:{id,title}})\n{\n return {id,title}\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<h4 id=\"5router-link的replace属性\"><a class=\"markdownIt-Anchor\" href=\"#5router-link的replace属性\">#</a> 5.router-link 的 replace 属性</h4>\n<ol>\n<li>作用：控制路由跳转时操作浏览器历史记录的模式</li>\n<li>浏览器历史记录有 2 种模式  <code>push</code>  追加和 <code>replace</code>  替换 默认为 <code>push</code></li>\n<li>在 <code>&lt;router-link&gt;&lt;/router-link&gt;</code>  标签加上 replace 则可以更改为 replace 模式</li>\n</ol>\n<h4 id=\"6-编程式路由导航\"><a class=\"markdownIt-Anchor\" href=\"#6-编程式路由导航\">#</a> 6. 编程式路由导航</h4>\n<ol>\n<li>\n<p>作用：不借助 <code>&lt;router-link&gt;</code>  进行路由跳转，让路由跳转更灵活</p>\n</li>\n<li>\n<p>编码:</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$router<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\tname<span class=\"token operator\">:</span><span class=\"token string\">'xxx'</span><span class=\"token punctuation\">,</span>\n    params<span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>\n        \n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$router<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    name<span class=\"token operator\">:</span><span class=\"token string\">'xxx'</span><span class=\"token punctuation\">,</span>\n    params<span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>\n        \n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$router<span class=\"token punctuation\">.</span><span class=\"token function\">forward</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$router<span class=\"token punctuation\">.</span><span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$router<span class=\"token punctuation\">.</span><span class=\"token function\">go</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<h4 id=\"7-缓存路由组件\"><a class=\"markdownIt-Anchor\" href=\"#7-缓存路由组件\">#</a> 7. 缓存路由组件</h4>\n<p>让不展示的组件保持挂载，以保留其中的数据</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>keep-alive</span> <span class=\"token attr-name\">include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>组件名<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">:include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>[<span class=\"token punctuation\">'</span>xxx<span class=\"token punctuation\">'</span>,<span class=\"token punctuation\">'</span>yyy<span class=\"token punctuation\">'</span>]<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>router-link</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>router-link</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>keep-alive</span><span class=\"token punctuation\">&gt;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"8-两个新的生命周期钩子\"><a class=\"markdownIt-Anchor\" href=\"#8-两个新的生命周期钩子\">#</a> 8. 两个新的生命周期钩子</h4>\n<p><strong>路由组件独有</strong></p>\n<p><code>activated(){}</code> : 组件被激活时调用</p>\n<p><code>deactivated() {}</code> : 组件失活时调用</p>\n<h4 id=\"9路由守卫\"><a class=\"markdownIt-Anchor\" href=\"#9路由守卫\">#</a> 9. 路由守卫</h4>\n<h5 id=\"91-全局前置\"><a class=\"markdownIt-Anchor\" href=\"#91-全局前置\">#</a> 9.1 全局前置</h5>\n<p><strong>初始化的时候</strong>调用</p>\n<p>每次<strong>切换路由前</strong>调用</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">router<span class=\"token punctuation\">.</span><span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">to<span class=\"token punctuation\">,</span>from<span class=\"token punctuation\">,</span>next</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// to 去哪个路由 to.path to.name</span>\n    <span class=\"token comment\">// from 来自哪个路由 </span>\n    <span class=\"token comment\">// next() 允许通行</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><code>meta:{isAuth:true}</code> : 在路由器中 meta 中添加数据，表示是否需要鉴权</p>\n<h5 id=\"92-全局后置\"><a class=\"markdownIt-Anchor\" href=\"#92-全局后置\">#</a> 9.2 全局后置</h5>\n<p><strong>初始化的时候</strong>调用</p>\n<p>每次<strong>切换路由后</strong>调用</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">router<span class=\"token punctuation\">.</span><span class=\"token function\">afterEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">to<span class=\"token punctuation\">,</span><span class=\"token keyword\">from</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// to 去哪个路由 to.path to.name</span>\n    <span class=\"token comment\">// from 来自哪个路由 </span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"93-独享路由守卫\"><a class=\"markdownIt-Anchor\" href=\"#93-独享路由守卫\">#</a> 9.3 独享路由守卫</h5>\n<p><code>beforeEneter: (to,from,next) =&gt; {}</code></p>\n<h5 id=\"94-组件内路由守卫\"><a class=\"markdownIt-Anchor\" href=\"#94-组件内路由守卫\">#</a> 9.4 组件内路由守卫</h5>\n<p><code>beforeRouteEnter(to,from,next)</code> : 进入该组件时被调用</p>\n<p><code>beforeRouteLeave(to,from,next)</code> : 离开该组件时被调用</p>\n<h4 id=\"10-history和hash模式\"><a class=\"markdownIt-Anchor\" href=\"#10-history和hash模式\">#</a> 10. History 和 Hash 模式</h4>\n<p><code>mode:history</code></p>\n<p>默认为 hash 模式 会带#</p>\n<h3 id=\"基础模板作者学习时候用来构建最基本html文件的\"><a class=\"markdownIt-Anchor\" href=\"#基础模板作者学习时候用来构建最基本html文件的\">#</a> 基础模板 (作者学习时候用来构建最基本 html 文件的)</h3>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">http-equiv</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>X-UA-Compatible<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>IE=edge<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span> <span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>../js/vue.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">&gt;</span></span>Document<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>root<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\">\n        <span class=\"token keyword\">const</span> vm <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            <span class=\"token function\">data</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span><span class=\"token punctuation\">{</span>\n                    \n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            methods<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                \n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        vm<span class=\"token punctuation\">.</span><span class=\"token function\">$mount</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#root'</span><span class=\"token punctuation\">)</span>\n    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">&gt;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n",
            "tags": [
                "vue"
            ]
        },
        {
            "id": "https://github.com/YogMas/YogMas.github.io/2022/07/10/c/",
            "url": "https://github.com/YogMas/YogMas.github.io/2022/07/10/c/",
            "title": "C++",
            "date_published": "2022-07-09T16:00:00.000Z",
            "content_html": "<h1 id=\"c\"><a class=\"markdownIt-Anchor\" href=\"#c\">#</a> C++</h1>\n<h2 id=\"第一章-预备知识\"><a class=\"markdownIt-Anchor\" href=\"#第一章-预备知识\">#</a> 第一章 预备知识</h2>\n<p>C++ 在 C 语言的编程上添加了<strong>面向对象编程</strong>和<strong>泛型编程</strong></p>\n<h2 id=\"第二章-c\"><a class=\"markdownIt-Anchor\" href=\"#第二章-c\">#</a> 第二章 C++</h2>\n<p>C++ 程序区分大小写同一个字母不同的大小写会被认为是两个意思</p>\n<h3 id=\"21-进入c\"><a class=\"markdownIt-Anchor\" href=\"#21-进入c\">#</a> 2.1 进入 C++</h3>\n<h4 id=\"c-语言输入输出\"><a class=\"markdownIt-Anchor\" href=\"#c-语言输入输出\">#</a> C 语言输入输出</h4>\n<ul>\n<li>注释 //</li>\n<li>预处理器编译指令 #include</li>\n<li>函数头: int  main ()</li>\n<li>编译指令 using namespace</li>\n<li>函数体 {}</li>\n<li>使用 C++ 的语句</li>\n<li>结束 main 函数的 return 语句</li>\n</ul>\n<h4 id=\"211-main函数\"><a class=\"markdownIt-Anchor\" href=\"#211-main函数\">#</a> 2.1.1  <code>main()</code>  函数</h4>\n<pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">int main() //函数头\n{\nstatements //函数语句\nreturn 0; //返回语句 结束函数\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"语句和分号\"><a class=\"markdownIt-Anchor\" href=\"#语句和分号\">#</a> 语句和分号</h5>\n<p>C++ 中不能省略分号</p>\n<p>int main(void)</p>\n<ul>\n<li>C++ 中 void 和括号空着表示相同的意思</li>\n<li>C 中括号空着表示对是否有参数输入函数表示沉默</li>\n</ul>\n<p>C++ 中必须包含一个 main 主函数</p>\n<h4 id=\"212-注释\"><a class=\"markdownIt-Anchor\" href=\"#212-注释\">#</a> 2.1.2 注释</h4>\n<ul>\n<li>C 注释: /*  XXX */</li>\n<li>C++ 注释: //</li>\n</ul>\n<h4 id=\"213-c预处理器和iostream文件\"><a class=\"markdownIt-Anchor\" href=\"#213-c预处理器和iostream文件\">#</a> 2.1.3 C++ 预处理器和 iostream 文件</h4>\n<p>iostream 文件包含了 C++ 中的输入和输出函数 ( <code>cout</code> )</p>\n<h4 id=\"214-头文件\"><a class=\"markdownIt-Anchor\" href=\"#214-头文件\">#</a> 2.1.4 头文件</h4>\n<p>C++ 的头文件不包含 <code>.h</code></p>\n<p>C 头文件转换成 C++ 头文件时，删除后面的 <code>.h</code> , 并且在前面加入一个 c</p>\n<p>例如:  <code>math.h</code>  -&gt;  <code>cmath</code></p>\n<h4 id=\"215-名称空间\"><a class=\"markdownIt-Anchor\" href=\"#215-名称空间\">#</a> 2.1.5 名称空间</h4>\n<p><code>using namespace std</code></p>\n<p>为了避免封装的两个文件中有相同的函数名导致的编译器无法判断使用哪个函数，就可以将函数放入不同的名称空间中</p>\n<p>例如  <code>cout</code>  的全部其实是  <code>std::cout</code>  std 就是一个名称空间 这样保证了函数之间的不混淆性</p>\n<h2 id=\"stl\"><a class=\"markdownIt-Anchor\" href=\"#stl\">#</a> STL</h2>\n<h3 id=\"变长数组vector\"><a class=\"markdownIt-Anchor\" href=\"#变长数组vector\">#</a> 变长数组 vector</h3>\n<p>因为涉及数组的复制操作，变长数组一般要比普通的数组速度慢</p>\n<p>队尾插入删除为 O (1), 队尾插入删除为 O (n);</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;vector&gt;\n//vector自带比较运算  字典序比较\nvector&lt;int&gt; a;  //生成一个长度动态变化的数组\nvector&lt;int&gt; b[233];  //相当于第一维长233，第二维长度动态变化的int数组\nstruct rec{…};\nvector&lt;rec&gt; c;\nvector&lt;int&gt;::iterator i = a.begin() //迭代器 类似于指针 *i 表示值\nfor (int i = 0; i &lt; a.size(); I ++) cout &lt;&lt; a[i] &lt;&lt; endl;\nfor (vector&lt;int&gt;::iterator it = a.begin(); it != a.end(); it ++) cout &lt;&lt; *it &lt;&lt; endl;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"相关函数\"><a class=\"markdownIt-Anchor\" href=\"#相关函数\">#</a> 相关函数</h4>\n<ul>\n<li><code>a.begin()</code> : 返回指向 vector 中第一个元素的迭代器</li>\n<li><code>a.end()</code> :end 函数返回 vector 的尾部，即第 n 个元素再往后的 “边界”</li>\n<li><code>a.clear()</code> : 将变长数组清空</li>\n<li><code>a.font()</code> : 返回 vector 的第一个元素，等价于 <code>*a.begin()</code>  和  <code>a[0]</code> 。</li>\n<li><code>a.back()</code> : 等价于 <code>a[a.size() – 1]</code></li>\n<li><code>a.push_back(x)</code> : 元素 x 插入到 vector a 的尾部。</li>\n<li><code>a.pop_back()</code> : 删除 vector a 的最后一个元素</li>\n</ul>\n<h3 id=\"队列queue\"><a class=\"markdownIt-Anchor\" href=\"#队列queue\">#</a> 队列 queue</h3>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;queue&gt;\nqueue&lt;int&gt; q;\nstruct rec{…}; queue&lt;rec&gt; q; \t//结构体rec中必须定义小于号\npriority_queue&lt;int&gt; q;\t\t// 大根堆 弹出时默认弹出最大值\npriority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt; q;\t// 小根堆 弹出元素时,默认弹出最小值\npriority_queue&lt;pair&lt;int, int&gt;&gt;q;\n//如果结构体使用优先队列 必须进行运算符重载 如下  \nstruct Rec\n{\n    int a,b;\n    bool operator &lt; (const Rec &amp;t) const   //运算符重载  重新定义符号  大根堆重载小于号 小根堆重载大于号\n    {\n        return a&lt;t.a;\n    }\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"相关函数-2\"><a class=\"markdownIt-Anchor\" href=\"#相关函数-2\">#</a> 相关函数</h4>\n<h5 id=\"普通队列\"><a class=\"markdownIt-Anchor\" href=\"#普通队列\">#</a> 普通队列</h5>\n<p>队列，优先队列，栈没有 **clear ()** 函数</p>\n<ul>\n<li><code>q.push(x)</code> : 队尾插入一个 x 元素</li>\n<li><code>q.pop()</code> : 弹出队头元素</li>\n<li><code>q.front()</code> : 返回队头元素</li>\n<li><code>q.back():</code>  返回队尾元素</li>\n</ul>\n<h5 id=\"优先队列\"><a class=\"markdownIt-Anchor\" href=\"#优先队列\">#</a> 优先队列</h5>\n<ul>\n<li><code>q.push(x)</code> : 把元素插入堆</li>\n<li><code>q.pop()</code> : 删除堆顶元素</li>\n<li><code>q.top()</code> : 查询堆顶元素</li>\n</ul>\n<h3 id=\"栈stack\"><a class=\"markdownIt-Anchor\" href=\"#栈stack\">#</a> 栈 stack</h3>\n<p>前进后出</p>\n<ul>\n<li><code>q.push(x)</code> : 把元素插入栈</li>\n<li><code>q.pop()</code> : 删除栈顶元素</li>\n<li><code>q.top()</code> : 返回栈顶元素</li>\n</ul>\n<h3 id=\"双端队列deque\"><a class=\"markdownIt-Anchor\" href=\"#双端队列deque\">#</a> 双端队列 deque</h3>\n<p>双端队列 deque 是一个支持在两端高效插入或删除元素的连续线性存储空间。它就像是 vector 和 queue 的结合。与 vector 相比，deque 在头部增删元素仅需要 O (1) 的时间；与 queue 相比，deque 像数组一样支持随机访问。</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;deque&gt;\ndeque&lt;int&gt; a;\n// vector性质\na.begin();\na.end();\na.front;\na.back()\n//queue性质\na.push_back(1); //从队尾插入\na.push_front(1); // 从队头插入\na.pop_back(); //弹出最后一个元素\na.pop_front(); //弹出第一个元素\na.clear(); //清空队列<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"set\"><a class=\"markdownIt-Anchor\" href=\"#set\">#</a> set</h3>\n<p>头文件 set 主要包括 set 和 multiset 两个容器，分别是 “有序集合” 和 “有序多重集合”，即前者的元素不能重复，而后者可以包含若干个相等的元素。set 和 multiset 的内部实现是一棵红黑树，它们支持的函数基本相同。</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;set&gt;\nset&lt;int&gt; a; //元素不能重复\nset&lt;int&gt;::iterator it = a.begin()  //迭代器 可++或者--; ++为后一个元素 --为前一个元素\na.begin();  //集合开始的位置  O(1)\na.end(); //最后一个元素的后一个位置 O(1)\na.insert(x); //插入一个x  O(logn)\na.find(x); //查找x  找到返回迭代器  没有找到返回a.end();  就可以使用a.find(x) == a.end() 来判断x在a中是否存在      O(logn)\na.lower_bound(x);  //找到大于等于x的最小的元素的迭代器\na.upper_bound(x);  //找到大于x的最小的元素的迭代器\n\na.erase(it);  // 从a中删除迭代器it指向的元素 O（logn） it是一元素,就是从a中删除所有等于it的元素 O(k+logn)\n\na.count(x) // a在x中的个数  O(k+logn)\n    \n\n    \nmultiset&lt;int&gt; a; // 元素可以重复\n//结构同样需要重载运算符\nsize/empty/clear 与vector相同<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"map\"><a class=\"markdownIt-Anchor\" href=\"#map\">#</a> map</h3>\n<p>map 容器是一个键值对 key-value 的映射，其内部实现是一棵以 key 为关键码的红黑树。Map 的 key 和 value 可以是任意类型，其中 key 必须定义小于号运算符。</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;map&gt;\nmap&lt;int,int&gt; a;\na[1] = 2; //插入&lt;1,2&gt; 二元组\ncout &lt;&lt; a[1] &lt;&lt; endl; //返回2\na[\"wxl\"] = 2;  //插入&lt;\"wxl\",2&gt;二元组\ncout &lt;&lt; a[\"wxl\"]  &lt;&lt; endl; //返回2\n//size/empty/clear/begin/end 与set类似\n//insert/erase 与set类似  只是需要传入一个二元组\na.insert({1,2});\na.find(\"wxl\");<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"pair\"><a class=\"markdownIt-Anchor\" href=\"#pair\">#</a> pair</h3>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">pair&lt;int,string&gt; a;\na = {3,\"wxl\"}; //C++ 99不支持\na.make_pair(3,\"wxl\");\n//pair支持比较运算 先比较first 再比较second\ncount &lt;&lt; a.first &lt;&lt; ' ' &lt;&lt; a.second &lt;&lt; endl;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"unordered_set\"><a class=\"markdownIt-Anchor\" href=\"#unordered_set\">#</a> unordered_set</h3>\n<p>无序的 set</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;unordered_set&gt;  //底层逻辑为哈希表\nunordered_set&lt;int&gt;;\nunordered_multiset&lt;int&gt; b; //重复元素\n// 与set函数用法相同 只是没有upper_bound 和 lower_bound 因为unordered_map 是无序的<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"unordered_map\"><a class=\"markdownIt-Anchor\" href=\"#unordered_map\">#</a> unordered_map</h3>\n<p>与 map 一样</p>\n<ul>\n<li>好处: map 的效率为 O (logn),unordered_map 的效率为 O (1);</li>\n<li>坏处:unordered_map 不支持二分</li>\n</ul>\n<h3 id=\"bitset\"><a class=\"markdownIt-Anchor\" href=\"#bitset\">#</a> bitset</h3>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;bitset&gt;   //用于位运算 不常用\n\nbitset&lt;长度&gt; a;   //为0,1串  没有赋值就为0\na[0] = 1\na.count();  //返回1的个数\na.set(下标); // 将a[下标]设成1\na.reset(下标);  // 将a[下标]设成0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"\"><a class=\"markdownIt-Anchor\" href=\"#\">#</a> </h3>\n",
            "tags": [
                "C语言"
            ]
        },
        {
            "id": "https://github.com/YogMas/YogMas.github.io/2022/07/10/python/",
            "url": "https://github.com/YogMas/YogMas.github.io/2022/07/10/python/",
            "title": "python",
            "date_published": "2022-07-09T16:00:00.000Z",
            "content_html": "<h1 id=\"python\"><a class=\"markdownIt-Anchor\" href=\"#python\">#</a> Python</h1>\n<p>The article made by  <code>Yogmas</code>  on 2022/7/08</p>\n<h2 id=\"变量和字符串\"><a class=\"markdownIt-Anchor\" href=\"#变量和字符串\">#</a> 变量和字符串</h2>\n<h3 id=\"变量\"><a class=\"markdownIt-Anchor\" href=\"#变量\">#</a> 变量</h3>\n<ul>\n<li>变量名由字母，数字和下划线组成</li>\n<li>不能以数字开头</li>\n<li>区分大小写</li>\n<li>python3 变量名支持中文字符</li>\n</ul>\n<p>变量值交换:  <code>x,y = y,x</code> (python)</p>\n<p><code>_</code> 单独一个下划线可以用来表示临时变量</p>\n<h3 id=\"字符串\"><a class=\"markdownIt-Anchor\" href=\"#字符串\">#</a> 字符串</h3>\n<ul>\n<li>\n<p>单引号模式</p>\n</li>\n<li>\n<p>双引号模式</p>\n</li>\n<li>\n<p>三引号模式 (三单或三双都可)- 长字符串</p>\n<p>在长字符串中不需要运用换行符进行换行，代码中的换行就相当于换行符</p>\n</li>\n</ul>\n<p>单引号和双引号互相灵活应用，防止冲突</p>\n<p>冲突不可避免的时候可以使用转义字符</p>\n<h4 id=\"转义字符\"><a class=\"markdownIt-Anchor\" href=\"#转义字符\">#</a> 转义字符</h4>\n<p><a href=\"https://imgtu.com/i/j0bPlq\"><img src=\"https://s1.ax1x.com/2022/07/08/j0bPlq.png\" alt=\"转义字符\"></a></p>\n<p>原始字符串：在字符串前面加上一个 <code>r</code>  表示该字符串是原始字符串，这样在此字符串中就不会产生转义字符</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D:\\three\\two\\one\\now\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#\\t \\t \\o \\n 将会被当成转义字符输出</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">r\"D:\\three\\two\\one\\now\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#将会按照原始字符串输出</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><code>\\</code>  不能放在字符串的末尾</p>\n<h4 id=\"字符串的加法和乘法\"><a class=\"markdownIt-Anchor\" href=\"#字符串的加法和乘法\">#</a> 字符串的加法和乘法</h4>\n<p>字符串是<strong>文本</strong></p>\n<ol>\n<li>字符串的加法就是对文本进行拼接</li>\n<li>字符串的乘法就是对文本就行复制粘贴</li>\n</ol>\n<h3 id=\"运算符\"><a class=\"markdownIt-Anchor\" href=\"#运算符\">#</a> 运算符</h3>\n<h4 id=\"比较运算符\"><a class=\"markdownIt-Anchor\" href=\"#比较运算符\">#</a> 比较运算符</h4>\n<p><a href=\"https://imgtu.com/i/j0bHN4\"><img src=\"https://s1.ax1x.com/2022/07/08/j0bHN4.png\" alt=\"比较运算符\"></a></p>\n<h4 id=\"逻辑运算符\"><a class=\"markdownIt-Anchor\" href=\"#逻辑运算符\">#</a> 逻辑运算符</h4>\n<p><a href=\"https://imgtu.com/i/jfd6KO\"><img src=\"https://s1.ax1x.com/2022/07/14/jfd6KO.png\" alt=\"逻辑运算符\"></a></p>\n<p>python 的操作数支持真值运算，如果给到的是两个数，那么最后得到的就不会是 <code>True</code>  和 <code>False</code>  而是一个数</p>\n<h4 id=\"运算符优先级\"><a class=\"markdownIt-Anchor\" href=\"#运算符优先级\">#</a> 运算符优先级</h4>\n<p><a href=\"https://imgtu.com/i/jfwlee\"><img src=\"https://s1.ax1x.com/2022/07/14/jfwlee.png\" alt=\"运算符优先级\"></a></p>\n<h4 id=\"短路逻辑运算\"><a class=\"markdownIt-Anchor\" href=\"#短路逻辑运算\">#</a> 短路逻辑运算</h4>\n<p>从左往右，当第一个操作数的值无法确定逻辑运算的结果时，才对第二个操作数进行求值</p>\n<p>eg: 3 or 4 = 3     3 and 4 = 4          0 and 3 = 0</p>\n<h4 id=\"is运算符同一性运算符\"><a class=\"markdownIt-Anchor\" href=\"#is运算符同一性运算符\">#</a> is 运算符 (同一性运算符)</h4>\n<p>检验两个元素是否指向同一个对象</p>\n<h4 id=\"in运算符\"><a class=\"markdownIt-Anchor\" href=\"#in运算符\">#</a> in 运算符</h4>\n<p>判断某个元素是否包含在序列中</p>\n<h4 id=\"del语句\"><a class=\"markdownIt-Anchor\" href=\"#del语句\">#</a> del 语句</h4>\n<p>用于删除一个或多个指定的对象</p>\n<h2 id=\"python模块\"><a class=\"markdownIt-Anchor\" href=\"#python模块\">#</a> python 模块</h2>\n<h3 id=\"随机数-random\"><a class=\"markdownIt-Anchor\" href=\"#随机数-random\">#</a> 随机数 random</h3>\n<p>import random</p>\n<ul>\n<li>random.randint(x,y)</li>\n<li>random.getstate () 获取随机数种子</li>\n<li>random.setstate (x) 设置随机数种子</li>\n</ul>\n<h3 id=\"十进制-decimal\"><a class=\"markdownIt-Anchor\" href=\"#十进制-decimal\">#</a> 十进制 decimal</h3>\n<p>用于精确计算浮点数的相加</p>\n<ul>\n<li>a = decimal.Decimal(’ 0.1 ')</li>\n</ul>\n<h2 id=\"数字类型\"><a class=\"markdownIt-Anchor\" href=\"#数字类型\">#</a> 数字类型</h2>\n<h3 id=\"整数\"><a class=\"markdownIt-Anchor\" href=\"#整数\">#</a> 整数</h3>\n<p>python 的整数长度不受限制有<strong>无限大的精度</strong></p>\n<p>整数相除会产生浮点数的结果</p>\n<h3 id=\"浮点数\"><a class=\"markdownIt-Anchor\" href=\"#浮点数\">#</a> 浮点数</h3>\n<p>浮点数具有精度上的误差  精确计算查看上文<strong> decimal</strong></p>\n<p>eg. 0.1 + 0.2 != 0.3</p>\n<p>浮点数也可以用可以用科学计数法来表示</p>\n<p>eg 5e-05</p>\n<h3 id=\"复数\"><a class=\"markdownIt-Anchor\" href=\"#复数\">#</a> 复数</h3>\n<p>x + yj</p>\n<p>x 是实部，y 是虚部</p>\n<p>复数的实部和虚部都是以浮点数的形式存储的</p>\n<ul>\n<li>x.real 获取实部数值</li>\n<li>x.imag 获取虚部数值</li>\n</ul>\n<h3 id=\"数字运算\"><a class=\"markdownIt-Anchor\" href=\"#数字运算\">#</a> 数字运算</h3>\n<p><a href=\"https://imgtu.com/i/jgpCct\"><img src=\"https://s1.ax1x.com/2022/07/12/jgpCct.png\" alt=\"数字运算\"></a></p>\n<ul>\n<li><code>//</code> (地板除): 将除法的结果向下取整</li>\n<li><code>divmod</code>  (内置函数): <code>divmod(x,y)</code>  返回 <code>x//y</code> , <code>x%y</code> , 等于求出商和 余数</li>\n<li><code>abs()</code> : 返回绝对值，传入复数，返回<strong>复数的模</strong></li>\n<li><code>pow(x,y,z)</code> : <code>pow(x,y,z)</code> =x**y %z</li>\n</ul>\n<h3 id=\"布尔类型\"><a class=\"markdownIt-Anchor\" href=\"#布尔类型\">#</a> 布尔类型</h3>\n<ul>\n<li>空字符串是 False, 其他全是 True</li>\n<li>0 是 False 其他都是 True</li>\n</ul>\n<p><a href=\"https://imgtu.com/i/jfdmDg\"><img src=\"https://s1.ax1x.com/2022/07/14/jfdmDg.png\" alt=\"布尔\"></a></p>\n<p><code>Fraction(0,1)</code>  表示分子是 0, 分母是 1 的分数</p>\n<p>布尔类型就是特殊的整数类型</p>\n<p>True = 1,False = 0</p>\n<h2 id=\"分支与循环\"><a class=\"markdownIt-Anchor\" href=\"#分支与循环\">#</a> 分支与循环</h2>\n<h3 id=\"分支\"><a class=\"markdownIt-Anchor\" href=\"#分支\">#</a> 分支</h3>\n<h4 id=\"if语句\"><a class=\"markdownIt-Anchor\" href=\"#if语句\">#</a> if 语句</h4>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">if</span> 判断语句<span class=\"token punctuation\">:</span>\n    执行语句\n<span class=\"token keyword\">elif</span> 判断语句<span class=\"token punctuation\">:</span>\n    执行语句\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    执行语句<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"条件表达式\"><a class=\"markdownIt-Anchor\" href=\"#条件表达式\">#</a> 条件表达式</h5>\n<p><code>执行语句 if 判断语句 else 执行语句</code></p>\n<p>可以用小括号将多行的代码括起来表示这是一行代码</p>\n<h3 id=\"循环\"><a class=\"markdownIt-Anchor\" href=\"#循环\">#</a> 循环</h3>\n<h4 id=\"while循环\"><a class=\"markdownIt-Anchor\" href=\"#while循环\">#</a> while 循环</h4>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">while</span> condition<span class=\"token punctuation\">:</span> \n    statement\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n   <span class=\"token comment\">#else可以不用,else在while条件不成立的时候执行,当while是由于break语句跳出的时候不执行,适用于区分任务连续完成和中断的情况</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li><code>break</code>  语句用于跳出循环</li>\n<li><code>continue</code>  用于结束本次循环，继续判断下一次循环的条件，相当于直接跳到本次循环体的最后一句代码的后面</li>\n<li><code>break</code>  和 <code>continue</code>  都只能跳出一层循环体</li>\n</ul>\n<h4 id=\"for循环\"><a class=\"markdownIt-Anchor\" href=\"#for循环\">#</a> for 循环</h4>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">for</span> 变量 <span class=\"token keyword\">in</span> 可迭代对象<span class=\"token punctuation\">:</span>\n    statement<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h5 id=\"range函数\"><a class=\"markdownIt-Anchor\" href=\"#range函数\">#</a>  <code>range</code>  函数</h5>\n<ul>\n<li><code>range(stop)</code>  生成从 **[0,stop)** 的整数序列</li>\n<li><code>range(start,stop)</code>  生成从 **[start,stop)** 的整数数列</li>\n<li><code>range(start,stop,step)</code>  生成从 **[start,stop)<strong> 的整数数列，可以指定</strong> step** 跨度</li>\n</ul>\n<h2 id=\"列表\"><a class=\"markdownIt-Anchor\" href=\"#列表\">#</a> 列表</h2>\n<p>python 的列表可以容纳不同数据类型的数据</p>\n<p>列表是可变的，字符串是不可变的</p>\n<h3 id=\"创建列表\"><a class=\"markdownIt-Anchor\" href=\"#创建列表\">#</a> 创建列表</h3>\n<ul>\n<li><code>[1,2,3,4,5,\"勇敢的sam\"]</code>  使用中括号创建列表</li>\n<li>利用列表推导式:  <code>S = [ [0] * 3 for i in range(3)]</code></li>\n</ul>\n<h3 id=\"访问列表\"><a class=\"markdownIt-Anchor\" href=\"#访问列表\">#</a> 访问列表</h3>\n<p>采用<strong>下标索引</strong>访问列表，</p>\n<ul>\n<li>正向访问:python 的下标索引从<strong> 0</strong> 开始，依次递增</li>\n<li>逆向访问:python 下标索引可以从后往前访问，从 **-1** 开始依次递减</li>\n</ul>\n<h3 id=\"列表切片\"><a class=\"markdownIt-Anchor\" href=\"#列表切片\">#</a> 列表切片</h3>\n<ul>\n<li><code>Name[start:end]</code>  从 <code>Name[start]</code>  到 <code>Name[end-1]</code>  的列表元素</li>\n<li><code>Name[:end]</code>  从头到 <code>Name[end -1]</code></li>\n<li><code>Name[start:]</code>  从 <code>Name[start]</code>  到列表末尾</li>\n<li><code>Name[:]</code>  表示列表中的全部元素</li>\n<li><code>Name[start:end:step]</code>  可以设置 step 跨度值，当 step 为负值的时候，表示从列表最后一个元素开始倒着输出</li>\n<li><code>Name[::-1]</code> : 直接将列表反转</li>\n</ul>\n<h3 id=\"列表的多种方法\"><a class=\"markdownIt-Anchor\" href=\"#列表的多种方法\">#</a> 列表的多种方法</h3>\n<h4 id=\"增加\"><a class=\"markdownIt-Anchor\" href=\"#增加\">#</a> 增加</h4>\n<ul>\n<li><code>Name.append()</code> : 在列表的末尾添加指定元素，但是每次只能添加一个元素</li>\n<li><code>Name.extend()</code> : 在列表的末尾添加一个可迭代对象，与 <code>append</code>  相比可以同时添加多个元素</li>\n<li>通过切片实现:\n<ul>\n<li>实现 <code>append()</code> : Name[len(Name):] = XXX</li>\n<li>实现  <code>extend()</code> :Name[len(Name):] = [x,y,z]</li>\n</ul>\n</li>\n<li><code>Name.insert(x,y)</code> :x 为待插入的位置，y 为待插入的元素</li>\n</ul>\n<h4 id=\"删除\"><a class=\"markdownIt-Anchor\" href=\"#删除\">#</a> 删除</h4>\n<ul>\n<li><code>Name.remove(元素值)</code> : 指定删除一个元素\n<ol>\n<li>如果列表中有多个相同元素 只会删除第一个元素</li>\n<li>如果元素不存在，程序则会报错</li>\n</ol>\n</li>\n<li><code>Name.pop(下标索引值)</code> : 删除下标索引值上的元素</li>\n<li><code>Name.clear()</code> : 直接清空列表中的所有元素</li>\n</ul>\n<h4 id=\"修改\"><a class=\"markdownIt-Anchor\" href=\"#修改\">#</a> 修改</h4>\n<ul>\n<li><code>Name[下标索引值] = X</code></li>\n<li><code>Name.sort()</code> : 将列表从小到大进行排序 在括号中加上 <code>reverse = True</code> , 就可以实现从大到下排序</li>\n<li><code>Name.reverse()</code> : 将列表中的元素顺序进行翻转</li>\n</ul>\n<h4 id=\"查找\"><a class=\"markdownIt-Anchor\" href=\"#查找\">#</a> 查找</h4>\n<ul>\n<li>\n<p><code>Name.count(元素值)</code> : 查找某个元素值在列表中有多少个</p>\n</li>\n<li>\n<p><code>Name.index(元素值,start,end)</code> : 查找 start 到 end 区间某个元素的下标索引值，有多个值时返回第一个</p>\n<p>eg:  <code>Name[Name.index(\"zzz\")] = \"zgg\"</code></p>\n</li>\n<li>\n<p><code>Name.copy()</code> : 对列表进行拷贝</p>\n</li>\n</ul>\n<h4 id=\"计算\"><a class=\"markdownIt-Anchor\" href=\"#计算\">#</a> 计算</h4>\n<p>加法：将两个列表中的元素进行拼接</p>\n<p>乘法：将一个列表中的元素重复若干次</p>\n<h3 id=\"嵌套列表多维列表\"><a class=\"markdownIt-Anchor\" href=\"#嵌套列表多维列表\">#</a> 嵌套列表 (多维列表)</h3>\n<p><code>[[x,y,z],[a,b,c],[e,f,d]]</code></p>\n<p>相同的列表元素，python 也会开辟不同的空间来存储列表元素，因为列表是可变的</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">A  <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token number\">3</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    A<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token number\">3</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"深拷贝与浅拷贝\"><a class=\"markdownIt-Anchor\" href=\"#深拷贝与浅拷贝\">#</a> 深拷贝与浅拷贝</h3>\n<p>变量的赋值 仅仅是将存储内容的地址引用到变量上</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\nb <span class=\"token operator\">=</span> a \na<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\nb <span class=\"token operator\">=</span> ? <span class=\"token comment\">#b会等于[1,1,3] 并不是将数据复制了过去,而是将这一团数据的引用给了b,本质上还是同一个存储数据的地方</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"浅拷贝\"><a class=\"markdownIt-Anchor\" href=\"#浅拷贝\">#</a> 浅拷贝</h4>\n<ul>\n<li><code>Name.copy()</code> : 列表的 copy 方法</li>\n<li>先导入 copy 模块  <code>y = copy.copy(x)</code></li>\n<li>应用列表切片</li>\n</ul>\n<h4 id=\"深拷贝\"><a class=\"markdownIt-Anchor\" href=\"#深拷贝\">#</a> 深拷贝</h4>\n<p>浅拷贝只会拷贝最外层，拷贝内层数据的时候也只会拷贝引用，所以对于嵌套列表等等就需要深拷贝来进行拷贝</p>\n<ul>\n<li>先导入 copy 模块  <code>y = copy.deepcopy(x)</code></li>\n</ul>\n<h3 id=\"列表推导式\"><a class=\"markdownIt-Anchor\" href=\"#列表推导式\">#</a> 列表推导式</h3>\n<p>列表推导式的效率比循环语句一般会快上一倍左右</p>\n<ol>\n<li><code>[expression for target in iterable]</code></li>\n<li><code>[expresssion for target in iterable if condition]</code>  先执行 for 语句，然后进行 if 语句的判断，最后进行插入</li>\n<li>列表推导式的嵌套: <code>[expression for target in iterable1 for target in iterable2 for target in iterable3]</code>  嵌套中放在前面的是外层前套，从前往后依次嵌套</li>\n</ol>\n<p><code>ord()</code> : 内置函数，将字符转化为对应的编码</p>\n<h2 id=\"元组\"><a class=\"markdownIt-Anchor\" href=\"#元组\">#</a> 元组</h2>\n<p>元组拥有列表的性质，且元组不可修改、</p>\n<p>元组中的元素不可变，但是元组的元素如果是可变的列表，我们可以修改列表中的值</p>\n<p><code>a = (1,2,3,4,5)</code></p>\n<p><strong>没有元组推导式的存在</strong></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">x <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">520</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#此时x是int变量</span>\nx <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">520</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#此时x是只有一个元素的元组</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h3 id=\"打包和解包\"><a class=\"markdownIt-Anchor\" href=\"#打包和解包\">#</a> 打包和解包</h3>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">code <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"sam\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"zgg\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#打包</span>\nx<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span>z <span class=\"token operator\">=</span> code <span class=\"token comment\">#解包 左侧变量数量必须等于右侧的元素数量</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h2 id=\"字符串-2\"><a class=\"markdownIt-Anchor\" href=\"#字符串-2\">#</a> 字符串</h2>\n<p>字符串是不可改变的</p>\n<h3 id=\"字符串方法\"><a class=\"markdownIt-Anchor\" href=\"#字符串方法\">#</a> 字符串方法</h3>\n<p>因为字符串不可变，所以下列方法的实质是按照规则生成新的字符串再重新赋值</p>\n<h4 id=\"更改大小写字母\"><a class=\"markdownIt-Anchor\" href=\"#更改大小写字母\">#</a> 更改大小写字母</h4>\n<ul>\n<li><code>x.capitalize()</code> : 首字母变成大写，其他变成小写</li>\n<li><code>x.casefold()</code> : 将所有字符串变成小写，可以处理多语言</li>\n<li><code>x.title()</code> : 字符串中<strong>每个单词</strong>的首字母变成大写，其他的变成小写</li>\n<li><code>x.swapcase()</code> : 进行大小写字母的翻转</li>\n<li><code>x.upper()</code> : 所有字母变成大写</li>\n<li><code>x.lower()</code> : 所有字母变成小写，只能处理英语</li>\n</ul>\n<h4 id=\"左中右对齐\"><a class=\"markdownIt-Anchor\" href=\"#左中右对齐\">#</a> 左中右对齐</h4>\n<p>拥有参数 <code>width</code>  代表填充过后的字符串长度，如果该参数小于原字符串的长度，就会输出原字符串</p>\n<p><code>fillchar</code> : 填充字符</p>\n<ul>\n<li><code>x.center(width,fillchar):</code>  实现居中，默认用空格填充</li>\n<li><code>x.ljust(width,fillchar)</code> : 实现左对齐，默认用空格填充</li>\n<li><code>x.rjust(width,fillchar)</code> : 实现右对齐，默认用空格填充</li>\n<li><code>x.zfill(width,fillchar)</code> : 实现左对齐，默认用 <code>0</code>  填充</li>\n</ul>\n<h4 id=\"查找-2\"><a class=\"markdownIt-Anchor\" href=\"#查找-2\">#</a> 查找</h4>\n<ul>\n<li><code>x.count(sub[],start,end)</code> : 在 x 字符串的 start~end 段查找 sub 字符串出现的次数</li>\n<li><code>x.find(sub[],start,end)</code> : 查找目标字符串在 x 字符串的 start 到 end 段的下标索引值，<strong> 从左到右查找</strong>，找不到目标字符串返回 **-1**</li>\n<li><code>x.rfind(sub[],start,end)</code> : 查找目标字符串在 x 字符串的 start 到 end 段的下标索引值，<strong> 从右到左查找</strong>，找不到目标字符串返回 **-1**</li>\n<li><code>x.index(sub[],start,end)</code> ：与 <code>find</code>  的用法相同，找不到目标字符串报错</li>\n<li><code>x.rindex(sub[],start,end)</code> : 与 <code>rfind</code>  的用法相同，找不到目标字符串报错</li>\n</ul>\n<h4 id=\"替换\"><a class=\"markdownIt-Anchor\" href=\"#替换\">#</a> 替换</h4>\n<ul>\n<li><code>x.expandtabs(X)</code> : 将字符串中的 <code>tab</code>  替换成<strong>空格</strong>，X 为指定的空格数</li>\n<li><code>x.replace(old,new,count = -1)</code> : 将 <code>old</code>  字符串替换成 <code>new</code>  字符串 count 为替换次数 默认为无限次</li>\n<li><code>x.translate(table)</code> : 按照转换表格进行替换</li>\n<li><code>x.str.maketrans(待转换字符串,目标字符串,需要忽略的字符串)</code> : 生成转换表格 <code>table</code></li>\n</ul>\n<h4 id=\"判断\"><a class=\"markdownIt-Anchor\" href=\"#判断\">#</a> 判断</h4>\n<ul>\n<li><code>x.startswith(prefix[],start,end)</code> : 判断 prefix 字符串是否出现在目标字符串 start~end 的起始位置，可以通过<strong>元组</strong>传入多个待匹配字符串，只要有一个成功返回 True</li>\n<li><code>x.endswith(suffix[],start,end)</code> : 判断 prefix 字符串是否出现在目标字符串 start~end 的终止位置，可以通过<strong>元组</strong>传入多个待匹配字符串，只要有一个成功返回 True</li>\n<li><code>x.istitle()</code>  判断字符串中是否每个单词的首字母都大写</li>\n<li><code>x.isupper()</code> : 判断字符串中是否每个字母都大写</li>\n<li><code>x.islower()</code> : 判断字符串中是否每个字母都小写</li>\n<li><code>x.isalpha()</code> : 判断该字符串是否全部由字母构成，<strong> 空格不算字母</strong></li>\n<li><code>x.isspace()</code> : 判断该字符串是否是<strong>空白字符串</strong></li>\n<li><code>x.isprintable()</code> : 判断字符串中是否都是可打印的，<strong> 转义字符是不可打印的</strong></li>\n<li><code>x.isdecimal()</code> ：判断是否为数字，必须是纯数字</li>\n<li><code>x.isdigit()</code> ：判断是否为数字，可以是 2² 这种计算式</li>\n<li><code>x.isnumeric()</code> ：判断是否为数字，支持多种语言的数字</li>\n<li><code>x.isalnum()</code> : <code>x.isalpha()</code> , <code>x.isdecimal()</code> , <code>x.isdigit()</code> , <code>x.isnumeric()</code> , 四者有一个返回 True, 该函数就返回 True</li>\n<li><code>x.isidentifier()</code> : 判断字符串是否为一个合法的 python 标识符</li>\n<li>keyword 模块中的 <code>iskeyword()</code> : 判断该字符串是否为 python 的<strong>保留标志符</strong></li>\n</ul>\n<h4 id=\"截取\"><a class=\"markdownIt-Anchor\" href=\"#截取\">#</a> 截取</h4>\n<ul>\n<li><code>x.lstrip(chars =None)</code> : 去除左侧的字符（默认为空格）, 逐一匹配字符串中的字符</li>\n<li><code>x.rstrip(chars =None)</code> : 去除右侧的字符（默认为空格）, 逐一匹配字符串中的字符</li>\n<li><code>x.strip(chars =None)</code> : 去除左右的字符（默认为空格）, 逐一匹配字符串中的字符</li>\n<li><code>x.removeprefix(prefix)</code> : 指定删除前缀，匹配整个字符串而不是单个字符</li>\n<li><code>x.removesuffix(suffix)</code> : 指定删除后缀，匹配整个字符串而不是单个字符</li>\n</ul>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">x <span class=\"token operator\">=</span> <span class=\"token string\">\"      zylzhuyilong\"</span>\nx<span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token string\">\" z\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#逐一匹配 答案为ylzhuyilong</span>\nx<span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">#默认为空格答案为zylzhuyilong</span>\nx <span class=\"token operator\">=</span> <span class=\"token string\">\"www.wbaidu.com\"</span>\nx<span class=\"token punctuation\">.</span>removeprefix<span class=\"token punctuation\">(</span><span class=\"token string\">\"www.\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#不逐一匹配字符,直接匹配字符串 答案为wbaidu.com</span>\nx<span class=\"token punctuation\">.</span>removesuffix<span class=\"token punctuation\">(</span><span class=\"token string\">\".com\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#同理 答案是www.wbaidu</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"拆分和拼接\"><a class=\"markdownIt-Anchor\" href=\"#拆分和拼接\">#</a> 拆分和拼接</h4>\n<h5 id=\"拆分\"><a class=\"markdownIt-Anchor\" href=\"#拆分\">#</a> 拆分</h5>\n<ul>\n<li><code>x.partition(seq)</code> : 将字符串指定字符为分割切割字符串 返回一个<strong>三元组</strong>，从<strong>左到右</strong>寻找指定字符，以第一个为准</li>\n<li><code>x.rpartition(seq)</code> : 将字符串指定字符为分割切割字符串 返回一个<strong>三元组</strong>，从<strong>右到左</strong>寻找指定字符，以第一个为准</li>\n<li><code>x.split(seq = None,maxsplit = -1)</code> : 以指定字符为分割进行拆分，以列表形式返回</li>\n<li><code>x.rsplit(seq = None,maxsplit = -1)</code> : 与 <code>split</code>  相同，为<strong>从右往左</strong></li>\n<li><code>x.splitlines(keepend = False)</code>  将字符串进行分行，以列表形式返回， <code>keepend</code>  指定结果是否包含换行符</li>\n</ul>\n<h5 id=\"拼接\"><a class=\"markdownIt-Anchor\" href=\"#拼接\">#</a> 拼接</h5>\n<ul>\n<li><code>join(iterable)</code> : 用于字符串拼接， <code>join</code>  方法拼接的效率大于 <code>+</code>  拼接</li>\n</ul>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token string\">\".\"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"F\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"C\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#结果为A.F.C 可以使用列表也可以使用元组</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"格式化字符串\"><a class=\"markdownIt-Anchor\" href=\"#格式化字符串\">#</a> 格式化字符串</h3>\n<p><code>{关键字索引:格式化选项}.format()</code> : 在原字符串中使用 <code>{}</code>  来表示替换部分，使用 <code>format</code>  方法来替换</p>\n<p>格式化选项: <code>[[fill]align][sign][#][0][width][grouping_option][.precision][type]</code></p>\n<ul>\n<li><code>fill</code> : 填充字符</li>\n<li><code>align</code> : 对齐方式</li>\n<li><code>sign</code> : 前面添加的符号</li>\n<li><code>#</code> ：在显示进制时，会在数前面追加一个前缀<strong> 0x</strong> 类似的来提醒这是什么进制的数</li>\n<li><code>0</code> : 以 0 填充</li>\n<li><code>width</code> : 格式化宽度</li>\n<li><code>grouping_option</code> : 使用什么符号来做千位的分隔符 (逗号和下划线两个选项)</li>\n<li><code>.precision</code> : 精度</li>\n<li><code>type</code> : 以什么形式输出值</li>\n</ul>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">age <span class=\"token operator\">=</span> <span class=\"token builtin\">eval</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"你的年龄是\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nname <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"你的名字是\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"你的年龄是{},你的名字是{}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"你的年龄是{1},你的名字是{0}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我叫{name},我爱{people}.format(name = \"</span>wxl<span class=\"token string\">\",people = \"</span><span class=\"token operator\">-</span><span class=\"token punctuation\">.</span><span class=\"token operator\">-</span>\"<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><a href=\"https://imgtu.com/i/jIyhAP\"><img src=\"https://s1.ax1x.com/2022/07/18/jIyhAP.png\" alt=\"align.png\"></a></p>\n<p><a href=\"https://imgtu.com/i/jIy4tf\"><img src=\"https://s1.ax1x.com/2022/07/18/jIy4tf.png\" alt=\"sign.png\"></a></p>\n<p><a href=\"https://imgtu.com/i/jIy5h8\"><img src=\"https://s1.ax1x.com/2022/07/18/jIy5h8.png\" alt=\"精度\"></a></p>\n<p><a href=\"https://imgtu.com/i/jIyT1g\"><img src=\"https://s1.ax1x.com/2022/07/18/jIyT1g.png\" alt=\"type1\"></a></p>\n<p><a href=\"https://imgtu.com/i/jIyqns\"><img src=\"https://s1.ax1x.com/2022/07/18/jIyqns.png\" alt=\"type2.png\"></a></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token string\">\"{:^10}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token number\">250</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#输出为'     250    '</span>\n<span class=\"token string\">\"{left:&gt;10}{right:&lt;10}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>left <span class=\"token operator\">=</span> <span class=\"token number\">250</span><span class=\"token punctuation\">,</span>right <span class=\"token operator\">=</span> <span class=\"token number\">250</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#输出为 '    250250     '</span>\n<span class=\"token string\">\"{:.2f}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token number\">3.1415</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 显示结果为3.14</span>\n<span class=\"token string\">\"{:.2g}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token number\">3.1415</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 显示结果为3.1</span>\n<span class=\"token string\">\"{:b}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token number\">80</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">#结果以二进制输出为1010000</span>\n<span class=\"token string\">\"{:.{prec}f}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token number\">3.1415</span><span class=\"token punctuation\">,</span>prec <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#输出为3.14 更加地灵活</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"f-字符串\"><a class=\"markdownIt-Anchor\" href=\"#f-字符串\">#</a> f - 字符串</h3>\n<p>python3.6 以上可以使用</p>\n<p>进一步简化了格式化字符串</p>\n<p>在字符串前面加上 f 或者 F 将 format 去掉，将 format 的数值放在:<strong> 左侧</strong></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token string\">\"我今天{}岁了\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span>\n<span class=\"token string-interpolation\"><span class=\"token string\">f\"我今天</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>age<span class=\"token punctuation\">}</span></span><span class=\"token string\">岁了\"</span></span>\n<span class=\"token string\">\"{:.2f}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token number\">3.1415</span><span class=\"token punctuation\">)</span>\n<span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token number\">3.1415</span><span class=\"token punctuation\">:</span><span class=\"token format-spec\">.2f</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"序列\"><a class=\"markdownIt-Anchor\" href=\"#序列\">#</a> 序列</h2>\n<p>列表，元组，字符串统称为<strong>序列</strong></p>\n<p>运用在序列中的运算符: <code>+</code> ， <code>*</code></p>\n<h3 id=\"与序列相关的函数\"><a class=\"markdownIt-Anchor\" href=\"#与序列相关的函数\">#</a> 与序列相关的函数</h3>\n<h4 id=\"列表元组字符串相互转换\"><a class=\"markdownIt-Anchor\" href=\"#列表元组字符串相互转换\">#</a> 列表元组字符串相互转换</h4>\n<ul>\n<li><code>list()</code> : 将可迭代对象变为列表</li>\n<li><code>tuple()</code> : 将可迭代对象变为元组</li>\n<li><code>str()</code> : 将可迭代对象变为字符串</li>\n</ul>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sam\"</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">#结果为['s','a','m']</span>\n<span class=\"token builtin\">tuple</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sam\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># ('s','a','m')</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h4 id=\"minmax函数\"><a class=\"markdownIt-Anchor\" href=\"#minmax函数\">#</a> min&amp;max 函数</h4>\n<p>对比传入的参数返回最大最小值</p>\n<ul>\n<li><code>min(可迭代对象,default = \"\")</code> : 当没有参数传入时，返回 default 也可以直接传入参数</li>\n</ul>\n<h4 id=\"len和sum\"><a class=\"markdownIt-Anchor\" href=\"#len和sum\">#</a> len 和 sum</h4>\n<ul>\n<li><code>len()</code> : 检测长度 有最大值限制</li>\n<li><code>sum(，start = )</code> : 求和函数，start 可以传入初始值</li>\n</ul>\n<h4 id=\"sorted-reversed\"><a class=\"markdownIt-Anchor\" href=\"#sorted-reversed\">#</a> sorted() &amp; reversed()</h4>\n<ul>\n<li><code>sorted(x，key,reverse)</code> : 排序，返回的是一个全新的列表，.sort () 返回会改变原列表</li>\n<li><code>reversed()</code> : 返回的是一个迭代器</li>\n</ul>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">t <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'ab'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'abcd'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'ab'</span><span class=\"token punctuation\">]</span>\n<span class=\"token builtin\">sorted</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span>key <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#比较的是len()函数的返回结果</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h4 id=\"all和any\"><a class=\"markdownIt-Anchor\" href=\"#all和any\">#</a> all () 和 any ()</h4>\n<ul>\n<li><code>all()</code> : 判断可迭代对象中是否<u>所有</u>的值都为真</li>\n<li><code>any()</code> : 判断可迭代对象中是否存在<u>某个元素</u>的值为真</li>\n</ul>\n<h4 id=\"enumerate\"><a class=\"markdownIt-Anchor\" href=\"#enumerate\">#</a> enumerate()</h4>\n<p>返回一个枚举对象，将可迭代对象中的每个元素及从 0 开始的序号共同构成一个二元组的列表</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">seasons <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"spring\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"summer\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Fall\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Winter\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>seasons<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#返回的结果为 [(0, 'spring'), (1, 'summer'), (2, 'Fall'), (3, 'Winter')]</span>\n<span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>seasons<span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#返回的结果为[(10, 'spring'), (11, 'summer'), (12, 'Fall'), (13, 'Winter')]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"zip\"><a class=\"markdownIt-Anchor\" href=\"#zip\">#</a> zip()</h4>\n<p>创建一个聚合多个可迭代对象的<strong>迭代器</strong>，它会将作为参数传入的每个可迭代对象的每个元素依次组合成元组，即第 i 个元组包含来自每个参数的第 i 个元素</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">x <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\ny <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span>\n<span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 返回的结果是[(1,4),(2,5),(3,6)]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>当传入的列表长度不一致时，zip 函数以最短的列表长度为准</p>\n<h4 id=\"map\"><a class=\"markdownIt-Anchor\" href=\"#map\">#</a> map()</h4>\n<p>根据提供的函数对指定的可迭代对象的每个元素进行运算，并将返回运算结果的<strong>迭代器</strong></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">ord</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Sam\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token comment\">#会将sam字符串(可迭代对象)中的每个字符运用ord()函数转换成编码值</span>\n<span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">pow</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#结果为[32,9,1000]</span>\n<span class=\"token comment\">#因为pow()函数需要两个参数</span>\n<span class=\"token comment\">#传入的可迭代对象长度不一致时,按最短的为准</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"filter过滤器\"><a class=\"markdownIt-Anchor\" href=\"#filter过滤器\">#</a> filter () 过滤器</h4>\n<p>根据提供的函数对指定的可迭代对象的每个元素进行运算，并将运算结果为真的元素，以<strong>迭代器</strong>的形式返回</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">.</span>islower<span class=\"token punctuation\">,</span><span class=\"token string\">\"Sam\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#islower判断是否为小写字母,返回为真的结果 为['a','m]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"iter\"><a class=\"markdownIt-Anchor\" href=\"#iter\">#</a> iter()</h4>\n<p>将可迭代函数转化成迭代器</p>\n<h4 id=\"nextx\"><a class=\"markdownIt-Anchor\" href=\"#nextx\">#</a> next(x,\"    \")</h4>\n<p>逐渐将迭代器中的元素提取出来，可以传入第二个参数，当迭代器中的元素被提取完了之后将会返回第二个参数字符串</p>\n<h3 id=\"迭代器与可迭代对象\"><a class=\"markdownIt-Anchor\" href=\"#迭代器与可迭代对象\">#</a> 迭代器与可迭代对象</h3>\n<p>迭代器是一次性的，可迭代对象可以重复使用</p>\n<h2 id=\"字典\"><a class=\"markdownIt-Anchor\" href=\"#字典\">#</a> 字典</h2>\n<p>映射类型数据的获取上，字典的数据远远快于列表</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">x <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"吕布\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"口口布\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"关羽\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"关习习\"</span><span class=\"token punctuation\">}</span>\nx<span class=\"token punctuation\">[</span><span class=\"token string\">\"吕布\"</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">#得到\"口口布\"结果</span>\nx<span class=\"token punctuation\">[</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"AA\"</span>  <span class=\"token comment\">#之后x就变成{\"吕布\":\"口口布\",\"关羽\":\"关习习\",\"abc\":\"AA\"}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"创建字典的方法\"><a class=\"markdownIt-Anchor\" href=\"#创建字典的方法\">#</a> 创建字典的方法</h3>\n<ol>\n<li>\n<p>{x:y} 直接创建</p>\n</li>\n<li>\n<p>dict () 函数创建</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">y <span class=\"token operator\">=</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span>吕布<span class=\"token operator\">=</span><span class=\"token string\">\"口口布\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">#需要注意的是 键值对的键不能加引号</span>\ny <span class=\"token operator\">=</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"吕布\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"口口布\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"关羽\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"关习习\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#两者可以混合使用</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>使用 zip () 和 dict () 函数结合</p>\n</li>\n</ol>\n<h3 id=\"增\"><a class=\"markdownIt-Anchor\" href=\"#增\">#</a> 增</h3>\n<p><code>fromkeys(iterable[,values])</code>  : 创建一个所有键的值都相同的字典</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">a <span class=\"token operator\">=</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">.</span>fromkeys<span class=\"token punctuation\">(</span><span class=\"token string\">\"Sam\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">666</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#得到的结果为{'s': 666, 'a': 666, 'm': 666}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"删\"><a class=\"markdownIt-Anchor\" href=\"#删\">#</a> 删</h3>\n<ul>\n<li><code>Name.pop(,default = )</code> : 返回值为键所对应的值</li>\n<li><code>Name.popitem()</code> : 删除最后一个加入字典的键值对</li>\n<li><code>del()</code>  关键字:</li>\n<li><code>Name.clear()</code> : 清除整个字典</li>\n</ul>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">x <span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'s'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">666</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">666</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'m'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">666</span><span class=\"token punctuation\">}</span>\nx<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token string\">'s'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#'s'键被删除并返回's'键的值666</span>\n<span class=\"token comment\">#当没有该键时返回default参数 default没有指定时报错</span>\n<span class=\"token keyword\">del</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">[</span><span class=\"token string\">'s'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#也能删除x中的键's'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"改\"><a class=\"markdownIt-Anchor\" href=\"#改\">#</a> 改</h3>\n<ol>\n<li>直接修改</li>\n<li><code>Name.update()</code> : 同时处理多个函数</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">a <span class=\"token operator\">=</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">.</span>fromkeys<span class=\"token punctuation\">(</span><span class=\"token string\">\"sam\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">666</span><span class=\"token punctuation\">)</span>\na<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>s<span class=\"token operator\">=</span><span class=\"token number\">111</span><span class=\"token punctuation\">,</span>a<span class=\"token operator\">=</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#返回{'s': 111, 'a': 123, 'm': 666}</span>\n<span class=\"token comment\">#同样 键不能加引号</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"查\"><a class=\"markdownIt-Anchor\" href=\"#查\">#</a> 查</h3>\n<p>1. 直接查找</p>\n<p>2. <code>Name.get(,default)</code> : 与第一种方法相比可以给 default 赋值，这样当值不存在时不会报错，会返回 default</p>\n<p>3. <code>Name.setdefault(x,y)</code> : 查找 x 键，当 x 不存在时，将 x 作为键，y 作为值加入字典并且返回 y</p>\n<p>4. <code>items(),keys(),values()</code> : 三个方法，分别获取键值对，键，值的<strong>视图对象</strong> (当字典发生改变时，视图对象也会跟着改变)</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">x <span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'吕布'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'口口布'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'关羽'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'关习习'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'abc'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'AA'</span><span class=\"token punctuation\">}</span>\na <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">#dict_items([('吕布', '口口布'), ('关羽', '关习习'), ('abc', 'AA')])</span>\nb <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>keys<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">#dict_keys(['吕布', '关羽', 'abc'])</span>\nc <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#dict_values(['口口布', '关习习', 'AA'])</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>5. <code>Name.copy()</code> : 浅拷贝</p>\n<h3 id=\"嵌套\"><a class=\"markdownIt-Anchor\" href=\"#嵌套\">#</a> 嵌套</h3>\n<p>与列表的嵌套相似</p>\n<h3 id=\"字典推导式\"><a class=\"markdownIt-Anchor\" href=\"#字典推导式\">#</a> 字典推导式</h3>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">x <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'s'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">666</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'m'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span>\ny <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>v<span class=\"token punctuation\">:</span>k <span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span>v <span class=\"token keyword\">in</span> x<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n<span class=\"token comment\">#输出的y为{666: 's', 1: 'a', 2: 'm'}</span>\ny <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>v<span class=\"token punctuation\">:</span>k <span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span>v <span class=\"token keyword\">in</span> x<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> v<span class=\"token operator\">&gt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">}</span>\n<span class=\"token comment\">#输入的y为{666: 's'}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"集合\"><a class=\"markdownIt-Anchor\" href=\"#集合\">#</a> 集合</h2>\n<h3 id=\"三种方法创建集合\"><a class=\"markdownIt-Anchor\" href=\"#三种方法创建集合\">#</a> 三种方法创建集合</h3>\n<ol>\n<li><code>{}</code>  创建</li>\n<li>集合推导式  <code>{i for i in \"Sam\"}</code></li>\n<li>类型构造器 <code>set()</code></li>\n</ol>\n<p>集合是无序的  无法使用下标索引进行访问 使用 in 来判断是否在集合中</p>\n<p>可以使用集合的唯一性来去重和检测重复值</p>\n<h3 id=\"集合方法\"><a class=\"markdownIt-Anchor\" href=\"#集合方法\">#</a> 集合方法</h3>\n<ul>\n<li><code>Name.copy()</code> : 浅拷贝</li>\n<li><code>Name.isdisjoint(可迭代对象)</code> : 检测集合是否没有交集</li>\n<li><code>a.issubset(b)</code> :a 集合是否是 b 集合的子集</li>\n<li><code>a.issuperset(b)</code> ：b 集合是否是 a 集合的子集</li>\n<li><code>a.union(b)</code> : 返回 a,b 的并集</li>\n<li><code>a.intersection(b)</code> : 返回 a,b 的交集</li>\n<li><code>a.difference(b)</code> : 返回属于 a 集合不属于 b 集合的元素</li>\n</ul>\n<p>上述方法可以多参数，同时也可以使用运算符号来进行比较和计算 (&lt;&lt;=&gt; &gt;= | &amp; -  ^(对称差集))</p>\n<p>方法可以直接传入可迭代对象，而运算符只能进行集合的比较</p>\n<ul>\n<li><code>a.symmetric_difference()</code> : 返回 a,b 的并集减去 a,b 的交集</li>\n<li><code>Name.update(可迭代对象)</code> : 往集合中添加元素</li>\n<li><code>Name.intersection_update()</code> : 先求交集在更新，同理 diffrence_update 等相同</li>\n<li><code>Name.add()</code> : 往集合中传入元素，此时如果传入的是可迭代对象 例如字符串，整个字符串会被看成一个元素</li>\n<li><code>Name.remove() Name.discard()</code> : 从集合中删除元素，如果元素不存在 remove 方法会报错 discard () 方法会<strong>静默处理</strong></li>\n<li><code>Name.pop()</code> : 随机获取集合中的一个元素</li>\n<li><code>Name.clear()</code> : 清楚集合</li>\n</ul>\n<h3 id=\"可变和不可变\"><a class=\"markdownIt-Anchor\" href=\"#可变和不可变\">#</a> 可变和不可变</h3>\n<p>set () 创建可变的集合 frozenset () 创建不可变的集合</p>\n<h3 id=\"可哈希\"><a class=\"markdownIt-Anchor\" href=\"#可哈希\">#</a> 可哈希</h3>\n<p>通过 hash () 获取哈希值</p>\n<p>python 中大多数不可变对象都是可哈希的，可变对象都是不可哈希的</p>\n<p>只有可哈希的对象才能作为字典的键和集合的元素</p>\n<p>所以为了实现集合的嵌套 只能使用 frozenset () 生成的不可变集合 才能实现集合的嵌套</p>\n<h3 id=\"额外\"><a class=\"markdownIt-Anchor\" href=\"#额外\">#</a> 额外</h3>\n<p>实现查找的时候可以将列表转换成集合，会节约大量的时间，但是同时也会消耗掉大量的空间</p>\n<h2 id=\"函数\"><a class=\"markdownIt-Anchor\" href=\"#函数\">#</a> 函数</h2>\n<p>def Name(): / sth</p>\n<ul>\n<li>形式参数：占位置</li>\n<li>实际参数：传递数据</li>\n<li>返回值：通过 <code>return</code>  返回函数的结果 没有 return 语句 返回 None 值</li>\n<li>位置参数：位置固定的参数</li>\n<li>关键字参数：通过关键字传递 参数 = “”  <strong>位 0 置参数只能在关键字参数之前</strong></li>\n</ul>\n<p>python 允许函数在定义时给参数指定默认值，如果没有传递参数，函数将会使用默认值，默认参数需要放在形参的最后</p>\n<p>形参中可以使用 <code>/</code> ， <code>/</code>  左侧的参数不能使用关键字传递， <code>*</code>  的右侧只能使用关键字参数</p>\n<h3 id=\"收集参数\"><a class=\"markdownIt-Anchor\" href=\"#收集参数\">#</a> 收集参数</h3>\n<p>在参数前面加入 <code>*</code> , 表示不确定参数的数量，这种参数叫收集参数</p>\n<p>收集参数，实际是将参数打包成元组传入函数，当返回多个返回值时，返回的也是元组</p>\n<p>函数中除了收集参数，如果还要传入其他参数，应该使用关键字参数</p>\n<p>在参数前面加入 <code>**</code> , 函数会将参数打包成字典传入函数</p>\n<h3 id=\"作用域\"><a class=\"markdownIt-Anchor\" href=\"#作用域\">#</a> 作用域</h3>\n<p>局部作用域与全局作用域，局部变量与全局变量</p>\n<p>全局变量可以在函数内部访问，但是不会改变</p>\n<h4 id=\"global语句\"><a class=\"markdownIt-Anchor\" href=\"#global语句\">#</a> global 语句</h4>\n<p>在函数内部使用 global 定义，表示函数内部的变量就是全部变量</p>\n<h4 id=\"嵌套函数\"><a class=\"markdownIt-Anchor\" href=\"#嵌套函数\">#</a> 嵌套函数</h4>\n<p>外部无法调用嵌套函数，只有在函数内部才能调用嵌套函数</p>\n<h4 id=\"nonlocal语句\"><a class=\"markdownIt-Anchor\" href=\"#nonlocal语句\">#</a> nonlocal 语句</h4>\n<p>使用 nonlocal 语句定义变量，可以在嵌套函数内部，修改外部变量的值</p>\n<h4 id=\"legb规则\"><a class=\"markdownIt-Anchor\" href=\"#legb规则\">#</a> LEGB 规则</h4>\n<ul>\n<li>Local: 局部作用域</li>\n<li>Enclosed: 嵌套函数的外层函数作用域</li>\n<li>Global: 全局作用域</li>\n<li>Building: 内置作用域</li>\n</ul>\n<p>局部作用域与全局作用域发生冲突，python 会优先使用局部作用域</p>\n<p>嵌套函数发生 局部作用域会覆盖外层函数作用域</p>\n<h3 id=\"闭包\"><a class=\"markdownIt-Anchor\" href=\"#闭包\">#</a> 闭包</h3>\n<p>利用嵌套函数的外层作用域会被保存下来，将数据保存在外层函数的参数或者变量中，将内层函数作为返回值返回，就能从外部简介调用内层函数</p>\n<p>将函数作为返回值返回时，只需要给出函数名称即可</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">exp_of</span><span class=\"token punctuation\">(</span>exp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n     <span class=\"token keyword\">def</span> <span class=\"token function\">exp_in</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>number <span class=\"token operator\">**</span> exp<span class=\"token punctuation\">)</span>\n     <span class=\"token keyword\">return</span> exp_in\n<span class=\"token comment\">#&gt;&gt;&gt; move1 = exp_of(2)</span>\n<span class=\"token comment\">#&gt;&gt;&gt; move2 = exp_of(3)</span>\n<span class=\"token comment\">#&gt;&gt;&gt; move1(3)</span>\n<span class=\"token comment\">#9</span>\n<span class=\"token comment\">#&gt;&gt;&gt; move2(3)</span>\n<span class=\"token comment\">#27</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"装饰器\"><a class=\"markdownIt-Anchor\" href=\"#装饰器\">#</a> 装饰器</h3>\n<p>函数可以作为参数传给另外一个函数</p>\n<p>@装饰器 ID  隔行 函数</p>\n<p>表示并不是调用函数 而是将函数作为参数传入装饰器</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"> <span class=\"token keyword\">def</span> <span class=\"token function\">time_master</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">def</span> call_fun<span class=\"token punctuation\">:</span>\n             start <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    \t\tfunc<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    \t\tend <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    \t\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"一共耗费了</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span>end<span class=\"token operator\">-</span>start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token format-spec\">.2f</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">秒\"</span></span><span class=\"token punctuation\">)</span>\n         <span class=\"token keyword\">return</span> call_fun\n    \n <span class=\"token comment\">#装饰器</span>\n<span class=\"token decorator annotation punctuation\">@time_master</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">myfunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"开始调用函数\"</span><span class=\"token punctuation\">)</span>\n    \n<span class=\"token comment\">#装饰器本质 </span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">myfunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"开始调用函数\"</span><span class=\"token punctuation\">)</span>\nmyfunc <span class=\"token operator\">=</span> time_master<span class=\"token punctuation\">(</span>myfunc<span class=\"token punctuation\">)</span>\n\nmyfunc<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>同时使用多个装饰器时，从函数头上距离函数最近的开始运行，依次往上运行</p>\n<h3 id=\"lambda表达式\"><a class=\"markdownIt-Anchor\" href=\"#lambda表达式\">#</a> lambda 表达式</h3>\n<p>lambda arg1,arg2 … argN : expression</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">squareX</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> x <span class=\"token operator\">*</span> x\nsquareY <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> y <span class=\"token punctuation\">:</span> y <span class=\"token operator\">*</span> y<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"生成器\"><a class=\"markdownIt-Anchor\" href=\"#生成器\">#</a> 生成器</h3>\n<p>使用 yield 表达式来代替 return 语句</p>\n<p>生成器即每次在调用时，执行到 yield 时，暂停并保存状态，返回一个值，下一次调用则从下一个语句开始执行</p>\n<p>可以理解为生成器是函数中 field 的所有返回值所组成的一个连续数据，但是只能一个一个查看且无法使用下标索引 (可能不准确)</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">counter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n     i <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n     <span class=\"token keyword\">while</span> i <span class=\"token operator\">&lt;=</span><span class=\"token number\">5</span><span class=\"token punctuation\">:</span>\n             <span class=\"token keyword\">yield</span> i\n             i<span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"生成器表达式\"><a class=\"markdownIt-Anchor\" href=\"#生成器表达式\">#</a> 生成器表达式</h4>\n<p>(i ** 2 for i in range())</p>\n<h3 id=\"递归\"><a class=\"markdownIt-Anchor\" href=\"#递归\">#</a> 递归</h3>\n<p>利用函数自己可以调用自身</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">facRecur</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">if</span> n <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">return</span> n <span class=\"token operator\">*</span> facRecur<span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"永久存储\"><a class=\"markdownIt-Anchor\" href=\"#永久存储\">#</a> 永久存储</h2>\n<h3 id=\"创建文件\"><a class=\"markdownIt-Anchor\" href=\"#创建文件\">#</a> 创建文件</h3>\n<p>f = open (“文件路径和文件名”,“打开的模式”)   返回值为一个文件对象</p>\n<p>f.write (“字符串”): 将字符串写入文件，返回的是写入的数量</p>\n<p>f.writeless (\"\"): 将字符串写入文件，不会自动添加换行符，且不会返回写入的数量</p>\n<p>文件内部具有文件指针，当文件不断被读取时，文件指针不断后移，直到末尾的 EOF</p>\n<p>f.tell (): 返回文件指针的位置</p>\n<p>f.seek (位置)：移动文件指针的位置</p>\n<p>f.read (): 读取文件</p>\n<p>f.flush (): 将缓存区内的数据写入文件</p>\n<p>f.truncate (pos): 将文件对象截取到 pos 位置，如果没有 pos 值则截取到文件指针当前指定的位置</p>\n<h3 id=\"路径处理\"><a class=\"markdownIt-Anchor\" href=\"#路径处理\">#</a> 路径处理</h3>\n<h2 id=\"类和对象\"><a class=\"markdownIt-Anchor\" href=\"#类和对象\">#</a> 类和对象</h2>\n",
            "tags": [
                "python"
            ]
        },
        {
            "id": "https://github.com/YogMas/YogMas.github.io/2021/11/18/dian-ke-icoding/",
            "url": "https://github.com/YogMas/YogMas.github.io/2021/11/18/dian-ke-icoding/",
            "title": "电科icoding答案",
            "date_published": "2021-11-17T16:00:00.000Z",
            "content_html": "<h1 id=\"c语言-icoding答案\"><a class=\"markdownIt-Anchor\" href=\"#c语言-icoding答案\">#</a> C 语言 - icoding 答案</h1>\n<h2 id=\"the-article-made-by-yogmas\"><a class=\"markdownIt-Anchor\" href=\"#the-article-made-by-yogmas\">#</a> The article made by YogMas</h2>\n<h3 id=\"实验一\"><a class=\"markdownIt-Anchor\" href=\"#实验一\">#</a> 实验一</h3>\n<h4 id=\"2-4计算税金\"><a class=\"markdownIt-Anchor\" href=\"#2-4计算税金\">#</a> 2-4：计算税金</h4>\n<p>编写⼀个程序，要求⽤户输⼊⼀个美元数量，然后显示出增加 5% 税率后的相应⾦额。</p>\n<p>Enter an amount: 100.00<br>\nwith tax added: $105.00</p>\n<p>输⼊的⾦额为⼤于 0 的两位数浮点数</p>\n<blockquote>\n<pre><code><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">float</span> amount<span class=\"token punctuation\">,</span>final<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter an amount:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%f\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 获取用户的输入的的输入输入输入</span>\n    final <span class=\"token operator\">=</span> amount <span class=\"token operator\">*</span> <span class=\"token number\">1.05</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"get the final money:$%.2f\"</span><span class=\"token punctuation\">,</span>final<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</code></pre>\n</blockquote>\n<h4 id=\"2-7计算账单\"><a class=\"markdownIt-Anchor\" href=\"#2-7计算账单\">#</a> 2-7：计算账单</h4>\n<p>编写⼀个程序，要求⽤户输出⼀个美元数量，然后显示出如何⽤最少 20 美元、10 美元、5 美元和 1 美元来付款。</p>\n<p>Enter a dollar amount: 93<br>\n$20 bills: 4<br>\n$10 bills: 1<br>\n$5 bills: 0<br>\n$1 bills: 3</p>\n<blockquote>\n<pre><code><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> one<span class=\"token punctuation\">,</span>two<span class=\"token punctuation\">,</span>three<span class=\"token punctuation\">,</span>four<span class=\"token punctuation\">,</span>five<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"enter an amount:  \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>one<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ntwo <span class=\"token operator\">=</span> one <span class=\"token operator\">/</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\nthree <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>one <span class=\"token operator\">-</span> two<span class=\"token operator\">*</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\nfour <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>one<span class=\"token operator\">-</span>two<span class=\"token operator\">*</span><span class=\"token number\">20</span><span class=\"token operator\">-</span>three<span class=\"token operator\">*</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\nfive <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>one<span class=\"token operator\">-</span>two<span class=\"token operator\">*</span><span class=\"token number\">20</span><span class=\"token operator\">-</span>three<span class=\"token operator\">*</span><span class=\"token number\">10</span><span class=\"token operator\">-</span>four<span class=\"token operator\">*</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"this is $20 bills:%d,$10 bills:%d,$5bills %d,$1 bills %d\"</span><span class=\"token punctuation\">,</span>two<span class=\"token punctuation\">,</span>three<span class=\"token punctuation\">,</span>four<span class=\"token punctuation\">,</span>five<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</code></pre>\n</blockquote>\n<h4 id=\"2-8还贷计算\"><a class=\"markdownIt-Anchor\" href=\"#2-8还贷计算\">#</a> 2-8：还贷计算</h4>\n<p>编程计算第⼀、第⼆、第三个⽉还贷后剩余的贷款⾦额。</p>\n<p>Enter amout of loan: 20000.00<br>\nEnter interest rate: 6.0<br>\nEnter monthly payment: 386.66</p>\n<p>Balance remaining after first payment: $19713.34<br>\nBalance remaining after second payment: $19425.25<br>\nBalance remaining after third payment: $19135.71</p>\n<p>提示：每个月的贷款余额减去还款金额后，还需要加上贷款余额与月利率的乘积。月利率的计算方法是把用户输入的利率转换成百分数再除以 12。</p>\n<blockquote>\n<pre><code><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">float</span> loan<span class=\"token punctuation\">,</span>rate1<span class=\"token punctuation\">,</span>rate2<span class=\"token punctuation\">,</span>payment<span class=\"token punctuation\">,</span>one<span class=\"token punctuation\">,</span>two<span class=\"token punctuation\">,</span>three<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"please enter ur loan: \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%f\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>loan<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"please enter ur rate: \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%f\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>rate1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"please enter ur monthly payment: \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%f\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>payment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    rate2<span class=\"token operator\">=</span>rate1<span class=\"token operator\">*</span><span class=\"token number\">0.01</span><span class=\"token operator\">/</span><span class=\"token number\">12</span><span class=\"token punctuation\">;</span>\n    one<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>loan<span class=\"token operator\">-</span>payment<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>loan<span class=\"token operator\">*</span>rate2<span class=\"token punctuation\">;</span>\n    two<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>one<span class=\"token operator\">-</span>payment<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>one<span class=\"token operator\">*</span>rate2<span class=\"token punctuation\">;</span>\n    three<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>two<span class=\"token operator\">-</span>payment<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>two<span class=\"token operator\">*</span>rate2<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"this is ur Balance remaining after first payment:%.2f,second:%.2f,third:%.2f\"</span><span class=\"token punctuation\">,</span>one<span class=\"token punctuation\">,</span>two<span class=\"token punctuation\">,</span>three<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</code></pre>\n</blockquote>\n<h4 id=\"3-1日期格式转化\"><a class=\"markdownIt-Anchor\" href=\"#3-1日期格式转化\">#</a> 3-1：⽇期格式转化</h4>\n<p>编写⼀个程序，以⽉ / ⽇ / 年（即 mm/dd/yy）的格式接受⽤户录⼊的⽇期信息，并以年⽉⽇（即 yyyymmdd）的格式将其显示出来。</p>\n<p>Enter a date (mm/dd/yyyy): 2/17/2011<br>\nYou entered the date 20110217</p>\n<blockquote>\n<pre><code><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> year<span class=\"token punctuation\">,</span>month<span class=\"token punctuation\">,</span>day<span class=\"token punctuation\">;</span>    \n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"please enter the date: .\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d/%d/%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>month<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>day<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>year<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"this is the date:%04d%02d%02d\"</span><span class=\"token punctuation\">,</span>year<span class=\"token punctuation\">,</span>month<span class=\"token punctuation\">,</span>day<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</code></pre>\n</blockquote>\n<h4 id=\"3-6分数加法\"><a class=\"markdownIt-Anchor\" href=\"#3-6分数加法\">#</a> 3-6：分数加法</h4>\n<p>修改如下程序（ 3.2 节的 addfrac.c ），使⽤户可以同时输⼊两个分数，中间⽤加号隔开：</p>\n<p>Enter two fractions separated by a plus sign: 5/6+3/4<br>\nThe sum is 38/24</p>\n<blockquote>\n<pre><code><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> fenzi1<span class=\"token punctuation\">,</span>fenzi2<span class=\"token punctuation\">,</span>fenmu1<span class=\"token punctuation\">,</span>fenmu2<span class=\"token punctuation\">,</span>sum1<span class=\"token punctuation\">,</span>sum2<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"please enter the  fractions: \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d/%d+%d/%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>fenzi1<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>fenmu1<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>fenzi2<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>fenmu2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    sum1<span class=\"token operator\">=</span>fenzi1<span class=\"token operator\">*</span>fenmu2<span class=\"token operator\">+</span>fenzi2<span class=\"token operator\">*</span>fenmu1<span class=\"token punctuation\">;</span>\n    sum2<span class=\"token operator\">=</span>fenmu1<span class=\"token operator\">*</span>fenmu2<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"this is the sum:%d/%d\"</span><span class=\"token punctuation\">,</span>sum1<span class=\"token punctuation\">,</span>sum2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</code></pre>\n</blockquote>\n<h3 id=\"实验二\"><a class=\"markdownIt-Anchor\" href=\"#实验二\">#</a> 实验二</h3>\n<h4 id=\"5-2-24小时制-12小时制转换\"><a class=\"markdownIt-Anchor\" href=\"#5-2-24小时制-12小时制转换\">#</a> 5-2： 24 ⼩时制 - 12 ⼩时制转换</h4>\n<p>编写⼀个程序，要求⽤户输⼊ 24 ⼩时制的时间，将其转换为 12 ⼩时制的格式。</p>\n<p>Enter a 24-hour time: 21:11<br>\nEquivalent 12-hour time: 9:11 PM</p>\n<p>Enter a 24-hour time: 0:01<br>\nEquivalent 12-hour time: 12:01 AM</p>\n<p>注意，不要把 12:00 显示为 0:00。</p>\n<blockquote>\n<pre><code><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> enter1<span class=\"token punctuation\">,</span>enter2<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"please enter the time  \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d:%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>enter1<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>enter2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    b<span class=\"token operator\">=</span>enter1<span class=\"token operator\">-</span><span class=\"token number\">12</span><span class=\"token punctuation\">;</span>\n    c<span class=\"token operator\">=</span>enter1<span class=\"token operator\">+</span><span class=\"token number\">12</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token operator\">&lt;</span>enter1<span class=\"token operator\">&amp;&amp;</span>enter1<span class=\"token operator\">&lt;</span><span class=\"token number\">24</span><span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"this is ur time:%d:%d PM\\n\"</span><span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>enter2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token operator\">&lt;</span>enter1<span class=\"token operator\">&amp;&amp;</span>enter1<span class=\"token operator\">&lt;</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"this is ur time: %d:%d AM\\n\"</span><span class=\"token punctuation\">,</span>enter1<span class=\"token punctuation\">,</span>enter2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>enter1<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"this is ur time: %d:%d AM\\n\"</span><span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">,</span>enter2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>enter1<span class=\"token operator\">==</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"this is ur timer :  %d:%d PM\\n\"</span><span class=\"token punctuation\">,</span>enter1<span class=\"token punctuation\">,</span>enter2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span>\n\n\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</code></pre>\n</blockquote>\n<h4 id=\"5-4-速等级与描述\"><a class=\"markdownIt-Anchor\" href=\"#5-4-速等级与描述\">#</a> 5-4： ⻛速等级与描述</h4>\n<p>下⾯是⽤于测量⻛⼒的蒲福⻛⼒等级的简化版，编写⼀个程序，要求⽤户输⼊⻛速（海⾥ / ⼩时），然后显示相应的描述。</p>\n<p>速率（海⾥ / ⼩时）\t描述<br>\n⼩于 1\tCalm（⽆⻛）<br>\n1~3\tLight air（轻⻛）<br>\n4~27\tBreeze（微⻛）<br>\n28~47\tGale（⼤⻛）<br>\n48~63\tStorm（暴⻛）<br>\n⼤于 63\tHurricane（飓⻛）<br>\n输出范例：Enter a wind speed: 1</p>\n<p>Light air</p>\n<p>Enter a wind speed: 27</p>\n<p>Breeze</p>\n<blockquote>\n<pre><code><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> speed<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"please enter ur wind speed \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>speed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>speed<span class=\"token operator\">&lt;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Calm\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>speed<span class=\"token operator\">&gt;=</span><span class=\"token number\">1</span><span class=\"token operator\">&amp;&amp;</span>speed<span class=\"token operator\">&lt;=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Light air\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>speed<span class=\"token operator\">&gt;=</span><span class=\"token number\">4</span><span class=\"token operator\">&amp;&amp;</span>speed<span class=\"token operator\">&lt;=</span><span class=\"token number\">27</span><span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Breeze\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>speed<span class=\"token operator\">&gt;=</span><span class=\"token number\">28</span><span class=\"token operator\">&amp;&amp;</span>speed<span class=\"token operator\">&lt;=</span><span class=\"token number\">47</span><span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Gale\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>speed<span class=\"token operator\">&gt;=</span><span class=\"token number\">48</span><span class=\"token operator\">&amp;&amp;</span>speed<span class=\"token operator\">&lt;=</span><span class=\"token number\">63</span><span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Storm\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>speed<span class=\"token operator\">&gt;</span><span class=\"token number\">63</span><span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hurricane\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</code></pre>\n</blockquote>\n<h4 id=\"5-6通用产品代码\"><a class=\"markdownIt-Anchor\" href=\"#5-6通用产品代码\">#</a> 5-6：通⽤产品代码</h4>\n<p>修改如下（4.1 节的 upc.c）程序，使其可以检测 UPC 的有效性。在⽤户输⼊ UPC 后，程序将输出 VALID 或 NOT VALID 。</p>\n<p>输出范例：</p>\n<p>Enter the first (single) digit: 0<br>\nEnter first group of five digits: 13800<br>\nEnter second group of five digits: 15173<br>\nEnter the last (single) digit: 5<br>\nVALID</p>\n<p>Enter the first (single) digit: 0<br>\nEnter first group of five digits: 51500<br>\nEnter second group of five digits: 24128<br>\nEnter the last (single) digit: 7<br>\nNOT VALID</p>\n<blockquote>\n<pre><code><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> d<span class=\"token punctuation\">,</span> i1<span class=\"token punctuation\">,</span> i2<span class=\"token punctuation\">,</span> i3<span class=\"token punctuation\">,</span> i4<span class=\"token punctuation\">,</span> i5<span class=\"token punctuation\">,</span> j1<span class=\"token punctuation\">,</span> j2<span class=\"token punctuation\">,</span> j3<span class=\"token punctuation\">,</span> j4<span class=\"token punctuation\">,</span> j5<span class=\"token punctuation\">,</span> first_sum<span class=\"token punctuation\">,</span> second_sum<span class=\"token punctuation\">,</span> total<span class=\"token punctuation\">,</span> total2<span class=\"token punctuation\">,</span> g<span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter the first (single) digit: \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%1d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter the first group of five digits: \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%1d%1d%1d%1d%1d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>i1<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>i2<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>i3<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>i4<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>i5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter the second group of five digits: \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%1d%1d%1d%1d%1d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>j1<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>j2<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>j3<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>j4<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>j5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"please Enter the last (single) digit:   \\n \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>g<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nfirst_sum <span class=\"token operator\">=</span> d <span class=\"token operator\">+</span> i2 <span class=\"token operator\">+</span> i4 <span class=\"token operator\">+</span> j1 <span class=\"token operator\">+</span> j3 <span class=\"token operator\">+</span> j5<span class=\"token punctuation\">;</span>\nsecond_sum <span class=\"token operator\">=</span> i1 <span class=\"token operator\">+</span> i3 <span class=\"token operator\">+</span> i5 <span class=\"token operator\">+</span> j2 <span class=\"token operator\">+</span> j4<span class=\"token punctuation\">;</span>\ntotal <span class=\"token operator\">=</span> <span class=\"token number\">3</span> <span class=\"token operator\">*</span> first_sum <span class=\"token operator\">+</span> second_sum<span class=\"token punctuation\">;</span>\ntotal2 <span class=\"token operator\">=</span> <span class=\"token number\">9</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>total <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>g <span class=\"token operator\">==</span> total2<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"VALID \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">else</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"NOT VALID  \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</code></pre>\n</blockquote>\n<h4 id=\"5-10将百分制转换为等级制\"><a class=\"markdownIt-Anchor\" href=\"#5-10将百分制转换为等级制\">#</a> 5-10：将百分制转换为等级制</h4>\n<p>利⽤ switch 语句编写⼀个程序，把⽤数字表示的成绩转化为字⺟表示的等级。</p>\n<p>使⽤下⾯的等级评定规则：A 为 90<sub>100，B 为 80</sub>89，C 为 70<sub>79，D 为 60</sub>69，F 为 0~59。如果成绩⾼于 100 或低于 0 显示出错信息。</p>\n<p>输出范例：<br>\nEnter numerical grade: 84<br>\nLetter grade: B</p>\n<p>Enter numerical grade: -1<br>\nError, grade must be between 0 and 100.</p>\n<p>提示：把成绩拆分成 2 个数字，然后使⽤ switch 语句判定⼗位上的数字。</p>\n<blockquote>\n<pre><code><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> grade1<span class=\"token punctuation\">,</span> grade2<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"please enter ur numerical grade   \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>grade1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    grade2 <span class=\"token operator\">=</span> grade1 <span class=\"token operator\">/</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">10</span> <span class=\"token operator\">&lt;</span> grade1 <span class=\"token operator\">&amp;&amp;</span> grade1 <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error, grade must be between 0 and 100.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span>\n\n​    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">100</span> <span class=\"token operator\">&lt;</span> grade1 <span class=\"token operator\">&amp;&amp;</span> grade1 <span class=\"token operator\">&lt;</span> <span class=\"token number\">110</span><span class=\"token punctuation\">)</span>\n​    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error, grade must be between 0 and 100.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">else</span>\n​    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>grade2<span class=\"token punctuation\">)</span>\n​    <span class=\"token punctuation\">{</span>\n​    <span class=\"token keyword\">case</span> <span class=\"token number\">10</span><span class=\"token operator\">:</span>\n​    <span class=\"token keyword\">case</span> <span class=\"token number\">9</span><span class=\"token operator\">:</span>\n​        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Letter grade: A \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n​        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n​    <span class=\"token keyword\">case</span> <span class=\"token number\">8</span><span class=\"token operator\">:</span>\n​        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Letter grade: B \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n​        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n​    <span class=\"token keyword\">case</span> <span class=\"token number\">7</span><span class=\"token operator\">:</span>\n​        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Letter grade: C \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n​        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n​    <span class=\"token keyword\">case</span> <span class=\"token number\">6</span><span class=\"token operator\">:</span>\n​        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Letter grade: D \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n​        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n​    <span class=\"token keyword\">case</span> <span class=\"token number\">5</span><span class=\"token operator\">:</span>\n​    <span class=\"token keyword\">case</span> <span class=\"token number\">4</span><span class=\"token operator\">:</span>\n​    <span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token operator\">:</span>\n​    <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span>\n​    <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span>\n​    <span class=\"token keyword\">case</span> <span class=\"token number\">0</span><span class=\"token operator\">:</span>\n​        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Letter grade: F \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n​        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n​    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n​        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error, grade must be between 0 and 100.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n​    <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</code></pre>\n</blockquote>\n<h4 id=\"6-2最大公约数\"><a class=\"markdownIt-Anchor\" href=\"#6-2最大公约数\">#</a> 6-2：最⼤公约数</h4>\n<p>编写程序，要求⽤户输⼊两个整数，然后计算这两个整数的最⼤公约数（GCD, Greatest Common Divisor）。</p>\n<p>输出范例：</p>\n<p>Enter two integers: 12 28<br>\nGreatest common divisor: 4</p>\n<p>Enter two integers：1 9<br>\nGreatest common divisor：1</p>\n<p>提示：求最⼤公约数的经典算法 Euclid 算法如下：<br>\n分别让变量 m 和 n 存储两个整数。如果 n 为 0，那么停⽌操作，m 中的值是 GCD ；否则计算 m 除以 n 的余数，把 n 保存到 m 中，并把余数保存到 n 中；重复上述操作，每次都先判断 n 是否为 0 。</p>\n<blockquote>\n<pre><code><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"please Enter two integers:     \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m <span class=\"token operator\">&gt;=</span> n<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            s <span class=\"token operator\">=</span> m <span class=\"token operator\">%</span> n<span class=\"token punctuation\">;</span>\n            m <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n            n <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span>\n        <span class=\"token punctuation\">{</span>\n            l <span class=\"token operator\">=</span> m<span class=\"token punctuation\">;</span>\n            m <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n            n <span class=\"token operator\">=</span> l<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GCD=%d\"</span><span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</code></pre>\n</blockquote>\n<h4 id=\"6-4股经纪人的佣金\"><a class=\"markdownIt-Anchor\" href=\"#6-4股经纪人的佣金\">#</a> 6-4：股经纪⼈的佣⾦</h4>\n<p>在下列程序（ 5.2 节的 broker.c ）中添加循环，以便⽤户可以输⼊多笔交易并且程序可以计算每次的佣⾦。程序在⽤户输⼊的交易额为 0 时终⽌。</p>\n<p>输出范例：</p>\n<p>Enter value of trade: 30000<br>\nCommission：$166.00</p>\n<p>Enter value of trade: 20000<br>\nCommission：$144.00<br>\nEnter value of trade: 0</p>\n<blockquote>\n<pre><code><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">float</span> commission<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter value of trade: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%f\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">&lt;</span> <span class=\"token number\">2500.00f</span><span class=\"token punctuation\">)</span>\n        commission <span class=\"token operator\">=</span> <span class=\"token number\">30.00f</span> <span class=\"token operator\">+</span> <span class=\"token number\">.017f</span> <span class=\"token operator\">*</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">&lt;</span> <span class=\"token number\">6250.00f</span><span class=\"token punctuation\">)</span>\n        commission <span class=\"token operator\">=</span> <span class=\"token number\">56.00f</span> <span class=\"token operator\">+</span> <span class=\"token number\">.0066f</span> <span class=\"token operator\">*</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">&lt;</span> <span class=\"token number\">20000.00f</span><span class=\"token punctuation\">)</span>\n        commission <span class=\"token operator\">=</span> <span class=\"token number\">76.00f</span> <span class=\"token operator\">+</span> <span class=\"token number\">.0034f</span> <span class=\"token operator\">*</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">&lt;</span> <span class=\"token number\">50000.00f</span><span class=\"token punctuation\">)</span>\n        commission <span class=\"token operator\">=</span> <span class=\"token number\">100.00f</span> <span class=\"token operator\">+</span> <span class=\"token number\">.0022f</span> <span class=\"token operator\">*</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">&lt;</span> <span class=\"token number\">500000.00f</span><span class=\"token punctuation\">)</span>\n        commission <span class=\"token operator\">=</span> <span class=\"token number\">155.00f</span> <span class=\"token operator\">+</span> <span class=\"token number\">.0011f</span> <span class=\"token operator\">*</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span>\n        commission <span class=\"token operator\">=</span> <span class=\"token number\">255.00f</span> <span class=\"token operator\">+</span> <span class=\"token number\">.0009f</span> <span class=\"token operator\">*</span> value<span class=\"token punctuation\">;</span>\n\n​    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>commission <span class=\"token operator\">&lt;</span> <span class=\"token number\">39.00f</span><span class=\"token punctuation\">)</span>\n​        commission <span class=\"token operator\">=</span> <span class=\"token number\">39.00f</span><span class=\"token punctuation\">;</span>\n\n​    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Commission: $%.2f\\n\\n\"</span><span class=\"token punctuation\">,</span> commission<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n​    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter value of trade: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n​    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%f\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</code></pre>\n</blockquote>\n<h4 id=\"6-6偶数平方\"><a class=\"markdownIt-Anchor\" href=\"#6-6偶数平方\">#</a> 6-6：偶数平⽅</h4>\n<p>编写程序，提示⽤户输⼊⼀个数 n，然后显示出 1~n 的所有偶数的平⽅值。</p>\n<p>输出范例：<br>\nEnter a number: 100<br>\n4<br>\n16<br>\n36<br>\n64<br>\n100</p>\n<p>Enter a number: 50<br>\n4<br>\n16<br>\n36</p>\n<blockquote>\n<pre><code><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"please enter a number:  \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> a <span class=\"token operator\">*</span> a <span class=\"token operator\">&lt;=</span> i<span class=\"token punctuation\">;</span> a <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        b <span class=\"token operator\">=</span> a <span class=\"token operator\">*</span> a<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \\n\"</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</code></pre>\n</blockquote>\n<h4 id=\"6-8日历\"><a class=\"markdownIt-Anchor\" href=\"#6-8日历\">#</a> 6-8：日历</h4>\n<p>编写程序显示单⽉的⽇历。⽤户指定这个⽉的天数和该⽉起始⽇是星期⼏。</p>\n<p>输出范例：</p>\n<p>Enter number of days in month: 31</p>\n<p>Enter starting day of the week(1=Sun, 7=Sat): 3</p>\n<p>日\t一\t二\t三\t四\t五\t六<br>\n 1\t2\t 3\t 4\t 5<br>\n6\t 7\t 8\t 9\t10\t11\t12<br>\n13\t14\t15\t16\t17\t18\t19<br>\n20\t21\t22\t23\t24\t25\t26<br>\n27\t28\t29\t30\t31</p>\n<blockquote>\n<pre><code><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter number of days in month: \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter starting day of the week(1=Sun, 7=Sat) \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Su Mo Tu We Th Fr Sa \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> c <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">;</span> c<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"   \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> a<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%2d \"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        d <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> b <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>d <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</code></pre>\n</blockquote>\n<h3 id=\"实验三\"><a class=\"markdownIt-Anchor\" href=\"#实验三\">#</a> 实验三</h3>\n<h4 id=\"7-4翻译\"><a class=\"markdownIt-Anchor\" href=\"#7-4翻译\">#</a> 7-4：翻译</h4>\n<p>编写程序可以把字⺟格式的电话号码翻译成数值格式：</p>\n<p>Enter phone number: CALLATT</p>\n<p>2255288</p>\n<p>如果没有电话在身边，参考这⾥给出的字⺟在键盘上的对应关系：（2=ABC，3=DEF，4=GHI，5=JKL，6=MNO，7=PQRS，8=TUV，9=WXYZ）原始电话号码中的⾮字⺟字符（例如数字或标点符号）保持不变：</p>\n<p>Enter phone number: 1-800-COL-LECT1-800-265-5328</p>\n<p>可以假设任何⽤户输⼊的字⺟都是⼤写字⺟。</p>\n<p>输出范例：</p>\n<p>Enter phone number: 1-DCKS-A2D-OLED</p>\n<p>1-3257-223-6533</p>\n<blockquote>\n<pre><code><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter phone number: \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ch <span class=\"token operator\">=</span> <span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ch <span class=\"token operator\">==</span> <span class=\"token string\">'A'</span> <span class=\"token operator\">||</span> ch <span class=\"token operator\">==</span> <span class=\"token string\">'B'</span> <span class=\"token operator\">||</span> ch <span class=\"token operator\">==</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ch <span class=\"token operator\">==</span> <span class=\"token string\">'D'</span> <span class=\"token operator\">||</span> ch <span class=\"token operator\">==</span> <span class=\"token string\">'E'</span> <span class=\"token operator\">||</span> ch <span class=\"token operator\">==</span> <span class=\"token string\">'F'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ch <span class=\"token operator\">==</span> <span class=\"token string\">'G'</span> <span class=\"token operator\">||</span> ch <span class=\"token operator\">==</span> <span class=\"token string\">'H'</span> <span class=\"token operator\">||</span> ch <span class=\"token operator\">==</span> <span class=\"token string\">'I'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"4\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ch <span class=\"token operator\">==</span> <span class=\"token string\">'J'</span> <span class=\"token operator\">||</span> ch <span class=\"token operator\">==</span> <span class=\"token string\">'K'</span> <span class=\"token operator\">||</span> ch <span class=\"token operator\">==</span> <span class=\"token string\">'L'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"5\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ch <span class=\"token operator\">==</span> <span class=\"token string\">'M'</span> <span class=\"token operator\">||</span> ch <span class=\"token operator\">==</span> <span class=\"token string\">'N'</span> <span class=\"token operator\">||</span> ch <span class=\"token operator\">==</span> <span class=\"token string\">'O'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"6\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ch <span class=\"token operator\">==</span> <span class=\"token string\">'P'</span> <span class=\"token operator\">||</span> ch <span class=\"token operator\">==</span> <span class=\"token string\">'Q'</span> <span class=\"token operator\">||</span> ch <span class=\"token operator\">==</span> <span class=\"token string\">'R'</span> <span class=\"token operator\">||</span> ch <span class=\"token operator\">==</span> <span class=\"token string\">'S'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"7\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ch <span class=\"token operator\">==</span> <span class=\"token string\">'T'</span> <span class=\"token operator\">||</span> ch <span class=\"token operator\">==</span> <span class=\"token string\">'U'</span> <span class=\"token operator\">||</span> ch <span class=\"token operator\">==</span> <span class=\"token string\">'V'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ch <span class=\"token operator\">==</span> <span class=\"token string\">'W'</span> <span class=\"token operator\">||</span> ch <span class=\"token operator\">==</span> <span class=\"token string\">'X'</span> <span class=\"token operator\">||</span> ch <span class=\"token operator\">==</span> <span class=\"token string\">'Y'</span> <span class=\"token operator\">||</span> ch <span class=\"token operator\">==</span> <span class=\"token string\">'Z'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"9\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c\"</span><span class=\"token punctuation\">,</span> ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</code></pre>\n</blockquote>\n<h4 id=\"7-12表达式求值\"><a class=\"markdownIt-Anchor\" href=\"#7-12表达式求值\">#</a> 7-12：表达式求值</h4>\n<p>编写程序对表达式求值。</p>\n<p>Enter an expression: 1+2.5*3<br>\nValue of expression: 10.5</p>\n<p>表达式中的操作数是浮点数，运算符是 +、-、* 和 /。表达式从左向右求值（所有运算符的优先级都⼀样）。</p>\n<p>输出范例：</p>\n<p>Enter an expression: 2+3*4-5/2<br>\nValue of expression: 7.5</p>\n<blockquote>\n<pre><code><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">float</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter an expressio: \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%f\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ch <span class=\"token operator\">=</span> <span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%f\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">'+'</span><span class=\"token operator\">:</span>\n            a <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">'-'</span><span class=\"token operator\">:</span>\n            a <span class=\"token operator\">=</span> a <span class=\"token operator\">-</span> b<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">'*'</span><span class=\"token operator\">:</span>\n            a <span class=\"token operator\">=</span> a <span class=\"token operator\">*</span> b<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">'/'</span><span class=\"token operator\">:</span>\n            a <span class=\"token operator\">=</span> a <span class=\"token operator\">/</span> b<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Value of expression: %f\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</code></pre>\n</blockquote>\n<h4 id=\"8-2出现次数\"><a class=\"markdownIt-Anchor\" href=\"#8-2出现次数\">#</a> 8-2：出现次数</h4>\n<p>修改如下程序 (8.1 节的 repdigit.c)，使其打印⼀份列表，显示出每个数字在数中出现的次数。</p>\n<p>输出范例：</p>\n<p>Enter a number: 41271092</p>\n<p>Digit:\t0\t1\t2\t3\t4\t5\t6\t7\t8\t9<br>\nOccurrences:\t1\t2\t2\t0\t1\t0\t0\t1\t0\t1</p>\n<blockquote>\n<pre><code><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> appear<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> a <span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter a number: \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ch <span class=\"token operator\">=</span> <span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n     a <span class=\"token operator\">=</span> ch <span class=\"token operator\">-</span> <span class=\"token number\">48</span><span class=\"token punctuation\">;</span>\n        appear<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Digit:\t    0 1 2 3 4 5 6 7 8 9 \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Occurrences:%d %d %d %d %d %d %d %d %d %d\"</span><span class=\"token punctuation\">,</span> appear<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> appear<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> appear<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> appear<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> appear<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&gt;</span>     appear<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> appear<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> appear<span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> appear<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> appear<span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</code></pre>\n</blockquote>\n<h4 id=\"8-9随机步法\"><a class=\"markdownIt-Anchor\" href=\"#8-9随机步法\">#</a> 8-9 随机步法</h4>\n<p>8-9：随机步法（Random Walk）</p>\n<p>编写程序，⽣成⼀种贯穿 10×10 字符数组（初始时全为字符’.’）的 “随机步法”。程序必须随机地从⼀个元素 “⾛到” 另⼀个元素，每次都向上、向下、向左或向右移动⼀个元素位置。已访问过的元素按访问顺序⽤字⺟ A 到 Z 进⾏标记。</p>\n<p>下⾯是⼀个输出示例：</p>\n<p>A\t.\t.\t.\t.\t.\t.\t.\t.\t.<br>\nB\tC\tD\t.\t.\t.\t.\t.\t.\t.<br>\n.\tF\tE\t.\t.\t.\t.\t.\t.\t.<br>\nH\tG\t.\t.\t.\t.\t.\t.\t.\t.<br>\nI\t.\t.\t.\t.\t.\t.\t.\t.\t.<br>\nJ\t.\t.\t.\t.\t.\t.\t.\tZ\t.<br>\nK\t.\t.\tR\tS\tT\tU\tV\tY\t.<br>\nL\tM\tP\tQ\t.\t.\t.\tW\tX\t.<br>\n.\tN\tO\t.\t.\t.\t.\t.\t.\t.<br>\n 利⽤ srand 函数和 rand 函数（⻅程序 deal.c）产⽣随机数，然后查看次数除以 4 的余数。余数⼀共有 4 种可能的值（0、1、2 和 3），指示下⼀次移动的 4 种可能⽅向。在执⾏移动之前，需要检查两项内容：⼀是不能⾛到数组外⾯，⼆是不能⾛到已有字⺟标记的位置。只要⼀个条件不满⾜，就得尝试换⼀个⽅向移动。如果 4 个⽅向都堵住了，程序就必须终⽌了。下⾯是提前结束的⼀个示例:</p>\n<p>A\tB\tG\tH\tI\t.\t.\t.\t.\t.<br>\n.\tC\tF\tO\tJ\tK\t.\t.\t.\t.<br>\n.\tD\tE\tN\tM\tL\t.\t.\t.\t.<br>\n.\t.\t.\t.\t.\t.\t.\t.\t.\t.<br>\n.\t.\t.\t.\t.\t.\t.\t.\t.\t.<br>\n.\t.\t.\t.\t.\t.\t.\t.\t.\t.<br>\n.\t.\t.\t.\t.\t.\t.\t.\t.\t.<br>\n.\t.\t.\t.\t.\t.\t.\t.\t.\t.<br>\n.\t.\t.\t.\t.\t.\t.\t.\t.\t.<br>\n 因为 Y 的 4 个⽅向都堵住了，所以没有地⽅可以放置下⼀步的 Z 了。</p>\n<blockquote>\n<pre><code><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;time.h&gt;</span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">char</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//声明数组</span>\n        <span class=\"token punctuation\">{</span><span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span><span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span><span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span><span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span><span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span><span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span><span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span><span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span><span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span><span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> row <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> line <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//测试用防止死循环</span>\n    <span class=\"token keyword\">char</span> ch <span class=\"token operator\">=</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">srand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span><span class=\"token punctuation\">)</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ch<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">do</span>\n    <span class=\"token punctuation\">{</span>\n        j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//测试用防止死循环 因为之前出现了死循环</span>\n        <span class=\"token keyword\">int</span> fate <span class=\"token operator\">=</span> <span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//获得0到4的随机数</span>\n        ch<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>                  <span class=\"token comment\">//先增如果不符合后面再减</span>\n        <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>fate<span class=\"token punctuation\">)</span>          <span class=\"token comment\">//根据随机数的大小来确定往哪个方向走</span>\n        <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span> <span class=\"token comment\">//向右</span>\n            row<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> row <span class=\"token operator\">&amp;&amp;</span> row <span class=\"token operator\">&lt;=</span> <span class=\"token number\">9</span> <span class=\"token operator\">&amp;&amp;</span> arr<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>line<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//判别向右右边不是边界并且右边不是已经走过的地点了</span>\n            <span class=\"token punctuation\">{</span>\n                arr<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>line<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ch<span class=\"token punctuation\">;</span> <span class=\"token comment\">//判定成功 走向右边 终止switch循环</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span>\n            <span class=\"token punctuation\">{</span>\n                row<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//判别失败 ch返回原值 row返回原值 退出swtich 等待进行下一次while循环</span>\n                ch<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span> <span class=\"token comment\">//向下</span>\n            line<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> line <span class=\"token operator\">&amp;&amp;</span> line <span class=\"token operator\">&lt;=</span> <span class=\"token number\">9</span> <span class=\"token operator\">&amp;&amp;</span> arr<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>line<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//判别向下不是边界并且下边不是已经走过的地方</span>\n            <span class=\"token punctuation\">{</span>\n                arr<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>line<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ch<span class=\"token punctuation\">;</span> <span class=\"token comment\">//判定成功 走向下边 终止switch循环</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span>\n            <span class=\"token punctuation\">{</span>\n                line<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//判别失败 ch返回原值 line返回原值 退出swtich 等待进行下一次while循环</span>\n                ch<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token operator\">:</span> <span class=\"token comment\">//向左</span>\n            row<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> row <span class=\"token operator\">&amp;&amp;</span> row <span class=\"token operator\">&lt;=</span> <span class=\"token number\">9</span> <span class=\"token operator\">&amp;&amp;</span> arr<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>line<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//判别向左不是边界并且下边不是已经走过的地方</span>\n            <span class=\"token punctuation\">{</span>\n                arr<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>line<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ch<span class=\"token punctuation\">;</span> <span class=\"token comment\">//判定成功 走向左边 终止switch循环</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span>\n            <span class=\"token punctuation\">{</span>\n                row<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//判别失败 ch返回原值 row返回原值 退出swtich 等待进行下一次while循环</span>\n                ch<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n            line<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>                                              <span class=\"token comment\">//向上</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> line <span class=\"token operator\">&amp;&amp;</span> line <span class=\"token operator\">&lt;=</span> <span class=\"token number\">9</span> <span class=\"token operator\">&amp;&amp;</span> arr<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>line<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//判别向上不是边界并且下边不是已经走过的地方</span>\n            <span class=\"token punctuation\">{</span>\n                arr<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>line<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ch<span class=\"token punctuation\">;</span> <span class=\"token comment\">//判定成功 走向上边 终止switch循环</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span>\n            <span class=\"token punctuation\">{</span>\n                line<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//判别失败 ch返回原值 line返回原值 退出swtich 等待进行下一次while循环</span>\n                ch<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">65</span> <span class=\"token operator\">&lt;=</span> ch <span class=\"token operator\">&amp;&amp;</span> ch <span class=\"token operator\">&lt;</span> <span class=\"token number\">90</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>row <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>line<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'.'</span> <span class=\"token operator\">||</span> arr<span class=\"token punctuation\">[</span>row <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>line<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'.'</span> <span class=\"token operator\">||</span> arr<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>line <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span>     <span class=\"token operator\">==</span> <span class=\"token string\">'.'</span> <span class=\"token operator\">||</span> arr<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>line <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//while循环判定 CH在A到Z之内 并且上下左右没有都被堵住</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> k<span class=\"token operator\">+</span><span class=\"token operator\">&gt;</span>     <span class=\"token operator\">+</span><span class=\"token punctuation\">)</span>                                                                                                              <span class=\"token operator\">&gt;</span>                           <span class=\"token comment\">//嵌套for循环打印二维数组</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c\"</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</code></pre>\n</blockquote>\n<h4 id=\"8-15加密\"><a class=\"markdownIt-Anchor\" href=\"#8-15加密\">#</a> 8-15 加密</h4>\n<p>8-15：加密（Encryption）</p>\n<p>已知的最古⽼的⼀种加密技术是凯撒加密（得名于 Julius caesar）。该⽅法把⼀条消息中的每个字⺟⽤字⺟表中固定距离之后的那个字⺟来替代。（如果越过了字⺟ Z，会绕回到字⺟表的起始位置。例如，如果每个字⺟都⽤字⺟表中两个位置之后的字⺟代替，那么 Y 就被替换为 A，Z 就被替换为 B。）</p>\n<p>编写程序⽤凯撒加密⽅法对消息进⾏加密。⽤户输⼊待加密的消息和移位计数（字⺟移动的位置数⽬）：<br>\nEnter message to be encrypted: Go ahead, make my day.<br>\nEnter shift amount (1-25): 3<br>\nEncrypted message: Jr dkhdg, pdnh pb gdb.</p>\n<p>注意，当⽤户输⼊ 26 与移位计数的差值时，程序可以对消息进⾏解密:</p>\n<p>Enter message to be encrypted: Jr dkhdg, pdnh pb gdb.<br>\nEnter shift amount (1-25): 23<br>\nEncrypted message: Go ahead, make my day</p>\n<p>不是字⺟的那些字符不要改动。此外，加密时不要改变字⺟的⼤⼩写。</p>\n<p>输出范例：</p>\n<p>Enter message to be encrypted: Hello, world!<br>\nEnter shift amount (1-25): 3<br>\nEncrypted message: Khoor, zruog!</p>\n<p>Enter message to be encrypted: Khoor, zruog!<br>\nEnter shift amount (1-25): 23<br>\nEncrypted message: Hello, world!</p>\n<blockquote>\n<pre><code><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> basic<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter message to be encrypted: \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ch <span class=\"token operator\">=</span> <span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        basic<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ch<span class=\"token punctuation\">;</span>\n        a<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter shift amount (1-25)\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Encrypted message: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>basic<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>basic<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">64</span> <span class=\"token operator\">&lt;</span> basic<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>basic<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">91</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            basic<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> basic<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> x <span class=\"token operator\">-</span> <span class=\"token number\">26</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>basic<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">64</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                basic<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> basic<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">26</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c\"</span><span class=\"token punctuation\">,</span> basic<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">96</span> <span class=\"token operator\">&lt;</span> basic<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>basic<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">123</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            basic<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> basic<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> x <span class=\"token operator\">-</span> <span class=\"token number\">26</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>basic<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">96</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                basic<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> basic<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">26</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c\"</span><span class=\"token punctuation\">,</span> basic<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>basic<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">48</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c\"</span><span class=\"token punctuation\">,</span> basic<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</code></pre>\n</blockquote>\n<h3 id=\"实验四\"><a class=\"markdownIt-Anchor\" href=\"#实验四\">#</a> 实验四</h3>\n<h4 id=\"10-1栈stack\"><a class=\"markdownIt-Anchor\" href=\"#10-1栈stack\">#</a> 10-1：栈（Stack）</h4>\n<p>修改如下程序（10.2 节的栈示例）使它存储字符而不是整数。</p>\n<p>增加 main 函数，用来要求用户输入一串圆括号或花括号，然后指出它们之间的嵌套是否正确。</p>\n<p>输出范例：</p>\n<p>Enter parentheses and/or braces: ()({})({})<br>\nParentheses/braces are nested properly</p>\n<p>Enter parentheses and/or braces: ((}<br>\nParentheses/braces are NOT nested properly</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdbool.h&gt;</span>   <span class=\"token comment\">/* C99 only */</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h&gt;</span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">STACK_SIZE</span> <span class=\"token expression\"><span class=\"token number\">100</span></span></span>\n\n<span class=\"token comment\">/* external variables */</span>\n<span class=\"token keyword\">char</span> contents<span class=\"token punctuation\">[</span>STACK_SIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> top <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">stack_overflow</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Stack overflow\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>EXIT_FAILURE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">stack_underflow</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Stack underflow\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>EXIT_FAILURE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">make_empty</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  top <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nbool <span class=\"token function\">is_empty</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> top <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nbool <span class=\"token function\">is_full</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> top <span class=\"token operator\">==</span> STACK_SIZE<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">is_full</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">stack_overflow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">else</span>\n    contents<span class=\"token punctuation\">[</span>top<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ch<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">char</span> <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">is_empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">stack_underflow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">else</span>\n    <span class=\"token keyword\">return</span> contents<span class=\"token punctuation\">[</span><span class=\"token operator\">--</span>top<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* prevents compiler warning due to stack_underflow() call */</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> abc<span class=\"token punctuation\">[</span><span class=\"token number\">40</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">;</span>\n    a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    b <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    c <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    d <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter parentheses and/or braces:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%[^\\n]\"</span><span class=\"token punctuation\">,</span>abc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    j <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>abc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    j<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">push</span><span class=\"token punctuation\">(</span>abc<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>top <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        ch <span class=\"token operator\">=</span> contents<span class=\"token punctuation\">[</span><span class=\"token operator\">--</span>top<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">'('</span><span class=\"token operator\">:</span>\n            a<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">')'</span><span class=\"token operator\">:</span>\n            b<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">'{'</span><span class=\"token operator\">:</span>\n            c<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">'}'</span><span class=\"token operator\">:</span>\n            d<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">&gt;</span> a<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>d <span class=\"token operator\">&gt;</span> c<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> b <span class=\"token operator\">&amp;&amp;</span> c <span class=\"token operator\">==</span> d<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Parentheses/braces are nested properly\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Parentheses/braces are NOT nested properly\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>此 answer 来自于林 bei</strong></p>\n<h4 id=\"12-01逆序reversal\"><a class=\"markdownIt-Anchor\" href=\"#12-01逆序reversal\">#</a> 12-01：逆序（Reversal）</h4>\n<p>编写程序读一条消息，然后逆序打印出这条消息。</p>\n<p>输出范例：</p>\n<p>Enter a message: Don’t get mad, get even.<br>\nReversal is: .neve teg ,dam teg t’noD</p>\n<p>Enter a message: Hello, world!<br>\nReversal is: !dlrow ,olleH</p>\n<p>提示：⼀次读取消息中的⼀个字符（⽤ getchar 函数），并且把这些字符存储在数组中，当数组写满或者读到字符 ‘\\n’ 时停⽌读⼊。</p>\n<blockquote>\n<pre><code><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> Reversal<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'%'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        Reversal<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'%'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter a message: \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ch <span class=\"token operator\">=</span> <span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        Reversal<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ch<span class=\"token punctuation\">;</span>\n        i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> <span class=\"token number\">99</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> k<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Reversal<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'%'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c\"</span><span class=\"token punctuation\">,</span> Reversal<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span>\n            <span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</code></pre>\n</blockquote>\n<h4 id=\"13-01最大最小单词简略版the-biggest-and-smallest-words\"><a class=\"markdownIt-Anchor\" href=\"#13-01最大最小单词简略版the-biggest-and-smallest-words\">#</a> 13-01：最大最小单词简略版（The Biggest and Smallest Words）</h4>\n<p>编写程序找出一组单词中 “最小” 单词和 “最大” 单词。</p>\n<p>用户输入单词后，程序根据字典顺序决定排在最前面和最后面的单词。</p>\n<p>当用户输入 4 个字母的单词时，程序停止读入。假设所有单词都不超过 20 个字母。</p>\n<p>输出范例 1：<br>\nEnter word: dog<br>\nEnter word: zebra<br>\nEnter word: rabbit<br>\nEnter word: catfish<br>\nEnter word: walrus<br>\nEnter word: cat<br>\nEnter word: fish</p>\n<p>Smallest word: cat<br>\nLargest word zebra</p>\n<p>输出范例 2：</p>\n<p>Enter word: computer<br>\nEnter word: ink<br>\nEnter word: light<br>\nEnter word: bookrack<br>\nEnter word: book</p>\n<p>Smallest word: book<br>\nLargest word: light</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SIZE</span> <span class=\"token expression\"><span class=\"token number\">50</span></span></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">strorder</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>string<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">char</span> input<span class=\"token punctuation\">[</span>SIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">21</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//存储输入的数组</span>\n    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>words<span class=\"token punctuation\">[</span>SIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//存储指针的数组</span>\n    <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">//输入的字符串个数</span>\n    <span class=\"token keyword\">do</span>\n    <span class=\"token punctuation\">{</span>\n        count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">fputs</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter word:\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">stdout</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">gets</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        words<span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> input<span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">strorder</span><span class=\"token punctuation\">(</span>words<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fputs</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Smallest word:\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">stdout</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span>words<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fputs</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Largest word:\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">stdout</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span>words<span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">strorder</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>string<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span> <span class=\"token comment\">//排序函数</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>temp<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> num <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> string<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                temp <span class=\"token operator\">=</span> string<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                string<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> string<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                string<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n",
            "tags": [
                "icoding答案"
            ]
        },
        {
            "id": "https://github.com/YogMas/YogMas.github.io/2021/11/18/ji-suan-ji-zu-cheng-qi-mo-fu-xi/",
            "url": "https://github.com/YogMas/YogMas.github.io/2021/11/18/ji-suan-ji-zu-cheng-qi-mo-fu-xi/",
            "title": "计算机组成原理与结构",
            "date_published": "2021-11-17T16:00:00.000Z",
            "content_html": "<h1 id=\"计算机组成原理与结构重要知识点\"><a class=\"markdownIt-Anchor\" href=\"#计算机组成原理与结构重要知识点\">#</a> <strong>《计算机组成原理与结构》重要知识点</strong></h1>\n<h2 id=\"计算机结构\"><a class=\"markdownIt-Anchor\" href=\"#计算机结构\">#</a> 计算机结构</h2>\n<h3 id=\"第一章-概论\"><a class=\"markdownIt-Anchor\" href=\"#第一章-概论\">#</a> 第一章 概论</h3>\n<ol>\n<li>\n<p>冯。诺依曼体制</p>\n<ul>\n<li>数据以二进制的形式存储</li>\n<li>采用存储程序方式工作</li>\n<li>规定计算机由五大功能部件 (运算器，存储期，控制器，输入输出系统) 组成，并规定这五大功能部件的功能</li>\n</ul>\n</li>\n<li>\n<p>存储程序工作方式</p>\n<p>事先编制程序，存储程序，自动连续运行程序</p>\n</li>\n<li>\n<p>控制流？数据流？</p>\n<ul>\n<li>\n<p>控制流：控制计算机工作的信息</p>\n</li>\n<li>\n<p>数据流：计算机加工处理的对象</p>\n</li>\n</ul>\n</li>\n<li>\n<p>总线及其组成？</p>\n<p><strong>能为多个部件分时共享的一组信息传送线路及相应的控制逻辑</strong></p>\n</li>\n<li>\n<p>模拟信号？数字信号？数字信号有哪两种？</p>\n<ul>\n<li>模拟信号：<strong>随时间连续变化的电信号</strong></li>\n<li>数字信号:<strong> 在时间或空间上断续变化的电信号</strong>\n<ul>\n<li>电平：并行传送</li>\n<li>脉冲：串行传送</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>什么是接口？</p>\n<p><strong>部件与部件（指硬件或软件）之间的交接部分称为接口；</strong></p>\n<p>主机系统总线与 I/O 设备之间的交接部分称为 I/O 接口。</p>\n</li>\n<li>\n<p>基本字长？</p>\n<p><strong>参加一次定点运算的操作数的位数</strong></p>\n</li>\n<li>\n<p>CPU 主频？时钟频率？</p>\n<ul>\n<li><strong>是计算机的振荡器输出的脉冲序列的频率，是计算机中一切操作所依据的时间基准信号，其高低决定了计算机工做速度的快慢。</strong></li>\n<li><strong>是主频脉冲经分频后所形成的时钟脉冲序列的频率，两个相邻时钟脉冲之间的间隔时间是一个时钟周期时间，也称为节拍</strong></li>\n</ul>\n</li>\n<li>\n<p>数据通路宽度？数据传输率？</p>\n<ul>\n<li>数据总线一次能并行传送的数据位数</li>\n<li><strong>数据总线每秒传送的数据量，也称为数据总线的带宽。</strong></li>\n</ul>\n</li>\n</ol>\n<h3 id=\"第二章-计算机中的信息表示\"><a class=\"markdownIt-Anchor\" href=\"#第二章-计算机中的信息表示\">#</a> 第二章 计算机中的信息表示</h3>\n<ol>\n<li>\n<p>一个数值型数据的完整表示需三个方面？</p>\n<ul>\n<li>采用什么进位计数制，</li>\n<li>如何处理带符号的数，如何表示符号</li>\n<li>小数应该如何处理    定点和浮点表示</li>\n</ul>\n</li>\n<li>\n<p>权、基数</p>\n<ul>\n<li>基数：计数值所用到的数字符号的个数，逢 R 进 1</li>\n<li>权：表示不同数位上数值的大小的一个固定常数   12 中 2 的权为 1  1 的权为 10</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"第三章-指令系统\"><a class=\"markdownIt-Anchor\" href=\"#第三章-指令系统\">#</a> 第三章 指令系统</h3>\n<ol>\n<li>\n<p>数的定点表示与浮点表示？</p>\n<ul>\n<li>定点表示：约定机器中所有数据的小数点位置固定不变，通常将数据表示为纯小数和纯整数</li>\n<li>浮点表示:<strong> 把数的范围和精度分别表示的方法</strong>，小数点的位置随比例因子的不同而在一定范围内可以自由浮动</li>\n</ul>\n</li>\n<li>\n<p>指令？指令系统？</p>\n<ul>\n<li>指令：一系列按某种规律有序排列，能被 CPU 识别，执行的二进制代码</li>\n<li>指令系统：一台计算机所能执行的全部指令</li>\n</ul>\n</li>\n<li>\n<p>寻址方式</p>\n<p>① 立即寻址。在读取指令时也就从指令之中获得了操作数，即操作数包含在指令中。</p>\n<p>② 直接寻址类。直接给出主存地址或寄存器编号，从 CPU 内或主存单元内读取操作数。</p>\n<p>③ 间接寻址类。先从某寄存器中或主存中读取地址，再按这个地址访问主存以读取操作数。</p>\n<p>④ 变址类。指令给出的是形式地址（不是最终地址），经过某种变换（例如相加、相减、高低位地址拼接等），才获得有效地址，据此访问主存储器以读取操作数。</p>\n</li>\n<li>\n<p>何谓隐式 I/O 指令？其主要特点是什么？</p>\n<p>所谓隐式 I/O 指令，就是用传送指令实现 I/O 操作，即针对统一编址，用传送指令访问 I/O 端口。不设专用 I/O 指令。其主要特点是借用内存传输指令实现 IO 操作。</p>\n</li>\n</ol>\n<h3 id=\"第四章-中央处理器\"><a class=\"markdownIt-Anchor\" href=\"#第四章-中央处理器\">#</a> 第四章 中央处理器</h3>\n<ol>\n<li>\n<p>CPU 内部各寄存器的功能？</p>\n<ul>\n<li>\n<h3 id=\"数据寄存器mdr作为cpu和主存-外设之间信息传输的中转站用以弥补cpu和主存-外设之间操作速度上的差异\"><a class=\"markdownIt-Anchor\" href=\"#数据寄存器mdr作为cpu和主存-外设之间信息传输的中转站用以弥补cpu和主存-外设之间操作速度上的差异\">#</a> 数据寄存器 MDR: 作为 CPU 和主存、外设之间信息传输的中转站，用以弥补 CPU 和主存、外设之间操作速度上的差异。</h3>\n</li>\n<li>\n<p>指令寄存器（Instruction Register，IR）用来保存当前正在执行的一条指令。</p>\n</li>\n<li>\n<p>程序计数器（Program Counter，PC）用来指出下一条指令在主存储器中的地址。</p>\n</li>\n<li>\n<p>程序状态字（Program Status Word，PSW）用来表征当前运算的状态及程序的工作方式。</p>\n</li>\n<li>\n<h4 id=\"数据地址寄存器mar用来保存当前cpu所访问的数据单元的地址\"><a class=\"markdownIt-Anchor\" href=\"#数据地址寄存器mar用来保存当前cpu所访问的数据单元的地址\">#</a> 数据地址寄存器（MAR）: 用来保存当前 CPU 所访问的数据单元的地址</h4>\n</li>\n<li>\n<p>通用寄存器的功能是：当算术逻辑单元（ALU）执行算术或逻辑运算时，为 ALU 提供一个工作区。</p>\n</li>\n</ul>\n</li>\n<li>\n<p>数据通路结构</p>\n<ol>\n<li>单组内总线、分立寄存器结构</li>\n<li>单组内总线、集成寄存器结构</li>\n<li>多组内总线结构</li>\n</ol>\n<ul>\n<li>**CPU 总线和数据通路结构：**ALU 为内部数据传送通路的中心、寄存器采用分立结构、内总线采用单向数据总线，与系统总线的连接通过 MAR、MDR 实现</li>\n</ul>\n</li>\n<li>\n<p>何谓同步控制方式，何谓异步控制？有何主要特征？应用场合？</p>\n<ul>\n<li>同步控制：各项操作由统一的时序信号进行同步控制</li>\n<li>特点：时序关系比较简单，但在时间的利用上是不经济的</li>\n<li>异步控制：各项操作按不同需求安排时间，不受统一时序控制</li>\n</ul>\n</li>\n<li>\n<p>何谓主从设备，试举例说明</p>\n<p>主设备：申请并掌控总线的设备 否则为从设备</p>\n<p>当外设有信息传送后，DMA 申请并掌握总线线权后，DMA 则为主设备</p>\n</li>\n<li>\n<p>同步控制中如何引入异步应答的，试举例说明.</p>\n<p>以固定时钟周期作为时序基础，引入应答思想</p>\n<p>例如：8088 最大模式，用一根总线请求 / 应答实现总线权的转移</p>\n</li>\n<li>\n<p>微程序控制思想的基本要点是什么？</p>\n<p>微程序控制的基本思想是:</p>\n<p>一条机器指令对应一段微程序<br>\n一段微程序包含多条微指令<br>\n一条微指令包含机器指令一步操作所需要的微命令<br>\n将 CPU 工作流程对应的每个微操作命令序列编写成微程序 (微程序由若干微指令组成、每条微指令对应一个或几个微操作命令), 所有的微程序存放一个只读存储器中；控制器自动按照微程序的逻辑顺序，逐条取出微指令并执行，以实现 CPU 工作流程的控制</p>\n</li>\n<li>\n<p>判断下面叙述是否正确，说明理由：串行加法器中的进位链是串行进位链，并行加法器中的进位链只有并行进位链。</p>\n<p>并行加法器中的进位链可以并行串行结合</p>\n</li>\n<li>\n<p>常用的加法器进位链结构有哪几种</p>\n<p>串行进位、并行进位</p>\n</li>\n<li>\n<p>组合逻辑控制器、微程序控制器有何区别</p>\n<ul>\n<li>组合逻辑控制器：由硬连逻辑电路产生微命令的方式称为组合逻辑控制方式</li>\n<li>微程序控制器：由微指令译码产生微命令的方式称为微程序控制方式。它的基本思想如下：将若干微命令编制成一条微指令，控制实现一步操作；将若干微指令组成一段微程序，解释执行一条机器指令；将微程序事先存放在控制存储器中，执行机器指令时再取出。</li>\n</ul>\n</li>\n<li>\n<p>组合逻辑控制器、微程序控制器的时序系统是如何划分的？</p>\n<p>采用三级时序系统：工作周期、时钟周期 (节拍)、工作脉冲</p>\n<ul>\n<li>工作周期：FT、ST、DT、ET、DMAT、IT</li>\n<li>时钟周期（节拍）：以访存时间作为一步操作时间</li>\n<li>工作脉冲：同步定时脉冲控制定时操作，每个时钟周期结束时设置一个脉冲</li>\n</ul>\n</li>\n<li>\n<p>微命令、微操作、微指令、微指令周期、微程序？</p>\n<p><strong>微命令：各项操作所需要的控制命令</strong> /<strong> 控制各功能部件的电平和脉冲信号</strong></p>\n<p>一条机器指令的执行对应一段微程序</p>\n<p>一段微程序可包含多条微指令</p>\n<p>一条微指令包含机器指令一步所需要的微命令</p>\n</li>\n<li>\n<p>1 位全加器的结构及关系表达式</p>\n<p>Ci = (ab) 与 (a 异或 b) Ci-1</p>\n<p>三个输入量一个输出量</p>\n</li>\n<li>\n<p>并行加法器中的串行进位链结构：Cn = Gn + PnCn-1</p>\n<p>并行进位链结构：Cn = Gn + PnGn-1+ … + Pn…P1C0</p>\n</li>\n<li>\n<p>时序信号？时序系统？</p>\n<p>时序信号：周期、节拍、脉冲</p>\n<p>时序系统：产生时序信号的部件</p>\n</li>\n</ol>\n<h3 id=\"第五章-存储子系统\"><a class=\"markdownIt-Anchor\" href=\"#第五章-存储子系统\">#</a> 第五章 存储子系统</h3>\n<ol>\n<li>\n<p>主存、缓存、外存？</p>\n<p>主存：CPU 可直接访问，存放 CPU 当前使用的指令和数据。其特点是：能随机访问、工作速度快、容量有限。</p>\n<p>辅存（外存）：存放大量的后备程序和数据。特点：速度较慢、容量大。</p>\n</li>\n<li>\n<p>高速缓存 Cache 用来存放什么内容？设置它的主要目的是什么？</p>\n<p>高速缓冲存储器 (Cache)：存放 CPU 在当前一小段时间内多次使用的程序和数据，以缓解 CPU 和主存的速度差异。特点：速度很快、容量小。‘</p>\n</li>\n<li>\n<p>存储介质？</p>\n<p>（1）半导体存储器</p>\n<p>静态存储器：利用双稳态触发器存储信息，功耗较大，速度快，做 Cache。</p>\n<p>动态存储器：依靠电容上的电荷暂存信息，功耗较小，容量较大，速度较快适合做主存。</p>\n<p>（2）磁表面存储器：磁带、存盘、硬盘</p>\n<p>利用磁层上不同方向的磁化区域表示信息。特点：存储容量大；非破坏性读出、永久保存；读写速度比半导体存储器慢；适合用于外存。</p>\n<p>（3）光盘存储器</p>\n<p>利用光斑的有无存储信息，特点：容量大；非破坏性读出、永久保存；速度慢；适合用于外存。</p>\n</li>\n<li>\n<p>何谓随机存取？何谓顺序存取？何谓直接存取？请各试举一例。</p>\n<ul>\n<li>可按地址访问存储器中的任一单元，与访问时间和单元地址无关，SRAM、DRAM</li>\n<li>访问时读 / 写部件按顺序查找目标地址，访问时间与数据位置有关 - 磁带机</li>\n<li>访问时读 / 写部件先直接指向一个小区域，再在该区域内顺序查找。访问时间与数据位置有关，如磁盘、硬盘、光盘</li>\n</ul>\n</li>\n<li>\n<p>静态存储器 SRAM、动态存储器 DRAM 存储原理</p>\n<ul>\n<li>\n<p>静态存储器 SRAM (双极型、静态 MOS 型): 依靠双稳态电路内部交叉反馈机制，功耗较大，速度快，作 Cache、（六管单元构成 1 位，有 VCC 供电）非破坏性读出，读出后不需重写。</p>\n</li>\n<li>\n<p>动态存储器 DRAM：依靠电容存储电荷的原理存储信息，功耗较小，容量大，速度较快，作主存。（4 管单元、无 VCC 供电）四管单元是非破坏性读出，读出过程即实现刷新；需定期向电容补充电荷（动态刷新）</p>\n</li>\n<li>\n<p>（单管单元，无 VCC）：单管单元是破坏性读出，读出后需重写</p>\n</li>\n</ul>\n</li>\n<li>\n<p>动态刷新分为哪几种情况，各有什么特点？</p>\n<ul>\n<li>集中刷新：2ms 内集中安排所有刷新周期。用于实时要求不高的场合</li>\n<li>分散刷新：各刷新周期分散安排在存取周期中。造成主存利用率降低，用在低速系统中</li>\n<li>异步刷新：刷新周期分散安排在 2ms 内。</li>\n</ul>\n</li>\n<li>\n<p>全地址译码方式？部分地址译码方式？</p>\n<ul>\n<li><strong>全译码方式：将除了与芯片连接的地址以外的所有高位地址用于译码产生片选信号</strong></li>\n<li><strong>部分译码方式</strong>：将除了与芯片连接的地址外的部分高位地址用于译码产生片选信号（易出现地址重叠）</li>\n</ul>\n</li>\n<li>\n<p>刷新和重写的区别</p>\n<p><strong>刷新和重写的区别</strong>：刷新是动态存储芯片，需补充电荷以保持原信息；重写是破坏性读出后重写，以恢复原来的信息。</p>\n</li>\n</ol>\n<h3 id=\"第六章-io系统\"><a class=\"markdownIt-Anchor\" href=\"#第六章-io系统\">#</a> 第六章 I/O 系统</h3>\n<ol>\n<li>\n<p>系统总线上一般包含哪三组信息</p>\n<ul>\n<li>控制信息</li>\n<li>地址信息</li>\n<li>数据信息</li>\n</ul>\n<ol start=\"2\">\n<li>\n<p>中断方式定义、实质、特点？</p>\n<p>中断含义：CPU 暂时中止现行程序的执行，转去执行为某个随机事件服务的中断处理程序。处理完毕后自动恢复原程序的执行。</p>\n<p>实质：</p>\n<ul>\n<li>程序切换\n<ul>\n<li>方法：保存断点、保护现场、恢复现场、返回断点</li>\n<li>时间：一条指令结束时切换，保证程序的完整性<br>\n特点：</li>\n</ul>\n</li>\n<li>随机性\n<ul>\n<li>随机发生的事态（按键、故障）</li>\n<li>有意调用，随即请求与处理的事态（调用打印机）</li>\n<li>随机插入的事态 (软中断指令可插入程序任何位置)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>中断向量、中断向量表、向量地址？</p>\n<p>中断类型码：每个中断源对应的编号</p>\n<p>中断向量：中断服务程序入口地址</p>\n<p>中断向量表：存放各中断服务程序的入口地址的单元</p>\n<p>向量地址：访问中断向量表的地址码，可通过计算中断类型码得到</p>\n<p><strong>模型机中：向量地址 = 中断号 + 2</strong></p>\n<p><strong>IBM PC 向量表：向量地址 = 中断号 * 4</strong></p>\n</li>\n<li>\n<p>何谓向量中断？何谓非向量中断？各有何优点和缺点？</p>\n<p><strong>非向量中断：由软件查询提供服务程序入口地址</strong></p>\n<p><strong>向量中断：由硬件直接提供服务程序入口地址</strong></p>\n</li>\n<li>\n<p>单级中断，多级中断</p>\n<p>中断处理：主要任务：CPU 执行中断服务程序</p>\n<p>单级中断流程：</p>\n<ul>\n<li>保护现场、中断服务处理、恢复现场、开中断、返回</li>\n</ul>\n<p>多级中断流程：</p>\n<ul>\n<li>保护现场</li>\n<li>送新屏蔽字、开中断（禁止同级别或更低级别的请求，开发更高级别的请求）</li>\n<li>中断服务处理</li>\n<li>关中断</li>\n<li>恢复现场及原屏蔽字</li>\n<li>开中断</li>\n<li>返回</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>\n<p>程序直传方式定义、实质、特点？</p>\n<p>依靠 CPU 直接执行相关的 IO 程序来实现数据的输入和输出的控制</p>\n<p>优缺点：硬件开销小、并行程度低，实时性差</p>\n</li>\n<li>\n<p>程序直传方式，中断方式，DMA 方式之间的区别？</p>\n<ul>\n<li>直接程序传送：依靠 CPU 直接执行相关的 IO 程序来实现数据的输入和输出控制</li>\n<li>中断方式：设备提出中断请求，主机响应后与设备交换信息，接口中包含中断控制请求</li>\n<li>DMA 方式：直接依靠硬件系统来控制主存和设备之间的数据传送，传送期间无需 CPU 干预，传送结束后通常通过中断方式通知 CPU, 支持高速外设与主存之间进行 DMA 方式交换数据</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"微型计算机原理与接口技术\"><a class=\"markdownIt-Anchor\" href=\"#微型计算机原理与接口技术\">#</a> 微型计算机原理与接口技术</h2>\n<h3 id=\"第二章-微处理器与总线\"><a class=\"markdownIt-Anchor\" href=\"#第二章-微处理器与总线\">#</a> 第二章 微处理器与总线</h3>\n<ol>\n<li>\n<p>微处理器主要由哪几部分构成？</p>\n<p><strong>总线接口单元和执行单元</strong></p>\n<ul>\n<li>总线接口部件由下列各部分组成：4 个段地址<a href=\"https://zhidao.baidu.com/search?word=%BC%C4%B4%E6%C6%F7&amp;fr=iknow_pc_qb_highlight\">寄存器</a>：CS——16 位的代码段寄存器；DS16 位的数据段寄存器；ES——16 位的扩展段寄存器；SS16 位的堆栈段寄存器；16 位的指令指针寄存器 IP；20 位的地址加法器；6 字节的指令队列缓冲器。</li>\n<li>执行部件由下列几个部分组成：8 个通用寄存器：即 AX、BX、CX、DX,BP,SP,SI,DI ；其中，4 个数据寄存器：AX、BX、CX、DX；2 个地址指针寄存器：BP,SP；2 个变址寄存器：SI,DI ；标志寄存器 FR (flags register)；<a href=\"https://zhidao.baidu.com/search?word=%CB%E3%CA%F5%C2%DF%BC%AD%B5%A5%D4%AA&amp;fr=iknow_pc_qb_highlight\">算术逻辑单元</a> ALU。</li>\n</ul>\n</li>\n<li>\n<p>说明 8088CPU 中 EU 和 BIU 的主要功能。在执行指令时，EU 能直接访问存储器吗？</p>\n<p>CPU 内部结构由两部分组成：执行单元（EU）、总线接口单元（BIU）</p>\n<ul>\n<li>执行单元 EU：包括 ALU、8 个通用寄存器、标志寄存器 FLAGS 和 EU 控制部件从指令队列不断取出指令代码，译码后产生执行指令的控制信号。ALU 完成算术和逻辑运算，通用寄存器存放操作数和运算结果，而运算结果的状态特征则保存到标志寄存器中</li>\n<li>总线接口单元 BIU：包括四个段寄存器、程序计数器、指令队列、地址加法器、总线控制逻辑，负责 CPU 与存储器和 IO 接口之间的信息传送。由于 8086/8088CPU 中的寄存器均为 16 位，而 CPU 外部地址线为 20 根，因此 BIU 中采用地址加法器得到 20 位的物理地址，可以寻址的存储单元为 1M。</li>\n</ul>\n</li>\n<li>\n<p>8086/8088CPU 中，有哪些通用寄存器和专用寄存器？说明他们的作用。</p>\n<p>内部由 8 个通用寄存器、4 个段寄存器、2 个控制寄存器</p>\n<ul>\n<li>通用寄存器包括\n<ul>\n<li>数据类寄存器：AX、BX、CX、DX，常用于存放操作数或运算结果</li>\n<li>地址指针寄存器：包括堆栈指针寄存器 SP 和基址指针寄存器 BP。处理可以存放操作数外，还可以作为地址指针，常用于在堆栈操作中存放偏移地址。\n<ul>\n<li>SP：在堆栈操作中用来存放栈顶单元的偏移地址，永远指向堆栈的栈顶</li>\n<li>BP：默认用于存放当前堆栈内某个单元的偏移地址，即可以对堆栈内任意单元的数据进行操作。</li>\n</ul>\n</li>\n<li>变址寄存器：包括源变址寄存器 SI 和目的变址寄存器 DI，处理可以存放操作数和作为地址指针外，还分别固定应用于数据的串操作指令中，提供串操作数的索引地址。\n<ul>\n<li>SI：串操作指令中隐含作为源操作数偏移地址</li>\n<li>DI：串操作指令中隐含作为目的操作数的偏移地址</li>\n</ul>\n</li>\n<li>段寄存器：\n<ul>\n<li>CS，代码段寄存器</li>\n<li>DS：数据段寄存器</li>\n<li>ES：附加段寄存器</li>\n<li>SS：堆栈段寄存器</li>\n</ul>\n</li>\n<li>控制寄存器：\n<ul>\n<li>IP：指令指针寄存器，用以存放预取指令的偏移地址</li>\n<li>FLAGS：标志寄存器或程序状态字\n<ul>\n<li>算术或逻辑运算结果的特征位</li>\n<li>控制标志位</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>8086/8088 系统中，存储器为什么要分段？一个段最大为多少字节？最小为多少字节？</p>\n<p>分段的主要目的是便于存储器的管理，使得可以用 16 位<a href=\"https://zhidao.baidu.com/search?word=%BC%C4%B4%E6%C6%F7&amp;fr=iknow_pc_qb_highlight\">寄存器</a>来寻址 20 位的内存空间。</p>\n<p>一个段最大为 64KB，最小为 16B。</p>\n</li>\n<li>\n<p>8086/8088 系统中，物理地址和逻辑地址是指什么？</p>\n<ul>\n<li>\n<p>物理地址:</p>\n<ul>\n<li>\n<p>指每个内存单元在整个内存空间中具有的唯一的地址</p>\n</li>\n<li>\n<p>8086/8088CPU 有 20 根地址线，它可以产生 20 位的地址码，寻址范围为 220. 同时存储器按字节进行编制，索引存储器最大容量为 1MB</p>\n</li>\n</ul>\n</li>\n<li>\n<p>逻辑地址：</p>\n<ul>\n<li>是指由程序产生的与段相关的偏移地址部分</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>8088/8086 CPU 的特点？</p>\n<p><strong>指令流水线：8088/8085CPU 并行完成程序的执行，假设不考虑存储器操作数</strong></p>\n<p><strong>内存分段管理：</strong></p>\n<ul>\n<li>8088/8086CPU 的内部结构为 16 位【内部 1M 的存储单元，但寄存器只有 16 位】</li>\n<li>作为地址时，则只能访问 64k 存储单元</li>\n<li>采用分段管理的方法，将内存空间分为多个逻辑段，每个逻辑段最大 64k 存储单元，段内每个单元的相对地址码用 16 位表示</li>\n<li>每个段设置段地址用 16 位寄存器存储，以区分不同的逻辑段</li>\n</ul>\n<p><strong>支持多处理器系统：</strong></p>\n<ul>\n<li>8086 8088 具有最小与最大两种工作模式：</li>\n<li>最小模式，也称为单处理器模式，系统控制总线的信号由 CPU 直接产生</li>\n<li>最大模式，也称为多处理器模式，由总线控制器 8288 提供所有总线信号</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"第四章-汇编语言程序设计\"><a class=\"markdownIt-Anchor\" href=\"#第四章-汇编语言程序设计\">#</a> 第四章 汇编语言程序设计</h3>\n<ol>\n<li>\n<p>指令与伪指令区别？</p>\n<p>指令汇编后生成可被 CPU 执行的代码</p>\n<p>伪指令不生产目标代码，只是用于告诉汇编程序如何对源程序进行汇编</p>\n<p><strong>伪指令在汇编过程中由汇编程序执行，如定义数据、分配存储区、定义段以及定义过程等</strong></p>\n</li>\n<li>\n<p>伪指令：段定义伪指令、数据定义伪指令：常数 (字符串的使用 DB、DW、DD)、变量和标号，当前位置计数器（ （（! 作变量使用，是 16 位偏移量）与定位伪指令 ORG 等伪指令。</p>\n</li>\n</ol>\n<h3 id=\"第六章-输入输出和中断技术\"><a class=\"markdownIt-Anchor\" href=\"#第六章-输入输出和中断技术\">#</a> 第六章 <strong>输入输出和中断技术</strong></h3>\n<ol>\n<li>\n<p>输人 / 输出系统主要由哪几个部分组成？主要有哪些特点？</p>\n<p>输入输出系统主要由三个部分组成，即输入输出接口、输入输出设备、输入输出软件。</p>\n<p>输入输出系统主要有 4 个特点：复杂性、异步性、实时性、与设备无关性</p>\n</li>\n<li>\n<p>I/0 接口的主要功能有哪些？有哪两种编址方式？在 8088/8086 系统中采用哪一种编址方式？</p>\n<p>一般来说，I/O 接口应具有以下功能:</p>\n<ul>\n<li>寻址</li>\n<li>数据缓冲</li>\n<li>数据格式变换</li>\n<li>控制逻辑</li>\n</ul>\n<p>有统一和独立编址</p>\n<p>8086 中采用独立编址方式</p>\n</li>\n<li>\n<p>试比较 4 种基本输人 / 输出方法的特点。</p>\n<p>在微型计算机系统中，主机与外设之间的数据传送有 4 种基本的输入输出方式：<br>\n无条件传送方式、查询工作方式、中断工作方式、直接存储器存取（DMA. 方式。它们各自具有以下特点：<br>\n（1）无条件传送方式适合于简单的、慢速的、随时处于 “准备好” 接收或发送数据的外部设备，数据交换与指令的执行同步，控制方式简单。<br>\n（2）查询工作方式针对并不随时 “准备好”、且满足一定状态才能实现数据的输入 / 输出的简单外部设备，其控制方式也比较简单，但 CPU 的效率比较低。<br>\n（3）中断工作方式是由外部设备作为主动的一方，在需要时向 CPU 提出工作请求，CPU 在满足响应条件时响应该请求并执行相应的中断处理程序。这种工作方式使 CPU 的效率提高，但控制方式相对较复杂。<br>\n（4）DMA 方式适合于高速外设，是 4 种基本输入 / 输出方式中速度最高的一种。</p>\n</li>\n<li>\n<p>主机与外部设备进行数据传送时，采用哪一种传送方式 CPU 的效率最高？DMA</p>\n</li>\n</ol>\n",
            "tags": [
                "课内课程"
            ]
        },
        {
            "id": "https://github.com/YogMas/YogMas.github.io/2021/11/18/ruan-jian-gong-cheng/",
            "url": "https://github.com/YogMas/YogMas.github.io/2021/11/18/ruan-jian-gong-cheng/",
            "title": "软件工程",
            "date_published": "2021-11-17T16:00:00.000Z",
            "content_html": "<h1 id=\"软件工程\"><a class=\"markdownIt-Anchor\" href=\"#软件工程\">#</a> 软件工程</h1>\n<h2 id=\"三张概念\"><a class=\"markdownIt-Anchor\" href=\"#三张概念\">#</a> 三张概念</h2>\n<h3 id=\"软件工程概述\"><a class=\"markdownIt-Anchor\" href=\"#软件工程概述\">#</a> 软件工程概述</h3>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/C3E00849B22E3F8293BB39509B22A521.png\" alt=\"软件工程概述\"></p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/1556EBAF262471A4230C157472597C91.png\" alt=\"img\"></p>\n<h4 id=\"软件的概念和特点\"><a class=\"markdownIt-Anchor\" href=\"#软件的概念和特点\">#</a> 软件的概念和特点</h4>\n<p>软件 = 程序 + 数据 + 文档</p>\n<p>软件测试，系统维护将占据工程的很大一部分成本</p>\n<ul>\n<li>软件是一种产品</li>\n<li>软件是开发其他软件产品的工具</li>\n</ul>\n<p>软件的分类</p>\n<ul>\n<li>系统软件</li>\n<li>支撑软件</li>\n<li>应用软件</li>\n</ul>\n<p>为什么软件发展如此之快</p>\n<ul>\n<li>计算需求：软件必须适应新的计算环境或技术</li>\n<li>嵌入需求：软件必须扩展，以满足和新一代系统或数据库之间的互操作性</li>\n<li>业务需求：软件必须改善，以实现新的业务需求</li>\n<li>架构需求：软件必须重新设计，使其在新的网络环境可用</li>\n</ul>\n<h4 id=\"软件危机的产生\"><a class=\"markdownIt-Anchor\" href=\"#软件危机的产生\">#</a> 软件危机的产生</h4>\n<p>软件工程概念的产生：目的是倡导以<strong>工程</strong>的原理，原则和方法进行软件开发，以解决软件危机</p>\n<p>软件危机：在计算机软件的开发和维护过程中所遇到的一系列严重问题 (效率和质量下降)</p>\n<p>产生软件危机的原因</p>\n<ul>\n<li>客观：软件本身特点：成本日益增加，规模庞大</li>\n<li>客观：忽视需求分析，轻视软件维护，错误认为软件开发 = 程序编写</li>\n</ul>\n<h4 id=\"软件工程的概念与发展过程\"><a class=\"markdownIt-Anchor\" href=\"#软件工程的概念与发展过程\">#</a> 软件工程的概念与发展过程</h4>\n<p>概念：建立和使用合理的工程原则，以经济地获取可靠的，且在真实机器上可高效工作的软件</p>\n<p>软件工程框架：目的，原则，活动</p>\n<ul>\n<li>目的：给出了软件所涉及软件工程的工程要素</li>\n<li>原则：给出了各要素之间的关系</li>\n<li>活动：给出了软件工程学科所研究的主要内容</li>\n</ul>\n<p>软件开发模型：是软件开发全部过程，活动和任务的框架</p>\n<p>软件开发方法：为构造软件提供技术上的解决方法，包括沟通，需求分析，设计建模</p>\n<p>软件过程：为建造高质量的软件所需完成任务的框架</p>\n<p>软件工程目标：生产具有正确性，可用性以及开销合宜的产品</p>\n<ul>\n<li>正确性：产品达到预期功能</li>\n<li>可用性：软件基本结构，实现及文档为用户可用</li>\n<li>开销事宜，软件开发运行整个过程开销满足用户要求的程度</li>\n</ul>\n<h2 id=\"四张图\"><a class=\"markdownIt-Anchor\" href=\"#四张图\">#</a> 四张图</h2>\n<h3 id=\"顺序图\"><a class=\"markdownIt-Anchor\" href=\"#顺序图\">#</a> 顺序图</h3>\n<h3 id=\"类图\"><a class=\"markdownIt-Anchor\" href=\"#类图\">#</a> 类图</h3>\n",
            "tags": [
                "课内课程"
            ]
        },
        {
            "id": "https://github.com/YogMas/YogMas.github.io/2021/11/06/latex/",
            "url": "https://github.com/YogMas/YogMas.github.io/2021/11/06/latex/",
            "title": "Latex",
            "date_published": "2021-11-05T16:00:00.000Z",
            "content_html": "<h1 id=\"latex\"><a class=\"markdownIt-Anchor\" href=\"#latex\">#</a> Latex</h1>\n<p>latex 命令多采用 <code>\\   []{}</code>  的格式</p>\n<p>基本结构</p>\n<pre class=\"line-numbers language-latex\" data-language=\"latex\"><code class=\"language-latex\"><span class=\"token function selector\">\\document</span><span class=\"token punctuation\">[</span>UTF8<span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span>ctexart<span class=\"token punctuation\">}</span>\n\n<span class=\"token function selector\">\\begin</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">document</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token function selector\">\\end</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">document</span><span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"字体\"><a class=\"markdownIt-Anchor\" href=\"#字体\">#</a> 字体</h2>\n<ul>\n<li><code>\\textbf {文本内容}</code> : 加粗文本内容</li>\n<li><code>\\textit {文本内容}</code> : 设置斜体</li>\n<li><code>\\underline {文本内容}</code> : 设置下划线</li>\n</ul>\n<h3 id=\"章和节\"><a class=\"markdownIt-Anchor\" href=\"#章和节\">#</a> 章和节</h3>\n<ul>\n<li>切换段落需要输入两个换行符 也就是按两次回车  一个换行符仅仅会显示一个空格</li>\n<li><code>\\part {部名称}</code> : 表示书籍中的第几部</li>\n<li><code>\\chapter {章节名称}</code>  通常用于表示章节中的第几章，大于 chapter</li>\n<li><code>\\section {章节名称}</code> : 开启一个新的章节</li>\n<li><code>\\subsection {章节名称}</code> : 创建下一级的章节，要创建更下一级的章节就多加个 sub</li>\n</ul>\n<h2 id=\"图片\"><a class=\"markdownIt-Anchor\" href=\"#图片\">#</a> 图片</h2>\n<ul>\n<li>\n<p>第一步要先引用包  <code>\\usepackage{grathicx}</code></p>\n</li>\n<li>\n<p><code>\\includegraphics [可选参数]{图片文件名字}</code> : 在当前位置添加一张图片  可以省略图片后的扩展名称</p>\n<ol>\n<li><code>width=0.5\\textwidth</code> :</li>\n</ol>\n</li>\n<li>\n<p>给图片添加标题</p>\n<pre class=\"line-numbers language-latex\" data-language=\"latex\"><code class=\"language-latex\"><span class=\"token function selector\">\\begin</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">figure</span><span class=\"token punctuation\">}</span>    放在figure中\n<span class=\"token function selector\">\\centering</span>   居中显示\n<span class=\"token function selector\">\\includegraphicx</span> <span class=\"token punctuation\">{</span>head<span class=\"token punctuation\">}</span>\n<span class=\"token function selector\">\\caption</span><span class=\"token punctuation\">{</span>哈哈哈<span class=\"token punctuation\">}</span>       标题名称\n<span class=\"token function selector\">\\end</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">figure</span><span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ul>\n<h2 id=\"列表\"><a class=\"markdownIt-Anchor\" href=\"#列表\">#</a> 列表</h2>\n<ul>\n<li>\n<p>切换到列表中的环境</p>\n</li>\n<li>\n<p>无序列表:</p>\n<pre class=\"line-numbers language-latex\" data-language=\"latex\"><code class=\"language-latex\"><span class=\"token function selector\">\\begin</span> <span class=\"token punctuation\">{</span>itemize<span class=\"token punctuation\">}</span>\n<span class=\"token function selector\">\\item</span> 列表项1\n<span class=\"token function selector\">\\item</span> 列表项2\n<span class=\"token function selector\">\\end</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">itemize</span><span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>有序列表</p>\n<pre class=\"line-numbers language-latex\" data-language=\"latex\"><code class=\"language-latex\"><span class=\"token function selector\">\\begin</span> <span class=\"token punctuation\">{</span>enumerate<span class=\"token punctuation\">}</span>\n<span class=\"token function selector\">\\item</span> 列表项1\n<span class=\"token function selector\">\\item</span> 列表项2\n<span class=\"token function selector\">\\end</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">enumerate</span><span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ul>\n<h2 id=\"数学公式\"><a class=\"markdownIt-Anchor\" href=\"#数学公式\">#</a> 数学公式</h2>\n<ul>\n<li>\n<p>行内公式: <code>$   $</code>  在行内直接显示公式</p>\n</li>\n<li>\n<p>单独显示一行公式</p>\n<pre class=\"line-numbers language-latex\" data-language=\"latex\"><code class=\"language-latex\"><span class=\"token function selector\">\\begin</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">equation</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token function selector\">\\end</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">quation</span><span class=\"token punctuation\">}</span>\n\n可以简写为\n<span class=\"token equation string\">\\[\n\n\\]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>公式常用指令</p>\n<ul>\n<li><code>\\over</code> : 表示分数  分子在前 分母在后</li>\n<li><code>\\varphi</code> : 小写的 φ</li>\n<li><code>\\phi</code> : 大写的 φ</li>\n</ul>\n<p>可以使用在线公式编辑器和 mathpix</p>\n</li>\n</ul>\n<p><a href=\"http://latex.codecogs.com/eqneditor/editor.php\">latex.codecogs.com/eqneditor/editor.php</a> 在线公式编辑器 也可以快速查阅公式的语法</p>\n<h2 id=\"表格\"><a class=\"markdownIt-Anchor\" href=\"#表格\">#</a> 表格</h2>\n<pre class=\"line-numbers language-latex\" data-language=\"latex\"><code class=\"language-latex\"><span class=\"token function selector\">\\begin</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">tabular</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span>传入参数|参数<span class=\"token punctuation\">}</span> c表示居中 l表示靠左 多少个字母就表示多少列    p<span class=\"token punctuation\">{</span>列宽<span class=\"token punctuation\">}</span> 单独指定每一列的宽度\n<span class=\"token function selector\">\\hline</span>\n1 <span class=\"token punctuation\">&amp;</span> 2 ^ 3 <span class=\"token function selector\">\\\\</span>\n<span class=\"token function selector\">\\hline</span>    水平方向边框\n1 <span class=\"token punctuation\">&amp;</span> 3 <span class=\"token punctuation\">&amp;</span> 2 <span class=\"token function selector\">\\\\</span>      每一列数据用<span class=\"token punctuation\">&amp;</span>分割\n\t\t\t\t每一行的数据用<span class=\"token function selector\">\\\\</span>分割\n\t\t\t\t\n<span class=\"token function selector\">\\caption</span><span class=\"token punctuation\">{</span>表格的标题<span class=\"token punctuation\">}</span>\n<span class=\"token function selector\">\\end</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">tabular</span><span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n",
            "tags": [
                "Latex"
            ]
        },
        {
            "id": "https://github.com/YogMas/YogMas.github.io/2021/11/06/css-xin/",
            "url": "https://github.com/YogMas/YogMas.github.io/2021/11/06/css-xin/",
            "title": "Css新",
            "date_published": "2021-11-05T16:00:00.000Z",
            "content_html": "<h1 id=\"css新\"><a class=\"markdownIt-Anchor\" href=\"#css新\">#</a> CSS (新)</h1>\n<p>复习 (好吧 太久没用忘了 其实是重新学习过程) CSS 时记忆的笔记</p>\n<h2 id=\"定位position\"><a class=\"markdownIt-Anchor\" href=\"#定位position\">#</a> 定位 (position)</h2>\n<ul>\n<li>static: 正常流定位</li>\n<li>relative: 相对定位</li>\n<li>absolute,fixed: 绝对定位</li>\n<li>sticky: 粘性定位</li>\n</ul>\n<h3 id=\"static正常流定位\"><a class=\"markdownIt-Anchor\" href=\"#static正常流定位\">#</a> Static 正常流定位</h3>\n<p>按照从上到下文档刷新的方式，就是最默认的定位方式</p>\n<h3 id=\"relative相对定位\"><a class=\"markdownIt-Anchor\" href=\"#relative相对定位\">#</a> relative 相对定位</h3>\n<p>相对于原位置的定位，可以相对于原位置进行位置的移动</p>\n<p><strong>相对定位会保留原有的样式</strong>，意思就是说相对定位移动后，原来那个位置的样式，不会被覆盖，可以理解为被隐藏了但是还在</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token property\">position</span><span class=\"token punctuation\">:</span>relative<span class=\"token punctuation\">;</span>\n<span class=\"token property\">top</span><span class=\"token punctuation\">:</span>\n<span class=\"token property\">left</span><span class=\"token punctuation\">:</span>\n<span class=\"token property\">right</span><span class=\"token punctuation\">:</span>\n<span class=\"token property\">bottom</span><span class=\"token punctuation\">:</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"absolute绝对定位\"><a class=\"markdownIt-Anchor\" href=\"#absolute绝对定位\">#</a> absolute 绝对定位</h3>\n<p>absolute 是相对于上一个<strong>非 static 定位</strong>的祖宗节点的位置</p>\n<p>意思就是说 absolute 会向上找，找到一个不会 static 定位的祖宗节点 (最上面是<strong> body</strong>),top 相当于距离这个父节点顶部的距离，其他类似</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token property\">position</span><span class=\"token punctuation\">:</span>absolute<span class=\"token punctuation\">;</span>\n<span class=\"token property\">top</span><span class=\"token punctuation\">:</span>\n<span class=\"token property\">left</span><span class=\"token punctuation\">:</span>\n<span class=\"token property\">right</span><span class=\"token punctuation\">:</span>\n<span class=\"token property\">bottom</span><span class=\"token punctuation\">:</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"fixed固定定位\"><a class=\"markdownIt-Anchor\" href=\"#fixed固定定位\">#</a> fixed 固定定位</h3>\n<p>fixed 是相对于<strong>整个视窗</strong>的位移，也是固定不变的</p>\n<h3 id=\"static粘性定位\"><a class=\"markdownIt-Anchor\" href=\"#static粘性定位\">#</a> static 粘性定位</h3>\n<p>当粘性定位的盒子的<strong>真实位置</strong>在视窗内部的时候，他是正常显示的，但是当他要脱离视窗的时候，他会像固定定位一样，导致不脱离视窗</p>\n<h2 id=\"浮动\"><a class=\"markdownIt-Anchor\" href=\"#浮动\">#</a> 浮动</h2>\n<p>块是会自动换行的，加上 float 之后，可以放在一行的会放在一行，一行无法放下时再进行换行</p>\n<p>新的未浮动块会在浮动块的上方而不是排布在后方，要排布在后方可以清除浮动块的影响 使用 clear</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token property\">float</span><span class=\"token punctuation\">:</span>left\n<span class=\"token property\">clear</span><span class=\"token punctuation\">:</span>left/right/both<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h2 id=\"flex布局\"><a class=\"markdownIt-Anchor\" href=\"#flex布局\">#</a> flex 布局</h2>\n<p>弹性布局，也就是当拉伸视窗的时候，布局随着视窗的改变会自动变化</p>\n<p>定义在<strong>父节点盒子上</strong></p>\n<ol>\n<li><code>flex-direction</code> ： 属性指定了内部元素是如何在 flex 容器中<strong>布局</strong>的，<strong>定义了主轴的方向</strong> (正方向或反方向)。\n<ul>\n<li><code>row</code> :flex 容器的主轴被定义为与文本方向相同。 主轴起点和主轴终点与内容方向相同。</li>\n<li><code>row-reverse</code> : 表现和 row 相同，但是置换了主轴起点和主轴终点。</li>\n<li><code>column</code> :flex 容器的主轴和块轴相同。主轴起点与主轴终点和书写模式的前后点相同</li>\n<li><code>column-reverse</code> : 表现和 column 相同，但是置换了主轴起点和主轴终点</li>\n</ul>\n</li>\n<li><code>flex-wrap</code> : 指定 flex 元素<strong>单行显示还是多行显示</strong>。如果允许换行，这个属性允许你控制行的堆叠方向。\n<ul>\n<li><code>nowrap</code> : 默认值。不换行。</li>\n<li><code>wrap</code> : 换行，第一行在上方。</li>\n<li><code>wrap-reverse</code> : 换行，第一行在下方。</li>\n</ul>\n</li>\n<li><code>flex-flow</code> : <code>flex-direction</code>  和  <code>flex-wrap</code>  的简写。默认值为： <code>row nowrap</code></li>\n<li><code>justify-content</code> : 属性定义了浏览器之间，如何分配顺着弹性容器主轴 (或者网格行轴) 的元素之间及其周围的空间。也就是<strong>控制横向对齐方式</strong>\n<ul>\n<li><code>flex-start</code> ：默认值。左对齐。</li>\n<li><code>flex-end</code> ：右对齐。</li>\n<li><code>space-between</code> ：左右两段对齐。</li>\n<li><code>space-around</code> ：在每行上均匀分配弹性元素。相邻元素间距离相同。每行第一个元素到行首的距离和每行最后一个元素到行尾的距离将会是相邻元素之间距离的一半。</li>\n<li><code>space-evenly</code> ：flex 项都沿着主轴均匀分布在指定的对齐容器中。相邻 flex 项之间的间距，主轴起始位置到第一个 flex 项的间距，主轴结束位置到最后一个 flex 项的间距，都完全一样。</li>\n</ul>\n</li>\n<li><code>align-items</code> ：控制<strong>纵轴 (交叉轴</strong>对齐)\n<ul>\n<li><code>flex-start</code> ：元素向主轴起点对齐。</li>\n<li><code>flex-end</code> ：元素向主轴终点对齐。</li>\n<li><code>center</code> ：元素在侧轴居中。</li>\n<li><code>stretch</code> ：弹性元素被在侧轴方向被拉伸到与容器相同的高度或宽度。</li>\n</ul>\n</li>\n<li><code>align-content</code> : 与 <code>align-items</code>  类似但是有以下区别\n<ul>\n<li>前者会均匀分布，后者会使所有行紧贴在一起</li>\n<li>当只有一行的时候，前者仍然会居中，后者会失去居中</li>\n</ul>\n</li>\n</ol>\n<p>定义在<strong> flex 盒子内部元素中</strong></p>\n<ol>\n<li>\n<p><code>order</code> : 定义 <code>flex</code>  项目的顺序，值越小越靠前。</p>\n</li>\n<li>\n<p><code>flex-grow</code> :CSS 属性 flex-grow CSS 设置 flex 项主尺寸 的 flex 增长系数。<strong>负值无效，默认为 0。</strong> <strong>也就是当视窗变大的时候 块也等比例变大</strong></p>\n</li>\n<li>\n<p><code>flex-shrink</code> : 属性指定了 flex 元素的收缩规则。flex 元素仅在默认宽度之和大于容器的时候才会发生收缩，其收缩的大小是依据 flex-shrink 的值。<strong>负值无效，默认为 1。</strong></p>\n</li>\n<li>\n<p><code>flex-basis</code> : 设置默认宽度，<strong> 优先级大于默认 width</strong></p>\n</li>\n<li>\n<p><code>flex</code> : <code>flex-grow</code> 、 <code>flex-shrink</code> 、 <code>flex-basis</code>  的缩写。</p>\n<p>常用取值： <code>flex: 1 1 auto</code>        <code>flex: 0 0 auto</code></p>\n</li>\n</ol>\n",
            "tags": [
                "Css"
            ]
        },
        {
            "id": "https://github.com/YogMas/YogMas.github.io/2021/11/06/css1/",
            "url": "https://github.com/YogMas/YogMas.github.io/2021/11/06/css1/",
            "title": "Css-first",
            "date_published": "2021-11-05T16:00:00.000Z",
            "content_html": "<h1 id=\"css1\"><a class=\"markdownIt-Anchor\" href=\"#css1\">#</a> css1</h1>\n<h3 id=\"the-article-from-yogmas-also-sam\"><a class=\"markdownIt-Anchor\" href=\"#the-article-from-yogmas-also-sam\">#</a> the article from yogmas also sam</h3>\n<h4 id=\"1css基本架构\"><a class=\"markdownIt-Anchor\" href=\"#1css基本架构\">#</a> 1.css 基本架构</h4>\n<blockquote>\n<pre><code>&lt;html&gt; \n&lt;head&gt;\n&lt;style&gt;&lt;/style&gt;\n &lt;/head&gt;\n &lt;body&gt;&lt;/body&gt;\n &lt;/html&gt;\n style为css放置位置\n</code></pre>\n</blockquote>\n<p>前期学习先将 css 放置在 html 文件夹里面后期会单独利用 css 文件来写 css</p>\n<h4 id=\"2选择器\"><a class=\"markdownIt-Anchor\" href=\"#2选择器\">#</a> 2. 选择器</h4>\n<h6 id=\"标签选择器\"><a class=\"markdownIt-Anchor\" href=\"#标签选择器\">#</a> 标签选择器</h6>\n<blockquote>\n<p>选择器 {样式}<br>\n 给谁改样式 {改什么样式}<br>\neg.p { color: red;<br>\nfont-size: 12px; }</p>\n</blockquote>\n<p>标签选择器为大类选择，同一类标签全部都会被 css 修改</p>\n<h6 id=\"类选择器\"><a class=\"markdownIt-Anchor\" href=\"#类选择器\">#</a> 类选择器</h6>\n<blockquote>\n<pre><code>.id {} \neg .red {color:red;}\n&lt;# class=\"id\"&gt;  &lt;/#&gt;\n</code></pre>\n</blockquote>\n<p>这里的 ID 还需要与 html 中的 class 相互匹配 #可以替换成任何你想选择的类别 id 可以替换成任何你命名的字母或者单词<br>\n<strong>类选择器口诀：样式点定义  结构类 (class) 调用  一个或多个 开发最常用</strong><br>\n<a href=\"https://imgtu.com/i/IQmbIf\"><img src=\"https://z3.ax1x.com/2021/11/06/IQmbIf.png\" alt=\"IQmbIf.png\"></a><br>\n 同时类选择器可以有多个 ID 都会起作用 中间用空格隔开 例如<br>\n<a href=\"https://imgtu.com/i/IQmHdP\"><img src=\"https://z3.ax1x.com/2021/11/06/IQmHdP.png\" alt=\"IQmHdP.png\"></a></p>\n<h6 id=\"id选择器\"><a class=\"markdownIt-Anchor\" href=\"#id选择器\">#</a> id 选择器</h6>\n<p>id 选择器与类选择器相似，不过 ID 选择器只能使用一次 并且一个 ID 只能调用一次</p>\n<blockquote>\n<pre><code>#ID {}\n&lt;XX id=\"\"&gt;  &lt;/XX&gt;\n</code></pre>\n</blockquote>\n<h6 id=\"通配符选择器\"><a class=\"markdownIt-Anchor\" href=\"#通配符选择器\">#</a> 通配符选择器</h6>\n<blockquote>\n<pre><code>* { }\n</code></pre>\n</blockquote>\n<p>通配符 简而言之就是对所有元素和类都有作用，后期主要用来先去除掉浏览器自身所带的一些 css 属性方便我们后续进行 css 操作</p>\n<h4 id=\"3css字体属性\"><a class=\"markdownIt-Anchor\" href=\"#3css字体属性\">#</a> 3.CSS 字体属性</h4>\n<p><a href=\"https://imgtu.com/i/IQmjzQ\"><img src=\"https://z3.ax1x.com/2021/11/06/IQmjzQ.png\" alt=\"IQmjzQ.png\"></a></p>\n<h6 id=\"字体系列\"><a class=\"markdownIt-Anchor\" href=\"#字体系列\">#</a> 字体系列</h6>\n<blockquote>\n<p>font-family:’   ';</p>\n</blockquote>\n<p>通常会根据团队的要求来确定书写的字体 一般来说是微软雅黑也就是 microsoft YaHei 当然也可以有其他的一系列字体<br>\n比如在后期的<strong>字体图标</strong>中就需要修改 font-family</p>\n<h6 id=\"字体大小\"><a class=\"markdownIt-Anchor\" href=\"#字体大小\">#</a> 字体大小</h6>\n<blockquote>\n<p>font-size:;</p>\n</blockquote>\n<p>顾名思义，是修改字体的大小，不过需要注意的是这后面不能跟单独的数字 这样是没有效果的 需要跟单位 px</p>\n<h6 id=\"字体粗细\"><a class=\"markdownIt-Anchor\" href=\"#字体粗细\">#</a> 字体粗细</h6>\n<blockquote>\n<p>font-weight:  ;</p>\n</blockquote>\n<p>这里需要谨记 2 个数字<br>\n 700: 加粗<br>\n 400: 正常大小<br>\n font-weight 后面跟数字，可以根据需要来进行调整 不过一般都是 700 和 400 之间切换</p>\n<h6 id=\"文字样式风格\"><a class=\"markdownIt-Anchor\" href=\"#文字样式风格\">#</a> 文字样式风格</h6>\n<blockquote>\n<p>font-style: ;</p>\n</blockquote>\n<p>一般运用的都 italic (倾斜) 和 normal (正常) 两种<br>\n实际运用场景：<br>\n1. 用来修改需要倾斜的汉字<br>\n 2. 当没有标签可用时，可以用 em 倾斜标签先将汉字包括，在通过 font-style:normal；将倾斜属性去掉</p>\n<h6 id=\"字体复合属性\"><a class=\"markdownIt-Anchor\" href=\"#字体复合属性\">#</a> 字体复合属性</h6>\n<p>通过简写的方式来节约代码 (不过有顺序要求)</p>\n<blockquote>\n<pre><code>font: font-style  font-weight  font-size/line-height  font-family;\neg:font: italic 700 16px 'Microsoft yahei';\n 前面两个可以省略，但是后面连个一定要写\n</code></pre>\n</blockquote>\n<h4 id=\"4文本外观属性\"><a class=\"markdownIt-Anchor\" href=\"#4文本外观属性\">#</a> 4. 文本外观属性</h4>\n<p><a href=\"https://imgtu.com/i/IQn9Zq\"><img src=\"https://z3.ax1x.com/2021/11/06/IQn9Zq.png\" alt=\"IQn9Zq.png\"></a></p>\n<h6 id=\"颜色\"><a class=\"markdownIt-Anchor\" href=\"#颜色\">#</a> 颜色</h6>\n<blockquote>\n<pre><code>color: \"\n</code></pre>\n</blockquote>\n<p>这里 color 后面所带有 4 种写法<br>\n 1. 直接加颜色例如 red,blue<br>\n2. 加颜色编号，主要这里 #必须加例如 #123456 (常用) 后期通常会用吸色笔 然后负值颜色编号<br>\n 3.rgb (X,X,X) 三色的搭配<br>\n 4.rgba (X,X,X,G) 这个主要是用来设置颜色的透明度 G 取值从 0~1<br>\n 用来设置颜色的透明度</p>\n<h6 id=\"文字对齐\"><a class=\"markdownIt-Anchor\" href=\"#文字对齐\">#</a> 文字对齐</h6>\n<blockquote>\n<p>text-align: ;</p>\n</blockquote>\n<p>设置文字的对齐方式，<br>\nleft,center,right</p>\n<h6 id=\"装饰文本\"><a class=\"markdownIt-Anchor\" href=\"#装饰文本\">#</a> 装饰文本</h6>\n<blockquote>\n<pre><code>text-deroration: ;\n</code></pre>\n</blockquote>\n<p>可加元素:<br>\nline-through 删除线<br>\n overline 上划线<br>\n<strong> none</strong> (常用) 通常用来配合通配符选择器来取消 a 的下划线</p>\n<h6 id=\"文本缩进\"><a class=\"markdownIt-Anchor\" href=\"#文本缩进\">#</a> 文本缩进</h6>\n<blockquote>\n<p>text-indent: ;</p>\n</blockquote>\n<p>后面添加数据时需要注意单位 用像素 (px) 或者 em (一个汉字所占的大小)</p>\n<h6 id=\"行间距\"><a class=\"markdownIt-Anchor\" href=\"#行间距\">#</a> 行间距</h6>\n<blockquote>\n<p>line-height: ;</p>\n</blockquote>\n<p>也需要加 px<br>\n 后期通常使 line-height 和 height 相等，来使文字垂直对齐</p>\n<h4 id=\"5style样式表\"><a class=\"markdownIt-Anchor\" href=\"#5style样式表\">#</a> 5.style 样式表</h4>\n<h6 id=\"内部样式表\"><a class=\"markdownIt-Anchor\" href=\"#内部样式表\">#</a> 内部样式表</h6>\n<p>也就是我们最开始介绍，直到现在一直在使用的加到 style 里面的 css 属性</p>\n<h6 id=\"行内样式表\"><a class=\"markdownIt-Anchor\" href=\"#行内样式表\">#</a> 行内样式表</h6>\n<p>直接加在 html 标签中的样式表</p>\n<blockquote>\n<pre><code> 例如: &lt;div style=\"\";&gt; &lt;/div&gt;\n 不常使用，会使html标签显得臃肿\n</code></pre>\n</blockquote>\n<h6 id=\"外部样式表\"><a class=\"markdownIt-Anchor\" href=\"#外部样式表\">#</a> 外部样式表</h6>\n<blockquote>\n<pre><code>&lt;link rel=\"\"; href=\"文件地址\";&gt;\n</code></pre>\n</blockquote>\n<p>另建一个.css 文件，在另外一个文件中书写 css 属性<br>\n再通过在 style 中书写 link 将其引入</p>\n<h4 id=\"6vscode中使用emmet语法快速书写代码\"><a class=\"markdownIt-Anchor\" href=\"#6vscode中使用emmet语法快速书写代码\">#</a> 6.vscode 中使用 emmet 语法快速书写代码</h4>\n<p><a href=\"https://imgtu.com/i/IQnSLn\"><img src=\"https://z3.ax1x.com/2021/11/06/IQnSLn.png\" alt=\"IQnSLn.png\"></a></p>\n<h4 id=\"7选择器拓展\"><a class=\"markdownIt-Anchor\" href=\"#7选择器拓展\">#</a> 7. 选择器拓展</h4>\n<p><a href=\"https://imgtu.com/i/IQnZQJ\"><img src=\"https://z3.ax1x.com/2021/11/06/IQnZQJ.png\" alt=\"IQnZQJ.png\"></a></p>\n<h6 id=\"后代选择器\"><a class=\"markdownIt-Anchor\" href=\"#后代选择器\">#</a> 后代选择器</h6>\n<p>顾名思义就是将大元素中包括的小元素提取出来，这里通过列子来展示<br>\n<a href=\"https://imgtu.com/i/IQnCd0\"><img src=\"https://z3.ax1x.com/2021/11/06/IQnCd0.png\" alt=\"IQnCd0.png\"></a></p>\n<h6 id=\"子元素选择器\"><a class=\"markdownIt-Anchor\" href=\"#子元素选择器\">#</a> 子元素选择器</h6>\n<p>例如上面的 ol li 变成 ol&gt;li 就只对 ol 中的下一级 li 有用也就是他的儿子，而他的下下级，也就是孙子则不起作用</p>\n<h6 id=\"并集选择器\"><a class=\"markdownIt-Anchor\" href=\"#并集选择器\">#</a> 并集选择器</h6>\n<p>在标签和标签中间用逗号连接，这样就可以达到同时对两个盒子都起作用的效果</p>\n<blockquote>\n<p>例如 div,p,li {}</p>\n</blockquote>\n<p>需要注意的是最后一个选择器不需要加逗号</p>\n<h6 id=\"链接伪类选择器\"><a class=\"markdownIt-Anchor\" href=\"#链接伪类选择器\">#</a> 链接伪类选择器</h6>\n<p><a href=\"https://imgtu.com/i/IJqEWt\"><img src=\"https://z3.ax1x.com/2021/11/09/IJqEWt.png\" alt=\"IJqEWt.png\"></a></p>\n<blockquote>\n<p>X:GGGG {}</p>\n</blockquote>\n<p>X 可以是你的选择器中的任何<br>\n：后面可以添加 4 中元素 (其中 hover 最经常使用)：<br>\nlink: 未访问链接：把没有点击过的链接选择出来<br>\n visited: 访问过的链接，把点击过的链接选择出来<br>\n hover: 当鼠标经过时<br>\n active: 鼠标点击但是还未弹起来时<br>\n<a href=\"https://imgtu.com/i/IQmxMj\"><img src=\"https://z3.ax1x.com/2021/11/06/IQmxMj.png\" alt=\"IQmxMj.png\"></a></p>\n<h6 id=\"focus选择器\"><a class=\"markdownIt-Anchor\" href=\"#focus选择器\">#</a> focus 选择器</h6>\n<p>把获得光标的 input 选择显示出来<br>\n下面是代码，可以通过自己运行来进行查看<br>\n<a href=\"https://imgtu.com/i/IQnPoV\"><img src=\"https://z3.ax1x.com/2021/11/06/IQnPoV.png\" alt=\"IQnPoV.png\"></a></p>\n<h4 id=\"8元素显示模式\"><a class=\"markdownIt-Anchor\" href=\"#8元素显示模式\">#</a> 8. 元素显示模式</h4>\n<p><a href=\"https://imgtu.com/i/IJqmy8\"><img src=\"https://z3.ax1x.com/2021/11/09/IJqmy8.png\" alt=\"IJqmy8.png\"></a></p>\n<h6 id=\"块级元素\"><a class=\"markdownIt-Anchor\" href=\"#块级元素\">#</a> 块级元素</h6>\n<p><a href=\"https://imgtu.com/i/IQnkJU\"><img src=\"https://z3.ax1x.com/2021/11/06/IQnkJU.png\" alt=\"IQnkJU.png\"></a></p>\n<h6 id=\"行内元素\"><a class=\"markdownIt-Anchor\" href=\"#行内元素\">#</a> 行内元素</h6>\n<p><a href=\"https://imgtu.com/i/IQnAWF\"><img src=\"https://z3.ax1x.com/2021/11/06/IQnAWF.png\" alt=\"IQnAWF.png\"></a></p>\n<h6 id=\"行内块元素\"><a class=\"markdownIt-Anchor\" href=\"#行内块元素\">#</a> 行内块元素</h6>\n<p>特殊情况，同时具有块级元素和行内元素的特点，可以进行的大小设置，也可以书写汉字，但是大小会随着汉字的多少而改变</p>\n<h6 id=\"元素显示模式转换\"><a class=\"markdownIt-Anchor\" href=\"#元素显示模式转换\">#</a> 元素显示模式转换</h6>\n<blockquote>\n<pre><code> display:   ;\n</code></pre>\n</blockquote>\n<p>inline: 行内元素<br>\n block: 块级元素<br>\n inline-block: 行内块元素<br>\n<strong>学到这里去做一下小米侧边栏试试吧</strong></p>\n<h6 id=\"单行文字垂直居中\"><a class=\"markdownIt-Anchor\" href=\"#单行文字垂直居中\">#</a> 单行文字垂直居中</h6>\n<p>也就是上面和大家提及过的，这里让 height 和 line-height 相同即可</p>\n<h4 id=\"9背景\"><a class=\"markdownIt-Anchor\" href=\"#9背景\">#</a> 9. 背景</h4>\n<p><a href=\"https://imgtu.com/i/IQ6dHA\"><img src=\"https://z3.ax1x.com/2021/11/06/IQ6dHA.png\" alt=\"IQ6dHA.png\"></a></p>\n<h6 id=\"背景颜色\"><a class=\"markdownIt-Anchor\" href=\"#背景颜色\">#</a> 背景颜色</h6>\n<blockquote>\n<p>background-color: ;</p>\n</blockquote>\n<p>后面的元素参照前面 color 属性</p>\n<h6 id=\"背景图片\"><a class=\"markdownIt-Anchor\" href=\"#背景图片\">#</a> 背景图片</h6>\n<blockquote>\n<p>background-image: url (链接 / 地址)；</p>\n</blockquote>\n<h6 id=\"背景平铺\"><a class=\"markdownIt-Anchor\" href=\"#背景平铺\">#</a> 背景平铺</h6>\n<blockquote>\n<p>background-repeat: ;</p>\n</blockquote>\n<p>no-repeat (常用): 不平铺<br>\n repeat (默认): 平铺<br>\n repeat-x: 沿着 X 轴平铺<br>\n repeat-y: 沿着 Y 轴平铺<br>\n<strong>背景图片会压住背景颜色</strong><br>\n<a href=\"https://imgtu.com/i/IQnFiT\"><img src=\"https://z3.ax1x.com/2021/11/06/IQnFiT.png\" alt=\"IQnFiT.png\"></a></p>\n<h6 id=\"背景位置\"><a class=\"markdownIt-Anchor\" href=\"#背景位置\">#</a> 背景位置</h6>\n<blockquote>\n<p>background-position: ;</p>\n</blockquote>\n<p>left top center right bottom<br>\n 也可以用 right center 等同时使用 但是有几点需要注意<br>\n 1. 如果是方位名词  right center 和 center right 效果是等价的 跟顺序没有关系<br>\n 2. 当有参数省略时，并且不全是方位名字时，例如 right top ,<br>\n 省略 right，此时 top 会自动顶部对齐，而省略的会被判定为水平居中<br>\n省略 top，则会被判定为垂直居中<br>\n<a href=\"https://imgtu.com/i/IQnEz4\"><img src=\"https://z3.ax1x.com/2021/11/06/IQnEz4.png\" alt=\"IQnEz4.png\"></a><br>\n 也可以用具体的数据来进行移动，主要用于精灵图<br>\n<a href=\"https://imgtu.com/i/IQney9\"><img src=\"https://z3.ax1x.com/2021/11/06/IQney9.png\" alt=\"IQney9.png\"></a><br>\n 需要注意的时，html 的 X 轴向右，而 y 轴是向下的，需要向反方向移动时可以添加负号</p>\n<h6 id=\"背景固定\"><a class=\"markdownIt-Anchor\" href=\"#背景固定\">#</a> 背景固定</h6>\n<blockquote>\n<p>backgrounf-attachment: fixed;</p>\n</blockquote>\n<p>将背景图片固定，这样滑动鼠标滚轮时，背景图片会一直存在于网页上，并不会滑走<br>\n<a href=\"https://imgtu.com/i/IQnmLR\"><img src=\"https://z3.ax1x.com/2021/11/06/IQnmLR.png\" alt=\"IQnmLR.png\"></a></p>\n<h6 id=\"背景属性复合写法\"><a class=\"markdownIt-Anchor\" href=\"#背景属性复合写法\">#</a> 背景属性复合写法</h6>\n<p><a href=\"https://imgtu.com/i/IQ6tje\"><img src=\"https://z3.ax1x.com/2021/11/06/IQ6tje.png\" alt=\"IQ6tje.png\"></a></p>\n<h6 id=\"背景半透明\"><a class=\"markdownIt-Anchor\" href=\"#背景半透明\">#</a> 背景半透明</h6>\n<p>主要这个不是放在 background-color 中</p>\n<blockquote>\n<p>background: rgba(X,X,X,X);</p>\n</blockquote>\n",
            "tags": [
                "Css"
            ]
        },
        {
            "id": "https://github.com/YogMas/YogMas.github.io/2021/11/06/css2/",
            "url": "https://github.com/YogMas/YogMas.github.io/2021/11/06/css2/",
            "title": "Css-second",
            "date_published": "2021-11-05T16:00:00.000Z",
            "content_html": "<h1 id=\"css2\"><a class=\"markdownIt-Anchor\" href=\"#css2\">#</a> css2</h1>\n<h3 id=\"the-article-from-yogmas-also-sam\"><a class=\"markdownIt-Anchor\" href=\"#the-article-from-yogmas-also-sam\">#</a> the article from yogmas also sam</h3>\n<h4 id=\"1css选择器的性质\"><a class=\"markdownIt-Anchor\" href=\"#1css选择器的性质\">#</a> 1.css 选择器的性质</h4>\n<h6 id=\"css层叠性\"><a class=\"markdownIt-Anchor\" href=\"#css层叠性\">#</a> css 层叠性</h6>\n<p>长江后浪推前浪，前浪死在沙滩上<br>\n当两个完全相同的选择器写在一起时，此时根据就近原则处理</p>\n<h6 id=\"css继承性\"><a class=\"markdownIt-Anchor\" href=\"#css继承性\">#</a> css 继承性</h6>\n<p>大元素中的小元素会继承写在大元素中的属性</p>\n<h6 id=\"行高的继承\"><a class=\"markdownIt-Anchor\" href=\"#行高的继承\">#</a> 行高的继承</h6>\n<p><a href=\"https://imgtu.com/i/IQ6YcD\"><img src=\"https://z3.ax1x.com/2021/11/06/IQ6YcD.png\" alt=\"IQ6YcD.png\"></a></p>\n<p>孩子拥有 font-size 元素会优先使用定义在自身的，而后面的倍数孩子自身没有就会继承父亲的倍数</p>\n<h6 id=\"css优先级\"><a class=\"markdownIt-Anchor\" href=\"#css优先级\">#</a> css 优先级</h6>\n<p>这个主要是根据后面的权重的大小而判定的，权重大的优先。</p>\n<h6 id=\"css权重\"><a class=\"markdownIt-Anchor\" href=\"#css权重\">#</a> css 权重</h6>\n<p><a href=\"https://imgtu.com/i/IQ6UnH\"><img src=\"https://z3.ax1x.com/2021/11/06/IQ6UnH.png\" alt=\"IQ6UnH.png\"></a></p>\n<h6 id=\"权重的叠加\"><a class=\"markdownIt-Anchor\" href=\"#权重的叠加\">#</a> 权重的叠加</h6>\n<p>权重的叠加可以用加减法来计算<br>\n例如 0,1,0,0 相当于 100</p>\n<h4 id=\"2盒子模型\"><a class=\"markdownIt-Anchor\" href=\"#2盒子模型\">#</a> 2. 盒子模型</h4>\n<p>盒子通常是块级元素<br>\n也可以通过 display 将其变成块级元素 a 元素通常使用这种方法</p>\n<h6 id=\"盒子边框\"><a class=\"markdownIt-Anchor\" href=\"#盒子边框\">#</a> 盒子边框</h6>\n<p><a href=\"https://imgtu.com/i/IQ6aBd\"><img src=\"https://z3.ax1x.com/2021/11/06/IQ6aBd.png\" alt=\"IQ6aBd.png\"></a></p>\n<blockquote>\n<p>border-width: ;<br>\nborder-style: ;<br>\nborder-color: ;<br>\nborder:width style color ; 复合写法</p>\n</blockquote>\n<p>这边建议大家使用复合写法<br>\n style:solid 实线 dotted 虚线 dashed 更大点的虚线</p>\n<p><strong>边框会影响盒子的实际大小</strong></p>\n<h6 id=\"盒子内边框\"><a class=\"markdownIt-Anchor\" href=\"#盒子内边框\">#</a> 盒子内边框</h6>\n<p><a href=\"https://imgtu.com/i/IQ66gS\"><img src=\"https://z3.ax1x.com/2021/11/06/IQ66gS.png\" alt=\"IQ66gS.png\"></a></p>\n<blockquote>\n<p>padding: ;<br>\npadding-left: ;</p>\n</blockquote>\n<p>同理 left 可以换成其他的方位</p>\n<p>内边距复合写法：从顶部顺时针数<br>\n<strong>内边距会影响盒子的大小</strong></p>\n<p>内边距不会影响盒子大小的情况:<br>\n 当盒子内没有给宽时，padding-left/right 不会影响<br>\n没有给高时 padding-top/bottom 不会影响</p>\n<h6 id=\"盒子外边距\"><a class=\"markdownIt-Anchor\" href=\"#盒子外边距\">#</a> 盒子外边距</h6>\n<blockquote>\n<p>margin:  ;<br>\nmargin-top/XXX: ;</p>\n</blockquote>\n<p>复合写法和内边距同理</p>\n<p><strong>外边距典型应用</strong>:<br>\nmargin: XXXpx auto;<br>\n 此时 auto 代表左右两边自动设置可以让盒子水平对齐</p>\n<h6 id=\"行内元素或行内块元素水平居中对齐\"><a class=\"markdownIt-Anchor\" href=\"#行内元素或行内块元素水平居中对齐\">#</a> 行内元素或行内块元素水平居中对齐</h6>\n<p>margin 对行内元素没有作用，但是可以给这两种元素的父盒子添加 text-align:center;</p>\n<h6 id=\"外边距合并\"><a class=\"markdownIt-Anchor\" href=\"#外边距合并\">#</a> 外边距合并</h6>\n<p>当子盒子给 margin 时，父盒子和子盒子会塌陷，两个盒子会边框重合</p>\n<h6 id=\"清除内外边距\"><a class=\"markdownIt-Anchor\" href=\"#清除内外边距\">#</a> 清除内外边距</h6>\n<p>通常浏览器会自带内外边距这时就需要使用通用符选择器将浏览器自带的边距出去</p>\n<blockquote>\n<pre><code>* {padding:0 ;\n   margin:0;}\n</code></pre>\n</blockquote>\n<h6 id=\"圆角边框\"><a class=\"markdownIt-Anchor\" href=\"#圆角边框\">#</a> 圆角边框</h6>\n<blockquote>\n<p>border-radius: Xpx ;</p>\n</blockquote>\n<p>原理：利用一个半径为 Xpx 的圆，与边角重叠，然后切去没有重叠的边角；</p>\n<h6 id=\"盒子阴影\"><a class=\"markdownIt-Anchor\" href=\"#盒子阴影\">#</a> 盒子阴影</h6>\n<p><a href=\"https://imgtu.com/i/IQCJfI\"><img src=\"https://z3.ax1x.com/2021/11/06/IQCJfI.png\" alt=\"IQCJfI.png\"></a></p>\n<blockquote>\n<p>box-shadow: X X X X X;</p>\n</blockquote>\n<p>由左到右依次为 往右边移动的距离 往下面移动的距离 阴影发散度 (往四面八方发散)  往四面八方扩散的距离 颜色 (通常是 rgba 控制)</p>\n<h6 id=\"文字阴影\"><a class=\"markdownIt-Anchor\" href=\"#文字阴影\">#</a> 文字阴影</h6>\n<blockquote>\n<p>text-shadow:X X X rgba;</p>\n</blockquote>\n<p>分别是 往右边移动的距离 往下面移动的距离 虚实度 (越大越虚)</p>\n<h6 id=\"行内块元素中间有缝隙\"><a class=\"markdownIt-Anchor\" href=\"#行内块元素中间有缝隙\">#</a> 行内块元素中间有缝隙</h6>\n<h4 id=\"3浮动\"><a class=\"markdownIt-Anchor\" href=\"#3浮动\">#</a> 3. 浮动</h4>\n<blockquote>\n<pre><code>  float: left/right;\n</code></pre>\n</blockquote>\n<h6 id=\"浮动特性-脱标\"><a class=\"markdownIt-Anchor\" href=\"#浮动特性-脱标\">#</a> 浮动特性 - 脱标</h6>\n<p>1. 脱离标准普通流的控制（浮）移动到指定位置（动）。<br>\n2. 浮动的盒子不在保留原先的位置</p>\n<p><strong>浮动元素具有行内块元素的特点</strong><br>\n浮动盒子通常搭配标准流父盒子</p>\n<h6 id=\"浮动的注意点\"><a class=\"markdownIt-Anchor\" href=\"#浮动的注意点\">#</a> 浮动的注意点</h6>\n<p>1. 如果一个子元素浮动了，尽量其他盒子也浮动，这样保证这些子元素一行显示</p>\n<h6 id=\"清除浮动的方法\"><a class=\"markdownIt-Anchor\" href=\"#清除浮动的方法\">#</a> 清除浮动的方法</h6>\n<p><a href=\"https://imgtu.com/i/IQCN1P\"><img src=\"https://z3.ax1x.com/2021/11/06/IQCN1P.png\" alt=\"IQCN1P.png\"></a></p>\n<p><a href=\"https://imgtu.com/i/IJqJS0\"><img src=\"https://z3.ax1x.com/2021/11/09/IJqJS0.png\" alt=\"IJqJS0.png\"></a></p>\n<p>额外标签法：在子盒子的最后新增一个块级盒子 并且用 css 给快捷盒子加上 clear:both; 属性</p>\n<p>父元素 overflow: 给父元素加上一个 overflow: hidden; 的 css 属性<br>\n<a href=\"https://imgtu.com/i/IJqtyT\"><img src=\"https://z3.ax1x.com/2021/11/09/IJqtyT.png\" alt=\"IJqtyT.png\"></a></p>\n<p>伪元素清除:</p>\n<blockquote>\n<p>.clearfix:after {<br>\ncontent: “”;<br>\ndisplay: block;<br>\nheight: 0;<br>\nclear: both;<br>\nvisibility: hidden;<br>\n}<br>\n.clearfix {<br>\nIE6、7 专有<br>\n zoom: 1;<br>\n}</p>\n</blockquote>\n<p><a href=\"https://imgtu.com/i/IQ60AI\"><img src=\"https://z3.ax1x.com/2021/11/06/IQ60AI.png\" alt=\"IQ60AI.png\"></a></p>\n<p>给父盒子一个 class 为 clearfix 然后将这串代码心如 css 中</p>\n<p>双伪元素清除:</p>\n<blockquote>\n<p>.clearfix:before,<br>\n.clearfix:after {<br>\ncontent: “”;<br>\ndisplay: table;<br>\n}<br>\n.clearfix:after {<br>\nclear: both;<br>\n}<br>\n.clearfix {<br>\n*zoom: 1;<br>\n}</p>\n</blockquote>\n<p>同理给一个 clearfix 标签，然后将这串代码写入 css 中</p>\n<h4 id=\"4定位\"><a class=\"markdownIt-Anchor\" href=\"#4定位\">#</a> 4. 定位</h4>\n<p><a href=\"https://imgtu.com/i/IQCGtA\"><img src=\"https://z3.ax1x.com/2021/11/06/IQCGtA.png\" alt=\"IQCGtA.png\"></a><br>\n<a href=\"https://imgtu.com/i/IJqwTJ\"><img src=\"https://z3.ax1x.com/2021/11/09/IJqwTJ.png\" alt=\"IJqwTJ.png\"></a></p>\n<blockquote>\n<p>position: ;</p>\n</blockquote>\n<p>static: 默认静态定位<br>\n absolute: 绝对定位<br>\n relative: 相对定位<br>\n fixed: 固定定位<br>\n sticky: 粘性定位</p>\n<p>相对定位：可以进行定位，但依旧会占用空间<br>\n绝对定位<br>\n如果没施加绝对定位的盒子没有父盒子，那么绝对定位就是在浏览器的基础上的<br>\n如果绝对定位的盒子有父盒子，那么绝对定位就是在父盒子的基础上，并且<strong>父盒子一定要有定位，否则绝对定位就会失效</strong>所以通常说相对定位就是给绝对定位当爹的</p>\n<p>固定定位：会固定在屏幕上，无视浏览器的滑块移动</p>\n<p>粘性定位：会先随着浏览器滑块的滑动而滑动，但是后来会静止，并且无法滑出浏览器屏幕</p>\n<h6 id=\"定位的堆叠顺序\"><a class=\"markdownIt-Anchor\" href=\"#定位的堆叠顺序\">#</a> 定位的堆叠顺序</h6>\n<p>如果有很多个绝对定位，可能会放在同一个位置，这时候需要确定谁放置在最上面</p>\n<blockquote>\n<pre><code>z-index: ;\n</code></pre>\n</blockquote>\n<p>默认为 0，数值越大显示等级越高</p>\n<h6 id=\"小技巧-绝对定位的水平垂直居中\"><a class=\"markdownIt-Anchor\" href=\"#小技巧-绝对定位的水平垂直居中\">#</a> 小技巧 - 绝对定位的水平垂直居中</h6>\n<p>1.left 走 50%  父容器宽度的一半<br>\n 2.margin 负值 往左边走 自己盒子宽度的一半</p>\n<h6 id=\"定位的特殊特性\"><a class=\"markdownIt-Anchor\" href=\"#定位的特殊特性\">#</a> 定位的特殊特性</h6>\n<p><a href=\"https://imgtu.com/i/IQC1TH\"><img src=\"https://z3.ax1x.com/2021/11/06/IQC1TH.png\" alt=\"IQC1TH.png\"></a><br>\n<a href=\"https://imgtu.com/i/IQCtpt\"><img src=\"https://z3.ax1x.com/2021/11/06/IQCtpt.png\" alt=\"IQCtpt.png\"></a></p>\n<h6 id=\"定位和浮动的差异\"><a class=\"markdownIt-Anchor\" href=\"#定位和浮动的差异\">#</a> 定位和浮动的差异</h6>\n<p>定位和浮动有相似部分，类如都会转化为行内块元素，都会压住盒子，但是浮动不会压住文字，定位会将所有东西压住</p>\n<h4 id=\"5显示隐藏\"><a class=\"markdownIt-Anchor\" href=\"#5显示隐藏\">#</a> 5. 显示隐藏</h4>\n<h6 id=\"display\"><a class=\"markdownIt-Anchor\" href=\"#display\">#</a> display</h6>\n<blockquote>\n<p>display: ;</p>\n</blockquote>\n<p><a href=\"https://imgtu.com/i/IQCaX8\"><img src=\"https://z3.ax1x.com/2021/11/06/IQCaX8.png\" alt=\"IQCaX8.png\"></a></p>\n<h6 id=\"visibility\"><a class=\"markdownIt-Anchor\" href=\"#visibility\">#</a> visibility</h6>\n<p><a href=\"https://imgtu.com/i/IQCwnS\"><img src=\"https://z3.ax1x.com/2021/11/06/IQCwnS.png\" alt=\"IQCwnS.png\"></a></p>\n<h6 id=\"overflow\"><a class=\"markdownIt-Anchor\" href=\"#overflow\">#</a> overflow</h6>\n<blockquote>\n<p>overflow: ;</p>\n</blockquote>\n<p><a href=\"https://imgtu.com/i/IQC00g\"><img src=\"https://z3.ax1x.com/2021/11/06/IQC00g.png\" alt=\"IQC00g.png\"></a><br>\n<a href=\"https://imgtu.com/i/IQCB7Q\"><img src=\"https://z3.ax1x.com/2021/11/06/IQCB7Q.png\" alt=\"IQCB7Q.png\"></a></p>\n<h4 id=\"6精灵图\"><a class=\"markdownIt-Anchor\" href=\"#6精灵图\">#</a> 6. 精灵图</h4>\n<p>这里不好介绍怎样操作只能简单而言<br>\n一张包含各种小图片的大图片<br>\n利用前面所讲的背景图片位置的移动使其只能显示出一张小图片来<br>\n问：为什么需要精灵图<br>\n利用精灵图可以将多张图片整合在一起，从而可以减少信息的发送和接受量，减少服务器的负担</p>\n<h4 id=\"7字体图标的使用\"><a class=\"markdownIt-Anchor\" href=\"#7字体图标的使用\">#</a> 7. 字体图标的使用</h4>\n<p>通过在网站上寻找字体图标，下载</p>\n<p>然后将代码写入 css 中</p>\n<blockquote>\n<p>@font-face {<br>\nfont-family: ‘icomoon’;<br>\nsrc:  url(‘fonts/icomoon.eot?p4ssmb’);<br>\nsrc:  url(‘fonts/icomoon.eot?p4ssmb#iefix’) format(‘embedded-opentype’),<br>\nurl(‘fonts/icomoon.ttf?p4ssmb’) format(‘truetype’),<br>\nurl(‘fonts/icomoon.woff?p4ssmb’) format(‘woff’),<br>\nurl(‘fonts/icomoon.svg?p4ssmb#icomoon’) format(‘svg’);<br>\nfont-weight: normal;<br>\nfont-style: normal;<br>\nfont-display: block;<br>\n}</p>\n</blockquote>\n<p>font 文件夹移动到主文件夹中</p>\n<p>此时就可以用字体图标代码来进行表示字体图标</p>\n<p>好处：可以对图标进行改变颜色大小等等的改变字体时用到的属性</p>\n<h4 id=\"8css三角的制作\"><a class=\"markdownIt-Anchor\" href=\"#8css三角的制作\">#</a> 8.css 三角的制作</h4>\n<p>利用 cssborder 属性来进行三角的制作<br>\n由于不好叙述，自己输入，理解并体验这几组代码，应该就能理解 css 三角的制作<br>\n<a href=\"https://imgtu.com/i/IQCsts\"><img src=\"https://z3.ax1x.com/2021/11/06/IQCsts.png\" alt=\"IQCsts.png\"></a><br>\n<a href=\"https://imgtu.com/i/IQCrkj\"><img src=\"https://z3.ax1x.com/2021/11/06/IQCrkj.png\" alt=\"IQCrkj.png\"></a></p>\n<h4 id=\"9用户界面样式\"><a class=\"markdownIt-Anchor\" href=\"#9用户界面样式\">#</a> 9. 用户界面样式</h4>\n<h6 id=\"表单轮廓\"><a class=\"markdownIt-Anchor\" href=\"#表单轮廓\">#</a> 表单轮廓</h6>\n<p>由于点击表单或者 text 文本框时边框上会出现颜色变化边框变大拖拽文本域等一系列的反应，从而利用 css 取消边框的轮廓</p>\n<blockquote>\n<pre><code>outline: none;  (input,textarea)\n</code></pre>\n</blockquote>\n<blockquote>\n<pre><code>resize:none; (textarea)\n</code></pre>\n<p>用来防止拖拽文本域的</p>\n</blockquote>\n<h6 id=\"鼠标样式\"><a class=\"markdownIt-Anchor\" href=\"#鼠标样式\">#</a> 鼠标样式</h6>\n<blockquote>\n<p>cursor: ;</p>\n</blockquote>\n<p>default: 小白鼠标样式<br>\n pointer: 鼠标小手样式<br>\n move: 鼠标移动样式<br>\n text: 鼠标文本样式<br>\n not-allowed: 鼠标禁止样式</p>\n<h6 id=\"图片文字垂直居中\"><a class=\"markdownIt-Anchor\" href=\"#图片文字垂直居中\">#</a> 图片文字垂直居中</h6>\n<p><a href=\"https://imgtu.com/i/IJqrf1\"><img src=\"https://z3.ax1x.com/2021/11/09/IJqrf1.png\" alt=\"IJqrf1.png\"></a></p>\n<h6 id=\"图片底侧有空白缝隙的解决方案\"><a class=\"markdownIt-Anchor\" href=\"#图片底侧有空白缝隙的解决方案\">#</a> 图片底侧有空白缝隙的解决方案</h6>\n<p>先将图片变为块级元素，然后再给块级元素设置边框就可以解决</p>\n<h4 id=\"10文字溢出显示\"><a class=\"markdownIt-Anchor\" href=\"#10文字溢出显示\">#</a> 10. 文字溢出显示</h4>\n<h6 id=\"单行文字溢出显示\"><a class=\"markdownIt-Anchor\" href=\"#单行文字溢出显示\">#</a> 单行文字溢出显示</h6>\n<p><a href=\"https://imgtu.com/i/IQCyhn\"><img src=\"https://z3.ax1x.com/2021/11/06/IQCyhn.png\" alt=\"IQCyhn.png\"></a></p>\n<h6 id=\"多行文字溢出显示\"><a class=\"markdownIt-Anchor\" href=\"#多行文字溢出显示\">#</a> 多行文字溢出显示</h6>\n<p><a href=\"https://imgtu.com/i/IJqc6K\"><img src=\"https://z3.ax1x.com/2021/11/09/IJqc6K.png\" alt=\"IJqc6K.png\"></a></p>\n<h4 id=\"11margin负值的巧妙运动\"><a class=\"markdownIt-Anchor\" href=\"#11margin负值的巧妙运动\">#</a> 11.margin 负值的巧妙运动</h4>\n<p>如果多个盒子都有边框，此时相交部分边框会重合在一起，从而增加边框的大小，此时只需要写入 margin-left: -1px; 就可以得到解决</p>\n<h4 id=\"12文字围绕浮动元素\"><a class=\"markdownIt-Anchor\" href=\"#12文字围绕浮动元素\">#</a> 12. 文字围绕浮动元素</h4>\n<p>众所周知浮动元素是不占用空间的，此时如果将一个照片浮动，而需要在照片旁边写入汉字的话，汉字是否会出现在图片的下方呢，答案是不会，因为汉字会围绕浮动元素</p>\n<h4 id=\"13css初始化\"><a class=\"markdownIt-Anchor\" href=\"#13css初始化\">#</a> 13.css 初始化</h4>\n<p>这里给出一串代码，初始化网页，将网页元素自带的一些 css 属性给去掉</p>\n<blockquote>\n<p>/* 把我们所有标签的内外边距清零 <em>/<br>\n* {<br>\nmargin: 0;<br>\npadding: 0<br>\n}<br>\n/</em>em 和 i 斜体的文字不倾斜 <em>/<br>\nem,<br>\ni {<br>\nfont-style: normal<br>\n}<br>\n/</em> 去掉 li 的小圆点 <em>/<br>\nli {<br>\nlist-style: none<br>\n}<br>\nimg {<br>\n/</em>border 0 照顾低版本浏览器 如果 图片外面包含了链接会有边框的问题 <em>/<br>\nborder: 0;<br>\n/</em> 取消图片底侧有空白缝隙的问题 <em>/<br>\nvertical-align: middle<br>\n}<br>\nbutton {<br>\n/</em> 当我们鼠标经过 button 按钮的时候，鼠标变成小手 <em>/<br>\ncursor: pointer<br>\n}<br>\na {<br>\ncolor: #666;<br>\ntext-decoration: none<br>\n}<br>\na:hover {<br>\ncolor: #c81623<br>\n}<br>\nbutton,<br>\ninput {<br>\n/</em> “\\5B8B\\4F53” 就是宋体的意思 这样浏览器兼容性比较好 <em>/<br>\nfont-family: Microsoft YaHei, Heiti SC, tahoma, arial, Hiragino Sans GB, “\\5B8B\\4F53”, sans-serif<br>\n}<br>\nbody {<br>\n/</em> CSS3 抗锯齿形 让文字显示的更加清晰 <em>/<br>\n-webkit-font-smoothing: antialiased;<br>\nbackground-color: #fff;<br>\nfont: 12px/1.5 Microsoft YaHei, Heiti SC, tahoma, arial, Hiragino Sans GB, “\\5B8B\\4F53”, sans-serif;<br>\ncolor: #666<br>\n}<br>\n.hide,<br>\n.none {<br>\ndisplay: none<br>\n}<br>\n/</em> 清除浮动 */<br>\n.clearfix:after {<br>\nvisibility: hidden;<br>\nclear: both;<br>\ndisplay: block;<br>\ncontent: “.”;<br>\nheight: 0<br>\n}<br>\n.clearfix {<br>\n*zoom: 1<br>\n}</p>\n</blockquote>\n<h4 id=\"14css新增属性\"><a class=\"markdownIt-Anchor\" href=\"#14css新增属性\">#</a> 14.css 新增属性</h4>\n<h6 id=\"新增属性选择器\"><a class=\"markdownIt-Anchor\" href=\"#新增属性选择器\">#</a> 新增属性选择器</h6>\n<p><a href=\"https://imgtu.com/i/IJqRmD\"><img src=\"https://z3.ax1x.com/2021/11/09/IJqRmD.png\" alt=\"IJqRmD.png\"></a></p>\n<p>通过举例进行说明<br>\n input [type=text] {}<br>\n 这个表示选出 input 中 type=text 的元素</p>\n<p>div [class^=XXX]: 选出以 XXX 开头的元素</p>\n<p>div [class$=XXX]: 选出以 XXX 结尾的元素</p>\n<h6 id=\"结构伪类选择器\"><a class=\"markdownIt-Anchor\" href=\"#结构伪类选择器\">#</a> 结构伪类选择器</h6>\n<p><a href=\"https://imgtu.com/i/IJqgOO\"><img src=\"https://z3.ax1x.com/2021/11/09/IJqgOO.png\" alt=\"IJqgOO.png\"></a></p>\n<blockquote>\n<pre><code>xxx:firstchild\nxxx:secondchild\nxxx:nth-child(number)\n</code></pre>\n</blockquote>\n<p>都是选出第几个子元素的意思</p>\n<p><a href=\"https://imgtu.com/i/IJq4kd\"><img src=\"https://z3.ax1x.com/2021/11/09/IJq4kd.png\" alt=\"IJq4kd.png\"></a></p>\n<p>括号里面不仅仅可以跟数字，也可以很有特殊意义的单词，甚至可以跟公式 n 将取自然数</p>\n<p>nth-of-type 选择器</p>\n<p>两个选择器的区别如下<br>\n<a href=\"https://imgtu.com/i/IJqfTH\"><img src=\"https://z3.ax1x.com/2021/11/09/IJqfTH.png\" alt=\"IJqfTH.png\"></a></p>\n<p>举例子来说明:</p>\n<blockquote>\n<pre><code>&lt;p&gt;光头强&lt;/p&gt;\n&lt;div&gt;熊大&lt;/div&gt;\n&lt;div&gt;熊二&lt;/div&gt;\n</code></pre>\n</blockquote>\n<p>此时如果给一个 section div:nth-child (1) { background-color: red; } 指令，你觉得谁会被加上红色呢<br>\n答案是都不会<br>\n child 先看后面的数字 1   ，此时第一个孩子是 p，然后再来看前面的 div，发现 div 不是 P，所以不成立 谁都不给</p>\n<p>但如果给一个 section div:nth-of-type (1) {<br>\nbackground-color: blue;} 指令呢<br>\n答案是会给熊大，type 先看前面的 div，找出 div，再发现后面的 1，所以会给 div 中的第一个孩子</p>\n<h6 id=\"伪元素选择器\"><a class=\"markdownIt-Anchor\" href=\"#伪元素选择器\">#</a> 伪元素选择器</h6>\n<blockquote>\n<p>XXX::before/after {<br>\ncontent:’’;<br>\n}<br>\n 这里面的 content 是必须加的，表示里面的内容，即使你没有内容要写，也需要写出 content 否则无效，注意是单引号</p>\n</blockquote>\n<p>用处：可以里面 css 来个父元素添加盒子 词的的 before 表示出现在父元素的左边 after 表示出现在父元素的右边</p>\n<h6 id=\"css3盒子模型\"><a class=\"markdownIt-Anchor\" href=\"#css3盒子模型\">#</a> css3 盒子模型</h6>\n<p>前面我们说了 padding 和边框都会撑大盒子，所以说我们使用 border 和 padding 还需要减去其尺寸，现在我们提供了修复的方法</p>\n<blockquote>\n<p>box-sizing:  ;</p>\n</blockquote>\n<p>content-box: 按照原来会撑大盒子的方式<br>\n border-box: 会自动减去撑大的尺寸，保证盒子的尺寸不变</p>\n<h6 id=\"图片模糊处理\"><a class=\"markdownIt-Anchor\" href=\"#图片模糊处理\">#</a> 图片模糊处理</h6>\n<blockquote>\n<p>filter:blur()</p>\n</blockquote>\n<p>blur 是一个函数 小括号里面数值越大，图片越模糊 注意数值要加 px 单位</p>\n<h6 id=\"css3宽度calc函数\"><a class=\"markdownIt-Anchor\" href=\"#css3宽度calc函数\">#</a> css3 宽度 calc 函数</h6>\n<p>calc 函数主要提供了一个计算的方法<br>\n例如在有一个父盒子的前提下，子盒子写出这样一个函数 width: calc (100% - 30px); 表示在父亲 100% 尺寸的前提下始终减去 30px 的宽度</p>\n<h6 id=\"过渡效果\"><a class=\"markdownIt-Anchor\" href=\"#过渡效果\">#</a> 过渡效果</h6>\n<p>大概来说就是将一个瞬间变化的过程转化成阶段性有时间长短的变化<br>\n<a href=\"https://imgtu.com/i/IJqTpt\"><img src=\"https://z3.ax1x.com/2021/11/09/IJqTpt.png\" alt=\"IJqTpt.png\"></a><br>\n 在这里 0s 开始一般可以不写而省略，变化曲线也一遍使用 ease 这是最常用的变化曲线</p>\n",
            "tags": [
                "Css"
            ]
        },
        {
            "id": "https://github.com/YogMas/YogMas.github.io/2021/11/06/c-yu-yan/",
            "url": "https://github.com/YogMas/YogMas.github.io/2021/11/06/c-yu-yan/",
            "title": "C语言",
            "date_published": "2021-11-05T16:00:00.000Z",
            "content_html": "<h1 id=\"c语言\"><a class=\"markdownIt-Anchor\" href=\"#c语言\">#</a> C 语言</h1>\n<!-- The Article Made by YogMas -->\n<h2 id=\"the-article-made-by-yogmas\"><a class=\"markdownIt-Anchor\" href=\"#the-article-made-by-yogmas\">#</a> The Article Made by YogMas</h2>\n<p>推荐用书: C Primer Plus (本文章绝大部分内容来自于关于此书的学习过程中记录 还有部分来自于 C 语言程序设计第二版 以及 UESTC MOOC)</p>\n<h3 id=\"c语言的执行过程\"><a class=\"markdownIt-Anchor\" href=\"#c语言的执行过程\">#</a> C 语言的执行过程</h3>\n<p>1. 预处理：可以给程序添加内容也可以修改程序 (例如: #include&lt;stdio.h&gt; 就会在预处理中运用 stdio.h 中的内容对源代码进行处理)<br>\n 2. 编译：将预处理过的语言转变为机器指令.<br>\n3. 链接：把编译器产生的目标代码和所需的其他附加代码整合到一起，产生最终完全可执行的程序.<br>\n(这三个过程是自动实现的)</p>\n<h3 id=\"c语言开始\"><a class=\"markdownIt-Anchor\" href=\"#c语言开始\">#</a> C 语言开始</h3>\n<h4 id=\"基本结构\"><a class=\"markdownIt-Anchor\" href=\"#基本结构\">#</a> 基本结构</h4>\n<blockquote>\n<p>指令<br>\n int main (void)<br>\n{<br>\n语句<br>\n}</p>\n</blockquote>\n<h4 id=\"指令\"><a class=\"markdownIt-Anchor\" href=\"#指令\">#</a> 指令</h4>\n<p>例如 #include &lt;stdio.h&gt; 这条指令说明在编译前将 &lt; stdio.h &gt; 中的信息包含到程序中</p>\n<h4 id=\"函数\"><a class=\"markdownIt-Anchor\" href=\"#函数\">#</a> 函数</h4>\n<p>函数分为两类，一类是程序员写的函数，一类是作为 C 语言实现的一部分提供的函数，我们把后者称为库函数。</p>\n<h4 id=\"语句\"><a class=\"markdownIt-Anchor\" href=\"#语句\">#</a> 语句</h4>\n<p>一种是调用语句 例如 printf (\"\"); 就是调用打印函数，将内容打印在屏幕上</p>\n<p>一种是返回语句<br>\n<strong> C 语言的每条语句都要以；结尾</strong></p>\n<h4 id=\"注释\"><a class=\"markdownIt-Anchor\" href=\"#注释\">#</a> 注释</h4>\n<blockquote>\n<pre><code>/*     */ \n</code></pre>\n</blockquote>\n<p>注释中的内容不会计入到程序中，只是方便程序员观看理解内容</p>\n<p>“盒子形状” 注释</p>\n<blockquote>\n<pre><code>    /*************************\n    *                        *\n    *                        *\n    *************************/\n</code></pre>\n</blockquote>\n<p>如此可以方便程序员更好地观察到注释</p>\n<p>C99 提供了另一种注释的方法</p>\n<blockquote>\n<pre><code>// XXXXXXXXX\n  双斜杠注释\n   这种风格的注释会在行末自动终止，注释第二行还应该添加双斜杠\n</code></pre>\n</blockquote>\n<p>优点：多行 // 可以让注释更加醒目，由于每一行都必须添加 // 可以有效防止注释吞没程序的事情发生</p>\n<h4 id=\"变量和赋值\"><a class=\"markdownIt-Anchor\" href=\"#变量和赋值\">#</a> 变量和赋值</h4>\n<p>程序进行一系列的运算，会有一种临时存储数据的方法，这种储存单元被称为变量</p>\n<h4 id=\"类型\"><a class=\"markdownIt-Anchor\" href=\"#类型\">#</a> 类型</h4>\n<p>每个变量都有一个类型，来说明所储存的数据的种类<br>\n列入 int (整数) 类型和 float (小数) 类型</p>\n<p>同时 float 类型可以储存的数可以比 int 大很多，但是坏处就是 float 的计算可能更加缓慢，而且会造成一定量的误差</p>\n<h4 id=\"声明\"><a class=\"markdownIt-Anchor\" href=\"#声明\">#</a> 声明</h4>\n<p>声明变量首先确定变量的类型，然后说明变量的名字<br>\n eg int height<br>\nint 就是变量的类型，而 height 就是变量的名字<br>\n<strong> main 的声明要放在语句之前</strong></p>\n<h4 id=\"赋值\"><a class=\"markdownIt-Anchor\" href=\"#赋值\">#</a> 赋值</h4>\n<p>变量通过赋值语句获得值</p>\n<blockquote>\n<pre><code>eg: height=8\n</code></pre>\n</blockquote>\n<p>这种确定的数值称为常量<br>\n赋值右侧可以是一个含有常量，变量和运算符的公式，在 C 语言中称为<strong>表达式</strong></p>\n<h4 id=\"显示变量的值\"><a class=\"markdownIt-Anchor\" href=\"#显示变量的值\">#</a> 显示变量的值</h4>\n<blockquote>\n<p>eg:pritnf(\"%d \\n\",height)</p>\n</blockquote>\n<p>这里 % d 是一个占位符，用来指明在显示过程中变量 height 的显示位置</p>\n<p>% d 只用于 int     % f 用于 float 类型变量 f 显示小数点后六位，没有的用 0 补齐<br>\n<strong>注意声明和赋值可以同时进行</strong></p>\n<blockquote>\n<p>eg: int weight=8</p>\n</blockquote>\n<p>需要注意的是，以下这种情况只有 width 拥有初始化器 10</p>\n<blockquote>\n<p>int height,length,width=10</p>\n</blockquote>\n<h4 id=\"宏定义给常量命名\"><a class=\"markdownIt-Anchor\" href=\"#宏定义给常量命名\">#</a> 宏定义给常量命名</h4>\n<blockquote>\n<p>eg:#define INCHES 166</p>\n</blockquote>\n<p>在后面的程序中所有的 INCHES 都会被替换成 166，这里需要注意的，一般宏定义的名称都用大写字母表示，这里没有硬性规定，但这是程序员遵循了几十年的基本准则，可以方便程序更方便的阅读<br>\n同样后面的 166 也可以为一个表达式，表达式建议用括号括上<br>\n<strong>注意 C 语言四舍五入时向下取整</strong></p>\n<h4 id=\"标识符\"><a class=\"markdownIt-Anchor\" href=\"#标识符\">#</a> 标识符</h4>\n<p>在编写程序时，需要进行大量的命名，这些名字被称为<strong>标识符</strong>，在 C 语言中标识符可以有字母，数字，和下划线，但是必须<strong>以字母或者下划线开头</strong></p>\n<p>同时标识符是区分大小写的也就是说 JOB 和 job 是两个完全不同的标识符</p>\n<h4 id=\"关键字\"><a class=\"markdownIt-Anchor\" href=\"#关键字\">#</a> 关键字</h4>\n<p>关键字对 C 编译器有着特殊的意义，因此这些关键字不能作为标识符来使用</p>\n<p><a href=\"https://imgtu.com/i/IQ9uZQ\"><img src=\"https://z3.ax1x.com/2021/11/06/IQ9uZQ.md.jpg\" alt=\"IQ9uZQ.md.jpg\"></a></p>\n<h4 id=\"书写规范\"><a class=\"markdownIt-Anchor\" href=\"#书写规范\">#</a> 书写规范</h4>\n<p>语句可以分开放在任意多行内。<br>\n记号间的宫格可以让我们更容易区分记号，基于这个原因，我通常会在每个运算符的前后都放上一个空格</p>\n<blockquote>\n<pre><code> eg volume = height * width * length\n</code></pre>\n</blockquote>\n<p>缩进有助于轻松识别程序嵌套</p>\n<p>空行可以把程序分为逻辑单元，从而使读者更容易辨别程序的结构，没有空行的程序很难阅读，就像不分章节的书一样.</p>\n<h3 id=\"格式化输入输出\"><a class=\"markdownIt-Anchor\" href=\"#格式化输入输出\">#</a> 格式化输入 / 输出</h3>\n<h4 id=\"printf函数\"><a class=\"markdownIt-Anchor\" href=\"#printf函数\">#</a> printf 函数</h4>\n<blockquote>\n<pre><code>   printf(\" i = %d , j = %d\",i,j);\n   printf(格式化字符串,表达式1，表达式2,...;)\n</code></pre>\n</blockquote>\n<p>格式化字母串包含<strong>普通字符</strong>和<strong>转换说明</strong><br>\n转换说明以 % 开头，% 后面的信息指定了把数值从内部形式转换为打印字母的方法<br>\n eg:% d 表示把 int 型数值从二进制转换成十进制的字符串</p>\n<p>注意编译器不会检测格式串中转换说明的数量是否和输出项的数量相匹配，但是如果多于或者少于会让程序简单地无意义地输出<br>\n如果转换说明的个数小于变量数，多的变量就无法显示出来<br>\n变量和占位符不匹配时，就是显示出一个无意义的数值.<br>\n<a href=\"https://imgtu.com/i/IQ9FPI\"><img src=\"https://z3.ax1x.com/2021/11/06/IQ9FPI.png\" alt=\"IQ9FPI.png\"></a></p>\n<h5 id=\"转换说明\"><a class=\"markdownIt-Anchor\" href=\"#转换说明\">#</a> 转换说明</h5>\n<h5 id=\"标志\"><a class=\"markdownIt-Anchor\" href=\"#标志\">#</a> 标志</h5>\n<p>-: 左对齐，也就是加空格或 0 时加在后面<br>\n不加 - 默认为右对齐，也就是加空格或 0 时加在前面</p>\n<p>0: 加 0 表示用空格代替 0，不加 0 时输出的值多的用空格代替</p>\n<h6 id=\"最小栏宽m\"><a class=\"markdownIt-Anchor\" href=\"#最小栏宽m\">#</a> 最小栏宽 m</h6>\n<p>最小栏宽 m 指定了要显示的最少字符数量 (<strong>m 表示了输出的数最少占几列</strong>)，如果要系那是的字符数少于 m，那么值在字段内是右对齐的 (换句话说，在值得前面显示空格)<br>\n 例如 %4d 将以<strong>空格 123</strong> 的形式显示数 123，如果要显示的值所需字符多于 m，那么栏宽会自动拓展为所需的尺寸。因此，转换说明 %4d 将以 12345 的形式显示数 12345，而不会丢失数字。在 m 前放上一个负号，会导致左对齐；转换说明 %-4d 将以<strong> 123 空格</strong>的形式显示 123</p>\n<h6 id=\"精度p\"><a class=\"markdownIt-Anchor\" href=\"#精度p\">#</a> 精度 p</h6>\n<p>精度的含义很难 6+<br>\n+ 描述，因为他依赖于转换指定符号<br>\n d:p 指明了待限制数字的最少个数 (包括空格)<br>\n, 如果省略 p，则默认它的值为 1<br>\ne: 表示科学计数法形式的浮点数。p 指明了小数点后应该出现的数字个数 (默认值为 6) 如果 p 为 0 则不显示小数点<br>\n g: 自动选 f 格式或 e 格式中较短的一种输出，且不输出无意义的 0<br>\no：无符号数转化为八进制数<br>\n x：无符号数转化为十六进制数<br>\n<a href=\"https://imgtu.com/i/IQ9ARP\"><img src=\"https://z3.ax1x.com/2021/11/06/IQ9ARP.png\" alt=\"IQ9ARP.png\"></a><br>\n<a href=\"https://imgtu.com/i/IQ9Exf\"><img src=\"https://z3.ax1x.com/2021/11/06/IQ9Exf.png\" alt=\"IQ9Exf.png\"></a></p>\n<h5 id=\"转义序列\"><a class=\"markdownIt-Anchor\" href=\"#转义序列\">#</a> 转义序列</h5>\n<p>警报响铃符:    \\a<br>\n 回退符:     \\b<br>\n 换行符:     \\n<br>\n 水平制表符：   \\t<br>\n“:”( \\  + 特殊字符 = 特殊字符 )</p>\n<h4 id=\"scanf函数\"><a class=\"markdownIt-Anchor\" href=\"#scanf函数\">#</a> scanf 函数</h4>\n<blockquote>\n<p>scanf (\"&amp;d\", 变量名)</p>\n</blockquote>\n<p>scanf 函数起到读取用户输入到屏幕的数据<br>\n pritnf 函数起到将程序中的数据显示到屏幕上的作用<br>\n scanf 与 prinf 函数是相对的<br>\n scanf 函数的工作原理 这里不一一叙述<br>\n可见程序与设计第 32 页 3.2.1</p>\n<p>另外 % i 也可以充当整数的占位符，在 printf 中与 % d 没有区别，但是在 scanf 中 % i 可以储存 10 进制，8 进制，16 进制的数字，而 % d 只能储存 10 进制的数字，如果输入的数前面有 0 那么 % i 会当成 8 进制处理，如果前面有 0x 那么输入的数会当成 16 进制处理，所以一般情况下我们坚持使用 % d，防止因为在数字前面加入 0 而导致数据识别错误</p>\n<h4 id=\"表达式\"><a class=\"markdownIt-Anchor\" href=\"#表达式\">#</a> 表达式</h4>\n<h5 id=\"算术运算符\"><a class=\"markdownIt-Anchor\" href=\"#算术运算符\">#</a> 算术运算符</h5>\n<blockquote>\n<p>一元运算符: + 正号  - 负号<br>\n二元运算符: + 加法 - 减法  * 乘法  / 除法 % 求余</p>\n</blockquote>\n<p>可能产生的意外结果</p>\n<blockquote>\n<p>两个操作数都是整数时，结果会进行四舍五入，例如 1/2 的结果是 0 而不是 0.5<br>\n% 要求操作数是整数 如果两个操作数中有一个不是整数，程序将无法编译通过<br>\n根据 C89 标准，如果两个运算符中有一个为负数，那么结果不确定，可能向上取整，也可能向下取整<br>\n在 C99 标准中 除法的结果总是趋向 0 截取    i% j 的结果的值得负号与 i 相同 例如 - 9%7 的结果为 - 2</p>\n</blockquote>\n<h5 id=\"优先级和结合性\"><a class=\"markdownIt-Anchor\" href=\"#优先级和结合性\">#</a> 优先级和结合性</h5>\n<blockquote>\n<p>最高优先级: + - (一元运算符)  *  /  %<br>\n 最低优先级:    +  -  (二元运算符)</p>\n</blockquote>\n<p>当有多个相同优先级的符号时，从左到右依次结合.<br>\n<a href=\"https://imgtu.com/i/IQ99VH\"><img src=\"https://z3.ax1x.com/2021/11/06/IQ99VH.png\" alt=\"IQ99VH.png\"></a></p>\n<h5 id=\"赋值运算符\"><a class=\"markdownIt-Anchor\" href=\"#赋值运算符\">#</a> 赋值运算符</h5>\n<p>求出表达式的值后，将值储存在变量中，就需要对变量进行赋值</p>\n<p>如果变量表示的含义和所输入的数字不同，将会把数字改成变量所对应的数字<br>\n例如: int i=72.999   这个时候 i 对应的值就是 72 而不是 72.999</p>\n<p>多个运算符可以串联在一起<br>\n i = j = k = 0;<br>\n 需要注意的是，赋值表达式是从右开始赋值的<br>\n i = (j = (k = 0))</p>\n<h5 id=\"左值\"><a class=\"markdownIt-Anchor\" href=\"#左值\">#</a> 左值</h5>\n<p>大多数 C 语言运算符允许他们的操作数是变量，常量，或者是其他运算符表达式，但是他们的<strong>左值</strong>必须是对象</p>\n<p>目前为止<strong>变量</strong>是唯一的左值</p>\n<h5 id=\"复合赋值\"><a class=\"markdownIt-Anchor\" href=\"#复合赋值\">#</a> 复合赋值</h5>\n<blockquote>\n<p>复合运算符 -=,*=,/=,%=,+=<br>\n 另外 5 种赋值运算符将在后面的章节中介绍</p>\n</blockquote>\n<p>v += e 表示 v 加上 e 再把结果储存在 v 中<br>\n这并不等价于 v = v+e 例如变量 i*=j+k 就不等于 i= i*j + k</p>\n<p>复合赋值运算符同样也是右结合的<br>\n语句 i += j += k 表示 i += (j += k)</p>\n<p>最常使用的两种运算是 自增和自减<br>\n例如 i = i + 1 而复合运算符可以缩短这串代码 可以改写为 i += 1</p>\n<h5 id=\"自增运算符和自减运算符\"><a class=\"markdownIt-Anchor\" href=\"#自增运算符和自减运算符\">#</a> 自增运算符和自减运算符</h5>\n<p>C 语言还允许使用 ++ (自增) 和 – (自减) 运算符将这些语句缩得更短<br>\n实际上自增和自减运算符的使用非常复杂，原因是 ++ 和 -- 既可以作为前缀，也可以作为后缀，根据实际使用情况而定</p>\n<p>而这种情况实际上是有副作用的，副作用的效果就是自增 i</p>\n<p>前缀自增和后缀自增的区别：前缀自增表示先自增 i 再将变量 i 代入表达式中，后缀自增表示先把变量 i 代入表达式中，再自增 i</p>\n<p>并且在同一个句子中多次使用 ++ 和 -- 往往难以理解，例如<br>\n i = 1; j = 2 ; k = <ins>i + j</ins>;</p>\n<p>后缀<ins>和 -- 优先级 比正号和负号高，并且都是左结合<br>\n前缀</ins>和 -- 优先级和正号负号相同，并且都是右结合</p>\n<h4 id=\"选择语句\"><a class=\"markdownIt-Anchor\" href=\"#选择语句\">#</a> 选择语句</h4>\n<h5 id=\"逻辑表达式\"><a class=\"markdownIt-Anchor\" href=\"#逻辑表达式\">#</a> 逻辑表达式</h5>\n<p>测试表达式的结果是 \"真\" 还是 \"假\"，这类表达式只有这两个效果，翻译为电脑语言就是这个表示只会输出两个值 0 或者 1<br>\n<a href=\"https://imgtu.com/i/IQ9ZM8\"><img src=\"https://z3.ax1x.com/2021/11/06/IQ9ZM8.png\" alt=\"IQ9ZM8.png\"></a><br>\n 逻辑运算符对操作数进行短路计算，这些运算符首先计算出左操作数的值，然后计算出右操作数的值，如果做操作数的值可以直接推导表达式的值，那么将不计算右操作数的值</p>\n<p>运算符！的优先级等于一元正负号的优先级，而运算符 &amp;&amp; 和 || 的优先级低于关系运算符和判等运算符，运算符！是右结合的，而运算符 &amp;&amp; 和运算符 || 是左结合的.</p>\n<h5 id=\"关系运算符\"><a class=\"markdownIt-Anchor\" href=\"#关系运算符\">#</a> 关系运算符</h5>\n<p><a href=\"https://imgtu.com/i/IQ9PIA\"><img src=\"https://z3.ax1x.com/2021/11/06/IQ9PIA.png\" alt=\"IQ9PIA.png\"></a></p>\n<p>需要注意的是 i &lt; j &lt; k 并不是所想象的 j 处在 i 和 k 的中间值得意思，表达式是左结合的<br>\n所以原式式 (i &lt; j) &lt; k  先对 i &lt; j 进行判定，输出 0 或者 1 来和 k 进行比较</p>\n<h5 id=\"判等运算符\"><a class=\"markdownIt-Anchor\" href=\"#判等运算符\">#</a> 判等运算符</h5>\n<p><a href=\"https://imgtu.com/i/IQ9esS\"><img src=\"https://z3.ax1x.com/2021/11/06/IQ9esS.png\" alt=\"IQ9esS.png\"></a></p>\n<p>i &lt;j == j &lt; k 等价于 (i &lt; j) == (j &lt; k)<br>\n 只有当 两边同为真或者同为假的时候 输出结果为真</p>\n<h5 id=\"运算顺序\"><a class=\"markdownIt-Anchor\" href=\"#运算顺序\">#</a> 运算顺序</h5>\n<p>C 语言对括号的运算顺序没有进行规定，所以因为编译器的不同可能出现不同的结果<br>\n例如 a = 5 ;<br>\nc = (b = a + 2 ) - ( a = 1 )<br>\n 先算 b = a + 2 还是先算 a = 1 不同的编译器有着不一样的算法，所以如果编译器不同，可能产生不一样的结果</p>\n<p>注意不要依赖特定的运算顺序</p>\n<p>例如: i = 2 ;  j = i * i++;<br>\n 大部分人可能会认为输出的结果是 4，其实也可能为 6，不同的编译器有时候会出现不同的结果<br>\n最好的方法就是将长的运算表达式转化为短的运算表达式，如此就可以适应不同的编译器.</p>\n<h4 id=\"if语句\"><a class=\"markdownIt-Anchor\" href=\"#if语句\">#</a> if 语句</h4>\n<blockquote>\n<p>if (表达式) 语句</p>\n</blockquote>\n<p>注意表达式两边的括号是必须的<br>\n计算时先计算括号内表达式的值，如果表达式的值非零也就是真值，那么接着执行括号后面的语句.<br>\n 一定要注意区分 ==(判等) 和 =(赋值)<br>\n 前面我们说了例如 i &lt; j &lt; k 这样的写法是不行的，为了判定变量是否落在某个数值范围内，例如为了判定 0≤ i &lt; n 我们可以写成</p>\n<blockquote>\n<p>if (0 &lt;= i &amp;&amp; i&lt; n) …</p>\n</blockquote>\n<p>|| 运算符也是相同的道理</p>\n<h5 id=\"复合语句\"><a class=\"markdownIt-Anchor\" href=\"#复合语句\">#</a> 复合语句</h5>\n<p>在 if 语句模板中，语句是一条语句而不是多条语句，如果想用 if 语句处理多条语句，我们引入了复合语句.<br>\n 复合语句由一对花括号和语句混合而成，可以有多个声明和多个语句，也可以什么都没有<br>\n为了表示清楚，通常将一条语句放在多行内，每行有一条语句，如下所示:<br>\n{<br>\nline_num = 0;<br>\npage_num++;<br>\n}<br>\n 注意，每条内部语句依然以<strong>分号</strong>结尾</p>\n<h5 id=\"else子句\"><a class=\"markdownIt-Anchor\" href=\"#else子句\">#</a> else 子句</h5>\n<p>if 语句可以有 else 子句</p>\n<blockquote>\n<p>if (表达式) 语句 else 语句</p>\n</blockquote>\n<p>注意，出现的语句末尾都要以<strong>分号</strong>结尾</p>\n<p>通常来说为了布局美观，和清楚显示代码，我们将 if 和 else 放在同一列，其内的内部语句同样进行缩进<br>\n可以为复合语句增加花括号，这不是必需的但是能够使复合语句更加清楚.</p>\n<h4 id=\"条件表达式\"><a class=\"markdownIt-Anchor\" href=\"#条件表达式\">#</a> 条件表达式</h4>\n<blockquote>\n<p>表达式 1 ? 表达式 2 : 表达式 3</p>\n</blockquote>\n<p>表达式 1,2,3 可以是任何类型的表达式，同时条件表达式被经常称为三元运算符.</p>\n<p>条件表达式读作 如果表达式 1 成立，那么表达式 2，否则表达式 3<br>\n 求值步骤为：首先计算出表达式 1 的值，如果此值不为 0，那么计算表达式 2 的值，并且计算出来的值就是整个表达式的值，如果表达式 1 的值为 0，那么表达式 3 的值是整个条件表达式的值</p>\n<p>条件表达式通常运用于 printf 中进行简化代码</p>\n<p>例如 if (i&gt; j ) printf (\"% d \\n\",i); else printf (\"% d \\n\",j);<br>\n 可以简化为  printf (\"% d \\n\",i&gt;j?i:j);<br>\n 同时在 return 中也经常使用，使用场景类似</p>\n<h4 id=\"switch语句\"><a class=\"markdownIt-Anchor\" href=\"#switch语句\">#</a> switch 语句</h4>\n<p>通常来说可以用 switch 语句来代替级联式 if 语句</p>\n<blockquote>\n<p>switch (表达式) {<br>\ncase 常量表达式：语句<br>\n…<br>\ncase 常量表达式：语句<br>\n default : 语句<br>\n}</p>\n</blockquote>\n<p>同样这里的语句也要以<strong>分号</strong>结尾<br>\n<a href=\"https://imgtu.com/i/IQ9mqg\"><img src=\"https://z3.ax1x.com/2021/11/06/IQ9mqg.jpg\" alt=\"IQ9mqg.jpg\"></a></p>\n<p>switch 语句实际上是一种给予计算的跳转。对控制表达式求值时， 控制会跳转到与 switch 表达式的值相匹配的分支标号处。在执行完一个分支后，程序控制向下跳转到下一个分支的第一条语句上，如果没有 break 语句，控制将从一个分支继续流向下一个分支。例如<br>\n switch (grade) {<br>\ncase 4 :printf (“Excellent”);<br>\ncase 3 :printf (“Good”);<br>\ncase 2 :printf (“Average”);<br>\ncase 1 :printf (“poor”);<br>\ncase 0 :printf (“Falling”);<br>\ndefault : printf (“Illegal grade”)<br>\n}<br>\n 当你输入 3 时，显示的消息是：GoodAveragePoorFailingIllegal grade</p>\n<h3 id=\"循环\"><a class=\"markdownIt-Anchor\" href=\"#循环\">#</a> 循环</h3>\n<h4 id=\"while语句\"><a class=\"markdownIt-Anchor\" href=\"#while语句\">#</a> while 语句</h4>\n<blockquote>\n<pre><code>[while语句]:    while (表达式) 语句\n例如: while(i&lt;n) i=i*2;\n</code></pre>\n</blockquote>\n<p>因为 while 语句中有循环，为了让循环更简单，我们可以将 i++ 或者 i–直接加到 printf 中来使代码更加简洁</p>\n<blockquote>\n<pre><code>例如: while(i&gt;0) printf(\"%d \\n\",i--)\n这串代码可以一直输出0~i的数字，是不是这样更加简洁\n</code></pre>\n</blockquote>\n<h4 id=\"do语句\"><a class=\"markdownIt-Anchor\" href=\"#do语句\">#</a> do 语句</h4>\n<p>do 语句在本质上其实就是 while 语句只不过其控制表达式是在每次执行完循环体之后进行判定.</p>\n<blockquote>\n<pre><code>[do语句]: do 语句  while(表达式):\n</code></pre>\n</blockquote>\n<p>do 语句的循环体必须是一条语句和 while 一样，当然如果想用多条语句可以用复合语句.</p>\n<p>执行 do 语句时，先执行循环体，再计算控制表达式的值</p>\n<h4 id=\"for语句\"><a class=\"markdownIt-Anchor\" href=\"#for语句\">#</a> for 语句</h4>\n<blockquote>\n<pre><code>[for语句]    for(表达式1或者声明;表达式2;表达式3)\n</code></pre>\n</blockquote>\n<p><a href=\"https://imgtu.com/i/IQpd8P\"><img src=\"https://z3.ax1x.com/2021/11/06/IQpd8P.png\" alt=\"IQpd8P.png\"></a></p>\n<p>对于向上增或向下减的循环来说，for 语句通常是最好的选择</p>\n<p>从 0 向上加到 n-1</p>\n<blockquote>\n<pre><code>for (i=0;i&lt;n;i++)\n</code></pre>\n</blockquote>\n<p>从 1 向上加到 n</p>\n<blockquote>\n<pre><code>for(i=1;i&lt;=n,i++)\n</code></pre>\n</blockquote>\n<p>等等同理</p>\n<p>如果所需要的语句没有那么多，for 语句允许省略语句，注意，即使省略了表达式，括号中也许有两个<strong>分号</strong><br>\n当 for 语句同时省略第一个和第三个表达式时，那么他和 while 语句没有任何区别<br>\n省略第一个语句时，程序会默认为真值，会一直循环下去</p>\n<p>在 C99 中第一个表达式可以替换成一个声明，但在 for 语言中的声明，仅可以在 for 语句内部使用，在 for 循环的外部不可用</p>\n<p>同时 for 语言中可以声明多个变量，但是他们的类型需要相同</p>\n<h4 id=\"逗号运算符\"><a class=\"markdownIt-Anchor\" href=\"#逗号运算符\">#</a> 逗号运算符</h4>\n<blockquote>\n<pre><code>[逗号表达式] 表达式1,表达式2\n</code></pre>\n</blockquote>\n<p>第一步计算出表达式 1 的值，抛弃。第二部计算出表达式 2 的值，并将表达式 2 的值作为整个表达式的值，需要注意的是这里并不是说表达式 1 的值并没有用，表达式 1 中例如 i++，i–等仍然会对表达式 2 中的 i 和 j 造成一定的影响</p>\n<p>逗号运算符是左结合的，并且逗号运算符的优先级比其他所有运算符的优先级都更低</p>\n<p>for 语句是唯一可以发现逗号运算符的地方.<br>\nfor 语句可以利用逗号表达式来声明更多的变量</p>\n<h3 id=\"跳出循环\"><a class=\"markdownIt-Anchor\" href=\"#跳出循环\">#</a> 跳出循环</h3>\n<h4 id=\"break语句\"><a class=\"markdownIt-Anchor\" href=\"#break语句\">#</a> break 语句</h4>\n<p>前面讨论过 break 语句跳出 switch 语句，同时 break 语句还可以用于跳出 while,do,for 循环</p>\n<p>需要注意的时，如果有嵌套的情况存在，break 语句只能跳出一层循环</p>\n<h4 id=\"continue语句\"><a class=\"markdownIt-Anchor\" href=\"#continue语句\">#</a> continue 语句</h4>\n<p>continue 语句与 break 语句的区别在于，break 语句把程序控制转移到循环体末尾之后，而 continue 语句刚好把程序控制转移到循环体末尾之前.<br>\ncontinue 语句会把程序控制留在循环内，而 break 语句会使程序控制跳出循环<br>\n continue 语句只能用于循环，而 break 语句可以用于 switch 语句和循环</p>\n<p>continue 语句不会跳出循环，但会直接跳过 continue 之后的一系列语句，重新开始循环</p>\n<h4 id=\"goto语句\"><a class=\"markdownIt-Anchor\" href=\"#goto语句\">#</a> goto 语句</h4>\n<p>goto 语句可以跳转到函数中任何有<strong>标号</strong>的语句处</p>\n<blockquote>\n<pre><code>[标号语句]  标识符:语句\n[goto语句]  goto 标识符;\n</code></pre>\n</blockquote>\n<p>两个语句必须在同一个函数中<br>\n goto 语句对于嵌套循环的退出是很有用的</p>\n<h4 id=\"空语句\"><a class=\"markdownIt-Anchor\" href=\"#空语句\">#</a> 空语句</h4>\n<blockquote>\n<pre><code>eg:for(XX;XX;XX);\n</code></pre>\n</blockquote>\n<p>空语句的一个好处：编写空循环体的循环.<br>\nC 程序员习惯性地把空语句单独放置在一行</p>\n<h3 id=\"基本类型\"><a class=\"markdownIt-Anchor\" href=\"#基本类型\">#</a> 基本类型</h3>\n<p>C 语言支持两种根本的数据类型 分别是 整数类型 和浮点数类型  简单来说 整数和其他数 (包括小数等等) 的区别</p>\n<h4 id=\"整数类型\"><a class=\"markdownIt-Anchor\" href=\"#整数类型\">#</a> 整数类型</h4>\n<p>正说类型 分为 有符号整数和无符号整数</p>\n<p>有符号整数：如果整数为正数或者 0 那么最左边的符号位为 0; 如果为负数 那么最左边的符号位为 1 储存的时候都是按有符号整数来储存 如果要当成无符号整数来储存 需要声明整数类型为 unsigned<br>\n 无符号整数：最左边的位是数值的一部分</p>\n<p>C 语言的整数类型 有着不同的大小 int 类型通常为 32 位   有些数字很大 所以 C 语言还提供了 长整型 和 需要很小空间来储存的数 这样的数称为短整型</p>\n<p>整型分为 4 种 long short signed unsigned 他们之间可以互相组合</p>\n<blockquote>\n<pre><code>short int\nunsigned short int\nint\nunsigned int\nlong int\nunsigned long int\n</code></pre>\n</blockquote>\n<p>其他组合都是上述组合的同义词<br>\n C 语言允许通过省略单词 int 来缩写整数类型的名字<br>\n但很多基于 c 语言的程序 甚至不允许程序员写 short int 这样的名字 而必须写成 short 或者 long<br>\n 不同类型的取值范围也可能一样<br>\n eg: long int 可能和 int 有相同的取值范围  但是 long int 永远不可能比 int 的取值范围短<br>\n<a href=\"https://imgtu.com/i/IQpcUs\"><img src=\"https://z3.ax1x.com/2021/11/06/IQpcUs.png\" alt=\"IQpcUs.png\"></a><br>\n<a href=\"https://imgtu.com/i/IQpsbQ\"><img src=\"https://z3.ax1x.com/2021/11/06/IQpsbQ.png\" alt=\"IQpsbQ.png\"></a><br>\n<a href=\"https://imgtu.com/i/IQp0v8\"><img src=\"https://z3.ax1x.com/2021/11/06/IQp0v8.png\" alt=\"IQp0v8.png\"></a><br>\n 但是这种范围会随着编译器的不同而不同 好的解决方法是检查 &lt;limis.h&gt; 头文件定义了每种整数类型的最大值和最小值的宏<br>\n C99 新增了 2 个 long long int 和 unsigned long long int</p>\n<h5 id=\"整数常量\"><a class=\"markdownIt-Anchor\" href=\"#整数常量\">#</a> 整数常量</h5>\n<p>常量：在程序中以文本形式出现的数，而不是读，写，计算出来的数.C 语言允许用十进制，八进制，十六进制来表示常量</p>\n<p>十进制不能以 0 开头 八进制必须以 0 开头 十六进制总是以 0x 开头<br>\n这里需要注意的是  这些只是书写数的方式 并不会对数的储存方式产生英雄 数都是以二进制储存的 所以我们进行计算的时候甚至可以将他们三个混合使用 程序仍然能够识别 并且计算出值<br>\n十进制整数常量的类型同城为 nit 但如果常量的值大得无法储存在 int 型中 那就用 long int 类型。如果出现 long int 还不够用的罕见情况 编译器会用 unsigned long int 做最后的尝试<br>\n八进制和十六进制 会从范围最小的整数型开始尝试 直至找到能表示该常量的类型</p>\n<p>要强制编译器把常量作为长整数来处理，只需要在后边加上一个字母 L/l  <strong>大小写无所谓</strong><br>\n同样 要指明是无符号变量 可以在常量后边加上字母 U/u<br>\n<strong>L 和 U 可以混合使用 顺序和大小都无所谓</strong></p>\n<h5 id=\"c99中的整型变量\"><a class=\"markdownIt-Anchor\" href=\"#c99中的整型变量\">#</a> C99 中的整型变量</h5>\n<p>在 C99 中 出现了 LL (long long) 在 ll 前面 U 的通常是 unsigned long long  需要注意的是 <strong>这里两个 l 的大小写需要一致</strong><br>\n十进制储存 按照 int      long int   long long int 中的最小的能适合的方式储存<br>\n而八进制和十六进制 按照 int        unsigned int          long int           unsigned long int   ……</p>\n<h5 id=\"整数溢出\"><a class=\"markdownIt-Anchor\" href=\"#整数溢出\">#</a> 整数溢出</h5>\n<p>对整数执行算数运算时，其结果有可能因为太大而无法显示，这时候就会发生整数溢出<br>\n有符号整数溢出时 会出现没有定义的情况 无法预估最后会发生的情况<br>\n无符号整数溢出时 结果会有定义的：正确答案对 2 的 n 次方取模 例如 65535+1 的结果 (能够被 2 除尽) 其结果可以保证为 0</p>\n<h5 id=\"读写整数\"><a class=\"markdownIt-Anchor\" href=\"#读写整数\">#</a> 读 / 写整数</h5>\n<p>通常我们发生整数溢出时，会马上去更换整数类型 但单单这样做是不够的 我们还必须检查数据类型的改变对程序其他部分的影响</p>\n<p>读写无符号整数时 使用 u,o,x 代替转换说明中的 d<br>\nu 表示十进制 o 表示八进制 x 表示十六进制</p>\n<p>读写短整数时 在 d,o,x 或者 u 前面加上字母 h</p>\n<p>读写长整数时，在 d,o,x 或者 u 前面加上字母 l</p>\n<p>读写尝尝整数时，在 d,o,x 或者 u 前面加上字母 ll</p>\n<h4 id=\"浮点类型\"><a class=\"markdownIt-Anchor\" href=\"#浮点类型\">#</a> 浮点类型</h4>\n<p>float: 单精度浮点数<br>\n double: 双精度浮点数<br>\n long double: 扩展精度浮点数</p>\n<p>C 语言没有明确的说明精度到底是多少 不同的计算机可以以不同的方法储存浮点数</p>\n<p>数值是由三部分组成：符号，指数和小数 指数部分的位数说明了数值可能大小程度 而小数部分的位数说明了精度<br>\n<a href=\"https://imgtu.com/i/IQpwgf\"><img src=\"https://z3.ax1x.com/2021/11/06/IQpwgf.png\" alt=\"IQpwgf.png\"></a><br>\nlong double 类型没有出现在表中 因为它的长度随着机器的不同而变化 最常见的大小是 80 位和 128 位</p>\n<p>C99 中 浮点类型分为两种 一种是实浮点类型 包括 float,double,long double 类型<br>\n另一种是 C99 新增的复数类型  包括 float ,_Complex ,double ,_Complex ,long double _Complex</p>\n<h5 id=\"浮点常量\"><a class=\"markdownIt-Anchor\" href=\"#浮点常量\">#</a> 浮点常量</h5>\n<p>浮点常量必须包括小数点或者指数 其中指数指明了对前面的数进行缩放所需的 10 的幂次 如果有指数 则需要在指数数值前放置字母 E 或者 e 可选符号 + 或者 - 可以出现在字母 E 或者 e 的后边 为了表明只需要单精度 可以在常量的末尾处加上字母 F/f; 而为了说明常量必须以 long double 的形式储存可以在常量的末尾处 加上字母 L 或者 l</p>\n<h5 id=\"读写浮点数\"><a class=\"markdownIt-Anchor\" href=\"#读写浮点数\">#</a> 读写浮点数</h5>\n<p>前面已讨论过，转换说明 % e,% f 和 % g 用于读写单精度浮点数 读写 double 和 long double 类型的值所需的转换说明略有不同<br>\n读写 double 类型的值时，在 e,f,g 前面放置字母 l   <strong>注意只能在字符串 scanf 中使用 在 printf 函数调用中使用额 e,f,g 可以用来写 float 类型或者 double 类型的值</strong><br>\n读写 long double 类型时，在 e,f,g 前面放置字母 L<br>\n<strong> 注意 double 和 long double 这里有字母大小写的区别</strong></p>\n<h4 id=\"字符类型char\"><a class=\"markdownIt-Anchor\" href=\"#字符类型char\">#</a> 字符类型 char</h4>\n<p>当前最常用的字符集是 ASCII 字符集，用 7 位代码表示 128 个字符<br>\n char 类型的变量可以用任意单字符赋值</p>\n<h5 id=\"字符操作\"><a class=\"markdownIt-Anchor\" href=\"#字符操作\">#</a> 字符操作</h5>\n<p>C 语言将字符当做整数进行处理 毕竟所有的字符都是以二进制的形式进行编码的</p>\n<blockquote>\n<pre><code>char ch;\nch = 65      此时ch是A\nch = ch+1    此时ch是B\n</code></pre>\n</blockquote>\n<h5 id=\"有符号字符和无符号字符\"><a class=\"markdownIt-Anchor\" href=\"#有符号字符和无符号字符\">#</a> 有符号字符和无符号字符</h5>\n<p>char 类型像整数类型一样存在符号性和无符号性两种 通常有符号型的取值是 - 128~127 而无符号字符的取值是 0~255<br>\n 所有 C 语言允许单词 signed 和 unsigned 来修饰 char 类型</p>\n<h4 id=\"算数类型\"><a class=\"markdownIt-Anchor\" href=\"#算数类型\">#</a> 算数类型</h4>\n<p><a href=\"https://imgtu.com/i/IQp6Ej\"><img src=\"https://z3.ax1x.com/2021/11/06/IQp6Ej.png\" alt=\"IQp6Ej.png\"></a></p>\n<h4 id=\"转义序列-2\"><a class=\"markdownIt-Anchor\" href=\"#转义序列-2\">#</a> 转义序列</h4>\n<p>转义序列分为字符转义序列和数字转义序列</p>\n<h5 id=\"字符转义序列\"><a class=\"markdownIt-Anchor\" href=\"#字符转义序列\">#</a> 字符转义序列</h5>\n<p><a href=\"https://imgtu.com/i/IQprDg\"><img src=\"https://z3.ax1x.com/2021/11/06/IQprDg.png\" alt=\"IQprDg.png\"></a></p>\n<h5 id=\"数字转义序列\"><a class=\"markdownIt-Anchor\" href=\"#数字转义序列\">#</a> 数字转义序列</h5>\n<p>字符转义序列没有包含所有无法打印的 ASCII 字符 字符转义序列也无法包含 128 个 ASICC 字符以外的字符 而数字转义字符可以表示任何字符 所有它可以解决上述问题</p>\n<p>作为字符常量来使用时，<strong> 转义序列必须用一堆单引号括起来</strong></p>\n<h4 id=\"字符处理函数\"><a class=\"markdownIt-Anchor\" href=\"#字符处理函数\">#</a> 字符处理函数</h4>\n<p>例如 toupper 函数可以将小写字母转化为大写字母 但要调用这类使用的字符处理函数 需要在顶部放置 #include &lt;ctype.h&gt; 这一条指令</p>\n<h5 id=\"用scanf-和printf读写字符\"><a class=\"markdownIt-Anchor\" href=\"#用scanf-和printf读写字符\">#</a> 用 scanf 和 printf 读写字符</h5>\n<p>scanf 读写字符时 并不会跳过空白字符 为了强制 scanf 在读入字符前跳过空白字符，需要在格式串中的转换说明 % C 前面加上一个空格</p>\n<h5 id=\"用getchar和putchar用于读写字符\"><a class=\"markdownIt-Anchor\" href=\"#用getchar和putchar用于读写字符\">#</a> 用 getchar 和 putchar 用于读写字符</h5>\n<p>getchar 函数和 putchar 函数可以用来取代 scanf 和 printf 函数 putchar 函数用于写单个字符<br>\n每次调用时他会读写一个字符并将其返回 为了保存这个字符 必须使用赋值操作将其储存在变量中<br>\n当混用 getchar 函数和 scanf 函数要小心 scanf 函数仅消耗掉匹配的输入数据 其余部分仍然留在缓冲区 (包括换行符)</p>\n<h4 id=\"类型转换\"><a class=\"markdownIt-Anchor\" href=\"#类型转换\">#</a> 类型转换</h4>\n<h5 id=\"隐式类型转换规则\"><a class=\"markdownIt-Anchor\" href=\"#隐式类型转换规则\">#</a> 隐式类型转换规则</h5>\n<p>较低级向较高级转换 (按存储长度)<br>\n 其中有一个操作数是浮点型时 把整型操作数往浮点型转换 而浮点型往精度更高的浮点型转换<br>\n两个操作数都不是浮点数时，如果有 char 或者 short int 类型 首先对两个操作数进行整型提升<br>\n<strong>特例</strong>:long int 和 unsigned int 数据类型长度相同时 则两个操作数均转换为 unsigned long<br>\n<a href=\"https://imgtu.com/i/IQ9FPI\"><img src=\"https://z3.ax1x.com/2021/11/06/IQ9FPI.png\" alt=\"IQ9FPI.png\"></a><br>\n 赋值中的类型转换：把赋值运算符右侧表达式的值转换为左侧变量的类型.</p>\n<h5 id=\"强制类型转换\"><a class=\"markdownIt-Anchor\" href=\"#强制类型转换\">#</a> 强制类型转换</h5>\n<blockquote>\n<pre><code>(类型)变量   eg(char)i  表示把i的类型强制转换为char的类型\n(类型)(表达式)\n</code></pre>\n</blockquote>\n<p>这些转换类型只是一次有效的 不会改变变量定义时的数据类型<br>\n C 语言把类型名视为一元运算符</p>\n<h4 id=\"类型定义\"><a class=\"markdownIt-Anchor\" href=\"#类型定义\">#</a> 类型定义</h4>\n<blockquote>\n<pre><code>typedef 数据类型 别名\n</code></pre>\n</blockquote>\n<p>用于对另一个数据类型创建一个别名<br>\n注意并没有创建一个新的类型 仅仅是对某个已有的类型增加一个别名<br>\n可以让程序更加易于理解 可读性更高</p>\n<h4 id=\"sizeof-运算符\"><a class=\"markdownIt-Anchor\" href=\"#sizeof-运算符\">#</a> sizeof 运算符</h4>\n<p>取数据类型 常量 变量或者表达式值得存储长度的运算符 (以字节为单位)</p>\n<blockquote>\n<pre><code>sizeof(数据类型说明符/表达式)\n用于类型名 sizeof(类型名)\n用于表达式 sizeof 表达式\n</code></pre>\n</blockquote>\n<h3 id=\"第八章-字符输入输出和输入验证\"><a class=\"markdownIt-Anchor\" href=\"#第八章-字符输入输出和输入验证\">#</a> 第八章 字符输入 / 输出和输入验证</h3>\n<h4 id=\"单字符io-getchar和putchar\"><a class=\"markdownIt-Anchor\" href=\"#单字符io-getchar和putchar\">#</a> 单字符 I/O getchar () 和 putchar ()</h4>\n<h4 id=\"缓冲区\"><a class=\"markdownIt-Anchor\" href=\"#缓冲区\">#</a> 缓冲区</h4>\n<p>用户输入的字符被收集并存储在一个被称为缓冲区的临时存储区 按下 enter 键后 程序才可以使用用户输入的字符<br>\n某些交互式系统无缓冲区 比如游戏中按下一个键需要立即执行按下的操作<br>\n缓冲区分为完全缓冲和行缓冲</p>\n<blockquote>\n<pre><code>完全缓冲输入指的是当缓冲区被填满时才刷新缓冲区\n行缓冲指的是在出现换行时刷新缓冲区(键盘输入)\n</code></pre>\n</blockquote>\n<p>是否能进行无缓冲输入取决于计算机系统 大部分直接规定输入都会缓冲输入</p>\n<h4 id=\"结束键盘输入\"><a class=\"markdownIt-Anchor\" href=\"#结束键盘输入\">#</a> 结束键盘输入</h4>\n<h5 id=\"文件流和键盘输入\"><a class=\"markdownIt-Anchor\" href=\"#文件流和键盘输入\">#</a> 文件，流和键盘输入</h5>\n<h5 id=\"文件结尾\"><a class=\"markdownIt-Anchor\" href=\"#文件结尾\">#</a> 文件结尾</h5>\n<p>方法 1 文件末尾放置一个特殊字符 来标记末尾<br>\n方法 2 存储文件大小的信息。如果程序有 3000 字节 那么程序在读到 3000 字节的时候便达到文件末尾</p>\n<p>在 C 语言中 用 getchar 或者 scanf 检测文件末尾时都将放回一个特殊值 即 EOF</p>\n<h3 id=\"第九章函数\"><a class=\"markdownIt-Anchor\" href=\"#第九章函数\">#</a> 第九章函数</h3>\n<h4 id=\"复习函数\"><a class=\"markdownIt-Anchor\" href=\"#复习函数\">#</a> 复习函数</h4>\n<h5 id=\"创建并使用简单函数\"><a class=\"markdownIt-Anchor\" href=\"#创建并使用简单函数\">#</a> 创建并使用简单函数</h5>\n<blockquote>\n<pre><code>#include &lt;stdio.h&gt;\n#define NAME \"GIGATHINK,INC\"\n#define ADDRESS \"101 Megabuck plaza\"\n#define PLACE \"MEGAPOLIS,CA 94904\"\n#define WIDTH 40\n\nvoid starbar(void);\n\nint main(void)\n{\n    starbar();\n    printf(\"%s \\n\", NAME);\n    printf(\"%s \\n\", ADDRESS);\n    printf(\"%s \\n\", PLACE);\n    starbar(); //使用函数\n    return 0;\n}\n\nvoid starbar(void) //定义函数\n{\n    int count;\n    for (count = 1; count &lt;= WIDTH; count++)\n    {\n        putchar('*');\n    }\n    putchar('\\n');\n}\n</code></pre>\n</blockquote>\n<h5 id=\"分析程序\"><a class=\"markdownIt-Anchor\" href=\"#分析程序\">#</a> 分析程序</h5>\n<p>函数原型：告诉编译器函数的类型<br>\n函数调用：表明在此处执行函数<br>\n函数定义：明确地指出函数要做什么</p>\n<p>函数和变量有一样有多种类型 任何程序在使用函数之前都要声明该函数的类型</p>\n<blockquote>\n<pre><code>void starbar(void);\n圆括号表示starbar是一个函数名 第一个void是函数类型 void类型表明函数没有返回值 第二个void(圆括号中)表明该函数不带参数。分号表示这是在申明函数不是在定义函数 \n这行表明了程序将使用一个名为starbar(),没有返回值,没有参数的函数,并告诉编译器在别处查找该函数的定义\n</code></pre>\n</blockquote>\n<p>一般而言 函数原型指明了函数的返回值类型和函数接受的参数类型 这些信息称为函数的<strong>签名</strong><br>\n这里对于 starbar () 函数而言 其签名是该函数没有返回值，没有参数<br>\n starbar () 原型放在任何位置都可以<br>\n执行顺序:<br>\n 在 main () 中 当计算机执行到 starbar () 函数时，会找到该函数的定义并执行其中的内容，执行完 starbar () 中的代码后，计算机返回主调函数继续执行下一行<br>\n函数头包括函数类型，函数名和圆括号，接着是左花括号，变量声明，函数表达式语句，最后以又花括号结束<br>\n ** 注意函数头中的 starbar () 没有分号 这是在告诉编译器这是定义 starbar ()，而不是调用函数或者声明函数类型<br>\n starbar () 函数中的 count 变量是局部变量，意思是该变量只属于 starbar () 函数，可以在程序中的其他地方使用 count 这并不会引起名称冲突 他们是同名的不同函数</p>\n<h5 id=\"函数参数\"><a class=\"markdownIt-Anchor\" href=\"#函数参数\">#</a> 函数参数</h5>\n<blockquote>\n<pre><code>void show_n_char(char ch,int num);   \nshou_n_char('*',12)\n</code></pre>\n</blockquote>\n<h5 id=\"定义带形式参数的函数\"><a class=\"markdownIt-Anchor\" href=\"#定义带形式参数的函数\">#</a> 定义带形式参数的函数</h5>\n<p>第一行告知编译器 show_n_char 使用两个参数 ch 和 num,ch 是 char 类型 num 是 int 类型。这两个变量被称为形式参数，简称形参。和定义在函数中变量一样 形参也是局部变量属于该函数私有。这以为着在其他函数中使用同名变量不会引起名称冲突 每次调用函数 就会给这些变量赋值<br>\n值得一提的是 虽然 show_n_char () 接受来自 main () 的值 但是它没有返回值。因此，show_n_char () 的类型是 void</p>\n<h5 id=\"声明带形式参数函数的原型\"><a class=\"markdownIt-Anchor\" href=\"#声明带形式参数函数的原型\">#</a> 声明带形式参数函数的原型</h5>\n<p>使用函数之前要声明函数原型: void shou_n_char (char ch,int num) 当然根据个人喜好 你也可以省略变量名<br>\n在原型中使用变量名并没有实际创建变量，char 仅代表了一个 char 类型的变量</p>\n<h5 id=\"调用带实际参数的函数\"><a class=\"markdownIt-Anchor\" href=\"#调用带实际参数的函数\">#</a> 调用带实际参数的函数</h5>\n<p>在函数的调用中 实际参数 (简称实参) 提供了 ch 和 num 的值 比如 show_n_char (’*’,12); 这两个值被赋值给函数中的形式参数<br>\n简而言之形式参数是被调函数中的变量 实际参数是主调函数赋值给被调函数的具体值 实际参数可以是常量变量甚至是更复杂的表达式 无论实际参数是何种形式都要被求值 然后该值被拷贝给被调函数相应的形式参数.</p>\n<h5 id=\"使用return从函数中返回值\"><a class=\"markdownIt-Anchor\" href=\"#使用return从函数中返回值\">#</a> 使用 return 从函数中返回值</h5>\n<blockquote>\n<pre><code>int imin(int n , int m)\nint imin(int n , int m)\n{\nint min ;\nif (n&lt;m) min=n;\nelse min = m;\nreturn min;\n}\nint a = imin(1,2)\n</code></pre>\n</blockquote>\n<p>关键字 return 后面的表达式的值就是函数的返回值 在该例中，函数的返回值就是变量 min 的值<br>\n变量 min 属于 imin () 函数私有 但是 return 语句把 min 的值传回了主调函数<br>\n return; return 语句还可以这样使用 这样使用 retrun 语句将会终止函数并把控制返回给主调函数</p>\n<h5 id=\"函数类型\"><a class=\"markdownIt-Anchor\" href=\"#函数类型\">#</a> 函数类型</h5>\n<p>声明函数必须声明函数的类型 带返回值的函数类型应该与其返回值得类型相同 没有返回值的函数声明为 void 类型<br>\n<strong>值得注意的是 函数类型指的是函数返回值的类型 而不是参数的类型</strong><br>\n函数的前置声明可以放在主调函数外面也可以放在主调函数里面<br>\n ANSIC 标准库中，函数被封城了多个系列，每一个系列都有各自的头文件，这些头文件中包含了本系列所有函数的声明。例如 stdio.h 头文件中包括了标准的 I/O 库函数 (如 printf he scanf 函数) 的声明</p>\n<h4 id=\"ansi-c-函数类型\"><a class=\"markdownIt-Anchor\" href=\"#ansi-c-函数类型\">#</a> ANSI C 函数类型</h4>\n<p>旨在说明老式声明函数的问题所在和解决方案 这里不做过多描述 可自行搜索</p>\n<p>ANSI C 使用了逗号分割的类型列表 eg imax (int a , int b) 如此 编译器可以检查函数调用是否和函数原型匹配 参数的数量是否匹配 参数的类型是否匹配</p>\n<h5 id=\"无参数和未指定参数\"><a class=\"markdownIt-Anchor\" href=\"#无参数和未指定参数\">#</a> 无参数和未指定参数</h5>\n<blockquote>\n<pre><code>void print_name()\n</code></pre>\n</blockquote>\n<p>接受 ANSI C 的编译器截石位 print_name () 不接受任何参数，然后在调用该函数时，编译器会检查来确保没有使用参数</p>\n<h5 id=\"函数原型的优点\"><a class=\"markdownIt-Anchor\" href=\"#函数原型的优点\">#</a> 函数原型的优点</h5>\n<p>使用函数原型会让编译器捕获在使用函数时可能出现的许多错误或疏漏，如果编译器没有发现这些问题，就很难觉察出来.<br>\n 有一种方法可以省略函数原型却保留函数原型的优点<br>\n把整个函数定义放在第一次调用该函数之前，也有相同的效果 此时函数定义也相当于函数原型。对于代码量较少的函数 这种用法很普遍</p>\n<blockquote>\n<pre><code>int imax(int a , int b ) {return a&gt;b?a:b}\n</code></pre>\n</blockquote>\n<h4 id=\"递归\"><a class=\"markdownIt-Anchor\" href=\"#递归\">#</a> 递归</h4>\n<p>C 允许函数调用他自己 这种调用过程称为<strong>递归</strong><br>\n难点：结束递归 (如果递归代码中没有终止递归的条件测试部分，一个调用自己的函数就会无限递归)<br>\n 注：可以使用循环的地方<strong>通常</strong>都可以使用递归</p>\n<h5 id=\"演示递归\"><a class=\"markdownIt-Anchor\" href=\"#演示递归\">#</a> 演示递归</h5>\n<p><a href=\"https://imgtu.com/i/IlPHk4\"><img src=\"https://z3.ax1x.com/2021/11/06/IlPHk4.jpg\" alt=\"IlPHk4.jpg\"></a><br>\n<a href=\"https://imgtu.com/i/IlPbtJ\"><img src=\"https://z3.ax1x.com/2021/11/06/IlPbtJ.jpg\" alt=\"IlPbtJ.jpg\"></a></p>\n<h5 id=\"递归的基本原理\"><a class=\"markdownIt-Anchor\" href=\"#递归的基本原理\">#</a> 递归的基本原理</h5>\n<p>1. 每级函数调用都有自己的变量 也就是说第一级的 n 和第二的 n 不一样 当程序最终返回第一级的时候 最初的 n 仍然是它的初值 1 (局部变量)<br>\n 2. 每次幻术调用都会返回一次 当函数执行完毕后 控制权将被传回上一级递归。程序必须按照顺序逐级返回递归 不能跳级<br>\n 3. 递归函数中位于递归调用之前的语句 均按被调函数的顺序执行<br>\n 4. 递归函数中位于递归调用之后的语句 均按被调函数的<strong>相反</strong>顺序执行<br>\n 5. 虽然每级递归都有自己的变量 但是并没有拷贝函数的代码，所以程序按顺序执行函数中的代码 而递归调用就相当于又从头开始执行函数的代码 除了为每次递归调用创建变量外 递归调用非常类似于一个循环语句<br>\n 6. 递归函数必须包含能让递归调用停止的语句。通常递归函数都使用 if 或者其他等价的测试条件在函数形参等于某个特定值时终止递归。为此 每次递归调用的形参都要使用不同的值</p>\n<h5 id=\"尾递归\"><a class=\"markdownIt-Anchor\" href=\"#尾递归\">#</a> 尾递归</h5>\n<p>将递归放置在函数的末尾 即正好在 return 语句之前 这种形式的递归被称为尾递归 相当于循环</p>\n<h5 id=\"递归和倒序计算\"><a class=\"markdownIt-Anchor\" href=\"#递归和倒序计算\">#</a> 递归和倒序计算</h5>\n<p>在处理这类倒序问题时  递归比循环简单</p>\n<h5 id=\"递归的优缺点\"><a class=\"markdownIt-Anchor\" href=\"#递归的优缺点\">#</a> 递归的优缺点</h5>\n<p>优点：为某些编程问题提供了最简单的解决方案，缺点是一些递归算法会快速消耗计算机的内存资源 另外递归不方便阅读和维护<br>\n<strong>在程序中使用递归要格外注意 尤其是效率优先的程序</strong></p>\n<h4 id=\"编译多源代码文件的程序\"><a class=\"markdownIt-Anchor\" href=\"#编译多源代码文件的程序\">#</a> 编译多源代码文件的程序</h4>\n<p>使用多个函数最简单的方法是把他们都放在同一个文件中 然后像编译只有一个函数的文件那样编译该文件即可。其他方法因操作系统而异，下面将举例说明.</p>\n<h5 id=\"unix\"><a class=\"markdownIt-Anchor\" href=\"#unix\">#</a> UNIX</h5>\n<p>假设 filel.c 和 file2.c 是两个内涵 C 函数的文件 下面的命令将编译两个文件并生成一个名为 a.out 的可执行文件:<br>\ncc filel.c file2.c<br>\n 另外还生成两个名为 file1.o 和 file2.o 的目标文件。如果后来改动了 filel.c 而 file2.c 不变 可以使用以下命令编译第一个文件 并与第二个文件的目标代码合并<br>\n cc filel.c file2.o</p>\n<h5 id=\"linux\"><a class=\"markdownIt-Anchor\" href=\"#linux\">#</a> Linux</h5>\n<p>假定 linux 系统安装了 GNU C 编译器 GCC 假设 filel.c 和 file2.c 是两个内含 C 函数的文件 下面的命令将编译两个文件并生成名为 a.out 的可执行文件<br>\n gcc filel.c file2.c<br>\n 另外还生成两个名为 file1.o 和 file2.o 的目标文件。如果后来改动了 filel.c 而 file2.c 不变 可以使用以下命令编译第一个文件 并与第二个文件的目标代码合并<br>\n gcc filel.c file2.o</p>\n<h5 id=\"dos命令行编译器\"><a class=\"markdownIt-Anchor\" href=\"#dos命令行编译器\">#</a> DOS 命令行编译器</h5>\n<p>绝大多数 DIS 命令行编译器的工作员刘和 UNIX 的 CC 命令类似 只不过使用不同的名称而已 其中一个区别是 对象文件的扩展名是.obj 而不是.o 一些编译器生成的不是目标代码文件 而是汇编语言或其他特殊代码的中间文件</p>\n<h5 id=\"windows和苹果的ide编译器\"><a class=\"markdownIt-Anchor\" href=\"#windows和苹果的ide编译器\">#</a> windows 和苹果的 IDE 编译器</h5>\n<p>windows 和 Macintosh 系统使用的集成开发环境中的编译器是面向项目的<br>\n项目 描述的是特定程序使用的资源 (资源包括源代码文件)<br>\n 这种 IDE 中的编译器要创建项目来运行单文件程序 对于多文件程序 要使用相应的菜单命令 把源代码文件加入到一个项目中 要确保所有的源代码文件都在项目列表中列出 许多 IDE 都不用在项目列表中列出头文件 (扩展名为.h 的文件) 因为项目只管理使用的源代码文件源代码文件中的 #include 指令管理该文件中使用的头文件 但是 Xcode 要在项目中添加头文件</p>\n<h5 id=\"使用头文件\"><a class=\"markdownIt-Anchor\" href=\"#使用头文件\">#</a> 使用头文件</h5>\n<p>如果把 main () 放在第一个文件中 把函数定义放在第二个文件中 那么第一个文件仍然要使用函数原型<br>\n把函数原型放在头文件中 就不用再每次使用函数文件时都要写出函数的原型</p>\n<h4 id=\"查找地址-运算符\"><a class=\"markdownIt-Anchor\" href=\"#查找地址-运算符\">#</a> 查找地址: &amp; 运算符</h4>\n<p>指针是 C 语言中最重要的概念之一 用于存储变量的地址。前面使用的 scanf () 函数中就是用地址最为参数<br>\n一元运算符 &amp; 给出变量的存储地址，如果 posh 是变量名那么 &amp; posh 就是变量的地址 可以把地址看做是变量在内存中的位置<br>\n不同的变量所处的位置是不同的</p>\n<h4 id=\"更改主调函数中的变量\"><a class=\"markdownIt-Anchor\" href=\"#更改主调函数中的变量\">#</a> 更改主调函数中的变量</h4>\n<p>例如要更改两个数 x,y 的位置 简单地 x = y, y = x 并没有作用<br>\n下面实现简单地交换值得功能</p>\n<blockquote>\n<pre><code>void interchange(int u ,int v ) {\nint temp;\ntemp = u\nu = v\nv = temp\n}\n</code></pre>\n</blockquote>\n<p>虽然这个函数表面上实现了交换的功能 但事实上 调用函数输出结果的时候 并不会交换这两个数值<br>\n因为在 interchange () 传回的变量并不是 main () 中的变量 (局部变量问题：在函数中的变量虽然表面上和 main 中的变量一样 但是实际上这两个变量是完全不同的 存储地址也不一样的两个变量). 因此交换 u 和 v 的值 对 x 和 y 的值没有影响<br>\n可以使用 return 语句把值传回 main () 比如 在函数末尾加上 return (u), 然后修改 main 中而定调用 x = interchange (x,y) 但是这只能改变 x 的值 return 语句只能把被调函数中的一个值传回主调函数 但是现在要传回两个值 这就需要指针了 下面开始概述指针</p>\n<h4 id=\"指针简介\"><a class=\"markdownIt-Anchor\" href=\"#指针简介\">#</a> 指针简介</h4>\n<p>指针：一个值为内存地址的变量 (或数据对象)<br>\n<strong> 例如:int 类型变量的值为整数 char 类型变量的值为字符 而指针变量的值为地址</strong></p>\n<blockquote>\n<pre><code>ptr = &amp;pooh\n</code></pre>\n</blockquote>\n<p>其中 表示 ptr\"指向\"pooh ptr 和 &amp; pooh 的区别是 ptr 是变量 而 &amp;pooh 是常量<br>\n这样 ptr 的值 就是 pooh 的地址<br>\n创建指针变量 要先声明指针变量的类型</p>\n<h5 id=\"间接运算符解引用运算符\"><a class=\"markdownIt-Anchor\" href=\"#间接运算符解引用运算符\">#</a> 间接运算符 (解引用运算符) *</h5>\n<p>间接运算符可以找出存储在内存地址下的值<br>\n注意分清楚 间接运算符 和 二元乘号运算符 虽然他们长得一样</p>\n<blockquote>\n<pre><code>val = *ptr\nptr = &amp;bhb\n上面这串代码就相当于是 val = bhb\n&amp;后跟一个变量名 表示该变量名的地址\n*后跟一个地址 或者指针名 表示存储在指针指向地址上的值\n</code></pre>\n</blockquote>\n<h5 id=\"声明指针\"><a class=\"markdownIt-Anchor\" href=\"#声明指针\">#</a> 声明指针</h5>\n<blockquote>\n<pre><code>int * pi         pi是指向int类型变量的指针\nchar * p         p是指向char类型变量的指针\nfloat * pf,*pg   pf,pg是指向float类型变量的指针\n</code></pre>\n</blockquote>\n<p>其中 * 表明声明的变量是一个指针 前面表示指针指向的类型<br>\n pi 指向的值是 int 类型 pi 本身叫做 指向 int 类型的指针 pi 的值是一个地址</p>\n<h5 id=\"使用指针在函数间通信\"><a class=\"markdownIt-Anchor\" href=\"#使用指针在函数间通信\">#</a> 使用指针在函数间通信</h5>\n<blockquote>\n<pre><code>void interchange(int * u, int * v)\n{\nint temp;\ntemp = *u;\n*u = *v;\n*v = temp;\n}\ninterchange(&amp;x,&amp;y)\n</code></pre>\n</blockquote>\n<p>该函数传递的就不是 x 和 y 的值 而是存储 x 和 y 的值的地址<br>\n函数中的第二个语句表示 把 u 地址中的值给 temp 第三个语句表示把 V 地址中存储的值赋值给 U 这样 U 地址存储的值变成了 V 地址存储的值第四个语句同样</p>\n<h5 id=\"小结来自c-primer-plus\"><a class=\"markdownIt-Anchor\" href=\"#小结来自c-primer-plus\">#</a> 小结 (来自 C primer Plus)</h5>\n<p><a href=\"https://imgtu.com/i/IlXp9K\"><img src=\"https://z3.ax1x.com/2021/11/07/IlXp9K.jpg\" alt=\"IlXp9K.jpg\"></a><br>\n<a href=\"https://imgtu.com/i/IlOxtx\"><img src=\"https://z3.ax1x.com/2021/11/07/IlOxtx.jpg\" alt=\"IlOxtx.jpg\"></a></p>\n<h4 id=\"关键概念\"><a class=\"markdownIt-Anchor\" href=\"#关键概念\">#</a> 关键概念</h4>\n<p>想用 C 编出高效灵活的程序，必须理解函数.<br>\n 函数是如何把信息从一个函数传递到另一函数 理解函数参数和返回值之间的工作原理<br>\n明白函数形参和其他局部变量属于函数私有因此 声明在不同函数中的同名变量是完全不同的变量<br>\n函数无法直接访问在其他函数中的变量 这样限制访问保护了数据的完整性<br>\n但是 当确实需要在函数中访问另一个函数的数据时 可以把指针作为函数的参数</p>\n<h4 id=\"本章小结\"><a class=\"markdownIt-Anchor\" href=\"#本章小结\">#</a> 本章小结</h4>\n<p>函数使用参数把值传给函数 使用关键字 return 把值返回函数 必须在函数定义和函数原型中指定函数的原型，如果需要在被调函数中修改主调函数的变量，使用地址或指针作为参数<br>\n ANSI C 提供了函数原型 允许编译器验证函数调用中使用的参数个数和类型是否正确<br>\n C 函数可以调用本身 即递归 一些编程问题要用递归来解决 但是递归消耗内存多 效率不高 而且费时</p>\n<h3 id=\"第十章数组和指针\"><a class=\"markdownIt-Anchor\" href=\"#第十章数组和指针\">#</a> 第十章数组和指针</h3>\n<h4 id=\"数组\"><a class=\"markdownIt-Anchor\" href=\"#数组\">#</a> 数组</h4>\n<p>数组：数据类型相同的一系列元素组成 通过声明告诉编译器数组中含有多少元素和这些元素的类型</p>\n<blockquote>\n<pre><code>float candy[365];\nchar code[12];\nint states[50];\n</code></pre>\n</blockquote>\n<p>方括号中的数组是数组中的元素个数.<br>\n 访问数组中的元素通过数组索引表示数组中的各元素。数组元素的标号从 0 开始 'candy [0]' 表示 candy 数组的第一个元素</p>\n<h5 id=\"初始化数组\"><a class=\"markdownIt-Anchor\" href=\"#初始化数组\">#</a> 初始化数组</h5>\n<p>标量变量：只存储单个值的变量</p>\n<blockquote>\n<pre><code>int fix = 1 ;\n</code></pre>\n</blockquote>\n<p>C 语言用新的语法来初始化数组</p>\n<blockquote>\n<pre><code>int power[8] = {1,2,4,6,8,6,4,2}\n</code></pre>\n</blockquote>\n<p>用以逗号分隔的值列表 (用花括号括起来) 来初始化数组，各值之间用逗号分割.<br>\n 使用 const 声明数组:<br>\n 有时需要把数组设置为只读，如此 程序只能从数组中检索值，不能把新值写入数组，此时就应该用 const 声明和初始化数组</p>\n<blockquote>\n<pre><code>const int days[12] = {31,28,31,30,31,30,31,31,30,31,30,31}\n</code></pre>\n</blockquote>\n<p><strong>使用数组之前必须初始化</strong><br>\n当初始化列表中的值少于数组元素个数时，编译器会把剩余的元素都初始化为 0, 但是如果不初始化数组，数组中存储的将会是不确定的垃圾值.<br>\n 但是如果初始化列表中的值多于数组元素个数时候编译器会进行报错<br>\n如果省略方括号中的数组编译器会根据初始化列表中的项数来确定数组的大小<br>\n通常使用 sizeof 运算符给出他的运算对象的大小 (单位为字节)</p>\n<blockquote>\n<pre><code>int days[] = {1,2,3};\nsizeof days[0] 表示数组中第一个元素的字节大小 //这里是4字节 因为一个int类型占据4字节\nsizeof days 表示数组中所有元素所占的字节大小\n我们通常使用数组中所有元素所占的字节大小来除以每一个元素的字节大小 得到数组中的元素数目\nsizeof days / sizeof days[0]\n</code></pre>\n</blockquote>\n<h5 id=\"指定初始化器c99\"><a class=\"markdownIt-Anchor\" href=\"#指定初始化器c99\">#</a> 指定初始化器 (C99)</h5>\n<p>C99 增加的新特性：指定初始化器 利用该特性可以初始化指定的数组元素</p>\n<blockquote>\n<pre><code>int arr[6] = {[5]=212}; 把arr[5]初始化为212\n</code></pre>\n</blockquote>\n<p>在初始化一个元素后 未初始化的元素都会被设置为 0<br>\n 如果初始化器后面有更多的值</p>\n<blockquote>\n<pre><code>[4] = 31,32,33   在days[4]被转化成31后 后面的数组会根据顺序转化 也就是说days[5]=32 以此类推\n</code></pre>\n</blockquote>\n<p>如果再次初始化元素 最后的初始化将会取代前面的初始化<br>\n数组中除了指定的初始化元素，其他的将会按照顺序排序</p>\n<blockquote>\n<p>int days [12] = {31,28,[4]=31} 此时 days [0] 就是 31 days [1] 就是 28<br>\n 如果没有指定元素大小 例如  int days [] = {[1]=2}<br>\n 此时园一期会把数组的大小设置为足够装得下初始化的值</p>\n</blockquote>\n<h5 id=\"给数组元素赋值\"><a class=\"markdownIt-Anchor\" href=\"#给数组元素赋值\">#</a> 给数组元素赋值</h5>\n<p>AA<br>\n 声明数组后，可以借助数组下标 (或索引) 给数组元素赋值<br>\n C 语言中只能使用循环给数组的元素依次赋值 不允许把数组作为一个单元赋给另一个数组<br>\n只有初始化允许使用花括号列表的形式赋值</p>\n<blockquote>\n<pre><code>int yaks[5];\nyaks[5] = {1,2,3,4,5};\n这样赋值是不起作用的\n</code></pre>\n</blockquote>\n<h5 id=\"数组边界\"><a class=\"markdownIt-Anchor\" href=\"#数组边界\">#</a> 数组边界</h5>\n<p>使用数组时，必须确保下标是有效的值 不能超出边界<br>\n编译器不会检查数组下标是否使用得当，结果是未定义的</p>\n<h5 id=\"指定数组的大小\"><a class=\"markdownIt-Anchor\" href=\"#指定数组的大小\">#</a> 指定数组的大小</h5>\n<p>声明数组只能在在方括号中使用整型常量表达式 另外表达式的值必须大于 0<br>\n<a href=\"https://imgtu.com/i/IBGPoQ\"><img src=\"https://z3.ax1x.com/2021/11/12/IBGPoQ.jpg\" alt=\"IBGPoQ.jpg\"></a></p>\n<h4 id=\"多维数组\"><a class=\"markdownIt-Anchor\" href=\"#多维数组\">#</a> 多维数组</h4>\n<p>声明:flaot rain [5][12]; //rain 是一个内涵 5 个元素的数组 每个元素的类型都是 float [12]<br>\n rain 的每个元素本身都是一个内涵 12 个 float 类型值的数组<br>\n例如:rain [0][0] 表示 rain 中的首个元素数组的首个元素</p>\n<blockquote>\n<pre><code>#include &lt;stdio.h&gt;\n#define MONTHS 12    // number of months in a year\n#define YEARS   5    // number of years of data\nint main(void)\n{\n    // initializing rainfall data for 2010 - 2014\n    const float rain[YEARS][MONTHS] =\n    {\n        {4.3,4.3,4.3,3.0,2.0,1.2,0.2,0.2,0.4,2.4,3.5,6.6},\n        {8.5,8.2,1.2,1.6,2.4,0.0,5.2,0.9,0.3,0.9,1.4,7.3},\n        {9.1,8.5,6.7,4.3,2.1,0.8,0.2,0.2,1.1,2.3,6.1,8.4},\n        {7.2,9.9,8.4,3.3,1.2,0.8,0.4,0.0,0.6,1.7,4.3,6.2},\n        {7.6,5.6,3.8,2.8,3.8,0.2,0.0,0.0,0.0,1.3,2.6,5.2}\n    };\n    int year, month;\n    float subtot, total;\n    \n    printf(\" YEAR    RAINFALL  (inches)\\n\");\n    for (year = 0, total = 0; year &lt; YEARS; year++)\n    {             // for each year, sum rainfall for each month\n        for (month = 0, subtot = 0; month &lt; MONTHS; month++)\n            subtot += rain[year][month];\n        printf(\"%5d %15.1f\\n\", 2010 + year, subtot);\n        total += subtot; // total for all years\n    }\n    printf(\"\\nThe yearly average is %.1f inches.\\n\\n\",\n           total/YEARS);\n    printf(\"MONTHLY AVERAGES:\\n\\n\");\n    printf(\" Jan  Feb  Mar  Apr  May  Jun  Jul  Aug  Sep  Oct \");\n    printf(\" Nov  Dec\\n\");\n                                                                    \n    for (month = 0; month &lt; MONTHS; month++)\n    {             // for each month, sum rainfall over years\n        for (year = 0, subtot =0; year &lt; YEARS; year++)\n            subtot += rain[year][month];\n        printf(\"%4.1f \", subtot/YEARS);\n    }\n    printf(\"\\n\");\n                                                                    \n    return 0;\n}\n</code></pre>\n</blockquote>\n<p>重点学习数组初始化和计算方案</p>\n<h5 id=\"初始化二维数组\"><a class=\"markdownIt-Anchor\" href=\"#初始化二维数组\">#</a> 初始化二维数组</h5>\n<blockquote>\n<pre><code>sometype arl[5] = {val1,val2,val3,val4,val5}\n</code></pre>\n</blockquote>\n<p>val1 等是 sometype 类型的值</p>\n<blockquote>\n<pre><code>    const float rain[YEARS][MONTHS] =\n    {\n        {4.3,4.3,4.3,3.0,2.0,1.2,0.2,0.2,0.4,2.4,3.5,6.6},\n        {8.5,8.2,1.2,1.6,2.4,0.0,5.2,0.9,0.3,0.9,1.4,7.3},\n        {9.1,8.5,6.7,4.3,2.1,0.8,0.2,0.2,1.1,2.3,6.1,8.4},\n        {7.2,9.9,8.4,3.3,1.2,0.8,0.4,0.0,0.6,1.7,4.3,6.2},\n        {7.6,5.6,3.8,2.8,3.8,0.2,0.0,0.0,0.0,1.3,2.6,5.2}\n    };\n</code></pre>\n</blockquote>\n<p>初始化时候可以省略内部的花括号只需要保存最外部的花括号就行了，前提是每个元素都必须写上 并且数目不足，像这样内外花括号 可以使 元素书小于定义数时 编译器自动以 0 填充<br>\n如果省略内部花括号 编译器会按照先后顺序逐行初始化 直到用完所有的值，后面没有初始化元素被统一初始化为 0</p>\n<h5 id=\"其他多维数组\"><a class=\"markdownIt-Anchor\" href=\"#其他多维数组\">#</a> 其他多维数组</h5>\n<p>三维数组: int box [10][20][30];<br>\n 一维数组是一行数据 二维数组是数据表 三维数组是一叠数据表<br>\n处理几维数组就需要使用到几维嵌套循环</p>\n<h4 id=\"指针和数组\"><a class=\"markdownIt-Anchor\" href=\"#指针和数组\">#</a> 指针和数组</h4>\n<p>系统中 地址按字节编扯，short 类型占用 2 字节等；在 C 中 指针加 1 指的是增加一个存储单元。对数组而言 这意味着 + 1 后的地址是下一个元素的地址；而不是下一个字节的地址 这卆为什么必须声明指针所指对象类型的原因之一 自算计要知道存储对象需要多少字节</p>\n<blockquote>\n<pre><code>dates+2 == &amp;dates[2];\n*(dates+2) ==dates[2];\n</code></pre>\n</blockquote>\n<p>** 注意间接运算符 * 的优先级要大于 +** 所以这里必须打括号</p>\n<p>例如数组名是 days   那么 days 也表示数组首元素的地址</p>\n<h4 id=\"函数数组和指针\"><a class=\"markdownIt-Anchor\" href=\"#函数数组和指针\">#</a> 函数，数组和指针</h4>\n<blockquote>\n<pre><code>int sum(int * ar,int n)\n{\nint i;\nint total 0;\nfor(i=0;i&lt;n;i++)\ntotal +=ar[i] 或者 *( ar + i );\nreturn total;\n}\n</code></pre>\n</blockquote>\n<p>第一个形参告诉该函数数组的地址和数据类型 第二个形参告诉函数该数组中的元素个数<br>\n关于函数的形参 还有一点要注意 只有在函数原型或函数定义头中才可以用 int ar [] 来代替 int * ar;<br>\nint * ar 和 int ar [] 都表示 ar 是一个指向 int 的指针 但是 int ar [] 只能用于声明形式函数但是他可以提醒读者 ar 指向的不仅仅是一个 int 类型值还是一个 int 类型数组的元素<br>\n函数原型可以省略参数名<br>\n但是在函数定义中不能省略参数名<br>\n我们的系统中用 8 字节存储地址 所以指针变量的大小是 8 字节 (其他系统中地址的大小可能不是 8 字节)</p>\n<h5 id=\"使用指针形参\"><a class=\"markdownIt-Anchor\" href=\"#使用指针形参\">#</a> 使用指针形参</h5>\n<p>函数要处理数组必须知道何时开始，何时结束<br>\n上面 sum 函数用一个整数形参表示待处理元素的元素个数和数据类型 但是这并不是给函数传递必备信息的唯一方法<br>\n还有一种方法是传递两个指针 第 1 个指针指明数组的开始处 (与前面用法相同), 第 2 个指针指明数组的结束处.</p>\n<blockquote>\n<pre><code>#include &lt;stdio.h&gt;\n#define SIZE 10\nint sump(int * start, int * end);\nint main(void)\n{\n    int marbles[SIZE] = {20,10,5,39,4,16,19,26,31,20};\n    long answer;\n    \n    answer = sump(marbles, marbles + SIZE);\n    printf(\"The total number of marbles is %ld.\\n\", answer);\n                                                                    \n    return 0;\n}\n\n/* use pointer arithmetic   */\nint sump(int * start, int * end)\n{\n    int total = 0;\n    \n    while (start &lt; end)\n    {\n        total += *start; // add value to total\n        start++;         // advance pointer to next element\n    }\n                                                                    \n    return total;\n}\n</code></pre>\n</blockquote>\n<p>指针 start 指向 marbles 数组的首元素 所以赋值表达式 total += *start 把首元素 (20) 加给 total 然后表达式 start++ 递增指针变量 start 使其指向数组的下一个元素 因为 start 是指向 int 的指针 start 递增 1 相当于其值递增 int 类型的大小<br>\n注意这里 sump () 函数用另一种方法结束加法循环 sump () 函数使用第二个指针 start &lt; end 来结束循环<br>\n whild 循环的测试条件是一个不相等的关系 所以循环最后处理的一个元素是 end 所指向位置的前一个元素 这意味着 end 指向的位置实际上在数组最后一个元素后面 C 保证在给数组分配空间时 之下宁数组后面第一个位置的指针仍然是有效的指针 这使得 while 循环的测试条件是有效的，因为 start 在循环最后的值是 end<br>\nanswer = sump(marbles, marbles + SIZE);<br>\n 下标从 0 开始 marbles+SIZE 指向数组末尾的下一个位置 如果 end 指向数组的最后一个元素而不是数组末尾的下个位置 则必须 - 1<br>\n 这种写法不简洁也不好记 很容易导致标称错误<br>\n **C 语言虽然保证了 marbles+SIZE 有效 但是对 marbles [SIZE](即存储在该位置上的值) 未作任何保证 所以程序不能访问该位置<br>\n循环体可以压缩成一行代码 total += *start++;<br>\n* 和 ++ 的优先级相同 结合律是从右往左 所以 start++ 先求值 然后才是 * start 也就是说 start 先递增后指向 使用后缀形式 start++ 而不是 ++start 意味着先把指针指向位置上的值加到 total 上然后再递增指针切记 (*start)++ 是完全错误的这表示先使用 start 指向的指 然后再递增该值 而不是递增指针 这样指针将一直指向同一个位置 但是在该位置上的值发生了变化 虽然 * start++ 的写法比较常用 但是 *(start++) 这样写更清楚</p>\n<h5 id=\"指针表示法和数组表示法\"><a class=\"markdownIt-Anchor\" href=\"#指针表示法和数组表示法\">#</a> 指针表示法和数组表示法</h5>\n<p>对于 C 语言而言 ar [i\\ 和 *(ar + i) 这两个表达式都是等价的无论 ar 是数组名还是指针变量 这两个表达式都没问题 但是只要有当 ar 是指针变量的时候才能使用 arr++ 这样的表达式<br>\n指针表示法更接近机器语言 因此一些编译器在编译时能生成效率更高的代码</p>\n<h4 id=\"指针操作\"><a class=\"markdownIt-Anchor\" href=\"#指针操作\">#</a> 指针操作</h4>\n<p><strong>赋值</strong>：可以把地址赋给指针 注意地址应该和指针类型兼容 也就是说不能把 double 类型的地址赋给指向 int 的指针至少要避免不明智的类型转换 C99/C11 已经不云讯这样做<br>\n<strong>解引用</strong>:* 运算符给出指针指向地址上存储的值<br>\n<strong>取址</strong>：和所有变量一样指针变量也有自己的地址和值 同样使用 &amp; 给出指针本身的地址<br>\n<strong>指针和整数相加</strong>：可以使用 + 运算符把指针和整数相加 或整数和指针相加 无论哪种情况 整数都会和指针指向类型的大小 (以字节为单位) 相乘然后把结果和初始位置相加 如果相加的结果超出了初始指针指向的数组范围 计算结果则是未定义的 除非正好超过数组末尾第一个位置<br>\n<strong>递增指针</strong>：递增指向数组元素的指针可以让该指针移动至数组的下一个元素，但是指针自己的地址是不会发生变化的毕竟变量不会因为值发生变化就移动位置<br>\n<strong>指针减去一个整数</strong>：大概和加法相同 但是这里和加法不同 <strong>指针必须是第 1 个运算对象 整数是第 2 个运算对象</strong><br>\n<strong>递减指针</strong>：类比递增指针<br>\n<strong>指针求差</strong>：通常求差的两个指针分别指向同一个数组的不同元素，通过计算求出两元素之间的距离 差值的单位和数组类型的单位相同 只要两个指针都指向相同的数组 (或者其中一个指针指向数组后面的第 1 个地址) C 都能保证相减运算有效<br>\n<strong>比较</strong>使用关系运算符可以比较两个指针的值 前提是两个指针都指向相同类型的对象<br>\n<strong> FBI WARNING 注意注意注意注意注意注意注意注意注意注意 FBI WARNING</strong><br>\n 这里的减法有两种 一个指针减去另一个指针得到一个整数 或者用一个指针减去一个整数得到另一个指针<br>\n递增递减指针时还要注意一些问题 编译器不会检查指针是否指向数组元素 C 只能保证指向数组任意元素的指针和指向数组后面第一个位置的指针有效。但是如果递增或者递减一个指针后超出了这个范围则是未定义的 另外 可以解引用指向数组任意元素的指针但是即使指针指向数组后面一个位置是有效的也不能保证可以解引用这样的越界指针<br>\n创建一个指针时 系统只分配了存储指针本身的内存 并未分配存储数据的内存在使用指针之前必须先用已分配的地址初始化它</p>\n<h4 id=\"处理数组中的数据\"><a class=\"markdownIt-Anchor\" href=\"#处理数组中的数据\">#</a> 处理数组中的数据</h4>\n<p>C 通常都按值传递数据 因为这样做可以保证数据的完整性 如果函数使用的是原始数据的副本 就不会意外修改原始数据 但是处理数组的函数通常都需要使用原始数据因此这样的函数可以修改原数组 有时这正是我们需要的<br>\n然而其他函数并不需要修改数据 这样变成错误就可能会破坏原始数据</p>\n<h5 id=\"对形式参数使用const\"><a class=\"markdownIt-Anchor\" href=\"#对形式参数使用const\">#</a> 对形式参数使用 const</h5>\n<p>ANSI C 提供了一种预防手段 如果函数的意图不是修改数组中的数据内容 那么在函数原型和函数定义中声明形式参数时使用关键字 const<br>\n 这样如果在函数中不小心使用了错误的表达式使原数组发生了改变，编译器会捕获这个错误并且生成一条错误信息.<br>\n 使用 const 并不是要求原数组是常量而是该函数在处理数组时将其视为常量不可更改<br>\n一般而言如果编写的函数不用修改数组 那么在声明数组形参时最好使用 const</p>\n<h5 id=\"const的其他内容\"><a class=\"markdownIt-Anchor\" href=\"#const的其他内容\">#</a> const 的其他内容</h5>\n<p>虽然用 #define 指令可以创建类似功能的符号常量 但是 const 的用法更加灵活 可以创建 const 数组 const 指针和指向 const 的指针<br>\n指向 const 的指针通常用语函数形参中 表明该函数不会使用指针改变数据<br>\n把 const 数据或非 const 数据的地址初始化为指向 const 的指针或为其赋值是合法的<br>\n然后只能把非 const 数据的地址赋给普通指针<br>\n因此对函数的形参使用 const 不仅能保护数据 还能让函数处理 const 数组<br>\n C 标准规定使用非 const 标识符改修 const 数据导致的结果是未定义的<br>\n const 还可以声明并初始化一个<strong>不能指向别处</strong>的指针</p>\n<blockquote>\n<pre><code>double rates[5] = {};\ndouble * const pc = rates;\npc = &amp;rates[2]; 不逊于 因为该指针不能指向别处\n</code></pre>\n</blockquote>\n<p>可以用这种指针修改它所指向的值 但是它只能指向初始化时设置的地址</p>\n<blockquote>\n<pre><code>const double * const pc = rates;\n</code></pre>\n</blockquote>\n<p>在创建指针时使用两次 const 该指针既不能更改他所指向的地址 也不能更改它所指向地址上的值</p>\n<h4 id=\"指针和多维数组\"><a class=\"markdownIt-Anchor\" href=\"#指针和多维数组\">#</a> 指针和多维数组</h4>\n<blockquote>\n<pre><code>int zippo[4][2];  /内涵int数组的数组/\n</code></pre>\n</blockquote>\n<ol>\n<li>数组名 zippo 是该数组首元素的地址 zippo 的首元素一个内含 2 个 int 值得数组 所以 zippo 是这个内涵两个 int 值的数组的地址</li>\n<li>zippo 是数组首元素的地址 zippo [0] 那么就是数组首元素数组的首元素的值 zippo [0] 是一个占用一个 int 大小对象的地址 而 zippo 是一个占用两个 int 大小对象的地址 由于这个整数和内涵两个整数的数组都开始与同一个地址所以 zippo 和 zippo [0] 的值相同</li>\n<li>给指针或地址加 1 其值会增加对应类型的大小 <strong>在这方面 zippo 和 zippo [0] 不同</strong> 因为 zippo 指向的对象占用了两个 int 大小 而 zippo [0] 指向的的对象只占用一个 int 大小</li>\n<li>在解引用一个指针或在数组名后使用带下标的 [] 运算符，得到解引用对象代表的值 *zippo 代表的是 zippo 首元素的值 而 zippo 首元素的值是一个数组那么这个数组的值就是 zippo 首元素数组的首元素的地址 这样来说 **zippo 和 *&amp;zippo [0][0] 等价简而言之 zippo 是地址的地址，必须解引用两次才能获得原始值 地址的地址 或者指针的指针就是双重间接</li>\n</ol>\n<blockquote>\n<pre><code>#include &lt;stdio.h&gt;\nint main(void)\n{\n     int zippo[4][2] = { { 2, 4 }, { 6, 8 }, { 1, 3 }, { 5, 7 } };\n\n     printf(\"   zippo = %p,    zippo + 1 = %p\\n\",zippo, zippo + 1);\n     printf(\"zippo[0] = %p, zippo[0] + 1 = %p\\n\",zippo[0], zippo[0] + 1);\n     printf(\"  *zippo = %p,   *zippo + 1 = %p\\n\",*zippo, *zippo + 1);\n     printf(\"zippo[0][0] = %d\\n\", zippo[0][0]);\n     printf(\"  *zippo[0] = %d\\n\", *zippo[0]);\n     printf(\"    **zippo = %d\\n\", **zippo);\n     printf(\"      zippo[2][1] = %d\\n\", zippo[2][1]);\n     printf(\"*(*(zippo+2) + 1) = %d\\n\", *(*(zippo + 2) + 1));\n                                                                \n     return 0;\n}\n</code></pre>\n</blockquote>\n<p><strong>完整理解整个程序的输出结果</strong><br>\n特别注意与 zippo [2][1] 等价的指针表示法是 *(*(zippo+2)+1)<br>\n 这张视图演示了数组地址 数组内容和指针之间的关系<br>\n<a href=\"https://imgtu.com/i/Ic4B0s\"><img src=\"https://z3.ax1x.com/2021/11/14/Ic4B0s.png\" alt=\"Ic4B0s.png\"></a></p>\n<h5 id=\"指向多维数组的指针\"><a class=\"markdownIt-Anchor\" href=\"#指向多维数组的指针\">#</a> 指向多维数组的指针</h5>\n<blockquote>\n<pre><code>int (*pz) [2]  //表示pz指向一个内含两个int类型值得数组\n</code></pre>\n</blockquote>\n<p>以上代码把 pz 声明为指向一个数组的指针 该数组含有两个 int 类型值<br>\n<strong>括号的原因是 [] 的优先级高于 *</strong></p>\n<blockquote>\n<pre><code>int * pax[2]   此时pax是一个内涵两个指针元素的数组 每个元素都指向int的指针\n</code></pre>\n</blockquote>\n<hr>\n<blockquote>\n<pre><code>#include &lt;stdio.h&gt;\nint main(void)\n{\n     int zippo[4][2] = { { 2, 4 }, { 6, 8 }, { 1,   &gt;     3 }, { 5, 7 } };\n     int(*pz)[2];\n     pz = zippo;\n\n     printf(\"   pz = %p,    pz + 1 = %p\\n\",    pz,   &gt;     pz + 1);\n     printf(\"pz[0] = %p, pz[0] + 1 = %p\\n\",    pz  &gt;     [0], pz[0] + 1);\n     printf(\"  *pz = %p,   *pz + 1 = %p\\n\",      &gt;     *pz, *pz + 1);\n     printf(\"pz[0][0] = %d\\n\", pz[0][0]);\n     printf(\"  *pz[0] = %d\\n\", *pz[0]);\n     printf(\"    **pz = %d\\n\", **pz);\n     printf(\"      pz[2][1] = %d\\n\", pz[2][1]);\n     printf(\"*(*(pz+2) + 1) = %d\\n\", *(*(pz + 2) +   &gt;     1));\n                                                                \n     return 0;\n}\n</code></pre>\n</blockquote>\n<p>虽然 pz 是一个指针 不是数组名但是也可以用 pz [2][1] 这样的写法 可以用数组表示法或指针表示法来表示一个数组元素 既可以用数组名 也可以用指针名</p>\n<h5 id=\"指针的兼容性\"><a class=\"markdownIt-Anchor\" href=\"#指针的兼容性\">#</a> 指针的兼容性</h5>\n<p>指针之间的赋值比数值类型之间的赋值要严格<br>\n不用类型转换就可以吧 int 类型的值赋给 double 类型的变量但是两个类型的指针不能这样做</p>\n<blockquote>\n<pre><code>int x = 20;\nconst int y = 23;\nint * p1 = &amp;x;\nconst int * p2 = &amp;y;\nconst int ** pp2;\np1 = p2;        // 不安全 -- 把const指针赋给非const指针\np2 = p1;        // 有效 -- 把非const指针赋给const指针\npp2 = &amp;p1;      // 不安全 –- 嵌套指针类型赋值\n</code></pre>\n</blockquote>\n<hr>\n<blockquote>\n<pre><code>int * pt;\nint (*pa)[3];\nint ar1[2][3];\nint ar2[3][2];\nint **p2;    // 一个指向指针的指针\n</code></pre>\n</blockquote>\n<hr>\n<blockquote>\n<pre><code>pt = &amp;ar1[0][0];     // 都是指向int的指针\npt = ar1[0];         // 都是指向int的指针\npt = ar1;            // 无效\npa = ar1;            // 都是指向内含3个int类型元素数组的指针\npa = ar2;            // 无效\np2 = &amp;pt;            // 都是指向int *的指针\n*p2 = ar2[0];        // 都是指向int的指针\np2 = ar2;            // 无效\n</code></pre>\n</blockquote>\n<p>理解以上的代码</p>\n<h5 id=\"函数和多维数组\"><a class=\"markdownIt-Anchor\" href=\"#函数和多维数组\">#</a> 函数和多维数组</h5>\n<p>编写一个处理二维数组的函数 一种方法是 利用 for 循环把处理一维数组的函数应用到二维数组的每一行</p>\n<blockquote>\n<pre><code>int junk[3][4] = {{2,4,5,8},{3,5,6,9},{12,10,8,6}};\nint i ,j;\nint total = 0;\nfor(i=0;i&lt;3;i++) \ntotal +=sum(junk[i],4);\n</code></pre>\n</blockquote>\n<p>junk 是二维数组 那么 junk [i] 就是一堆数组 可将其视为二维数组的一行 sum () 函数计算二维数组的每行的综合 然后 for 循环再把每行的总和加起来<br>\n这种方法无法记录行和列的信息 用这种方法计算总和  行和列的信息并不重要 但如果每行代表一年 每列代表一个月 就还需要一个函数计算某列的综合 可以通过声明正确的形参变量来完成 以便函数能正确地传递数组</p>\n<blockquote>\n<pre><code>void somefunction(int (*pt)[4]);\nvoid somefunction(int pt[][4]);  //当且仅当pt是一个函数的形式参数时可以这样声明\n</code></pre>\n</blockquote>\n<p>第一个方括号是空的  表示 pt 是一个指针</p>\n<blockquote>\n<pre><code>// array2d.c -- 处理二维数组的函数\n#include &lt;stdio.h&gt;\n#define ROWS 3\n#define COLS 4\nvoid sum_rows(int ar[][COLS], int rows);\nvoid sum_cols(int [][COLS], int);        // 省略形参名，没问题\nint sum2d(int(*ar)[COLS], int rows);     // 另一种语法\nint main(void)\n{\n     int junk[ROWS][COLS] = {\n               { 2, 4, 6, 8 },\n               { 3, 5, 7, 9 },\n               { 12, 10, 8, 6 }\n     };\n\n     sum_rows(junk, ROWS);\n     sum_cols(junk, ROWS);\n     printf(\"Sum of all elements = %d\\n\", sum2d(junk, ROWS));\n                                                                \n     return 0;\n}\n\nvoid sum_rows(int ar[][COLS], int rows)\n{\n     int r;\n     int c;\n     int tot;\n\n     for (r = 0; r &lt; rows; r++)\n     {\n          tot = 0;\n          for (c = 0; c &lt; COLS; c++)\n               tot += ar[r][c];\n          printf(\"row %d: sum = %d\\n\", r, tot);\n     }\n}\n\nvoid sum_cols(int ar[][COLS], int rows)\n{\n     int r;\n     int c;\n     int tot;\n\n     for (c = 0; c &lt; COLS; c++)\n     {\n          tot = 0;\n          for (r = 0; r &lt; rows; r++)\n               tot += ar[r][c];\n          printf(\"col %d: sum = %d\\n\", c, tot);\n     }\n}\n\nint sum2d(int ar[][COLS], int rows)\n{\n     int r;\n     int c;\n     int tot = 0;\n\n     for (r = 0; r &lt; rows; r++)\n          for (c = 0; c &lt; COLS; c++)\n               tot += ar[r][c];\n                                                                \n     return tot;\n}\n</code></pre>\n</blockquote>\n<hr>\n<p>输出结果</p>\n<blockquote>\n<pre><code>row 0: sum = 20\nrow 1: sum = 24\nrow 2: sum = 36\ncol 0: sum = 17\ncol 1: sum = 19\ncol 2: sum = 21\ncol 3: sum = 23\nSum of all elements = 80\n</code></pre>\n</blockquote>\n<p>一般而言 声明一个指向 N 维数组的指针时只能省略最左边方括号中的值<br>\n第一个方括号只用于表示这是一个指针 而其他方括号则用于描述指针所指向数据对象的类型</p>\n<h4 id=\"变长数组vla\"><a class=\"markdownIt-Anchor\" href=\"#变长数组vla\">#</a> 变长数组 (VLA)</h4>\n<p>是否发现上面在处理二维数组的函数中 只把数组的行数作为函数的形参 而列数却内置在函数体内<br>\n因为 C 规定 数组的位数必须是常量 不能用变量来代替常量<br>\n C99 新增了变长数组 允许使用变量表示数组的维度</p>\n<blockquote>\n<pre><code>int a = 4;\nint b = 5;\ndouble sales[a][b];  //一个变长数组\n</code></pre>\n</blockquote>\n<p>变长数组有一些限制 变长数组必须是自动存储类别 这意味着无论在函数中声明还是作为函数形参声明 都不能使用 static 和 extern 存储类别说明符 并且不能在声明中初始化他们<br>\n变长数组中的变 不是指可以修改已经创建数组的大小 而是 在创建数组时，可以使用变量指定数组的维度<br>\n声明一个带二维变长数组参数的函数</p>\n<blockquote>\n<pre><code>int sum2d(int row,int cols, int ar [rows][cols])   //有效\nint sum2d(int ar [rows][cols],int cols, int row)   //无效\n</code></pre>\n</blockquote>\n<p>因为 row 和 cols 用做第三个形参二维数组 ar 的两个维度 ar 的声明要使用 rows 和 cols 所以在形参列表中必须在声明 ar 之前先声明这两个形参<br>\n C99/C11 标准规定 可以省略原型中的形参名 但是在这种情况下必须用型号来代替省略的维度</p>\n<blockquote>\n<pre><code>int sum2d(int,int,int ar[*][*]);\n</code></pre>\n</blockquote>\n<p>函数定义的形参列表中表明的变长数组并未实际创建数组<br>\n变长数组实际上是一个指针 这说明变长数组形参的函数实际上实在原始数组中处理数组 因此可以修改传入的数组</p>\n<h5 id=\"const和数组大小\"><a class=\"markdownIt-Anchor\" href=\"#const和数组大小\">#</a> const 和数组大小</h5>\n<p>是否可以在声明数组时使用 const 变量？</p>\n<blockquote>\n<pre><code>const int SZ = 80;\ndouble ar[SZ];\n</code></pre>\n</blockquote>\n<p>C99/C11 标准允许在声明变长数组时使用 const 常量 所以该数组的定义必须是声明在块中的自动存储类别数组.</p>\n<h4 id=\"复合字面量\"><a class=\"markdownIt-Anchor\" href=\"#复合字面量\">#</a> 复合字面量</h4>\n<p>字面量是除符号常量外的常量 例如 5 是 int 类型字面量 81.3 是 double 类型字面量 'Y’是 char 类型的字面量 \"elephant\" 是字符串类型的字面量<br>\n对于数组 复合字面量类似数组初始化列表 前面是用括号括起来的类型名</p>\n<blockquote>\n<pre><code>int diva[2] = {10,20};   \n(int [2]){10,20}   //复合自变量\n</code></pre>\n</blockquote>\n<p>int [2] 就是复合字面量的类型名<br>\n初始化复合字面量可以省略大小 编译器会自动计算数组当前的元素个数</p>\n<blockquote>\n<pre><code>(int []){50,20,90}\n</code></pre>\n</blockquote>\n<p>复合字面量是匿名的 所以不能先创建然后再使用他 必须在创建的同意使用他 使用指针记录地址就是一种用法</p>\n<blockquote>\n<pre><code>int * pt1;\npt1 = (int [2]){10,20}\n</code></pre>\n</blockquote>\n<p>该复合字面量的字面常量和上面创建的 diva 数组的字面常量完全相同 复合字面量的类型名也代表首元素的地址<br>\n还可以把复合字面量作为实际参数传递给带有匹配形式参数的函数</p>\n<blockquote>\n<pre><code>total = sum((int[]){4,4,4,5,5,5},6)\n</code></pre>\n</blockquote>\n<p>这种用法的好处是 把信息传入函数前不必先创建数组 这是复合字面量的典型用法<br>\n该用法应用于二维数组或者多维数组</p>\n<blockquote>\n<pre><code>int (*pt2)[4];\nptr2 = (int [2][4]) {{1,2,3,-9},{4,5,6,-8}};\n</code></pre>\n</blockquote>\n<p>演示了如何创建二维 int 数组并存储其地址<br>\n复合字面量是提供至临时需要的值得一种手段 复合字面量具有块作用域，这意味着一旦离开定义复合字面量的块 程序将无法保证该字面量是否存在 也就是说 复合字面量的定义在最内层的花括号中</p>\n<h4 id=\"数组关键概念\"><a class=\"markdownIt-Anchor\" href=\"#数组关键概念\">#</a> 数组关键概念</h4>\n<p>数组用于存储相同类型的数据。C 把数组看作是派生类型，因为数组是建立在其他类型的基础上。也就是说，无法简单地声明一个数组。在声明数组时必须说明其元素的类型，如 int 类型的数组、float 类型的数组，或其他类型的数组。所谓的其他类型也可以是数组类型，这种情况下，创建的是数组的数组（或称为二维数组）。</p>\n<p>通常编写一个函数来处理数组，这样在特定的函数中解决特定的问题，有助于实现程序的模块化。在把数组名作为实际参数时，传递给函数的不是整个数组，而是数组的地址（因此，函数对应的形式参数是指针）。为了处理数组，函数必须知道从何处开始读取数据和要处理多少个数组元素。数组地址提供了 “地址”，“元素个数” 可以内置在函数中或作为单独的参数传递。第 2 种方法更普遍，因为这样做可以让同一个函数处理不同大小的数组。</p>\n<p>数组和指针的关系密切，同一个操作可以用数组表示法或指针表示法。它们之间的关系允许你在处理数组的函数中使用数组表示法，即使函数的形式参数是一个指针，而不是数组。</p>\n<p>对于传统的 C 数组，必须用常量表达式指明数组的大小，所以数组大小在编译时就已确定。C99/C11 新增了变长数组，可以用变量表示数组大小。这意味着变长数组的大小延迟到程序运行时才确定。</p>\n<h4 id=\"数组小结\"><a class=\"markdownIt-Anchor\" href=\"#数组小结\">#</a> 数组小结</h4>\n<p>数组是一组数据类型相同的元素。数组元素按顺序存储在内存中，通过整数下标（或索引）可以访问各元素。在 C 中，数组首元素的下标是 0，所以对于内含 n 个元素的数组，其最后一个元素的下标是 n-1。作为程序员，要确保使用有效的数组下标，因为编译器和运行的程序都不会检查下标的有效性。<br>\n声明一个简单的一维数组形式如下：</p>\n<blockquote>\n<pre><code>type name [ size ];\n</code></pre>\n</blockquote>\n<p>这里，type 是数组中每个元素的数据类型，name 是数组名，size 是数组元素的个数。对于传统的 C 数组，要求 size 是整型常量表达式。但是 C99/C11 允许使用整型非常量表达式。这种情况下的数组被称为变长数组。</p>\n<p>C 把数组名解释为该数组首元素的地址。换言之，数组名与指向该数组首元素的指针等价。概括地说，数组和指针的关系十分密切。如果 ar 是一个数组，那么表达式 ar [i] 和 *(ar+i) 等价。</p>\n<p>对于 C 语言而言，不能把整个数组作为参数传递给函数，但是可以传递数组的地址。然后函数可以使用传入的地址操控原始数组。如果函数没有修改原始数组的意图，应在声明函数的形式参数时使用关键字 const。在被调函数中可以使用数组表示法或指针表示法，无论用哪种表示法，实际上使用的都是指针变量。</p>\n<p>指针加上一个整数或递增指针，指针的值以所指向对象的大小为单位改变。也就是说，如果 pd 指向一个数组的 8 字节 double 类型值，那么 pd 加 1 意味着其值加 8，以便它指向该数组的下一个元素。</p>\n<p>二维数组即是数组的数组。例如，下面声明了一个二维数组：</p>\n<blockquote>\n<pre><code>double sales[5][12];\n</code></pre>\n</blockquote>\n<p>该数组名为 sales，有 5 个元素（一维数组），每个元素都是一个内含 12 个 double 类型值的数组。第 1 个一维数组是 sales [0]，第 2 个一维数组是 sales [1]，以此类推，每个元素都是内含 12 个 double 类型值的数组。使用第 2 个下标可以访问这些一维数组中的特定元素。例如，sales [2][5] 是 slaes [2] 的第 6 个元素，而 sales [2] 是 sales 的第 3 个元素。</p>\n<p>C 语言传递多维数组的传统方法是把数组名（即数组的地址）传递给类型匹配的指针形参。声明这样的指针形参要指定所有的数组维度，除了第 1 个维度。传递的第 1 个维度通常作为第 2 个参数。例如，为了处理前面声明的 sales 数组，函数原型和函数调用如下：</p>\n<blockquote>\n<pre><code>void display(double ar[][12], int rows);\n...\ndisplay(sales, 5);\n</code></pre>\n</blockquote>\n<p>变长数组提供第 2 种语法，把数组维度作为参数传递。在这种情况下，对应函数原型和函数调用如下：</p>\n<blockquote>\n<pre><code>void display(int rows, int cols, double ar[rows][cols]);\n...\ndisplay(5, 12, sales);\n</code></pre>\n</blockquote>\n<p>虽然上述讨论中使用的是 int 类型的数组和 double 类型的数组，其他类型的数组也是如此。然而，字符串有一些特殊的规则，这是由于其末尾的空字符所致。有了这个空字符，不用传递数组的大小，函数通过检测字符串的末尾也知道在何处停止。我们将在第 11 章中详细介绍。</p>\n<h3 id=\"第十一章字符串和字符串函数\"><a class=\"markdownIt-Anchor\" href=\"#第十一章字符串和字符串函数\">#</a> 第十一章字符串和字符串函数</h3>\n<h4 id=\"表示字符串和字符串io\"><a class=\"markdownIt-Anchor\" href=\"#表示字符串和字符串io\">#</a> 表示字符串和字符串 I/O</h4>\n<p>字符串是以空字符 (\\o) 结尾的 char 类型数组</p>\n<blockquote>\n<pre><code>#include &lt;stdio.h&gt;\n#define MSG \"I am a symbolic string constant.\"\n#define MAXLENGTH 81\nint main(void)\n{\n     char words[MAXLENGTH] = \"I am a string in an array.\";\n     const char * pt1 = \"Something is pointing at me.\";\n     puts(\"Here are some strings:\");\n     puts(MSG);\n     puts(words);\n     puts(pt1);\n     words[8] = 'p';\n     puts(words);\n\n     return 0;\n}\n</code></pre>\n</blockquote>\n<p>和 printf () 函数相同 puts () 函数也属于 stdio.h 系列的输出 / 输出函数 但是和 printf () 不同的是 puts () 函数只显示字符串 而且自动在显示的字符串末尾加上换行符</p>\n<h5 id=\"在程序中定义字符串\"><a class=\"markdownIt-Anchor\" href=\"#在程序中定义字符串\">#</a> 在程序中定义字符串</h5>\n<h6 id=\"1字符串字面量字符串常量\"><a class=\"markdownIt-Anchor\" href=\"#1字符串字面量字符串常量\">#</a> 1. 字符串字面量 (字符串常量)</h6>\n<p>字符串字面量 (字符串常量): 用双引号括起来的内容 双引号中的字符和编译器自动加入末尾的 \\O 字符 都作为字符串存储在内存中<br>\n从 ANSI C 标准起 如果字符串字面量之间没有间隔 或者用空白字符分隔 C 会将其视为串联起来的字符串常量</p>\n<blockquote>\n<pre><code>char greeting[50] = \"Hello,and\"\"how are\"  \" you\"\n                     \"\" today!\" ;\nchar greeting [50] = \"Hello,and how are you today!\"\n\n&gt; 这两行代码是等价的\n</code></pre>\n</blockquote>\n<p>如果要在字符串内部使用双引号 必须要在双引号前面加上一个反斜杠 (\\)<br>\n 字符串常量属于<strong>静态存储类别</strong>，这说明 如果在函数中使用字符串常量 该字符串只会被存储一次 在整个程序的生命周期内存在 即使函数被调用多次 用双引号括起来的内容被视为指向该字符串存储位置的指针。类似于把数组名作为指向该数组位置的指针</p>\n<blockquote>\n<pre><code>#include &lt;stdio.h&gt;\nint main(void)\n{\n     printf(\"%s, %p, %c\\n\", \"We\", \"are\", *\"space farers\");\n\n     return 0;\n}\n</code></pre>\n</blockquote>\n<p>% s 打印 We 根据 % p 转换说明打印一个地址 *\"space farers\" 表示该字符串所指向地址所存储的值 应该是字符串 \"space farers\" 的首字符</p>\n<h6 id=\"2字符串数组和初始化\"><a class=\"markdownIt-Anchor\" href=\"#2字符串数组和初始化\">#</a> 2. 字符串数组和初始化</h6>\n<p>定义字符串数组时 必须让编译器知道需要多少空间 一种方法是用足够空间的数组 存储字符串</p>\n<blockquote>\n<pre><code>const char m1[40] = \"Limit yourself to one line's worth.\";\n</code></pre>\n</blockquote>\n<p>这种形式的初始化比标准的数组初始化形式简单得多</p>\n<blockquote>\n<pre><code>const char m1[40] = { 'L','i', 'm', 'i', 't', ' ', 'y', 'o', 'u', 'r', 's', 'e', 'l',\n                      'f', ' ', 't', 'o', ' ', 'o', 'n', 'e', ' ','l', 'i', 'n', 'e',   \n                      '\\', 's', ' ', 'w', 'o', 'r','t', 'h', '.', '\\0'\n};\n</code></pre>\n</blockquote>\n<p>注意最后的空字符 没有这个空字符 这就不是一个字符串 而是一个字符数组<br>\n在指定数组大小时候要确保数组的元素个数至少比字符串长度多 1 (为了容纳空字符) 所有违背使用的元素都被自动化初始为 \\0 空字符<br>\n省略数组初始化声明中的大小编译器会自动计算数组的大小<br>\n处理字符串的函数通常都不知道数组的大小 这些函数通过查找字符串末尾的空字符确定字符串在何处结束<br>\n让编译器计算输的的大小只能用在初始化数组时。如果创建一个稍后再填充的数组 就必须在声明时指定大小。声明数组时数组大小 IXUS 是可求值得整数 在 CC 新增变长数组迁 数组的大小必须是整型变量 包括由整型变量组成的表达式</p>\n<p>字符数组名和其他数组名一样 是该数组首元素的地址</p>\n<p>同时还可以使用指针表示法创建字符串</p>\n<blockquote>\n<pre><code>const char * pt1 =\"yogmas best\";\nconst char ar1[] = \"yogmas best\";\n</code></pre>\n</blockquote>\n<p>这两个声明几乎相同<br>\n以上两个声明表示 pt1 和 ar1 都是该字符串的地址 在这两种情况下 带双引号的字符串本身决定了鱼类给字符串的存储空间 尽管如此 这两种形式并不完全相同</p>\n<h6 id=\"3数组和指针\"><a class=\"markdownIt-Anchor\" href=\"#3数组和指针\">#</a> 3. 数组和指针</h6>\n<p>数组形式和指针形式有一些不同点<br>\n数组形式：数组形式在计算机的内存中分配一个数组 (每个元素对应一个字符 再加上一个末尾的空字符), 每个元素被初始化为字符串字面量对应的字符.<br>\n 字符串都作为可执行文件的一部分存储在数据段中 当把程序载入内存时 也载入了了程序中的字符串 字符串存储在静态存储区中<br>\n程序在开始运行时 才为该数组分配内存 此时 才将字符串拷贝到数组中<br>\n此时字符串有两个副本 一个是在静态内存中的字符串字面量 另一个是存储在数组中的字符串<br>\n编译器把数组名识别为该数组首元素地址的别名 这以为着在数组形式中数组名是字符常量 不能更改 如果改变了就意味着改变了数组的存储位置 可以进行类似 ar1+1 这样的操作 表示数组的下一个元素 但是不允许进行 ++ar1 这样的操作 递增运算符只能用于变量名前</p>\n<p>指针形式：指针形式是的编译器为字符串在静态存储区预留 29 个元素的空间 另外一旦开始执行程序 他会为<strong>指针变量</strong>留出一个存储位置 并把字符串的地址存储在指针变量中 该变量最初指向该字符串的首字符但是它的值可以改变 因此可以使用递增运算符<br>\n<strong>字符串字面量被视为 const 数据</strong></p>\n<h5 id=\"指针和字符串\"><a class=\"markdownIt-Anchor\" href=\"#指针和字符串\">#</a> 指针和字符串</h5>\n<p>字符串的绝大多数操作都是通过指针完成的</p>\n<blockquote>\n<pre><code>#include &lt;stdio.h&gt;\nint main(void)\n{\n     const char * mesg = \"Don't be a fool!\";\n     const char * copy;\n\n     copy = mesg;\n     printf(\"%s\\n\", copy);\n     printf(\"mesg = %s; &amp;mesg = %p; value = %p\\n\", mesg, &amp;mesg, mesg);\n     printf(\"copy = %s; &amp;copy = %p; value = %p\\n\", copy, &amp;copy, copy);\n                                                                \n     return 0;\n}\n</code></pre>\n<p>如果编译器不识别 % p 用 % u 或者 % lu 来代替<br>\n字符串形式输出用 % s 转换说明<br>\n因为最后 mesg 和 copy 指针输出的值是一样的 即两个指针指向地址是一样的 这说明程序并未拷贝字符串 copy=mesg 仅仅把 mesg 的值即 mesg 存储的地址赋值给 copy 让 copy 也指向这一个地址<br>\n不拷贝整个字符串的原因是因为这样做更具有效率 如果一定要拷贝字符串可以使用 **strcpy () 和 strncpy ()** 函数，后续会介绍这两个函数</p>\n</blockquote>\n<h4 id=\"字符串输入\"><a class=\"markdownIt-Anchor\" href=\"#字符串输入\">#</a> 字符串输入</h4>\n<p>如果想把一个字符串读入程序 首先必须预留存储该字符串的空间 然后用输入函数获取该字符串</p>\n<h5 id=\"分配空间\"><a class=\"markdownIt-Anchor\" href=\"#分配空间\">#</a> 分配空间</h5>\n<p>分配空间的时候必须为字符串分配足够的空间 <strong>不要指望计算机在读取字符串的时候顺便计算它的长度然后再分配空间</strong> (计算机不会这样做 除非你编写一个处理这些任务的函数)</p>\n<blockquote>\n<pre><code>char * name;\nscanf(\"%s\",name);\n</code></pre>\n</blockquote>\n<p>可能会通过编译 但是在读入 name 时 name 可能会擦写掉程序中的数据或代码 而导致程序异常终止<br>\n因为 scanf () 要把信息拷贝到参数指定的地址上 此时 该参数是个未初始化的指针 name 可能会指向任何地方</p>\n<ul>\n<li>最简单的方法是 在声明时指明数组的大小</li>\n</ul>\n<blockquote>\n<pre><code>char name[81];\n</code></pre>\n</blockquote>\n<ul>\n<li>还有一种方法：使用 C 库函数来分配内存 (第 12 章)</li>\n</ul>\n<p>为字符串分配玩内存后 开始讨论读取字符串的函数</p>\n<h5 id=\"gets函数不幸\"><a class=\"markdownIt-Anchor\" href=\"#gets函数不幸\">#</a> gets () 函数–不幸</h5>\n<p>在读取字符串时，scanf () 和转换说明 % s 只能读取一个单词<br>\n程序中经常要读取一整行输入 gets () 函数就用于处理这种情况</p>\n<ul>\n<li>get () 函数读取整行输入 直到遇到换行符 然后丢弃换行符 存储其余字符 并在这些字符的末尾添加一个空字符使其称为一个 C 字符串 其经常和 puts () 函数配对使用</li>\n<li>puts () 函数用于显示字符串 并且在末尾添加换行符</li>\n</ul>\n<blockquote>\n<pre><code>#include &lt;stdio.h&gt;\n#define STLEN 81\nint main(void)\n{\n     char words[STLEN];\n\n     puts(\"Enter a string, please.\");\n     gets(words);  // 典型用法\n     printf(\"Your string twice:\\n\");\n     printf(\"%s\\n\", words);\n     puts(words);\n     puts(\"Done.\");\n                                                                \n     return 0;\n}\n</code></pre>\n</blockquote>\n<p>整行输入都被存储在 words 中 put () 和 printf () 的效果相同<br>\n但是在有些编译器中并不会输出正确的结果，并且会给出警告<br>\n gets () 的唯一参数是 words, 他无法检查数组是否装得下输入行.<br>\n 数组名仅仅是数组首元素的地址。因此，gets () 函数只知道数组的开始处 并不知道数组中有多少个元素</p>\n<p>如果输入的字符过长 会导致<strong>缓冲区溢出</strong>即多余的字符超出了指定的目标空间 如果这些多于的字符只是占用了<strong>尚未使用</strong>的内存就不会立即出现问题 如果他们擦写掉程序中的其他数据就会导致程序异常中止<br>\n<em>在过去有些人通过系统编程 利用 gets () 插入和运行一些破坏系统安全的代码</em><br>\n C99 中承认了 gets () 的问题并且建议不要使用它 尽管如此 现有程序中因为含有大量使用该函数的代码 所以在标准中保留了 gets ()<br>\n C11 直接从标准中废除了 gets () 函数<br>\n所以这就导致了有些编译器支持 gets () 函数而有些编译器不支持 gets () 函数<br>\n部分编译器为了兼容以前的代码 就继续支持 gets () 函数</p>\n<h5 id=\"gets的替代品\"><a class=\"markdownIt-Anchor\" href=\"#gets的替代品\">#</a> gets () 的替代品</h5>\n<p>过去尝尝用 fgets () 来代替 gets (),fgets () 函数稍微复杂些 在处理输入方面与 gets () 略有不同 C11 标准新增的 gets_s () 也可以代替 gets () 该函数与 gets () 函数更为接近 但是 它是 stdio.h 输入 / 输出函数系列中的可选拓展 所以编译器不一定支持它</p>\n<h6 id=\"fgets函数和fputs\"><a class=\"markdownIt-Anchor\" href=\"#fgets函数和fputs\">#</a> fgets () 函数和 (fputs)</h6>\n<p>fgets () 函数通过第 2 个参数限制读入的字符数来解决溢出的问题<br>\n<strong>该函数专门设计处理文件输入</strong>一般情况下可能不太好用<br>\n fgets () 与 gets () 的区别如下</p>\n<ul>\n<li>fgets () 函数的第 2 个参数指明了读入字符的最大数量，如果该参数是 n 那么 fgets () 函数将读入 n-1 个字符 或者读到遇到的第一个换行符为止</li>\n<li>如果 fgets () 读到一个换行符，会把它存储在字符串中 这点和 gets () 不同，gets () 会丢地换行符</li>\n<li>fgets () 函数的第三个参数执行要读入的文件 如果读入从键盘输入的数据 则以 **stdin (标准输入)<strong> 作为参数 该标识符定义在 stdio.h 中<br>\n因为 fgets () 函数把换行符放在字符串的末尾 (假设输入行不溢出) 通常要与 fputs () 配对使用，除非该函数不在字符串末尾添加换行符 fputs () 的第 2 个参数指明它要写入的文件 如果要显示在计算机显示器上，应使用</strong> stdout (标准输出)** 作为参数</li>\n</ul>\n<blockquote>\n<pre><code>#include &lt;stdio.h&gt;\n#define STLEN 14\nint main(void)\n{\n     char words[STLEN];\n\n     puts(\"Enter a string, please.\");\n     fgets(words, STLEN, stdin);\n     printf(\"Your string twice (puts(), then fputs()):\\n\");\n     puts(words);\n     fputs(words, stdout);\n     puts(\"Enter another string, please.\");\n     fgets(words, STLEN, stdin);\n     printf(\"Your string twice (puts(), then fputs()):\\n\");\n     puts(words);\n     fputs(words, stdout);\n     puts(\"Done.\");\n                                                                \n     return 0;\n}\n</code></pre>\n</blockquote>\n<p>输入案例</p>\n<blockquote>\n<pre><code>Enter a string, please.\napple pie\nYour string twice (puts(), then fputs()):\napple pie\n\napple pie\nEnter another string, please.\nstrawberry shortcake\nYour string twice (puts(), then fputs()):\nstrawberry sh\nstrawberry shDone.\n</code></pre>\n</blockquote>\n<ul>\n<li>第一行输入 apple pie 比 fgets () 读入的整行输入短 因此 apple pie 被存储在数组中 所以当 puts () 显示该字符串时又在末尾添加了换行符 因此 apple pie 后面有一行空行 因为 fputs () 不在字符串末尾添加换行符 所以并未打印出空行</li>\n<li>第二行输入 的字符超过了大小的限制 所以只会读入相应的字符 然后把前几个范围内的存储在数组中<br>\n<strong> puts () 函数会在待输入字符串末尾添加一个换行符 而 fputs () 不会这样做</strong><br>\n<strong>同样 fgets () 存储时会在末尾自动存储一个换行符 而 gets () 不会这样</strong></li>\n</ul>\n<p>fgets () 函数返回 char 的指针 该函数返回的地址与传入的一个参数相同 如果读到文件末尾将返回<strong>空指针</strong>该指针保证不会指向有效的数据 所以可用于表述特殊情况 在 C 语言中用宏 NULL 来代替 (如果读入数据错误 该函数也返回 NULL).</p>\n<p>下列函数演示了一个简单的循环 读入并显示用户输入的内容 直到 fgets () 读到文件末尾或空行 (首字符是换行符)</p>\n<blockquote>\n<pre><code>#include &lt;stdio.h&gt;\n#define STLEN 10\nint main(void)\n{\n     char words[STLEN];\n\n     puts(\"Enter strings (empty line to quit):\");\n     while (fgets(words, STLEN, stdin) != NULL &amp;&amp; words[0] != '\\n')\n          fputs(words, stdout);\n     puts(\"Done.\");\n                                                                \n     return 0;\n}\n</code></pre>\n</blockquote>\n<p>输出结果如下</p>\n<blockquote>\n<pre><code>Enter strings (empty line to quit):\nBy the way, the gets() function\nBy the way, the gets() function\nalso returns a null pointer if it\nalso returns a null pointer if it\nencounters end-of-file.\nencounters end-of-file.\n\nDone.\n</code></pre>\n</blockquote>\n<p>神奇的是 这个程序在处理过长的输入时完全没有问题<br>\n通过 while 循环每次读入 9 个字符 (虽然 STLEN 为 10 但是最后一个位置需要留给 \\0) 并且没有换行由此不断叠加<br>\n<strong> important</strong> 系统使用缓冲的 I/O 用户按 enter 键之前 输入都被存储在缓冲区中 按下 enter 键就在输入中增加了一个换行符 并且把整行输入发送给 fgets () 对出输出 fputs () 把字符发送给另一个缓冲区 当发送换行符时 缓冲区的内容被发送到屏幕上<br>\n fgets () 存储换行符有好有坏</p>\n<ul>\n<li>好处：对于存储的字符串而言 检查末尾是否有换行符可以判断是否读取了一整行</li>\n<li>坏处：可能编者本身并不想把换行符存储在字符串中 这样的换行符会带来一些麻烦</li>\n</ul>\n<p>存储的字符串 如果不是一整行 要妥善处理一行中剩下的字符</p>\n<p>如何处理掉换行符呢</p>\n<ul>\n<li>在已存储的字符串中查找换行符 并将其替换成空字符</li>\n</ul>\n<blockquote>\n<pre><code>while (words[i] != '\\n') // 假设\\n在words中\n     i++;\nwords[i] = '\\0';\n</code></pre>\n</blockquote>\n<ul>\n<li>如果仍然有字符串留在输入行怎么办，如果目标数组装不下一整行输入就丢弃多出的字符</li>\n</ul>\n<blockquote>\n<pre><code>while (getchar() != '\\n')    // 读取但不存储输入，包括\\n\ncontinue;\n</code></pre>\n</blockquote>\n<p>以下程序读取输入航 删除存储在字符串中的换行符  如果没有换行符 就丢弃数组装不下的字符</p>\n<blockquote>\n<pre><code>#include &lt;stdio.h&gt;\n#define STLEN 10\nint main(void)\n{\n     char words[STLEN];\n     int i;\n\n     puts(\"Enter strings (empty line to quit):\");\n     while (fgets(words, STLEN, stdin) != NULL &amp;&amp; words[0] != '\\n')\n     {\n          i = 0;\n          while (words[i] != '\\n' &amp;&amp; words[i] != '\\0')\n               i++;\n          if (words[i] == '\\n')\n               words[i] = '\\0';\n          else    // 如果word[i] == '\\0'则执行这部分代码\n               while (getchar() != '\\n')\n                     continue;\n          puts(words);\n     }\n     puts(\"done\");\n     return 0;\n}\n</code></pre>\n</blockquote>\n<p>遍历字符串 直到遇到换行符或者空字符 如果先遇到换行符 就替换成空字符 如果先遇到空字符 else 部分就丢弃输入行的剩余字符</p>\n<h6 id=\"gets_s函数\"><a class=\"markdownIt-Anchor\" href=\"#gets_s函数\">#</a> gets_s () 函数</h6>\n<p>和 fgets () 函数类似 用一个参数限制读入的字符数目</p>\n<p>区别如下:</p>\n<ul>\n<li>gets_s () 只从标准输入中读取数据 不需要第三个参数</li>\n<li>gets_s 读到换行符会丢弃换行符而不是存储</li>\n<li>如果 gets_s 读到最大字符数都没有读到换行符 他会先把数组中的首字符设置成空字符 读取然后丢弃随后的输入 知道读到换行符 然后返回空指针 接着调用 \"处理函数\" (可能会终止或者退出程序)</li>\n</ul>\n<p>如果输入行未超过最大字符数目 gets_s () 和 gets () 相同</p>\n<p>如果目标存储区装得下输入行 以上函数效果都一样</p>\n<p>如果输入行太长会怎样</p>\n<ul>\n<li>使用 gets () 会擦写现有数据 具有安全隐患</li>\n<li>gets_s () 很安全 但是如果不希望程序终止或者退出 就要知道如何编写 \"处理函数\" 如果让程序继续运行 gets_s 会丢弃该输入行的其余字符</li>\n<li>fgets () 综合了以上两个 可以自由选择 是截取丢弃 还是继续使用输入行中超出的字符 可以参考以上 fgets () 中两个程序的处理方法</li>\n</ul>\n<h6 id=\"s_gets函数\"><a class=\"markdownIt-Anchor\" href=\"#s_gets函数\">#</a> s_gets () 函数</h6>\n<p>fgets () 函数的一种语法 读取郑航输入并用空字符代替换行符 或者读取一部分输入 并丢弃其余部分 然而并没有处理这种情况的标准 C 库函数<br>\n所以我们就创建一个 或许在后面的程序中会用得上</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> <span class=\"token function\">s_gets</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> st<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> ret_val<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n ret_val <span class=\"token operator\">=</span> <span class=\"token function\">fgets</span><span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> <span class=\"token constant\">stdin</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ret_val<span class=\"token punctuation\">)</span>    <span class=\"token comment\">// 即，ret_val != NULL</span>\n <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'\\n'</span> <span class=\"token operator\">&amp;&amp;</span> st<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">)</span>\n           i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n           st<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">else</span><span class=\"token punctuation\">;</span>              \n\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n                     <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n     <span class=\"token keyword\">return</span> ret_val<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>如果 fgets () 返回 NULL，说明读到文件结尾或出现读取错误，s_gets () 函数跳过了这个过程。它模仿上面处理 fgets () 函数的的处理方法，如果字符串中出现换行符，就用空字符替换它；如果字符串中出现空字符，就丢弃该输入行的其余字符，然后返回与 fgets () 相同的值。我们在后面的示例中将讨论 fgets () 函数。</p>\n<p>为什么要丢弃过长输入行中的余下字符。<br>\n这是因为，输入行中多出来的字符会被留在缓冲区中，成为下一次读取语句的输入。<br>\n例如，如果下一条读取语句要读取的是 double 类型的值，就可能导致程序崩溃。丢弃输入行余下的字符保证了读取语句与键盘输入同步。</p>\n<p>s_gets () 函数并不完美，它最严重的缺陷是遇到不合适的输入时毫无反应。它丢弃多余的字符时，既不通知程序也不告知用户。但是，用来替换前面程序示例中的 gets () 足够了。</p>\n<h6 id=\"空字符和空指针\"><a class=\"markdownIt-Anchor\" href=\"#空字符和空指针\">#</a> 空字符和空指针</h6>\n<ul>\n<li>\n<p>空字符 (\\0) 用于标记 C 字符串末尾的字符 对应字符编码为 0 由于其他字符的编码不可能为 0 所以空字符不可能是字符串的一部分</p>\n</li>\n<li>\n<p>空指针 (NULL) 有一个值 该值不会与任何数据的有效地址对应.</p>\n</li>\n<li>\n<p>空指针是整数类型 空指针是指针类型 空字符是一个字符占 1 字节 空指针是一个地址 占 4 字节</p>\n</li>\n</ul>\n<h5 id=\"scanf函数-2\"><a class=\"markdownIt-Anchor\" href=\"#scanf函数-2\">#</a> scanf () 函数</h5>\n<p>前面用 scanf () 和 % s 来读取字符串<br>\n scanf () 和 gets () 以及 fgets () 的区别在于他们如何确定字符串的末尾</p>\n<ul>\n<li>\n<p>scanf () 更像是在 \"获取单词\" 而不是在 \"获取字符串\"</p>\n</li>\n<li>\n<p>如果预留区装得下输入航 gets () 和 fgets () 会读取第一个换行符之前所有的字符</p>\n</li>\n</ul>\n<p>scanf () 有两种方法确定输入结束，但是都是从第一个非空白字符作为字符的开始</p>\n<ul>\n<li>使用 % s 转换说明 以下一个空白字符 (空行 空格 制表符 换行符) 作为字符串的结束 (<strong>空白字符不存储在字符串中</strong>)</li>\n<li>如果指定了字符串的长度 如 %8s 那么 scanf () 将读取 8 个字符 或者读到空白符位置</li>\n</ul>\n<p><a href=\"https://imgtu.com/i/oFcCd0\"><img src=\"https://z3.ax1x.com/2021/11/25/oFcCd0.png\" alt=\"oFcCd0.png\"></a></p>\n<p>scanf () 函数返回一个整数值 该值等于 scanf () 成功读取的项数 或者 EOF (读到文件末尾)</p>\n<blockquote>\n<pre><code>#include &lt;stdio.h&gt;\nint main(void)\n{\n     char name1[11], name2[11];\n     int count;\n\n     printf(\"Please enter 2 names.\\n\");\n     count = scanf(\"%5s %10s\", name1, name2);\n     printf(\"I read the %d names %s and %s.\\n\", count, name1, name2);\n                                                                \n     return 0\n}\n</code></pre>\n</blockquote>\n<p>输入示例</p>\n<blockquote>\n<p>Please enter 2 names.<br>\nJesse Jukes<br>\nI read the 2 names Jesse and Jukes.  // 都未超出字段宽度<br>\n Please enter 2 names.<br>\nLiza Applebottham<br>\nI read the 2 names Liza and Applebotth.  // 第二个超出了字段宽度 自动截取了<br>\n Please enter 2 names.<br>\nPortensia Callowit<br>\nI read the 2 names Porte and nsia.   先读取了 5 个字符 (第一次调用 scanf ()) 然后又读取了 4 字符 (第二次调用 scanf () 从上一次调用结束的地方继续读取数据)</p>\n</blockquote>\n<p>根据输入数据的性质 用 scanf () 读取键盘输入的数据 有时并不合适<br>\n scanf () 无法完整地读入书名或者歌曲名 除非这些名称是一个单词<br>\n scanf () 的典型用法：读取并转换混合数据类型为某种标准形式<br>\n scanf () 缺点：输入行过长也会导致数据溢出<br>\n解决方法：在 % s 转换说明中限制字段宽度</p>\n<h4 id=\"字符串输出\"><a class=\"markdownIt-Anchor\" href=\"#字符串输出\">#</a> 字符串输出</h4>\n<p>C 中 3 个用于打印字符串的标准库函数</p>\n<ol>\n<li>puts()</li>\n<li>fputs()</li>\n<li>printf()</li>\n</ol>\n<h5 id=\"puts函数\"><a class=\"markdownIt-Anchor\" href=\"#puts函数\">#</a> puts () 函数</h5>\n<p>puts () 函数会在末尾自动添加一个换行符</p>\n<blockquote>\n<pre><code>#include &lt;stdio.h&gt;\n#define DEF \"I am a #defined string.\"\nint main(void)\n{\n     char str1[80] = \"An array was initialized to me.\";\n     const char * str2 = \"A pointer was initialized to me.\";\n\n     puts(\"I'm an argument to puts().\");\n     puts(DEF);\n     puts(str1);\n     puts(str2);\n     puts(&amp;str1[5]);  //puts后面需要跟的是一个地址 字符串的起始地址\n     puts(str2 + 4);\n                                                                \n     return 0;\n}\n</code></pre>\n</blockquote>\n<p>输出如下</p>\n<blockquote>\n<p>I’m an argument to puts().<br>\nI am a #defined string.<br>\nAn array was initialized to me.<br>\nA pointer was initialized to me.<br>\nray was initialized to me.<br>\ninter was initialized to me.</p>\n</blockquote>\n<p>puts 遇到空字符就停止输入 所以必须却要有空字符<br>\n如果缺少空字符他会一直打印内存后面中的内容 直到读到空字符的位置为止</p>\n<h5 id=\"fputs函数\"><a class=\"markdownIt-Anchor\" href=\"#fputs函数\">#</a> fputs () 函数</h5>\n<p>与 puts () 函数的区别如下</p>\n<ul>\n<li>fputs () 的第二个参数指明要写入数据的文件 如果要打印在显示器上 用定义在 stdio.h 中的 stdout (标准输出) 作为该参数</li>\n<li>fputs () 不会在输出的末尾添加换行符 而 puts () 会</li>\n</ul>\n<p>与前面的输入函数关联起来 也就是前面提过的<br>\n<strong> puts () 函数会在待输入字符串末尾添加一个换行符 而 fputs () 不会这样做</strong><br>\n<strong>同样 fgets () 存储时会在末尾自动存储一个换行符 而 gets () 不会这样</strong></p>\n<p>不推荐使用 gets () 因为已经废弃了  学习 gets () 只是以防以后看到 gets () 代码看不懂</p>\n<h5 id=\"printf函数-2\"><a class=\"markdownIt-Anchor\" href=\"#printf函数-2\">#</a> printf () 函数</h5>\n<p>printf () 把字符串的地址作为参数<br>\n printf () 不是那么方便 但是它可以格式化不同的数据类型</p>\n<blockquote>\n<pre><code>printf(\"%s \\n\",string)\nputs(string); 这两个语句的效果是相同的\n</code></pre>\n</blockquote>\n<h4 id=\"自定义输入输出函数\"><a class=\"markdownIt-Anchor\" href=\"#自定义输入输出函数\">#</a> 自定义输入 / 输出函数</h4>\n<p>以下是一个 类似 puts 但是不会就自动添加换行符的函数</p>\n<blockquote>\n<pre><code>#include &lt;stdio.h&gt;\nvoid put1(const char * string)/* 不会改变字符串 */\n{\n     while (*string != '\\0')\n          putchar(*string++);\n}\n</code></pre>\n</blockquote>\n<p>因为从右向左运算 *string++ 中递增是 string 本身而不是递增它所指向的字符</p>\n<p>很多 C 程序员在 whild 中会使用下面的测试条件</p>\n<blockquote>\n<pre><code>while (\\*string) 若\\*string是空字符 则为0 循环结束 这种方法非常简便\n</code></pre>\n</blockquote>\n<p>以下将打印一串字符串 并且 统计打印的字符个数</p>\n<blockquote>\n<pre><code> int put2(const char * string)\n {\n      int count = 0;\n      while (*string)    /* 常规用法 */\n      {\n           putchar(*string++);\n           count++;\n      }\n      putchar('\\n');    /* 不统计换行符 */\n\n      return(count);\n }\n 具体的程序使用\n #include &lt;stdio.h&gt;\n void put1(const char *);\n int put2(const char *);\n\n int main(void)\n {\n     put1(\"If I'd as much money\");\n     put1(\" as I could spend,\\n\");\n     printf(\"I count %d characters.\\n\",\n          put2(\"I never would cry old chairs to mend.\"));\n\n     return 0;\n }\n\n void put1(const char * string)\n {\n     while (*string)  /* 与 *string != '\\0' 相同 */\n          putchar(*string++);\n }\n\n int put2(const char * string)\n {\n     int count = 0;\n     while (*string)\n     {\n          putchar(*string++);\n          count++;\n     }\n     putchar('\\n');\n\n     return(count);\n\n }\n</code></pre>\n</blockquote>\n<h4 id=\"字符串函数\"><a class=\"markdownIt-Anchor\" href=\"#字符串函数\">#</a> 字符串函数</h4>\n<p>C 库中有多个处理字符串的函数 ANSI C 放在了 string.h 头文件中</p>\n<h5 id=\"strlen-函数\"><a class=\"markdownIt-Anchor\" href=\"#strlen-函数\">#</a> strlen () 函数</h5>\n<p>strlen () 函数用于统计字符串的长度<br>\n以下函数用于缩短字符串的长度</p>\n<blockquote>\n<pre><code>void fit(char *string, unsigned int size)\n{\n     if (strlen(string) &gt; size)\n         string[size] = '\\0';\n}\n</code></pre>\n</blockquote>\n<h5 id=\"strcat函数\"><a class=\"markdownIt-Anchor\" href=\"#strcat函数\">#</a> strcat () 函数</h5>\n<p>strcat () 用于拼接字符串<br>\n函数接受两个字符串作为参数 该函数是把第二个字符串的备份附加在第一个字符串末尾 然后把拼接后形成的新字符串作为第一个字符串 第二个字符串不发生改变<br>\n strcat () 的类型是指向 char 的指针 返回的值是第一个字符串的地址</p>\n<h5 id=\"strncat函数\"><a class=\"markdownIt-Anchor\" href=\"#strncat函数\">#</a> strncat () 函数</h5>\n<p>strcat () 无法检查第一个数组 是否能够容纳第 2 个字符串 如果第一个数组的空间不够大 拼接的时候就会出现问题<br>\n strncat () 的第三个参数制定了最大添加字符数</p>\n<blockquote>\n<pre><code>strncat(bugs,addon,13)\n</code></pre>\n</blockquote>\n<p>在加到第 13 个字符或者空字符的时候就停止<br>\n strncat () 和 gets () 一样也会导致缓冲区溢出 但是并没有废弃</p>\n<h5 id=\"strcmp函数\"><a class=\"markdownIt-Anchor\" href=\"#strcmp函数\">#</a> strcmp () 函数</h5>\n<p>strcmp 用于字符串的比较<br>\n如果两个字符串参数相同 函数就返回 0 否则返回非 0 数<br>\n<strong>注意</strong><br>\n strcmp () 比较的是字符串不是整个数组 即使数组很大 strcmp () 也只会比较数组中存储的字符串 也就是第一个空字符前面的字符串</p>\n<h6 id=\"strcmp的返回值\"><a class=\"markdownIt-Anchor\" href=\"#strcmp的返回值\">#</a> strcmp () 的返回值</h6>\n<ul>\n<li>如果第一个字符串在第二个字符串前面 strcmp () 返回一个负数</li>\n<li>如果两个字符串相同 则返回 0</li>\n<li>如果第一个字符串在第二个字符串后面 strcmp () 返回一个正数</li>\n</ul>\n<p>比较过程中 strcmp () 会依次比较每个字符 知道发现第一对不同的字符为止 然后返回相应的值</p>\n<p>strcmp () 与其说是比较字符串 不如说是根据 ASCII 的值 按照<strong>机器排序序列</strong>进行比较</p>\n<p><strong>注意</strong> strcmp () 比较的是字符串而不是字符 也就是说即使要比较单个字符 也应该写成 \"A\" 而不是’A’<br>\n实际上因为 char 类型实际上是 int 类型 所以比较字符时 也不需要使用到 strcmp () 函数</p>\n<h5 id=\"strncmp函数\"><a class=\"markdownIt-Anchor\" href=\"#strncmp函数\">#</a> strncmp () 函数</h5>\n<ul>\n<li>strcmp () 比较字符串中的字符 这一过程会持续到直到发现不同</li>\n<li>strncmp () 在比较两个字符串时 可以限定函数只比较哪几个字符 这样可以用来查找哪个字母 或者开头 结尾 相同的单词</li>\n</ul>\n<blockquote>\n<pre><code>strncmp(\"transform\",\"transparent\",5)\n</code></pre>\n</blockquote>\n<p>此时函数就只会比较前面 5 个字符 并且输出的结果是 0 因为前 5 个字符 trans 相同</p>\n<h5 id=\"strcpy和strncpy函数\"><a class=\"markdownIt-Anchor\" href=\"#strcpy和strncpy函数\">#</a> strcpy () 和 strncpy () 函数</h5>\n<p>如何希望拷贝整个字符串就用 strcpy ()<br>\n strcpy () 函数相当于<strong>字符串赋值运算符</strong></p>\n<p>strcpy () 第二个参数 指向的字符串被拷贝至第一个参数指向的数组中</p>\n<ul>\n<li>拷贝出来的字符串被称为<strong>目标字符串</strong></li>\n<li>最初的字符串被称为<strong>源字符串</strong></li>\n</ul>\n<p>如果拷贝到的数组没有被初始化 这时候可能被拷贝到任意地方</p>\n<h6 id=\"strcpy的其他属性\"><a class=\"markdownIt-Anchor\" href=\"#strcpy的其他属性\">#</a> strcpy () 的其他属性</h6>\n<ul>\n<li>strcpy () 的返回类型是 char * 该函数返回第一个字符的地址</li>\n<li>第一个参数不必指向数组的开始</li>\n</ul>\n<h6 id=\"更谨慎的选择-strncpy\"><a class=\"markdownIt-Anchor\" href=\"#更谨慎的选择-strncpy\">#</a> 更谨慎的选择: strncpy ()</h6>\n<p>strcpy () 不能检查目标空间是否能容纳源字符串的副本<br>\n strncpy () 的第三个参数指明可拷贝的最大字符数</p>\n<blockquote>\n<pre><code>strncpy(target,source,n)\n</code></pre>\n<p>把 source 中的 n 个字符或者空字符之前的字符拷贝到 target 中<br>\n strncpy () 拷贝字符串的长度不会超过 n<br>\n<strong> 如果拷贝到底 n 还没有拷贝完整个字符串 就不会拷贝空字符</strong><br>\n如此写程序的时候可以用 if else 语句 把拷贝过去的字符串最后一个转化为空字符 以保证存储的是一个字符串</p>\n</blockquote>\n<h6 id=\"sprintf函数\"><a class=\"markdownIt-Anchor\" href=\"#sprintf函数\">#</a> sprintf () 函数</h6>\n<p>sprintf 函数声明在 stdio.h 中<br>\n该函数和 printf 类似 但是是把数据写入字符串 而不是打印在电脑屏幕上</p>\n<ul>\n<li>sprintf () 的第一个参数是目标字符串的地址</li>\n<li>其他参数和 printf () 相同</li>\n</ul>\n<blockquote>\n<pre><code>sprintf(formal,\"    \",X,Y,Z)\n</code></pre>\n<p>表示法 X,Y,Z 拼接成一个字符串并且存储在 formal 中</p>\n</blockquote>\n<h5 id=\"其他字符串函数\"><a class=\"markdownIt-Anchor\" href=\"#其他字符串函数\">#</a> 其他字符串函数</h5>\n<p>对以上函数 和一些常用函数的总结</p>\n<blockquote>\n<p>char *strcpy (char* restrict s1, const char * restrict s2);<br>\n 该函数把 s2 指向的字符串（包括空字符）拷贝至 s1 指向的位置，返回值是 s1。<br>\nchar*strncpy(char * restrict s1, const char * restrict s2, size_t n);<br>\n 该函数把 s2 指向的字符串拷贝至 s1 指向的位置，拷贝的字符数不超过 n，其返回值是 s1。该函数不会拷贝空字符后面的字符，如果源字符串的字符少于 n 个，目标字符串就以拷贝的空字符结尾；如果源字符串有 n 个或超过 n 个字符，就不拷贝空字符。<br>\nchar *strcat(char * restrict s1, const char * restrict s2);<br>\n 该函数把 s2 指向的字符串拷贝至 s1 指向的字符串末尾。s2 字符串的第 1 个字符将覆盖 s1 字符串末尾的空字符。该函数返回 s1。<br>\nchar *strncat(char * restrict s1, const char * restrict s2, size_t n);<br>\n 该函数把 s2 字符串中的 n 个字符拷贝至 s1 字符串末尾。s2 字符串的第 1 个字符将覆盖 s1 字符串末尾的空字符。不会拷贝 s2 字符串中空字符和其后的字符，并在拷贝字符的末尾添加一个空字符。该函数返回 s1。<br>\nint strcmp(const char * s1, const char * s2);<br>\n 如果 s1 字符串在机器排序序列中位于 s2 字符串的后面，该函数返回一个正数；如果两个字符串相等，则返回 0；如果 s1 字符串在机器排序序列中位于 s2 字符串的前面，则返回一个负数。<br>\nint strncmp(const char * s1, const char * s2, size_t n);<br>\n 该函数的作用和 strcmp () 类似，不同的是，该函数在比较 n 个字符后或遇到第 1 个空字符时停止比较。<br>\nchar *strchr(const char * s, int c);<br>\n 如果 s 字符串中包含 c 字符，该函数返回指向 s 字符串首次出现的 c 字符的指针（末尾的空字符也是字符串的一部分，所以在查找范围内）；如果在字符串 s 中未找到 c 字符，该函数则返回空指针。<br>\nchar *strpbrk(const char * s1, const char * s2);<br>\n 如果 s1 字符中包含 s2 字符串中的任意字符，该函数返回指向 s1 字符串首位置的指针；如果在 s1 字符串中未找到任何 s2 字符串中的字符，则返回空字符。<br>\nchar *strrchr(const char * s, char c);<br>\n 该函数返回 s 字符串中 c 字符的最后一次出现的位置（末尾的空字符也是字符串的一部分，所以在查找范围内）。如果未找到 c 字符，则返回空指针。<br>\nchar *strstr(const char * s1, const char * s2);<br>\n 该函数返回指向 s1 字符串中 s2 字符串出现的首位置。如果在 s1 中没有找到 s2，则返回空指针。<br>\nsize_t strlen(const char * s);<br>\n 该函数返回 s 字符串中的字符数，不包括末尾的空字符。<br>\n请注意，那些使用 const 关键字的函数原型表明，函数不会更改字符串。例如，下面的函数原型：<br>\nchar *strcpy(char * restrict s1, const char * restrict s2);<br>\n 表明不能更改 s2 指向的字符串，至少不能在 strcpy () 函数中更改。但是可以更改 s1 指向的字符串。这样做很合理，因为 s1 是目标字符串，要改变，而 s2 是源字符串，不能更改。</p>\n<p>关键字 restrict 将在第 12 章中介绍，该关键字限制了函数参数的用法。例如，不能把字符串拷贝给本身。</p>\n<p>第 5 章中讨论过，size_t 类型是 sizeof 运算符返回的类型。C 规定 sizeof 运算符返回一个整数类型，但是并未指定是哪种整数类型，所以 size_t 在一个系统中可以是 unsigned int，而在另一个系统中可以是 unsigned long。string.h 头文件针对特定系统定义了 size_t，或者参考其他有 size_t 定义的头文件。</p>\n<p>前面提到过，参考资料 V 中列出了 string.h 系列的所有函数。除提供 ANSI 标准要求的函数外，许多实现还提供一些其他函数。应查看你所使用的 C 实现文档，了解可以使用哪些函数。</p>\n</blockquote>\n<h4 id=\"字符串示例字符串排序\"><a class=\"markdownIt-Anchor\" href=\"#字符串示例字符串排序\">#</a> 字符串示例：字符串排序</h4>\n<blockquote>\n<pre><code><pre class=\"line-numbers language-none\"><code class=\"language-none\">#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n#define SIZE 81        /* 限制字符串长度，包括 \\0 */\n#define LIM 20         /* 可读入的最多行数 */\n#define HALT \"\"        /* 空字符串停止输入 */\nvoid stsrt(char *strings [], int num);    /* 字符串排序函数 */\nchar * s_gets(char * st, int n);\n\nint main(void)\n{\n     char input[LIM][SIZE];       /* 存储输入的数组        */\n     char *ptstr[LIM];            /* 内含指针变量的数组    */\n     int ct = 0;                  /* 输入计数             */\n     int k;                       /* 输出计数             */\n\n printf(\"Input up to %d lines, and I will sort them.\\n\", LIM);\n printf(\"To stop, press the Enter key at a line's start.\\n\");\n while (ct &lt; LIM &amp;&amp; s_gets(input[ct], SIZE) != NULL\n           &amp;&amp; input[ct][0] != '\\0')\n {\n      ptstr[ct] = input[ct];  /* 设置指针指向字符串    */\n      ct++;\n }\n stsrt(ptstr, ct);            /* 字符串排序函数        */\n puts(\"\\nHere's the sorted list:\\n\");\n for (k = 0; k &lt; ct; k++)\n      puts(ptstr[k]);         /* 排序后的指针          */\n\n return 0;\n\n}\n\n/* 字符串-指针-排序函数 */\nvoid stsrt(char *strings [], int num)\n{\n     char *temp;\n     int top, seek;\n\n for (top = 0; top &lt; num - 1; top++)\n      for (seek = top + 1; seek &lt; num; seek++)\n           if (strcmp(strings[top], strings[seek]) &gt; 0)\n           {\n                temp = strings[top];\n                strings[top] = strings[seek];\n                strings[seek] = temp;\n           }\n\n}\n\nchar * s_gets(char * st, int n)\n{\n     char * ret_val;\n     int i = 0;\n\n ret_val = fgets(st, n, stdin);\n if (ret_val)\n {\n      while (st[i] != '\\n' &amp;&amp; st[i] != '\\0')\n           i++;\n      if (st[i] == '\\n')\n           st[i] = '\\0';\n      else \n           while (getchar() != '\\n')\n                   continue;\n }\n return ret_val;\n\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</code></pre>\n</blockquote>\n<h5 id=\"排序指针而非字符串\"><a class=\"markdownIt-Anchor\" href=\"#排序指针而非字符串\">#</a> 排序指针而非字符串</h5>\n<p><a href=\"https://imgtu.com/i/oYWJcq\"><img src=\"https://z3.ax1x.com/2021/12/02/oYWJcq.png\" alt=\"字符串排序\"></a></p>\n<h5 id=\"选择排序算法\"><a class=\"markdownIt-Anchor\" href=\"#选择排序算法\">#</a> 选择排序算法</h5>\n<p>用 for 循环依次将首元素与每个元素进行比较，排在前面的值就被放置在首元素的位置上，这样可以挑选出排序排在最前面的值；然后依靠外层 for 循环从第二个位置开始，寻找第二靠前的值，依次类推</p>\n<h4 id=\"ctypeh字符函数和字符串\"><a class=\"markdownIt-Anchor\" href=\"#ctypeh字符函数和字符串\">#</a> ctype.h 字符函数和字符串</h4>\n<p>ToUpper () 函数，利用 toupper () 函数处理字符串中的每个字符，将整个字符串转化为大写</p>\n<blockquote>\n<pre><code>void ToUpper(char * str)\n{\n     while (*str)\n     {\n          *str = toupper(*str);\n          str++;\n     }\n}\n</code></pre>\n</blockquote>\n<p>PunctCount () 函数，利用 inpunct ()[被用来检测是不是标点符号] 统计字符串中的标点符号个数</p>\n<blockquote>\n<pre><code>int PunctCount(const char * str)\n{\n     int ct = 0;\n     while (*str)\n     {\n          if (ispunct(*str))\n               ct++;\n          str++;\n     }\n\n     return ct;\n\n}\n</code></pre>\n</blockquote>\n<p>isslower () 函数用户检查是否为小写 如果是 则判定为真 如果不是 则判定为假<br>\n while (*str) 用来循环处理 str 指向地址中的每一个字符，直到遇到空字符，因为空字符的编码值是 0 判定为假 循环结束</p>\n<h4 id=\"命令行参数\"><a class=\"markdownIt-Anchor\" href=\"#命令行参数\">#</a> 命令行参数</h4>\n<p><strong>命令行</strong>是在命令环境中，用户为运行程序输入命令的行</p>\n<blockquote>\n<pre><code>/* repeat.c -- 带参数的 main() */\n#include &lt;stdio.h&gt;\nint main(int argc, char *argv [])\n{\n     int count;\n\n     printf(\"The command line has %d arguments:\\n\", argc - 1);\n     for (count = 1; count &lt; argc; count++)\n          printf(\"%d: %s\\n\", count, argv[count]);\n     printf(\"\\n\");\n                                                                \n     return 0;\n}\n</code></pre>\n</blockquote>\n<p>下面是输出结果</p>\n<blockquote>\n<p>C&gt;repeat Resistance is futile<br>\nThe command line has 3 argumentcs:<br>\n1: Resistance<br>\n2: is<br>\n3: futile</p>\n</blockquote>\n<p>C 编译器允许没有参数或者有两个参数<br>\n当有两个参数的时候</p>\n<ul>\n<li>第一个参数是命令行中的字符串数量 通常用 argc 表示 (argumenet count 参数计数)<strong> 系统用空格表示一个字符串的结束和下一个字符串的开始</strong></li>\n<li>第二个参数是存储命令行字符串的地址的数组 (argv 表示表示参数值 argument value)</li>\n</ul>\n<blockquote>\n<p>argv [0] 指向 repeat （对大部分系统而言）<br>\nargv [1] 指向 Resistance<br>\nargv [2] 指向 is<br>\nargv [3] 指向 futile</p>\n</blockquote>\n<p>main 中形参的声明和其他函数函数中形参的声明一样</p>\n<h4 id=\"把字符串转化为数字\"><a class=\"markdownIt-Anchor\" href=\"#把字符串转化为数字\">#</a> 把字符串转化为数字</h4>\n<p>printf () 利用 % d 等转化说明可以把数字转化为字符串显示在屏幕上<br>\n scanf () 可以将命令行中输入的字符串转化为数值<br>\n atoi (用于把字母数字 (以字符串存储数字) 转化为整数 (int 类型)) 该函数接受一个字符串作为参数，返回相应的整数值</p>\n<ul>\n<li>如果字符串仅以整数开头 后面不是整数 那么 atoi 就会将其中的整数提取出来并且进行转化</li>\n<li>如果命令行参数不是数字，atoi () 函数返回 0 (在 C 标准中这种情况下是未定义的)</li>\n</ul>\n<blockquote>\n<pre><code>/* hello.c -- 把命令行参数转换为数字 */\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nint main(int argc, char *argv [])\n{\n     int i, times;\n\n     if (argc &lt; 2 || (times = atoi(argv[1])) &lt; 1)\n          printf(\"Usage: %s positive-number\\n\", argv[0]);\n     else\n          for (i = 0; i &lt; times; i++)\n               puts(\"Hello, good looking!\");\n     return 0;\n}\n</code></pre>\n</blockquote>\n<p>输出示例</p>\n<blockquote>\n<p>$ hello 3<br>\nHello, good looking!<br>\nHello, good looking!<br>\nHello, good looking!</p>\n</blockquote>\n<p>该程序中包含了 stdlib.h 头文件，该头文件中包含了</p>\n<ul>\n<li>atio (): 将字符串转化为 int 类型的值</li>\n<li>atof (): 将字符串转化为 double 类型的值</li>\n<li>atol (): 将字符串转化为 long 类型的值</li>\n</ul>\n<p>ANSI C 提供了一套更加智能的函数</p>\n<ul>\n<li>strtol (): 把字符串转化为 long 类型的值</li>\n<li>strtoul (): 把字符串转化为 unsigned long 类型的值</li>\n<li>strtod (): 把字符串转化为 double 类型的值</li>\n</ul>\n<p>这些函数会识别和报告字符串的首字母是否为数字<br>\n同时 strtol 和 stroul 还可以指定数字的进制</p>\n<p>strtol 函数原型:</p>\n<blockquote>\n<pre><code>long strtol(const char * restrict nptr, char ** restrict endptr, int base);\n</code></pre>\n</blockquote>\n<ul>\n<li>\n<p>nptr 是指向待转换字符串的指针</p>\n</li>\n<li>\n<p>endptr 是一个指针的地址，该指针被设置为标识输入数字结束字符的地址</p>\n</li>\n<li>\n<p>base 表示以什么进制写入数字</p>\n</li>\n<li>\n<p>strtol 最多可以转换三十六进制</p>\n</li>\n<li>\n<p>strtoul 函数与 strtol 函数类似，但是它是吧字符串转化为无符号值</p>\n</li>\n<li>\n<p>strtod () 只以十进制转化，他只需要两个参数</p>\n</li>\n</ul>\n<h4 id=\"字符串关键概念\"><a class=\"markdownIt-Anchor\" href=\"#字符串关键概念\">#</a> 字符串关键概念</h4>\n<p>我们用言语互动，实用文本的例子不计其数，C 程序通过字符串的方式处理他们</p>\n<p><strong>字符串</strong>，无论是右字符数组，指针，还是字符串常量来标识，都存储为包含字符编码的一系列字节并且最终以空字符串结尾；C 语言提供一系列库函数处理字符串，查找字符串并分析他们<br>\n字符串中用 strcmp () 来代替关系运算符<br>\n比较字符串的时候应该使用 strcpy () 和 strncpy () 代替赋值运算符把字符串赋给字符数组</p>\n<h4 id=\"字符串小结\"><a class=\"markdownIt-Anchor\" href=\"#字符串小结\">#</a> 字符串小结</h4>\n<ol>\n<li>C 字符串是一系列 char 类型的字符，以空字符 (’\\0’) 结尾.</li>\n</ol>\n<p>字符串可以存储在字符数组中 字符串还可以用<strong>字符串常量</strong>来表示 (括在双引号中), 空字符由编译器提供 自行加在字符数组的末尾处</p>\n<p>存储字符串时 字符串的存储长度要比字符串长度多 1, 因为多了一个空字符 (’\\0’), 但是 strlen () 计算长度的时候不用考虑空字符的问题 因为 strlen () 函数会自动减去空字符</p>\n<ol start=\"2\">\n<li>字符串常量又叫做<strong>字符串字面量</strong>，用于初始化字符数组，按照上文所说，字符串的存储长度要比字符串的长度大 1, 所以为了容纳末尾的空字符，数组的大小至少要比容纳的数组长度多 1</li>\n<li>函数使用指向字符串首字符的指针来表示待处理的字符串，对应的实际参数分为三种，但是传递的都是首字符的地址，一般来说 没有必要传递字符串的长度 因为函数可以通过字符串末尾存储的空字符来确定字符串的结束\n<ul>\n<li>数组名</li>\n<li>指针变量</li>\n<li>用双引号括起来的字符串</li>\n</ul>\n</li>\n<li>fgets () 函数获取一行输入，puts () 和 fputs () 函数显示一行的输出，他们是 stdio.h 头文件中的函数 用于代替已被弃用的 gets ()</li>\n<li>C 库中有多个<strong>字符串处理函数</strong>，在 ANSI C 中，这些函数都声明在 string.h 文件中，C 库中海油许多<strong>字符处理函数</strong>，声明在 ctype.h 文件中</li>\n<li>给 main () 函数提供两个合适的形式参数，可以让程序访问命令行参数.\n<ul>\n<li>第一个参数通常是 int 类型的 <code>argc</code> , 代表命令行的单词数量</li>\n<li>第二个参数是一个指向数组的指针 <code>argv</code>  数组内含指向 char 的指针，每个指向 char 的指针都指向一个命令行参数字符串 <code>argv[0]</code>  指向命令名称， <code>argv[1]</code>  指向第一个命令行参数以此类推</li>\n</ul>\n</li>\n<li><code>atoi()</code> , <code>atol()</code> , <code>atof()</code>  函数把字符串形式的数组分别转化为 int,long 和 double 类型的数字， <code>strtol()</code> , <code>strtoul</code> , <code>strtod()</code>  函数把字符串形式的数字分别转化为 long,unsigned long 和 double 类型的数字.</li>\n</ol>\n<h3 id=\"第十二章-存储类别链接和内存管理\"><a class=\"markdownIt-Anchor\" href=\"#第十二章-存储类别链接和内存管理\">#</a> 第十二章 存储类别，链接和内存管理</h3>\n<p>程序员指定变量的作用域和生命期，实现对程序的控制 合理利用内存存储数据时设计程序的一个要点</p>\n<h4 id=\"121存储类别\"><a class=\"markdownIt-Anchor\" href=\"#121存储类别\">#</a> 12.1 存储类别</h4>\n<p>C 语言提供不同的<strong>存储类别</strong>在内存中存储数据</p>\n<ul>\n<li>\n<p>对象：数据存储在内存中 被存储的每个值都占有一定的物理内存，这样的一块内存叫做对象</p>\n</li>\n<li>\n<p>标识符：一个名称，用来指定特定对象的内容</p>\n<blockquote>\n<p>int entity = 3   其中 entity 就是一个标识符</p>\n</blockquote>\n</li>\n<li>\n<p>左值：指向对象的表达式</p>\n<blockquote>\n<p>int * pt = &amp;entity</p>\n</blockquote>\n<p>pt 是一个标识符，他指定了一个存储<strong>地址</strong>的对象 所以他是左值</p>\n<p>*pt 不是一个标识符 因为他不是一个名称，然而他指向了一个对象 所以他是左值</p>\n</li>\n<li>\n<p>存储期：对象在内存中保留了多长时间</p>\n</li>\n<li>\n<p>作用域：描述程序中可访问标识符的区域</p>\n</li>\n</ul>\n<h5 id=\"1211作用域\"><a class=\"markdownIt-Anchor\" href=\"#1211作用域\">#</a> 12.1.1 作用域</h5>\n<p>作用域包括:</p>\n<ol>\n<li>块级作用域</li>\n<li>函数作用域</li>\n<li>函数原型作用域</li>\n<li>文件作用域</li>\n</ol>\n<ul>\n<li>\n<p><strong>块</strong>：一对花括号括起来的代码区域 (对于 <code>for</code> , <code>while</code> , <code>do while</code> , <code>if</code>  等等判别式也包括在块以内)(函数的形参也包括在整个函数的块作用域内)</p>\n<p>定义在块中的变量具有<strong>块作用域</strong>，块作用域变量的课件范围时从定义出到包含该定义的块的末尾</p>\n</li>\n<li>\n<p><strong>函数作用域</strong>仅用于 <code>goto</code>  语句的标签，即使一个标签首次出现在函数的内层快中 它的作用域也会延伸到整个函数</p>\n</li>\n<li>\n<p>函数作用域和块作用域的<strong>区别</strong>：函数作用域作用于整个函数，而块作用域仅仅作用域方括号内</p>\n</li>\n<li>\n<p><strong>函数原型作用域</strong>用于函数原型的形参名，作用范围是从形参定义处到原型声明结束，所以编译器只关心函数原型中的形参的类型 而对于形参名可有可无 因为即使有 也无法和函数定义中的形参名匹配<strong>只有在变长数组中 形参名才有用</strong></p>\n</li>\n<li>\n<p>变量的定义在函数外面的具有<strong>文件作用域</strong>，从定义处到文件的结尾都可见</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"token keyword\">int</span> units <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">{</span>\n\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这里变量 units 具有文件作用域 (更准确是为外部链接文件作用域)</p>\n<p><strong>文件作用域</strong>也被称为<strong>全局变量</strong></p>\n</li>\n<li>\n<p><strong>翻译单元</strong>：编译器把源代码文件和所有的头文件都看成是一个包含信息的单独文件，这个文件被称为<strong>翻译单元</strong>，若程序由多个源代码文件组成，那么该程序也将由多个翻译单元组成，每个翻译单元均对应一个源代码文件和它所包含的文件</p>\n</li>\n</ul>\n<h5 id=\"1212链接\"><a class=\"markdownIt-Anchor\" href=\"#1212链接\">#</a> 12.1.2 链接</h5>\n<p>C 变量有三种链接属性</p>\n<ol>\n<li>外部链接</li>\n<li>内部链接</li>\n<li>无链接</li>\n</ol>\n<ul>\n<li><strong>无链接变量</strong>：具有块作用域，函数作用域或函数原型作用域的变量，这些变量属于定义他们的块，函数或原型私有</li>\n<li><strong>外链接变量</strong>：可以在多文件程序中使用，简称为<strong>全局作用域</strong>或者<strong>程序作用域</strong></li>\n<li><strong>内部链接变量</strong>：只能在一个<u>翻译单元</u>(一个源代码文件和它所包含的头文件) 中使用   简称为<strong>内部链接文件作用域</strong></li>\n</ul>\n<p>具有文件作用域的变量可以是外部链接，也可以是内部链接</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> giant <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//文件作用域,外部链接(统一程序的所有文件都可以使用)</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> dodgerts <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//文件作用域 内部链接(文件私有),使用关键字static</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n   <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"1213存储期\"><a class=\"markdownIt-Anchor\" href=\"#1213存储期\">#</a> 12.1.3 存储期</h5>\n<p><strong>存储期</strong>：描述了通过这些标识符访问的对象的生存期</p>\n<p>C 语言有 4 种存储期:</p>\n<ol>\n<li>\n<p>** 静态存储期:** 在程序的执行期间一直存在，<strong> 文件作用域变量</strong> (外部链接和内部链接) 具有静态存储期</p>\n</li>\n<li>\n<p><strong>线程存储期</strong>：用于并发程序设计，程序执行被分为多个线程，具有线程存储器的对象从被声明时到线程结束一直存在，以关键字 <code>_Thread_local</code>  声明一个对象时，每个线程都获得该变量的私有备份</p>\n</li>\n<li>\n<p><strong>自动存储期</strong>:<strong> 块作用域变量</strong>通常都具有自动存储期，程序进入定义这些变量的块时，为这些变量分配内存，当退出这个块时，释放刚才为变量分配的内存</p>\n<ul>\n<li>\n<p>变长数组的存储期从声明处到块的末尾，而不是从块的开始处到快的末尾</p>\n</li>\n<li>\n<p>目前来说局部变量都是自动类别 (在使用函数时候被创建，在离开函数时被销毁)</p>\n</li>\n<li>\n<p>块作用域变量也能具有静态存储器，把变量声明在块中，并且在声明前面加上关键字 static, 但是只有在执行函数的时候程序才能使用 ct 访问它所指向的对象 (但是，该函数可以给其他函数提供该存储区的地址以便间接访问该对象，例如通过指针形参或返回值)</p>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>动态分配存储期</strong>：后续介绍</p>\n</li>\n</ol>\n<p><a href=\"https://imgtu.com/i/o5YBqg\"><img src=\"https://s1.ax1x.com/2021/12/10/o5YBqg.png\" alt=\"5种存储类别\"></a></p>\n<h5 id=\"1214自动变量\"><a class=\"markdownIt-Anchor\" href=\"#1214自动变量\">#</a> 12.1.4 自动变量</h5>\n<p>自动存储类别的变量具有自动存储期，块作用域且无链接，默认情况下，声明在块或函数头中的任何变量都属于自动存储类别，也可以显式使用关键字 <code>auto</code></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">auto</span> <span class=\"token keyword\">int</span> plox\n        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>auto 是<strong>存储类别说明符</strong></p>\n<ul>\n<li><strong>块作用域和无链接</strong>意味着只有在变量定义所在块中才能通过变量名访问该变量</li>\n<li><strong>自动存储期</strong>意味着，程序进入变量声明所在块时变量存在，程序在退出该块时变量小时</li>\n<li>当内层块中的变量和外层块中的变量同名时，内层块会<strong>隐藏</strong>外层块的定义，但是在离开内层块后外层变量的作用域又回到了原来的作用域</li>\n</ul>\n<ol>\n<li>\n<p>没有括号的块</p>\n<p>作为循环或者 <code>if</code>  语句的一部分，即使不适用花括号，也是一个块.</p>\n</li>\n<li>\n<p>自动变量的初始化</p>\n<p><strong>自动变量</strong>不会初始化，除非显式初始化它</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> repid<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p><code>repid</code>  变量的值不会是 0, 而是之前占用分配给 <code>repid</code>  的空间中的任意值 (前提是存在)</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> rush<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> rance <span class=\"token operator\">=</span> <span class=\"token number\">5</span> <span class=\"token operator\">*</span> ruth<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token comment\">// 可以如此定义(前提是ruth已经在前面定义过了)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<h5 id=\"1215寄存器变量\"><a class=\"markdownIt-Anchor\" href=\"#1215寄存器变量\">#</a> 12.1.5 寄存器变量</h5>\n<p>变量通常存储在计算器内存中，<strong> 如果幸运的话</strong>，寄存器变量存在 CPU 的寄存器中，或者存在最快的可用内存中，与普通变量相比，访问和处理这些变量的速度更快.</p>\n<p>但是由于寄存器变量存储在寄存器而非内存中，所以无法获取寄存器变量的地址</p>\n<p>绝大多数方面寄存器变量和自动变量一样</p>\n<p>使用 <code>register</code>  可以声明寄存器变量</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">register</span> <span class=\"token keyword\">int</span> quick<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>声明变量为 <code>register</code>  更像是一种<strong>请求</strong>，编译器胡根据寄存器或者最快可用内存的数量衡量你的请求，或者直接忽略你的请求，这种情况下寄存器变量就编程了普通的自动变量，即使是这样，<strong> 仍然不能对该变量使用地址运算符</strong></p>\n<p>可声明为 <code>register</code>  的数据类型有限，比如处理器中的寄存器可能没有足够大的空间来存储 <code>double</code>  类型的值</p>\n<h5 id=\"1216块作用域的静态变量\"><a class=\"markdownIt-Anchor\" href=\"#1216块作用域的静态变量\">#</a> 12.1.6 块作用域的静态变量</h5>\n<p><strong>静态变量</strong>：变量在内存中不变</p>\n<p>具有文件作用域的变量自动具有静态存储期</p>\n<p>使用 <code>static</code>  可以创建具有静态存储期，块作用域的局部变，但是无法在函数的形参中使用<u>static</u></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">trystat</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">;</span>\n\n     <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> count <span class=\"token operator\">&lt;=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> count<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Here comes iteration %d:\\n\"</span><span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">trystat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n\n     <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">trystat</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">int</span> fade <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> stay <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fade = %d and stay = %d\\n\"</span><span class=\"token punctuation\">,</span> fade<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> stay<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>输出结果:</p>\n<blockquote>\n<p>Here coms iteration 1:</p>\n<p>fade = 1 and stay = 1</p>\n<p>Here coms iteration 2:</p>\n<p>fade = 1 and stay = 2</p>\n<p>Here coms iteration 3:</p>\n<p>fade = 1 and stay = 3</p>\n</blockquote>\n<p>显然可见静态变量 <code>stay</code>  保存了他被递增后的值，而 <code>fade</code>  变量每次都是 <code>1</code></p>\n<p>这表明了初始化的不同，每次调用 <code>trystat()</code>  都会初始化 <code>fade</code>  但是 <code>stay</code>  只在编译 <code>trystat()</code>  初始化一次</p>\n<p>如果未显式初始化<strong>静态变量</strong>，他们会被初始化为 0</p>\n<p>事实上静态变量和外部变量在程序被载入内存时已经执行完毕了，把这条声明放在 <code>trystat()</code>  函数中是为了告诉编译器只有 <code>trystat()</code>  函数才能看到该变量.</p>\n<p>具有块作用域的静态变量也被称为<strong>静态局部变量</strong>，一些老的 C 语言文献称为<strong>内部静态存储类别</strong></p>\n<h5 id=\"1217外部链接的静态变量\"><a class=\"markdownIt-Anchor\" href=\"#1217外部链接的静态变量\">#</a> 12.1.7 外部链接的静态变量</h5>\n<p><strong>外部链接的静态变量</strong>具有</p>\n<ol>\n<li>文件作用域</li>\n<li>外部链接</li>\n<li>静态存储期</li>\n</ol>\n<p>该类别被称为<strong>外部存储类别</strong>，属于该类别的的变量称为<strong>外部变量</strong></p>\n<p>变量的定义性声明放在所有函数的外面便创建了外部变量，为了指出该函数使用了外部变量可以在函数中使用关键字 <code>extern</code>  再次声明</p>\n<p>如果一个源代码文件使用的外部变量定义在另一个源代码文件中，则必须用 <code>extern</code>  在该文件中声明该变量</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> Errupt<span class=\"token punctuation\">;</span>                <span class=\"token comment\">/* 外部定义的变量 */</span>\n<span class=\"token keyword\">double</span> Up<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\">/* 外部定义的数组 */</span>\n<span class=\"token keyword\">extern</span> <span class=\"token keyword\">char</span> Coal<span class=\"token punctuation\">;</span>          <span class=\"token comment\">/* 如果Coal被定义在另一个文件， */</span>\n                           <span class=\"token comment\">/*则必须这样声明*/</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> Errupt<span class=\"token punctuation\">;</span>     <span class=\"token comment\">/* 可选的声明*/</span>\n\n     <span class=\"token keyword\">extern</span> <span class=\"token keyword\">double</span> Up<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">/* 可选的声明*/</span>\n     <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>事实上 <code>main()</code>  函数声明中的 <code>extern</code>  声明完全可以省略因为外部链接具有文件作用域，他们出现在那里，仅仅是为了说明 <code>main()</code>  函数要使用这两个变量</p>\n<p>如果在 <code>main()</code>  函数中创建变量时，去除了 <code>extern</code> , 那么他将会创建一个自动变量，简而言之就是和之前一样，会隐藏其同名外部变量，并且此自动变量只在这个函数内有效</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> Hocus<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">magic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> Hocus<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 声明Hocus，默认是自动变量</span>\n     <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> Pocus<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">magic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">auto</span> <span class=\"token keyword\">int</span> Hocus<span class=\"token punctuation\">;</span> <span class=\"token comment\">//把局部变量Hocus显式声明为自动变量</span>\n     <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>外部变量的生命周期</strong>：在程序运行时一直存在，因为他们不会在某个函数返回后就消失</p>\n<ol>\n<li>\n<p>初始化外部变量</p>\n<p>外部变量也可以被显示初始化，如果未初始化外部变量，<strong> 那么他们会被自动初始化为 <code>0</code> </strong>, 并且外部变量只能使用<strong>常量表达式</strong>初始化.</p>\n</li>\n<li>\n<p>使用外部变量</p>\n<p>外部变量具有文件作用域，所以在一个翻译单元中都可以使用</p>\n</li>\n<li>\n<p>外部名称</p>\n<p>外部变量名比局部变量名的规则严格，因为外部变量名还要遵循局部环境规则，所受的限制更多</p>\n</li>\n<li>\n<p>定义和声明</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> tern <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* tern被定义 */</span>\n<span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> tern<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 使用在别处定义的tern */</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p><code>tern</code>  被声明了两次，第一次声明为变量预留了存储空间，该声明构成了<strong>变量的定义</strong>，第二次声明只告诉编译器使用之前已创建的 <code>tern</code>  变量，所以这不是定义</p>\n<ul>\n<li>第一次声明被称为<strong>定义式声明</strong></li>\n<li>第二次声明被称为<strong>引用式声明</strong></li>\n<li>关键字 <code>extern</code>  表明该声明不是定义，因为他只是编译器去别处查询其定义，所以，<u>不要使用关键字 <code>extern</code>  创建外部定义，只用它来引用现有的外部定义</u></li>\n<li>外部变量只能<strong>初始化</strong>一次，且必须在定义该变量时进行</li>\n</ul>\n</li>\n</ol>\n<h5 id=\"1218内部链接的静态变量\"><a class=\"markdownIt-Anchor\" href=\"#1218内部链接的静态变量\">#</a> 12.1.8 内部链接的静态变量</h5>\n<p>该存储类别的变量具有</p>\n<ol>\n<li>静态存储期</li>\n<li>文件作用域</li>\n<li>内部链接</li>\n</ol>\n<p>在所有函数的外部，用存储类别说明符 <code>static</code>  定义的变量具有这种存储类别</p>\n<p>内部链接的静态变量只能用于<strong>同一个文件中</strong>的函数，与外部链接相同可以使用存储类别说明符 <code>extern</code> , 在函数中重复声明任何具有文件作用域的变量，因为 <code>extern</code>  表明变量的定义在别处</p>\n<h5 id=\"1219多文件\"><a class=\"markdownIt-Anchor\" href=\"#1219多文件\">#</a> 12.1.9 多文件</h5>\n<p>复杂的 C 程序通常由多个单独的源代码文件组成，这些文件可能要<strong>共享</strong>一个外部变量，C 通过在一个文件中进行<strong>定义式声明</strong>，然后在其他文件中进行<strong>引用式声明</strong>来是实现<strong>共享</strong></p>\n<p>除了一个<strong>定义式声明</strong>，其他声明要是用 <code>extern</code>  关键字，并且只有定义式声明才能<strong>初始化常量</strong></p>\n<p>如果外部变量定义在一个文件中，其他文件在使用该变量之前必须要用 <code>extern</code>  关键字声明它</p>\n<h5 id=\"12110-存储类别说明符\"><a class=\"markdownIt-Anchor\" href=\"#12110-存储类别说明符\">#</a> 12.1.10 存储类别说明符</h5>\n<p>C 语言中有六个关键字作为存储类别说明符 <code>auto</code> , <code>register</code> , <code>static</code> , <code>extern</code> , <code>_Thread_local</code> , <code>typedef</code></p>\n<ol>\n<li><code>auto</code> : 只能用于<strong>块作用域</strong>的变量声明中，表明变量是自动存储期，可以省略因为块中声明的变量本身就有自动存储期。</li>\n<li><code>register</code> : 只能用于<strong>块作用域</strong>的变量声明中，它把变量归为寄存器存储类别，<strong> 请求</strong>以最快速度访问该变量，<u>此存储类别的变量的地址不可被获取</u></li>\n<li><code>static</code> : 表明该说明符创建的对象具有<strong>静态存储期</strong>\n<ul>\n<li>如果 <code>static</code>  用于文件作用域声明，作用域受限于该文件.</li>\n<li>如果 <code>static</code>  用于块作用声明，作用域受限于该块，在程序运行时，其值会一直保存，但是只有在执行块内的代码时，才能通过标识符访问.</li>\n<li>区分外部链接和内部链接就需要靠 <code>static</code>  进行声明</li>\n<li>块作用域的静态变量无链接，文件作用域的静态变量具有内部链接</li>\n</ul>\n</li>\n<li><code>extern</code> : 表示声明的变量定义在别处.</li>\n</ol>\n<h5 id=\"12111存储类别和函数\"><a class=\"markdownIt-Anchor\" href=\"#12111存储类别和函数\">#</a> 12.1.11 存储类别和函数</h5>\n<p>函数也有存储类别，可以分为<strong>外部函数 (默认)<strong> 和</strong>内部函数</strong>，C99 增加了第三种类别–<strong>内联函数</strong></p>\n<p>外部函数可以被其他文件的函数访问，但是静态函数只能用于其定义所在的文件.</p>\n<p>同样以 <code>static</code>  存储类别说明符创建的函数属于特定模块私有，这样有效避免了名称冲突的问题</p>\n<p><u>通常的做法是</u>: 用 <code>extern</code>  关键字声明定义在其他文件中的函数，</p>\n<p>除非使用 <code>static</code>  关键字，否则一般函数声明都默认为 <code>extern</code></p>\n<h5 id=\"12112存储类别的选择\"><a class=\"markdownIt-Anchor\" href=\"#12112存储类别的选择\">#</a> 12.1.12 存储类别的选择</h5>\n<p>绝大多数存储类别的选择都是自动存储类别</p>\n<p>保护性程序设计的<strong>黄金法则</strong>是:\"按需知道\" 原则，尽量在函数内部解决该函数的任务，只共享那些需要共享的变量 \\</p>\n<h4 id=\"122随机数函数和静态变量\"><a class=\"markdownIt-Anchor\" href=\"#122随机数函数和静态变量\">#</a> 12.2 随机数函数和静态变量</h4>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"hello.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h&gt;</span></span>\n<span class=\"token keyword\">extern</span> <span class=\"token keyword\">void</span> <span class=\"token function\">srand1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> <span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">unsigned</span> seed<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"please enter your choice for seed. \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%u\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>seed<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">srand1</span><span class=\"token punctuation\">(</span>seed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> count <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> count<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">rand1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Please enter next seed(q to quit): \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Done \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">//hello.h 文件</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> next <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//next 仅仅能够给rand1() 和srand1()函数使用</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">rand1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    next <span class=\"token operator\">=</span> next <span class=\"token operator\">*</span> <span class=\"token number\">1103515245</span> <span class=\"token operator\">+</span> <span class=\"token number\">123456</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>next <span class=\"token operator\">/</span> <span class=\"token number\">65536</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">32768</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">srand1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> seed<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    next <span class=\"token operator\">=</span> seed<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"123掷骰子\"><a class=\"markdownIt-Anchor\" href=\"#123掷骰子\">#</a> 12.3 掷骰子</h4>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">//manydice.c</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;time.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"hello.h\"</span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> dice<span class=\"token punctuation\">,</span> roll<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> sides<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> status<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">srand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter the number of sides per dice,0 to stop \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>sides<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> sides <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"How many dice? \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>status <span class=\"token operator\">=</span> <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>dice<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>status <span class=\"token operator\">==</span> <span class=\"token constant\">EOF</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 退出循环 */</span>\n            <span class=\"token keyword\">else</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"You should have entered an integer.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" Let's begin again.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 处理错误的输入 */</span>\n                <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"How many sides? Enter 0 to stop.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 进入循环的下一轮迭代 */</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        roll <span class=\"token operator\">=</span> <span class=\"token function\">roll_n_dice</span><span class=\"token punctuation\">(</span>dice<span class=\"token punctuation\">,</span> sides<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"You have rolled a %d using %d %d-sided dice.\\n\"</span><span class=\"token punctuation\">,</span>\n               roll<span class=\"token punctuation\">,</span> dice<span class=\"token punctuation\">,</span> sides<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"How many sides? Enter 0 to stop.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The rollem() function was called %d times.\\n\"</span><span class=\"token punctuation\">,</span>\n           roll_count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 使用外部变量 */</span>\n\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GOOD FORTUNE TO YOU!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// hello.h</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h&gt;</span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">roll_n_dice</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> dice<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> sides<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> roll_count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">rollem</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> sides<span class=\"token punctuation\">)</span> <span class=\"token comment\">//计算骰子掷出的点数</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> roll<span class=\"token punctuation\">;</span>\n\n    roll <span class=\"token operator\">=</span> <span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> sides <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">++</span>roll_count<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> roll<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">roll_n_dice</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> dice<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> sides<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> d<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> total <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sides <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Need at least 2 sides. \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dice <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Need at lease 1 dice. \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>d <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> d <span class=\"token operator\">&lt;</span> dice<span class=\"token punctuation\">;</span> d<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        total <span class=\"token operator\">+=</span> <span class=\"token function\">rollem</span><span class=\"token punctuation\">(</span>sides<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> total<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"124分配内存malloc和free\"><a class=\"markdownIt-Anchor\" href=\"#124分配内存malloc和free\">#</a> 12.4 分配内存:malloc () 和 free ()</h4>\n<p>C 语言可以通过库函数分配和管理内存</p>\n<p><code>malloc()</code> : 其接受所需的字节数，然后找到合适的空间内存块， <code>malloc()</code>  不会为其赋名，但是他会返回动态分配内存块的<strong>首字节的地址</strong>，可以把该地址付给指针，并使用指针访问这块内存。如果 <code>malloc()</code>  分配内存失败，将返回<strong>空指针</strong></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">double</span> <span class=\"token operator\">*</span> ptd<span class=\"token punctuation\">;</span>\nptd <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>此代码表示使用 <code>malloc()</code>  创建了一个可以存储 30 个 double 类型的数组，除了请求内存之外，还通过 ptd 指针记录了这块内存的位置</p>\n<p>需要注意的是 <code>molloc()</code>  的返回值是首字节的地址，并且指针指向类型为 <code>void</code> , 而指针指向 <code>void</code>  的指针赋给任意类型的指针都不用考虑类型匹配的问题，所以 <code>ptd</code>  指向的是首元素，也就是一个 <code>double</code>  类型，也就是说 <code>ptd</code>  可以当做<strong>数组名</strong>来使用</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">ptd <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//可以如此声明动态数组</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><code>free()</code> : 用于释放内存，参数是需要释放的内存的地址</p>\n<p>通常 <code>malloc()</code>  和 <code>free()</code>  配套使用， <code>free()</code>  的参数是 <code>malloc()</code>  返回的值，由此可以实现使用函数时 <code>malloc()</code>  分配内存，函数结束时 <code>free()</code>  释放内存，并且不能用 <code>free()</code>  释放通过其他方式分配的内存</p>\n<p>可以调用 <code>exit()</code>  函数结束程序，其原型在 <code>stdlib.h</code>  中。标准提供了两个返回值以保证在所有操作系统中都能正常工作</p>\n<ol>\n<li>EXIT_SUCCESS 表示普通的程序结束</li>\n<li>EXIT_FAILURE 表示程序异常终止</li>\n</ol>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">/* dyn_arr.c -- 动态分配数组 */</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h&gt;</span> <span class=\"token comment\">/* 为 malloc()、free()提供原型 */</span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">double</span> <span class=\"token operator\">*</span> ptd<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">int</span> max<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">int</span> number<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"What is the maximum number of type double entries?\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>max<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Number not correctly entered -- bye.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>EXIT_FAILURE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n     ptd <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>max <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ptd <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Memory allocation failed. Goodbye.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>EXIT_FAILURE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n     <span class=\"token comment\">/* ptd 现在指向有max个元素的数组 */</span>\n     <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter the values (q to quit):\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> max <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lf\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>ptd<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n          <span class=\"token operator\">++</span>i<span class=\"token punctuation\">;</span>\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Here are your %d entries:\\n\"</span><span class=\"token punctuation\">,</span> number <span class=\"token operator\">=</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> number<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%7.2f \"</span><span class=\"token punctuation\">,</span> ptd<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">%</span> <span class=\"token number\">7</span> <span class=\"token operator\">==</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span>\n               <span class=\"token function\">putchar</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">%</span> <span class=\"token number\">7</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n          <span class=\"token function\">putchar</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Done.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>ptd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"1241free的重要性\"><a class=\"markdownIt-Anchor\" href=\"#1241free的重要性\">#</a> 12.4.1free () 的重要性</h5>\n<p>静态内存的数量在编译时候是<strong>固定</strong>的，在<strong>程序运行期间</strong>不会改变，如果忘记添加 <code>free()</code>  可能导致<strong>内存遗漏</strong>问题，也就是在程序运行完之前就耗尽了所有的内存</p>\n<h5 id=\"1242calloc函数\"><a class=\"markdownIt-Anchor\" href=\"#1242calloc函数\">#</a> 12.4.2 <code>calloc()</code>  函数</h5>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">long</span> <span class=\"token operator\">*</span> newmem<span class=\"token punctuation\">;</span>\nnewmem <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">calloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><code>calloc()</code>  函数接受两个参数，第一个参数是所需的存储单元<strong>数量</strong>，第 2 个参数是存储单元的<strong>大小</strong> (以<strong>字节</strong>为单位)</p>\n<p><code>calloc()</code>  把块中所有的位都设置为 <code>0</code>  (有点不懂)</p>\n<p><code>free()</code>  函数也可以用来释放 calloc () 分配的内存</p>\n<h5 id=\"1243-动态内存分配和变长数组\"><a class=\"markdownIt-Anchor\" href=\"#1243-动态内存分配和变长数组\">#</a> 12.4.3 动态内存分配和变长数组</h5>\n<p>变长数组是<strong>自动存储类型</strong>，程序在离开变长数组定义所在的块时，变长数组占用的内存空间会被自动释放</p>\n<p><code>malloc()</code>  创建的数组不必局限在一个函数内访问，可以被调函数创建一个数组并返回指针，供主调函数访问，然后主调函数在末尾用 free 释放之前被调函数分配的内存.</p>\n<p>多维数组使用变长数组更方便，也可以使用 <code>malloc()</code>  创建二维数组</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> ar2<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// n×m的变长数组（VLA）</span>\n<span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span> p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// C99之前的写法</span>\n<span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span> p3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 要求支持变长数组</span>\np2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">*</span> <span class=\"token number\">6</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// n×6 数组</span>\np3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">*</span> m <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// n×m 数组（要求支持变长数组）</span>\nar2<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> p2<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"1244-存储类别和动态内存分配\"><a class=\"markdownIt-Anchor\" href=\"#1244-存储类别和动态内存分配\">#</a> 12.4.4 存储类别和动态内存分配</h5>\n<p>程序把可用的内存分为 3 部分:</p>\n<ul>\n<li>一部分供具有外部链接，内部链接和无链接的静态变量使用</li>\n<li>一部分供自动变量使用</li>\n<li>一部分供动态内存分配</li>\n</ul>\n<p>内存使用:</p>\n<ul>\n<li>静态存储类别所用的内存数量在编译时确定，在程序开始执行的时候被创建，在程序结束的时候被销毁.</li>\n<li>自动存储类别的变量在程序进入变量定义所在块时存在，在程序离开块时消失，随着程序调用函数和函数结束，自动边浪的内存数量也相应地增加和减少</li>\n<li>动态内存在调用 <code>malloc()</code>  或相关函数时存在，在调用 <code>free()</code>  后释放，这部分的内存由程序员管理，所以内存块可以在一个函数中创建，在另一个函数中销毁</li>\n</ul>\n<p><strong>程序把静态对象，自动对象和动态分配的动向存储在不同的区域</strong></p>\n<h4 id=\"125ansi-c类型限定符\"><a class=\"markdownIt-Anchor\" href=\"#125ansi-c类型限定符\">#</a> 12.5ANSI C 类型限定符</h4>\n<p>C90 增加了两个属性：恒常性 (constancy) 和易变性 (volatility), 分别使用关键字 <code>const</code>  和 <code>volatile</code>  来恒明</p>\n<p>C99 标准新增了第三个限定符:  <code>restrict</code></p>\n<p>C11 标准新增了第四个限定符:  <code>_Atomic</code></p>\n<p>在一条声明中可以多次使用同一个限定符，多余的限定符将被忽略</p>\n<h5 id=\"1251-const类型限定符\"><a class=\"markdownIt-Anchor\" href=\"#1251-const类型限定符\">#</a> 12.5.1  <code>const</code>  类型限定符</h5>\n<p>以 <code>const</code>  关键字声明的对象，其值不能通过赋值，但是可以初始化 <code>const</code>  变量</p>\n<ol>\n<li>\n<p>在指针和形参声明中使用 <code>const</code></p>\n<p><strong>注意区分 const 限定是指针本身还是指针指向的值</strong></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// pf指针指向的值不能更改但是指针指向的对象可以更改</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span> pf<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* pf 指向一个float类型的const值 */</span>\n<span class=\"token comment\">// pt指针指向的对象不能更改,但是指向对象的值可以更改</span>\n<span class=\"token keyword\">float</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">const</span> pt<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* pt 是一个const指针 */</span>\n\n<span class=\"token keyword\">float</span> <span class=\"token keyword\">const</span> <span class=\"token operator\">*</span> pfc<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 与const float * pfc;相同</span>\n<span class=\"token comment\">//既不能修改ptr指针指向的对象的值,也不能修改ptr指针的指向的对象</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">const</span> ptr<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li><code>const</code>  放在 * 左侧的任意位置，限定了指针指向的数据不能改变</li>\n<li><code>const</code>  放在 * 的右侧，限定了指针本身不能改变</li>\n</ul>\n<p><code>const</code>  关键字的常见用法是声明为函数形参的指针，函数不会改变传入地址指向的数据</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> array<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> limit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>\n<p>对全局数据使用 <code>const</code></p>\n<p>在文件间共享 <code>const</code>  数据可以采取两个策略</p>\n<ul>\n<li>在一个文件中使用定义式声明，在其他文件中使用引用式声明 ( <code>extern</code>  关键字)</li>\n<li>把 <code>const</code>  变量放在一个头文件中，然后在其他文件中包含该头文件（这样做必须在头文件中用关键字 <code>static</code>  声明全局 <code>const</code>  变量，否则会导致每一个文件中都有一个相同标识符的定义式声明)</li>\n</ul>\n</li>\n</ol>\n<h5 id=\"1252-volatile类型限定符\"><a class=\"markdownIt-Anchor\" href=\"#1252-volatile类型限定符\">#</a> 12.5.2  <code>volatile</code>  类型限定符</h5>\n<p><code>volatile</code>  限定符告知计算机，代理可以改变该变量的值，通常被用于硬件地址以及在其他程序或同时运行的线程中共享数据</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">volatile</span> <span class=\"token keyword\">int</span> loc1<span class=\"token punctuation\">;</span>      <span class=\"token comment\">/* loc1 是一个易变的位置 */</span>\n<span class=\"token keyword\">volatile</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span> ploc<span class=\"token punctuation\">;</span>    <span class=\"token comment\">/* ploc 是一个指向易变的位置的指针 */</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><code>volatile</code>  可以在一定程度上节约程序运行的时间</p>\n<p>高速缓存的概念:</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">val1 <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/* 一些不使用 x 的代码*/</span>\nval2 <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>编译器会注意到使用了两次 <code>X</code> , 但并未改变它的值，编译器会把 X 的值临时存储在寄存器中，然后在 <code>val2</code>  需要使用 <code>X</code>  时，才从寄存器 (<strong>不是从原始内存位置上</strong>) 中读取 x 的值，以此来节约时间，这个过程被称为<strong>高速缓存</strong>.</p>\n<p>如果以上两条语句之间改变了 X 的值，就不能这样优化</p>\n<p>所以如果没有 <code>volatile</code>  关键字，编译器就不知道这种事情是否会发生，为了安全起见，编译器就不会进行高速缓存，这是 ANSI 之前的情况</p>\n<p>现在如果声明中没有 <code>volatile</code>  关键字，编译器会假定变量的值在使用过程中不变，然后再尝试优化代码</p>\n<h5 id=\"1253-restrict类型限定符\"><a class=\"markdownIt-Anchor\" href=\"#1253-restrict类型限定符\">#</a> 12.5.3  <code>restrict</code>  类型限定符</h5>\n<p><code>restrict</code>  只能用于<strong>指针</strong>，表明该指针是访问数据对象的唯一且初始的方式</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> ar<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span> restrict restar <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span> par <span class=\"token operator\">=</span> ar<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// restar使用了关键字restrict,而其他变量没有</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> n <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> n<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     par<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n     restar<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n     ar<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">*=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n     par<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n     restar<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>这里 <code>restar</code>  可以将两个赋值语句合并在一起为 <code>restar[n] +=8</code>  而 <code>par</code>  不能，因为 <code>par</code>  中间通过 <code>ar</code>  改变了数据的值</li>\n<li>如果没有使用关键字 <code>restrict</code> , 编译器就必须假设最坏的情况 (即，在两次使用指针之间，其他的标识符可能改变了数据), 如果使用了 <code>restrict</code>  关键字，编译器就可以选择捷径优化计算</li>\n</ul>\n<p><code>restrict</code>  关键字有两个读者</p>\n<p>一个是编译器，该关键字告诉编译器可以自由假定一些优化方案</p>\n<p>另一个读者是用户，该关键字告诉用户要使用满足 <code>restrict</code>  要求的参数</p>\n<h5 id=\"1254-_atomic类型限定符c11\"><a class=\"markdownIt-Anchor\" href=\"#1254-_atomic类型限定符c11\">#</a> 12.5.4 _Atomic 类型限定符 (C11)</h5>\n<p>并发程序设计把程序执行分成可以同时执行的多个线程，C11 通过包含可选的头文件 <code>stdatomic.h</code>  和 <code>threads.h</code> , 提供了一些可以选择的管理方法，(当一个线程对一个原子类型的对象执行原子操作时，其他线程不能访问该对象)</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> hogs<span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 普通声明</span>\nhogs <span class=\"token operator\">=</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 普通赋值</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>可以替换成</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">_Atomic</span> <span class=\"token keyword\">int</span> hogs<span class=\"token punctuation\">;</span>           <span class=\"token comment\">// hogs 是一个原子类型的变量</span>\n<span class=\"token function\">atomic_store</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>hogs<span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// stdatomic.h中的宏</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h5 id=\"1255-旧关键字的新位置\"><a class=\"markdownIt-Anchor\" href=\"#1255-旧关键字的新位置\">#</a> 12.5.5 旧关键字的新位置</h5>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">ofmouth</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">const</span> a1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span> restrict a2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 以前的风格</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ofmouth</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a1<span class=\"token punctuation\">[</span><span class=\"token keyword\">const</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> a2<span class=\"token punctuation\">[</span>restrict<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 新的等价语法 C99允许</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><code>static</code>  的情况不同，新标准为 <code>static</code>  引入了一种与以前用法不相关的新用法，<strong> 新用法告知编译器如何使用形式参数</strong></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">double</span> <span class=\"token function\">stick</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> ar<span class=\"token punctuation\">[</span><span class=\"token keyword\">static</span> <span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><code>static</code>  的这种用法表明，函数调用中的实际参数应该是一个指向数组首元素的指针，并且该数组至少有 20 个元素</p>\n<h3 id=\"13-文件输入输出\"><a class=\"markdownIt-Anchor\" href=\"#13-文件输入输出\">#</a> 13 文件输入输出</h3>\n<h4 id=\"131-与文件进行通信\"><a class=\"markdownIt-Anchor\" href=\"#131-与文件进行通信\">#</a> 13.1 与文件进行通信</h4>\n<p>使用特殊的<strong> I/O 函数</strong>程序从文件中读取信息或者把信息写入文件</p>\n<h5 id=\"1311文件是什么\"><a class=\"markdownIt-Anchor\" href=\"#1311文件是什么\">#</a> 13.1.1 文件是什么</h5>\n<p><strong>文件</strong>：在磁盘或固态硬盘上的一段已命名的存储区</p>\n<p>C 把文件看作是一系列连续的字节，每个字节都能被单独读取.</p>\n<p>C 提供两种文件模式：文本模式和二进制模式</p>\n<h5 id=\"1312-文本模式和二进制模式\"><a class=\"markdownIt-Anchor\" href=\"#1312-文本模式和二进制模式\">#</a> 13.1.2 文本模式和二进制模式</h5>\n<ul>\n<li><strong>C</strong> 和<strong> UNIX</strong> 在文本中都用 <code>\\n</code>  表示换行</li>\n<li><strong>OS X Macintosh</strong> 文件用 <code>\\r</code>  表示新的一行</li>\n<li><strong>MS-DOS</strong> 文件用 <code>\\r\\n</code>  组合小时新的一行</li>\n</ul>\n<p>C 提供两种访问文件的途径:<strong> 二进制模式</strong>和<strong>文本模式</strong></p>\n<ol>\n<li>\n<p>二进制模式</p>\n<p>在二进制模式中，程序可以访问文件的每个字节</p>\n</li>\n<li>\n<p>文本模式</p>\n<p>在文本模式中，程序所见的内容和文件的实际内容不同，程序以<strong>文本模式</strong>读取文件时，把本地环境表示的行末尾或文件结尾映射为 C 模式 (例如：在<strong> MS-DOS</strong> 平台<u>读取文件时</u>, 把 <code>\\r\\n</code>  转换成 <code>\\n</code> ,<u>写入文件</u>时候，把 <code>\\n</code>  转换成 <code>\\r\\n</code> )</p>\n<p><a href=\"https://imgtu.com/i/T9tQSA\"><img src=\"https://s4.ax1x.com/2021/12/16/T9tQSA.png\" alt=\"T9tQSA.png\"></a></p>\n</li>\n</ol>\n<h5 id=\"1313-io的级别\"><a class=\"markdownIt-Anchor\" href=\"#1313-io的级别\">#</a> 13.1.3 I/O 的级别</h5>\n<p>I/O 的两个级别 (处理文件访问的两个级别)</p>\n<ul>\n<li><strong>底层 I\\O</strong>: 使用操作系统提供的基本 I\\O 服务</li>\n<li><strong>标准高级 I\\O</strong>: 使用 C 库的标准包和 <code>stdio.h</code>  头文件定义</li>\n</ul>\n<p>因为无法保证所有的操作系统都是用相同的底层 I\\O 模型，C 标准只支持标准的 I\\O 包</p>\n<h5 id=\"1314-标准文件\"><a class=\"markdownIt-Anchor\" href=\"#1314-标准文件\">#</a> 13.1.4 标准文件</h5>\n<p>C 程序会自动打开 3 个文件</p>\n<ol>\n<li>\n<p><strong>标准输入</strong>:</p>\n<p>系统的普通输入设备，通常为键盘</p>\n<p>为程序提供输入，是 <code>getchar()</code>  和 <code>scanf()</code>  使用的文件</p>\n</li>\n<li>\n<p><strong>标准输出</strong>:</p>\n<p>系统的普通输出设备，通常为显示屏</p>\n<p>程序通常输出到标准输出，是 <code>putchar()</code> , <code>puts()</code>  和 <code>printf()</code>  使用的文件</p>\n</li>\n<li>\n<p><strong>标准错误输出</strong>：系统的普通输出设备，通常为显示屏</p>\n</li>\n</ol>\n<h4 id=\"132-标准io\"><a class=\"markdownIt-Anchor\" href=\"#132-标准io\">#</a> 13.2 标准 I\\O</h4>\n<p>标准 I\\O 有多个好处</p>\n<ol>\n<li>有专门的函数简化了处理不同的 I/O 问题</li>\n<li>输入和输出都是<strong>缓冲</strong>的，极大地提高了数据传输效率，系统可以检查缓冲区中的字节</li>\n</ol>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">/* count.c -- 使用标准 I/O */</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h&gt;</span>    <span class=\"token comment\">// 提供 exit()的原型</span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">int</span> ch<span class=\"token punctuation\">;</span>            <span class=\"token comment\">// 读取文件时，存储每个字符的地方</span>\n     FILE <span class=\"token operator\">*</span>fp<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// “文件指针”</span>\n     <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>argc <span class=\"token operator\">!=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Usage: %s filename\\n\"</span><span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>EXIT_FAILURE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>fp <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"r\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Can't open %s\\n\"</span><span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>EXIT_FAILURE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n     <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ch <span class=\"token operator\">=</span> <span class=\"token function\">getc</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token constant\">EOF</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">putc</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">,</span> <span class=\"token constant\">stdout</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 与 putchar(ch); 相同</span>\n          count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n     <span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"File %s has %lu characters\\n\"</span><span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"1321-检查命令行参数\"><a class=\"markdownIt-Anchor\" href=\"#1321-检查命令行参数\">#</a> 13.2.1 检查命令行参数</h5>\n<p>第一个 <code>if</code>  语句先检查 <code>argc</code>  的值，查看是否有命令行参数</p>\n<p><code>argc[0]</code>  是该程序的名称</p>\n<p><code>exit()</code>  和 <code>return</code>  的区别</p>\n<ol>\n<li><code>exit()</code>  中用 <code>0</code>  或者宏 <code>EXIT_SUCCESS</code>  表示成功结束程序，用宏 <code>EXIT_FAILURE</code>  表述结束程序失败，这些宏和 <code>exit()</code>  原型都位于 <code>stdlib.h</code>  文件中</li>\n<li>如果在递归中， <code>exit()</code>  会结束整个程序，而 <code>return</code>  只会把控制权交给上一级递归，直到最初的一级， <code>return</code>  结束程序</li>\n<li>在其他函数中，调用 <code>exit()</code>  也能结束整个程序</li>\n</ol>\n<h5 id=\"1322-fopen函数\"><a class=\"markdownIt-Anchor\" href=\"#1322-fopen函数\">#</a> 13.2.2  <code>fopen()</code>  函数</h5>\n<p>函数声明在 <code>stdio.h</code>  中，以 <code>fopen()</code>  函数打开文件</p>\n<ul>\n<li>第一个参数是待打开文件的名称</li>\n<li>第二个参数是一个字符串，指定打开文件的模式</li>\n</ul>\n<p><a href=\"https://imgtu.com/i/T9aVe0\"><img src=\"https://s4.ax1x.com/2021/12/16/T9aVe0.png\" alt=\"T9aVe0.png\"></a></p>\n<blockquote>\n<p>如果使用任何一种 W 模式打开一个现有文件，该文件内容都会被删除，以便程序在一个空白文件中开始操作。然而，如果使用带 X 字母的任何一种模式，将无法打开一个现有文件</p>\n</blockquote>\n<p>程序成功打开文件后， <code>fopen()</code>  将返回<strong>文件指针</strong>，其他 I\\O 函数可以使用这个指针指定该文件.</p>\n<p><strong>文件指针</strong>的类型是指向 <code>FILE</code>  的指针， <code>FILE</code>  是一个定义在 <code>stdio.h</code>  中的派生类型.</p>\n<p><code>fp</code>  并不指向实际的文件，它指向一个包含文件信息的数据对象，其中包含操作文件的 I/O 函数所用的缓冲区信息</p>\n<h5 id=\"1323-getc和putc函数\"><a class=\"markdownIt-Anchor\" href=\"#1323-getc和putc函数\">#</a> 13.2.3  <code>getc()</code>  和 <code>putc()</code>  函数</h5>\n<p><code>getc()</code>  和 <code>putc()</code>  函数与 <code>getchar()</code>  和 <code>putchar()</code>  函数类似，不同的是要告诉 <code>getc()</code>  和 <code>putc()</code>  函数使用的文件</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">ch <span class=\"token operator\">=</span> <span class=\"token function\">getc</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 从fp指定的文件中获取一个字符</span>\n<span class=\"token function\">putc</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">,</span> fpout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//把字符ch放入FILE指针fpout指定的文件中</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<ul>\n<li><code>putc()</code> : 第一个参数是待写的字符，第二个参数是文件指针，若果第二个参数是 <code>stdout</code> , 则将会打印在屏幕上</li>\n</ul>\n<h5 id=\"1324-文件结尾\"><a class=\"markdownIt-Anchor\" href=\"#1324-文件结尾\">#</a> 13.2.4 文件结尾</h5>\n<p><code>getc()</code>  函数在读到文件末尾时会返回一个特殊值 <code>EOF</code></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span> ch <span class=\"token operator\">=</span> <span class=\"token function\">getc</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token constant\">EOF</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token function\">putchar</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//处理输入</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>使用如此函数，检查是否读到文件末尾</p>\n<h5 id=\"1325-fclose函数\"><a class=\"markdownIt-Anchor\" href=\"#1325-fclose函数\">#</a> 13.2.5  <code>fclose()</code>  函数</h5>\n<p><code>fclose()</code>  函数关闭指定的文件，必要时刷新缓冲区</p>\n<p>如果关闭成功 函数返回 <code>0</code>  否则返回 <code>EOF</code>  (磁盘已满，移动硬盘被溢出，出现 I\\O 错误)</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error in closing file %s\\n\"</span><span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h5 id=\"1326-指向标准文件的指针\"><a class=\"markdownIt-Anchor\" href=\"#1326-指向标准文件的指针\">#</a> 13.2.6 指向标准文件的指针</h5>\n<p><code>stdio.h</code>  头文件把 3 个文件指针和 3 个标准文件相关联</p>\n<p><a href=\"https://imgtu.com/i/T9BgDs\"><img src=\"https://s4.ax1x.com/2021/12/16/T9BgDs.png\" alt=\"T9BgDs.png\"></a></p>\n<h4 id=\"133-一个简单的文件压缩程序\"><a class=\"markdownIt-Anchor\" href=\"#133-一个简单的文件压缩程序\">#</a> 13.3 一个简单的文件压缩程序</h4>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h&gt;</span>    <span class=\"token comment\">// 提供 exit()的原型</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h&gt;</span>    <span class=\"token comment\">// 提供 strcpy()、strcat()的原型</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">LEN</span> <span class=\"token expression\"><span class=\"token number\">40</span></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     FILE  <span class=\"token operator\">*</span>in<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>out<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 声明两个指向 FILE 的指针</span>\n     <span class=\"token keyword\">int</span> ch<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span>LEN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 存储输出文件名</span>\n     <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token comment\">// 检查命令行参数</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>argc <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Usage: %s filename\\n\"</span><span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>EXIT_FAILURE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n     <span class=\"token comment\">// 设置输入</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>in <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"r\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"I couldn't open the file \\\"%s\\\"\\n\"</span><span class=\"token punctuation\">,</span>\n                    argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>EXIT_FAILURE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n     <span class=\"token comment\">// 设置输出</span>\n     <span class=\"token function\">strncpy</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> LEN <span class=\"token operator\">-</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 拷贝文件名</span>\n     name<span class=\"token punctuation\">[</span>LEN <span class=\"token operator\">-</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">strcat</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> <span class=\"token string\">\".red\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                <span class=\"token comment\">// 在文件名后添加.red</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>out <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> <span class=\"token string\">\"w\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>                       <span class=\"token comment\">// 以写模式打开文件</span>\n          <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Can't create output file.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n     <span class=\"token comment\">// 拷贝数据</span>\n     <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ch <span class=\"token operator\">=</span> <span class=\"token function\">getc</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token constant\">EOF</span><span class=\"token punctuation\">)</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count<span class=\"token operator\">++</span> <span class=\"token operator\">%</span> <span class=\"token number\">3</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n               <span class=\"token function\">putc</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">,</span> out<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 打印3个字符中的第1个字符</span>\n     <span class=\"token comment\">// 收尾工作</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> <span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n          <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Error in closing files\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"134-文件io\"><a class=\"markdownIt-Anchor\" href=\"#134-文件io\">#</a> 13.4 文件 I/O</h4>\n<h5 id=\"1341-fprintf和fscanf函数\"><a class=\"markdownIt-Anchor\" href=\"#1341-fprintf和fscanf函数\">#</a> 13.4.1  <code>fprintf()</code>  和 ``fscanf ()` 函数</h5>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MAX</span> <span class=\"token expression\"><span class=\"token number\">41</span></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     FILE <span class=\"token operator\">*</span>fp<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">char</span> words<span class=\"token punctuation\">[</span>MAX<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>fp <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wordy\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"a+\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stdout</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Can't open \\\"wordy\\\" file.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>EXIT_FAILURE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n\n     <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter words to add to the file; press the #\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key at the beginning of a line to terminate.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token function\">fscanf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stdin</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"%40s\"</span><span class=\"token punctuation\">,</span> words<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>words<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'#'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n          <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">,</span> <span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> words<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"File contents:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">rewind</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">/* 返回到文件开始处 */</span>\n     <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">fscanf</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">,</span> <span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span> words<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n          <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span>words<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Done!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n          <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Error closing file\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><code>remind()</code>  函数让文件回到开头处</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stdout</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Can't open \\\"wordy\\\" file.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//将字符串输出到stout标准输出中 也就是电脑屏幕</span>\n<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">,</span> <span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> words<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//将words中的数据输出到fp中</span>\n<span class=\"token function\">fscanf</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">,</span> <span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span> words<span class=\"token punctuation\">)</span> <span class=\"token comment\">//读取fp中的输入</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"1342-fgets和fputs函数\"><a class=\"markdownIt-Anchor\" href=\"#1342-fgets和fputs函数\">#</a> 13.4.2  <code>fgets()</code>  和 <code>fputs()</code>  函数</h5>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">fgets</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> STLEN<span class=\"token punctuation\">,</span> fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ol>\n<li>\n<p><code>fgets()</code>  函数接受 3 个参数</p>\n<ul>\n<li>第一个参数表示存储输入位置的地址</li>\n<li>第二个参数表示待输入字符串的长度</li>\n<li>第三个参数是文件指针，指定待读取的文件</li>\n</ul>\n<p>简单来说：就是从第三个参数读取小于第二个参数数量的字符然后存储在第一个参数 (地址) 指向的数组中</p>\n<p><code>fgets()</code>  函数读取到第一个换行符后面，或者文件末尾，或者 <code>STLEN-1</code>  同时会在末尾添加一个<strong>空字符</strong>，使其成为一个字符串</p>\n<p><code>fgets()</code>  函数遇到文件末尾也就是 <code>EOF</code>  会返回 <code>NULL</code>  值，如果没有遇到就返回第一个参数的地址</p>\n</li>\n<li>\n<p><code>fputs()</code>  接受两个参数</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">fputs</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li>第一个是字符串的地址</li>\n<li>第二个是文件指针</li>\n</ul>\n<p>简单来说：就是把第一个地址指向的数组中的字符串数据打印到第二个参数文件指针所指向的文件中</p>\n</li>\n</ol>\n<h4 id=\"135-随即访问fseek和ftell\"><a class=\"markdownIt-Anchor\" href=\"#135-随即访问fseek和ftell\">#</a> 13.5 随即访问: <code>fseek()</code>  和 <code>ftell()</code></h4>\n<p>有了 <code>fseek()</code>  函数，便可以把文件看作数组，在 <code>fopen()</code>  打开的文件中直接移动到任意字节处</p>\n<p><code>fseek()</code>  有 3 个参数，返回 <code>Int</code>  类型的值</p>\n<p><code>ftell()</code>  函数返回 <code>long</code>  类型的值</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">/* reverse.c -- 倒序显示文件的内容 */</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">CNTL_Z</span> <span class=\"token string\">'\\032'</span>        <span class=\"token comment\">/* DOS文本文件中的文件结尾标记 */</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SLEN</span> <span class=\"token expression\"><span class=\"token number\">81</span></span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">char</span> file<span class=\"token punctuation\">[</span>SLEN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">;</span>\n     FILE <span class=\"token operator\">*</span>fp<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">long</span> count<span class=\"token punctuation\">,</span> last<span class=\"token punctuation\">;</span>\n\n     <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter the name of the file to be processed:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%80s\"</span><span class=\"token punctuation\">,</span> file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>fp <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">,</span> <span class=\"token string\">\"rb\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>                                    <span class=\"token comment\">/* 只读模式    */</span>\n          <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"reverse can't open %s\\n\"</span><span class=\"token punctuation\">,</span> file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>EXIT_FAILURE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n\n     <span class=\"token function\">fseek</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">,</span> <span class=\"token number\">0L</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">SEEK_END</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                <span class=\"token comment\">/* 定位到文件末尾 */</span>\n     last <span class=\"token operator\">=</span> <span class=\"token function\">ftell</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">=</span> <span class=\"token number\">1L</span><span class=\"token punctuation\">;</span> count <span class=\"token operator\">&lt;=</span> last<span class=\"token punctuation\">;</span> count<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">fseek</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>count<span class=\"token punctuation\">,</span> <span class=\"token constant\">SEEK_END</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">/* 回退        */</span>\n          ch <span class=\"token operator\">=</span> <span class=\"token function\">getc</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ch <span class=\"token operator\">!=</span> CNTL_Z <span class=\"token operator\">&amp;&amp;</span> ch <span class=\"token operator\">!=</span> <span class=\"token string\">'\\r'</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">/* MS-DOS 文件 */</span>\n               <span class=\"token function\">putchar</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n     <span class=\"token function\">putchar</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"1351-fseek和ftell的工作原理\"><a class=\"markdownIt-Anchor\" href=\"#1351-fseek和ftell的工作原理\">#</a> 13.5.1  <code>fseek()</code>  和 <code>ftell()</code>  的工作原理</h5>\n<ol>\n<li><code>fseek()</code>\n<ul>\n<li>第一个参数是 <code>FILE</code>  指针，指向待查找的文件</li>\n<li>第二个参数是<strong>偏移量</strong>，表示从起始点开始要移动的距离，该参数必须是一个<strong> long</strong> 类型的值</li>\n<li>第三个参数是模式，确定起始点，在 <code>stdio.h</code>  头文件中规定</li>\n</ul>\n</li>\n</ol>\n<p><a href=\"https://imgtu.com/i/TFPX5T\"><img src=\"https://s4.ax1x.com/2021/12/17/TFPX5T.png\" alt=\"TFPX5T.png\"></a></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">//示例</span>\n<span class=\"token function\">fseek</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">,</span> <span class=\"token number\">0L</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">SEEK_SET</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 定位至文件开始处</span>\n<span class=\"token function\">fseek</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">,</span> <span class=\"token number\">10L</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">SEEK_SET</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 定位至文件中的第10个字节</span>\n<span class=\"token function\">fseek</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">,</span> <span class=\"token number\">2L</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">SEEK_CUR</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 从文件当前位置前移2个字节</span>\n<span class=\"token function\">fseek</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">,</span> <span class=\"token number\">0L</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">SEEK_END</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 定位至文件结尾</span>\n<span class=\"token function\">fseek</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">10L</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">SEEK_END</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 从文件结尾处回退10个字节</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>一切正常， <code>fseek()</code>  的返回值为 <code>0</code></li>\n<li>如果出现错误 (试图移动的距离超出文件的范围), 其返回值为 <code>-1</code></li>\n</ul>\n<ol start=\"2\">\n<li>\n<p><code>ftell()</code></p>\n<p>返回值是 <code>long</code> , 返回的是<strong>参数指向文件</strong>的当前位置距离文件开始处的字节数，定义在<strong> stdio.h</strong> 中</p>\n</li>\n</ol>\n<p>先用 <code>fseek()</code>  设置到文件末尾，然后用 <code>ftell()</code>  返回当前位置到文件开始位置的字节数就可以获得文件全部的字节数</p>\n<h5 id=\"1352-二进制模式和文本模式\"><a class=\"markdownIt-Anchor\" href=\"#1352-二进制模式和文本模式\">#</a> 13.5.2 二进制模式和文本模式</h5>\n<ol>\n<li><strong>MS-DOS</strong> 用 <code>\\r\\n</code>  组合表示文本文件换行\n<ul>\n<li>以文本模式打开时候，C 程序把 <code>/r/n</code>  看作是 <code>/n</code></li>\n<li>以二进制模式打开时，C 程序将两个程序分开来看，所以打印的时候，还需要有不打印 <code>/r</code>  的代码</li>\n</ul>\n</li>\n<li><code>fell()</code>  在文本模式和二进制模式中的工作方式不同\n<ul>\n<li>对于文本模式， <code>ftell()</code>  返回的值可以作为 <code>fseek()</code>  的第 2 个参数</li>\n<li>对于 MS-DOS, <code>ftell()</code>  返回的值把 <code>/r/n</code>  当做一个字节计数</li>\n</ul>\n</li>\n</ol>\n<h5 id=\"1353-可移植性\"><a class=\"markdownIt-Anchor\" href=\"#1353-可移植性\">#</a> 13.5.3 可移植性</h5>\n<ul>\n<li>在二进制模式中，实现不必支持 <code>SEEK_END</code>  模式</li>\n<li>在文本模式中，只有以下调用能保证其相应的行为</li>\n</ul>\n<p><a href=\"https://imgtu.com/i/TFkA3D\"><img src=\"https://s4.ax1x.com/2021/12/17/TFkA3D.png\" alt=\"TFkA3D.png\"></a></p>\n<h5 id=\"1354-fgetpos和fsetpos\"><a class=\"markdownIt-Anchor\" href=\"#1354-fgetpos和fsetpos\">#</a> 13.5.4  <code>fgetpos()</code>  和 <code>fsetpos()</code></h5>\n<p><code>fseek()</code>  和 <code>ftell()</code> , 规定为<strong> long</strong> 类型，可能由于文件过大导致不可用</p>\n<p>ANSI C 新增了两个处理较大文件的<strong>新定位函数</strong>: <code>fsetpos()</code>  和  <code>fgetpos()</code></p>\n<p>这两个函数使用一种新的类型 <code>fpos_t</code>  (file position type 文件定位类型)</p>\n<p><code>fpos_s</code>  类型的变量可以在文件中指定一个位置</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">fgetpos</span><span class=\"token punctuation\">(</span>FILE <span class=\"token operator\">*</span> restrict stream<span class=\"token punctuation\">,</span> <span class=\"token class-name\">fpos_t</span> <span class=\"token operator\">*</span> restrict pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//fgetpos()函数原型</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li>第一个参数表示文件指针</li>\n<li>第二个参数表示接受<strong>文件中的当前位置距文件开头的字节数</strong>的地址</li>\n<li>成功则返回 <code>0</code> , 失败则返回非 <code>0</code></li>\n</ul>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">fsetpos</span><span class=\"token punctuation\">(</span>FILE <span class=\"token operator\">*</span>stream<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token class-name\">fpos_t</span> <span class=\"token operator\">*</span>pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li>第一个参数表示文件指针</li>\n<li>第二个参数表示 <code>pos</code>  指向位置上的 <code>fpos_t</code>  类型值，来设置文件指针指向偏移值后指定的值</li>\n<li>成功则返回 0, 失败则返回非 0</li>\n</ul>\n<h4 id=\"136-标准io的机理\"><a class=\"markdownIt-Anchor\" href=\"#136-标准io的机理\">#</a> 13.6 标准 I/O 的机理</h4>\n<ol>\n<li>第一步</li>\n</ol>\n<p>使用 <code>fopen()</code>  打开文件，此时会创建一个缓冲区 (<u>读写模式</u>下创造两个缓冲区) 以及一个包含文件和缓冲区<strong>数据</strong>的<strong>结构</strong></p>\n<p>结构包含</p>\n<ul>\n<li>一个指定流中当前位置的文本位置指示器</li>\n<li>错误和文件结尾的指示器</li>\n<li>一个指向缓冲区开始处的指针</li>\n<li>一个文件标识符</li>\n<li>一个计数</li>\n</ul>\n<p><code>fopen()</code>  返回一个指向该结构的指针</p>\n<p>将该指针赋给一个指针变量 <code>fp</code> , 就称 <code>fopen()</code>  函数打开了一个流</p>\n<ul>\n<li>以文本模式打开该文件，就获得了一个文本流</li>\n<li>以二进制模式打开该文件，就获得了一个二进制流</li>\n</ul>\n<ol start=\"2\">\n<li>第二步</li>\n</ol>\n<p>调用一个输入函数 (一调用，文件中的缓冲大小数据块就被拷贝到缓冲区中)</p>\n<p>还要设置流中当前位置和拷贝进缓冲区的字节数</p>\n<p>所有输入函数都使用相同的缓冲区，所以调用任何一个函数都将从上一个函数停止调用的位置开始</p>\n<p>当输入函数读完缓冲区的所有字符后，会请求把下一个缓冲大小的数据块从文件中拷贝到该缓冲区中，以此来读取文件中的所有数据，直到文件结尾，返回 <code>EOF</code></p>\n<h4 id=\"137-其他标准io函数\"><a class=\"markdownIt-Anchor\" href=\"#137-其他标准io函数\">#</a> 13.7 其他标准 I/O 函数</h4>\n<h5 id=\"1371-int-ungetsint-c-file-fp函数\"><a class=\"markdownIt-Anchor\" href=\"#1371-int-ungetsint-c-file-fp函数\">#</a> 13.7.1  <code>int ungets(int c .FILE * fp)</code>  函数</h5>\n<p><code>int ungetc()</code>  函数把 <code>c</code>  指定 字符放回输入流中，如果把一个字符放回输入流中下次调用标准输入函数将读取该字符</p>\n<p><a href=\"https://imgtu.com/i/TFaoA1\"><img src=\"https://s4.ax1x.com/2021/12/17/TFaoA1.png\" alt=\"TFaoA1.png\"></a></p>\n<h5 id=\"1372-int-fflush函数\"><a class=\"markdownIt-Anchor\" href=\"#1372-int-fflush函数\">#</a> 13.7.2  <code>int fflush()</code>  函数</h5>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">fflush</span><span class=\"token punctuation\">(</span>FILE <span class=\"token operator\">*</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>调用 <code>fflush()</code>  函数<strong>刷新缓冲区</strong></p>\n<p>将缓冲区中所有的未写入数据都发送到 fp 指定的输出文件，如果 fp 是<strong>空指针</strong>，所有输出缓冲区都将被刷新</p>\n<p>在输入流中使用 <code>fflush()</code>  是未定义的</p>\n<h5 id=\"1373-int-setvbuf函数\"><a class=\"markdownIt-Anchor\" href=\"#1373-int-setvbuf函数\">#</a> 13.7.3  <code>int setvbuf()</code>  函数</h5>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">setvbuf</span><span class=\"token punctuation\">(</span>FILE <span class=\"token operator\">*</span> restrict fp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> restrict buf<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> mode<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>使用 <code>setvbuf()</code>  函数创建一个供标准 I/O 函数替换使用的缓冲区</p>\n<p>在打开文件后且未对流进行其他操作之前可以使用</p>\n<ul>\n<li><code>fp</code>  识别待处理的流</li>\n<li><code>buf</code>  指向待用的存储区，如果是 <code>NULL</code> , 函数会自己分配一个存储区</li>\n<li><code>size</code>  告诉数组 (存储区) 的大小</li>\n<li>mode 的选择\n<ol>\n<li><code>_IOFBF</code>  表示完全缓冲 (在缓冲区满时刷新)</li>\n<li><code>_IOLBF</code>  表示行缓冲，在缓冲区满时或写入一个换行符时刷新</li>\n<li><code>_IONBF</code>  表示无缓冲</li>\n</ol>\n</li>\n</ul>\n<p>如果操作成功，返回 <code>0</code> ; 操作失败，返回一个非 <code>0</code>  值</p>\n<h5 id=\"1374-二进制io-fread和fwrite\"><a class=\"markdownIt-Anchor\" href=\"#1374-二进制io-fread和fwrite\">#</a> 13.7.4 二进制 I/O:  <code>fread()</code>  和 <code>fwrite()</code></h5>\n<p><a href=\"https://imgtu.com/i/TFBcVJ\"><img src=\"https://s4.ax1x.com/2021/12/17/TFBcVJ.png\" alt=\"TFBcVJ.png\"></a></p>\n<p><code>fread()</code>  和 <code>fwrite</code>  以<strong>二进制</strong>处理数据</p>\n<h5 id=\"1375-size_t-fwrite函数\"><a class=\"markdownIt-Anchor\" href=\"#1375-size_t-fwrite函数\">#</a> 13.7.5  <code>size_t fwrite()</code>  函数</h5>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token class-name\">size_t</span> <span class=\"token function\">fwrite</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span> restrict ptr<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> size<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> nmemb<span class=\"token punctuation\">,</span>FILE <span class=\"token operator\">*</span> restrict fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li>ptr 是待写入数据块的地址</li>\n<li>size 表示数据块的大小</li>\n<li>nmemb 表示待写入数据块的数量</li>\n<li>fp 指定写入的文件</li>\n</ul>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// 保存一个为256字节的数据</span>\n<span class=\"token keyword\">char</span> buffer<span class=\"token punctuation\">[</span><span class=\"token number\">256</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">fwrite</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">,</span> <span class=\"token number\">256</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 保存一个内含10个double类型的数组</span>\n<span class=\"token keyword\">double</span> earnings<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">fwrite</span><span class=\"token punctuation\">(</span>earnings<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"1376-size_t-fread函数\"><a class=\"markdownIt-Anchor\" href=\"#1376-size_t-fread函数\">#</a> 13.7.6 size_t fread () 函数</h5>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token class-name\">size_t</span> <span class=\"token function\">fread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span> restrict ptr<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> size<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> nmemb<span class=\"token punctuation\">,</span>FILE <span class=\"token operator\">*</span> restrict fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>接受的参数和 <code>fwrite()</code>  的参数相同，该函数用于读取被 <code>fwrie()</code>  写入文件的数据</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">double</span> earnings<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">fread</span><span class=\"token punctuation\">(</span>earnings<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h5 id=\"1377-int-feoffile-fp和int-ferrorfile-fp函数\"><a class=\"markdownIt-Anchor\" href=\"#1377-int-feoffile-fp和int-ferrorfile-fp函数\">#</a> 13.7.7  <code>int feof(FILE * fp)</code>  和 <code>int ferror(FILE * fp)</code>  函数</h5>\n<p>标准输入函数读取到文件末尾时返回 <code>EOF</code> , 当读取到错误时，函数也返回 <code>EOF</code> .</p>\n<p><code>feof()</code>  和 <code>ferror()</code>  用于区分这两种情况</p>\n<p>当上一次输入调用检测到文件末尾时候， <code>feof()</code>  返回一个非零值，否则返回 <code>0</code></p>\n<p>当读写出现错误， <code>ferro()</code>  函数安徽一个非零值，否则返回 <code>0</code></p>\n<h5 id=\"1378-一个程序示例\"><a class=\"markdownIt-Anchor\" href=\"#1378-一个程序示例\">#</a> 13.7.8 一个程序示例</h5>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">/* append.c -- 把文件附加到另一个文件末尾 */</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">BUFSIZE</span> <span class=\"token expression\"><span class=\"token number\">4096</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SLEN</span> <span class=\"token expression\"><span class=\"token number\">81</span></span></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>FILE <span class=\"token operator\">*</span>source<span class=\"token punctuation\">,</span> FILE <span class=\"token operator\">*</span>dest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> <span class=\"token function\">s_gets</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> st<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     FILE <span class=\"token operator\">*</span>fa<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>fs<span class=\"token punctuation\">;</span>          <span class=\"token comment\">// fa 指向目标文件，fs 指向源文件</span>\n     <span class=\"token keyword\">int</span> files <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// 附加的文件数量</span>\n     <span class=\"token keyword\">char</span> file_app<span class=\"token punctuation\">[</span>SLEN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 目标文件名</span>\n     <span class=\"token keyword\">char</span> file_src<span class=\"token punctuation\">[</span>SLEN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 源文件名</span>\n     <span class=\"token keyword\">int</span> ch<span class=\"token punctuation\">;</span>\n\n     <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter name of destination file:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">s_gets</span><span class=\"token punctuation\">(</span>file_app<span class=\"token punctuation\">,</span> SLEN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>fa <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span>file_app<span class=\"token punctuation\">,</span> <span class=\"token string\">\"a+\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Can't open %s\\n\"</span><span class=\"token punctuation\">,</span> file_app<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>EXIT_FAILURE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">setvbuf</span><span class=\"token punctuation\">(</span>fa<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> _IOFBF<span class=\"token punctuation\">,</span> BUFSIZE<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">fputs</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Can't create output buffer\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">stderr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>EXIT_FAILURE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n     <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter name of first source file (empty line to quit):\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">s_gets</span><span class=\"token punctuation\">(</span>file_src<span class=\"token punctuation\">,</span> SLEN<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> file_src<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>file_src<span class=\"token punctuation\">,</span> file_app<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n               <span class=\"token function\">fputs</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Can't append file to itself\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">stderr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>fs <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span>file_src<span class=\"token punctuation\">,</span> <span class=\"token string\">\"r\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n               <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Can't open %s\\n\"</span><span class=\"token punctuation\">,</span> file_src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">else</span>\n          <span class=\"token punctuation\">{</span>\n               <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">setvbuf</span><span class=\"token punctuation\">(</span>fs<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> _IOFBF<span class=\"token punctuation\">,</span> BUFSIZE<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n               <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">fputs</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Can't create input buffer\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">stderr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n               <span class=\"token punctuation\">}</span>\n               <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>fs<span class=\"token punctuation\">,</span> fa<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n               <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">ferror</span><span class=\"token punctuation\">(</span>fs<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Error in reading file %s.\\n\"</span><span class=\"token punctuation\">,</span>\n                              file_src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n               <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">ferror</span><span class=\"token punctuation\">(</span>fa<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Error in writing file %s.\\n\"</span><span class=\"token punctuation\">,</span>\n                              file_app<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n               <span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span>fs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n               files<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n               <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"File %s appended.\\n\"</span><span class=\"token punctuation\">,</span> file_src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n               <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Next file (empty line to quit):\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n     <span class=\"token punctuation\">}</span>\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Done appending. %d files appended.\\n\"</span><span class=\"token punctuation\">,</span> files<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">rewind</span><span class=\"token punctuation\">(</span>fa<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s contents:\\n\"</span><span class=\"token punctuation\">,</span> file_app<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ch <span class=\"token operator\">=</span> <span class=\"token function\">getc</span><span class=\"token punctuation\">(</span>fa<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token constant\">EOF</span><span class=\"token punctuation\">)</span>\n          <span class=\"token function\">putchar</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Done displaying.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span>fa<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>FILE <span class=\"token operator\">*</span>source<span class=\"token punctuation\">,</span> FILE <span class=\"token operator\">*</span>dest<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token class-name\">size_t</span> bytes<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">static</span> <span class=\"token keyword\">char</span> temp<span class=\"token punctuation\">[</span>BUFSIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 只分配一次</span>\n\n     <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>bytes <span class=\"token operator\">=</span> <span class=\"token function\">fread</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> BUFSIZE<span class=\"token punctuation\">,</span> source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n          <span class=\"token function\">fwrite</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> bytes<span class=\"token punctuation\">,</span> dest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> <span class=\"token function\">s_gets</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> st<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> ret_val<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> find<span class=\"token punctuation\">;</span>\n\n     ret_val <span class=\"token operator\">=</span> <span class=\"token function\">fgets</span><span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> <span class=\"token constant\">stdin</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ret_val<span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n          find <span class=\"token operator\">=</span> <span class=\"token function\">strchr</span><span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">,</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 查找换行符</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>find<span class=\"token punctuation\">)</span>                    <span class=\"token comment\">// 如果地址不是NULL，</span>\n               <span class=\"token operator\">*</span>find <span class=\"token operator\">=</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">;</span>           <span class=\"token comment\">// 在此处放置一个空字符</span>\n          <span class=\"token keyword\">else</span>\n               <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n     <span class=\"token keyword\">return</span> ret_val<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"1379-用二进制io进行随机访问\"><a class=\"markdownIt-Anchor\" href=\"#1379-用二进制io进行随机访问\">#</a> 13.7.9 用二进制 I/O 进行随机访问</h5>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">/* randbin.c -- 用二进制I/O进行随机访问 */</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">ARSIZE</span> <span class=\"token expression\"><span class=\"token number\">1000</span></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">double</span> numbers<span class=\"token punctuation\">[</span>ARSIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">double</span> value<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> file <span class=\"token operator\">=</span> <span class=\"token string\">\"numbers.dat\"</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">long</span> pos<span class=\"token punctuation\">;</span>\n     FILE <span class=\"token operator\">*</span>iofile<span class=\"token punctuation\">;</span>\n\n     <span class=\"token comment\">// 创建一组 double类型的值</span>\n     <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> ARSIZE<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n          numbers<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">100.0</span> <span class=\"token operator\">*</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1.0</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token comment\">// 尝试打开文件</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>iofile <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">,</span> <span class=\"token string\">\"wb\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Could not open %s for output.\\n\"</span><span class=\"token punctuation\">,</span> file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>EXIT_FAILURE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n     <span class=\"token comment\">// 以二进制格式把数组写入文件</span>\n     <span class=\"token function\">fwrite</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ARSIZE<span class=\"token punctuation\">,</span> iofile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span>iofile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>iofile <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">,</span> <span class=\"token string\">\"rb\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span>\n               <span class=\"token string\">\"Could not open %s for random access.\\n\"</span><span class=\"token punctuation\">,</span> file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>EXIT_FAILURE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n     <span class=\"token comment\">// 从文件中读取选定的内容</span>\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter an index in the range 0-%d.\\n\"</span><span class=\"token punctuation\">,</span> ARSIZE <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> i <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> i <span class=\"token operator\">&lt;</span> ARSIZE<span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n          pos <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span> i <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 计算偏移量</span>\n          <span class=\"token function\">fseek</span><span class=\"token punctuation\">(</span>iofile<span class=\"token punctuation\">,</span> pos<span class=\"token punctuation\">,</span> <span class=\"token constant\">SEEK_SET</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// 定位到此处</span>\n          <span class=\"token function\">fread</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> iofile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The value there is %f.\\n\"</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Next index (out of range to quit):\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n     <span class=\"token comment\">// 完成</span>\n     <span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span>iofile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bye!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"第十四章-结构和其他数据形式\"><a class=\"markdownIt-Anchor\" href=\"#第十四章-结构和其他数据形式\">#</a> 第十四章 结构和其他数据形式</h3>\n<p>C 提供了<strong>机构变量</strong>提高表示数据的能力</p>\n<h4 id=\"141-示例问题创建图书目录\"><a class=\"markdownIt-Anchor\" href=\"#141-示例问题创建图书目录\">#</a> 14.1 示例问题：创建图书目录</h4>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">//* book.c -- 一本书的图书目录 */</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h&gt;</span></span>\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> <span class=\"token function\">s_gets</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> st<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MAXTITL</span>  <span class=\"token expression\"><span class=\"token number\">41</span>      </span><span class=\"token comment\">/* 书名的最大长度 + 1    */</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MAXAUTL</span>  <span class=\"token expression\"><span class=\"token number\">31</span>      </span><span class=\"token comment\">/* 作者姓名的最大长度 + 1*/</span></span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">book</span> <span class=\"token punctuation\">{</span>            <span class=\"token comment\">/* 结构模版：标记是 book */</span>\n     <span class=\"token keyword\">char</span> title<span class=\"token punctuation\">[</span>MAXTITL<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">char</span> author<span class=\"token punctuation\">[</span>MAXAUTL<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">float</span> value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>                       <span class=\"token comment\">/* 结构模版结束          */</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">struct</span> <span class=\"token class-name\">book</span> library<span class=\"token punctuation\">;</span>    <span class=\"token comment\">/* 把 library 声明为一个 book 类型的变量 */</span>\n\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Please enter the book title.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">s_gets</span><span class=\"token punctuation\">(</span>library<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">,</span> MAXTITL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">/* 访问title部分*/</span>\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Now enter the author.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">s_gets</span><span class=\"token punctuation\">(</span>library<span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">,</span> MAXAUTL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Now enter the value.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%f\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>library<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s by %s: $%.2f\\n\"</span><span class=\"token punctuation\">,</span> library<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">,</span>\n          library<span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">,</span> library<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s: \\\"%s\\\" ($%.2f)\\n\"</span><span class=\"token punctuation\">,</span> library<span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">,</span>\n             library<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">,</span> library<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Done.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> <span class=\"token function\">s_gets</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> st<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> ret_val<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> find<span class=\"token punctuation\">;</span>\n\n     ret_val <span class=\"token operator\">=</span> <span class=\"token function\">fgets</span><span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> <span class=\"token constant\">stdin</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ret_val<span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n          find <span class=\"token operator\">=</span> <span class=\"token function\">strchr</span><span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">,</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 查找换行符</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>find<span class=\"token punctuation\">)</span>                    <span class=\"token comment\">// 如果地址不是 NULL,</span>\n               <span class=\"token operator\">*</span>find <span class=\"token operator\">=</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">;</span>           <span class=\"token comment\">// 在此处放置一个空字符</span>\n          <span class=\"token keyword\">else</span>\n               <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">//处理输入行中剩余的字符</span>\n     <span class=\"token punctuation\">}</span>\n     <span class=\"token keyword\">return</span> ret_val<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>结构有三部分，每个部分称为<strong>成员</strong>或者<strong>字段</strong></p>\n<ul>\n<li>为结构建立一个格式或样式</li>\n<li>声明一个适合该样式的变量</li>\n<li>访问结构变量的各个部分</li>\n</ul>\n<h4 id=\"142-建立结构声明\"><a class=\"markdownIt-Anchor\" href=\"#142-建立结构声明\">#</a> 14.2 建立结构声明</h4>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">book</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">char</span> title<span class=\"token punctuation\">[</span>MAXTITL<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">char</span> author<span class=\"token punctuation\">[</span>MAXAUTL<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">float</span> value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>两个字符数组和一个 <code>float</code>  类型变量组成的结构，该声明描述了该对象由什么组成</p>\n<p>关键字 <code>struct</code>  后面跟着的是<strong>标记</strong>，程序中可以通过词标记引用该结构</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">book</span> library<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>把 <code>library</code>  声明为一个使用 <code>book</code>  结构布局的结构变量</p>\n<p>结构内部被称为结构成员列表，每个成员都用自己的声明来描述</p>\n<h4 id=\"143-定义结构变量\"><a class=\"markdownIt-Anchor\" href=\"#143-定义结构变量\">#</a> 14.3 定义结构变量</h4>\n<p>结构有两层含义</p>\n<ul>\n<li>结构布局：告诉编译器如何表示数据</li>\n<li>创建结构变量:  eg: struct book library</li>\n</ul>\n<p><a href=\"https://imgtu.com/i/TnvExU\"><img src=\"https://s4.ax1x.com/2021/12/20/TnvExU.png\" alt=\"TnvExU.png\"></a></p>\n<p>编译器创建一个结构变量 <code>libarary</code> , 使用 <code>book</code>  模板为该变量分配空间：一个 <code>MAXTITL</code>  个元素的 <code>char</code>  数组，一个内涵 <code>MAXAITL</code>  个元素 <code>char</code>  数组和一个 <code>float</code>  类型的变量，这些存储空间都与一个名称 <code>libarary</code>  结合在一起</p>\n<p>完整声明</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">book</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">char</span> title<span class=\"token punctuation\">[</span>MAXTITL<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">char</span> author<span class=\"token punctuation\">[</span>AXAUTL<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">float</span> value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> library<span class=\"token punctuation\">;</span>    <span class=\"token comment\">/* 声明的右花括号后跟变量名*/</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* 无结构标记 */</span>\n     <span class=\"token keyword\">char</span> title<span class=\"token punctuation\">[</span>MAXTITL<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">char</span> author<span class=\"token punctuation\">[</span>MAXAUTL<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">float</span> value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> library<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>如果打算多次使用结构模板，就要使用带标记的形式，或者使用 <code>typedef</code></p>\n<h5 id=\"1431-初始化结构\"><a class=\"markdownIt-Anchor\" href=\"#1431-初始化结构\">#</a> 14.3.1 初始化结构</h5>\n<p>也可以如此初始化</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">book</span> library <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token string\">\"The Pious Pirate and the Devious Damsel\"</span><span class=\"token punctuation\">,</span>\n     <span class=\"token string\">\"Renee Vivotte\"</span><span class=\"token punctuation\">,</span>\n     <span class=\"token number\">1.95</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>需要注意的时，如果初始的是一个静态存储期的结构，初始化列表中的值必须是常量表达式</p>\n<h5 id=\"1432-访问结构成员\"><a class=\"markdownIt-Anchor\" href=\"#1432-访问结构成员\">#</a> 14.3.2 访问结构成员</h5>\n<p>访问结构中的成员使用<strong>结构成员运算符</strong>–点 ( <code>.</code> ) 访问结构中的成员</p>\n<h5 id=\"1433-结构的初始化器\"><a class=\"markdownIt-Anchor\" href=\"#1433-结构的初始化器\">#</a> 14.3.3 结构的初始化器</h5>\n<p>结构的初始化器可以使用点运算符和成员名标识特定的元素</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">book</span> gift <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token number\">25.99</span><span class=\"token punctuation\">,</span>\n                     <span class=\"token punctuation\">.</span>author <span class=\"token operator\">=</span> <span class=\"token string\">\"James Broadfool\"</span><span class=\"token punctuation\">,</span>\n                     <span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token string\">\"Rue for the Toad\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">book</span> gift<span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token number\">18.90</span><span class=\"token punctuation\">,</span>\n                   <span class=\"token punctuation\">.</span>author <span class=\"token operator\">=</span> <span class=\"token string\">\"Philionna Pestle\"</span><span class=\"token punctuation\">,</span>\n                   <span class=\"token number\">0.25</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n                   <span class=\"token comment\">// 此时value的值是0.25,因为后面的赋值0.25将前面的赋值18.90覆盖了</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"144-结构数组\"><a class=\"markdownIt-Anchor\" href=\"#144-结构数组\">#</a> 14.4 结构数组</h4>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">/* manybook.c -- 包含多本书的图书目录 */</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h&gt;</span></span>\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> <span class=\"token function\">s_gets</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> st<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MAXTITL</span>   <span class=\"token expression\"><span class=\"token number\">40</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MAXAUTL</span>   <span class=\"token expression\"><span class=\"token number\">40</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MAXBKS</span>   <span class=\"token expression\"><span class=\"token number\">100</span>         </span><span class=\"token comment\">/* 书籍的最大数量  */</span></span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">book</span> <span class=\"token punctuation\">{</span>                <span class=\"token comment\">/* 建立 book 模板     */</span>\n     <span class=\"token keyword\">char</span> title<span class=\"token punctuation\">[</span>MAXTITL<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">char</span> author<span class=\"token punctuation\">[</span>MAXAUTL<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">float</span> value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">struct</span> <span class=\"token class-name\">book</span> library<span class=\"token punctuation\">[</span>MAXBKS<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">/*  book 类型结构的数组 */</span>\n     <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">;</span>\n\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Please enter the book title.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Press [enter] at the start of a line to stop.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">&lt;</span> MAXBKS <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">s_gets</span><span class=\"token punctuation\">(</span>library<span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">,</span> MAXTITL<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span>\n          <span class=\"token operator\">&amp;&amp;</span> library<span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Now enter the author.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">s_gets</span><span class=\"token punctuation\">(</span>library<span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">,</span> MAXAUTL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Now enter the value.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%f\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>library<span class=\"token punctuation\">[</span>count<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n               <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">/* 清理输入行*/</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">&lt;</span> MAXBKS<span class=\"token punctuation\">)</span>\n               <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter the next title.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Here is the list of your books:\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> index <span class=\"token operator\">&lt;</span> count<span class=\"token punctuation\">;</span> index<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n               <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s by %s: $%.2f\\n\"</span><span class=\"token punctuation\">,</span> library<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">,</span>\n               library<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">,</span> library<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n     <span class=\"token keyword\">else</span>\n          <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"No books? Too bad.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> <span class=\"token function\">s_gets</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> st<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> ret_val<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> find<span class=\"token punctuation\">;</span>\n\n     ret_val <span class=\"token operator\">=</span> <span class=\"token function\">fgets</span><span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> <span class=\"token constant\">stdin</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ret_val<span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n          find <span class=\"token operator\">=</span> <span class=\"token function\">strchr</span><span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">,</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 查找换行符</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>find<span class=\"token punctuation\">)</span>                   <span class=\"token comment\">// 如果地址不是 NULL，</span>\n               <span class=\"token operator\">*</span>find <span class=\"token operator\">=</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// 在此处放置一个空字符</span>\n          <span class=\"token keyword\">else</span>\n               <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// 处理输入行中剩余的字符</span>\n     <span class=\"token punctuation\">}</span>\n     <span class=\"token keyword\">return</span> ret_val<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>该数组是自动存储类别的对象，信息存储在栈中，而如此大的数组需要很大的内存，可能会因为栈太小导致内存溢出出现错误，可以通过编译器修改栈的大小或者可以创建静态或者外部数组 (这样编译器就不会把数组放在栈中)</p>\n<h5 id=\"1441-声明结构数组\"><a class=\"markdownIt-Anchor\" href=\"#1441-声明结构数组\">#</a> 14.4.1 声明结构数组</h5>\n<pre class=\"line-numbers language-w\" data-language=\"w\"><code class=\"language-w\">struct book library[MAXBKS];<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><a href=\"https://imgtu.com/i/TuSyQK\"><img src=\"https://s4.ax1x.com/2021/12/20/TuSyQK.png\" alt=\"TuSyQK.png\"></a></p>\n<h5 id=\"1442-标识结构数组的成员\"><a class=\"markdownIt-Anchor\" href=\"#1442-标识结构数组的成员\">#</a> 14.4.2 标识结构数组的成员</h5>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">library<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>value    <span class=\"token comment\">/* 第1个数组元素与value 相关联 */</span>\nlibrary<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>title    <span class=\"token comment\">/* 第5个数组元素与title 相关联 */</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">library               <span class=\"token comment\">// 一个book 结构的数组</span>\nlibrary<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>            <span class=\"token comment\">// 一个数组元素，该元素是book结构</span>\nlibrary<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>title      <span class=\"token comment\">// 一个char数组（library[2]的title成员）</span>\nlibrary<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span>   <span class=\"token comment\">// 数组中library[2]元素的title 成员的一个字符</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"1443-程序讨论\"><a class=\"markdownIt-Anchor\" href=\"#1443-程序讨论\">#</a> 14.4.3 程序讨论</h5>\n<h4 id=\"145嵌套结构\"><a class=\"markdownIt-Anchor\" href=\"#145嵌套结构\">#</a> 14.5 嵌套结构</h4>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// friend.c -- 嵌套结构示例</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">LEN</span> <span class=\"token expression\"><span class=\"token number\">20</span></span></span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> msgs<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token string\">\"    Thank you for the wonderful evening, \"</span><span class=\"token punctuation\">,</span>\n     <span class=\"token string\">\"You certainly prove that a \"</span><span class=\"token punctuation\">,</span>\n     <span class=\"token string\">\"is a special kind of guy. We must get together\"</span><span class=\"token punctuation\">,</span>\n     <span class=\"token string\">\"over a delicious \"</span><span class=\"token punctuation\">,</span>\n     <span class=\"token string\">\" and have a few laughs\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">names</span> <span class=\"token punctuation\">{</span>                   <span class=\"token comment\">// 第1个结构</span>\n     <span class=\"token keyword\">char</span> first<span class=\"token punctuation\">[</span>LEN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">char</span> last<span class=\"token punctuation\">[</span>LEN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">guy</span> <span class=\"token punctuation\">{</span>                     <span class=\"token comment\">// 第2个结构</span>\n     <span class=\"token keyword\">struct</span> <span class=\"token class-name\">names</span> handle<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 嵌套结构</span>\n     <span class=\"token keyword\">char</span> favfood<span class=\"token punctuation\">[</span>LEN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">char</span> job<span class=\"token punctuation\">[</span>LEN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">float</span> income<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">struct</span> <span class=\"token class-name\">guy</span> fellow <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>        <span class=\"token comment\">// 初始化一个结构变量</span>\n               <span class=\"token punctuation\">{</span> <span class=\"token string\">\"Ewen\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Villard\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n               <span class=\"token string\">\"grilled salmon\"</span><span class=\"token punctuation\">,</span>\n               <span class=\"token string\">\"personality coach\"</span><span class=\"token punctuation\">,</span>\n               <span class=\"token number\">68112.00</span>\n     <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Dear %s, \\n\\n\"</span><span class=\"token punctuation\">,</span> fellow<span class=\"token punctuation\">.</span>handle<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s%s.\\n\"</span><span class=\"token punctuation\">,</span> msgs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> fellow<span class=\"token punctuation\">.</span>handle<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s%s\\n\"</span><span class=\"token punctuation\">,</span> msgs<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> fellow<span class=\"token punctuation\">.</span>job<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> msgs<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s%s%s\"</span><span class=\"token punctuation\">,</span> msgs<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> fellow<span class=\"token punctuation\">.</span>favfood<span class=\"token punctuation\">,</span> msgs<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fellow<span class=\"token punctuation\">.</span>income <span class=\"token operator\">&gt;</span> <span class=\"token number\">150000.0</span><span class=\"token punctuation\">)</span>\n          <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"!!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fellow<span class=\"token punctuation\">.</span>income <span class=\"token operator\">&gt;</span> <span class=\"token number\">75000.0</span><span class=\"token punctuation\">)</span>\n          <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">else</span>\n          <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n%40s%s\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"See you soon,\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%40s%s\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Shalala\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"146-指向结构的指针\"><a class=\"markdownIt-Anchor\" href=\"#146-指向结构的指针\">#</a> 14.6 指向结构的指针</h4>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">/* friends.c -- 使用指向结构的指针 */</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">LEN</span> <span class=\"token expression\"><span class=\"token number\">20</span></span></span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">names</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">char</span> first<span class=\"token punctuation\">[</span>LEN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">char</span> last<span class=\"token punctuation\">[</span>LEN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">guy</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">struct</span> <span class=\"token class-name\">names</span> handle<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">char</span> favfood<span class=\"token punctuation\">[</span>LEN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">char</span> job<span class=\"token punctuation\">[</span>LEN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">float</span> income<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">struct</span> <span class=\"token class-name\">guy</span> fellow<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n               <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"Ewen\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Villard\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token string\">\"grilled salmon\"</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token string\">\"personality coach\"</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token number\">68112.00</span>\n               <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n               <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"Rodney\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Swillbelly\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token string\">\"tripe\"</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token string\">\"tabloid editor\"</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token number\">432400.00</span>\n               <span class=\"token punctuation\">}</span>\n     <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">struct</span> <span class=\"token class-name\">guy</span> <span class=\"token operator\">*</span> him<span class=\"token punctuation\">;</span>        <span class=\"token comment\">/* 这是一个指向结构的指针 */</span>\n\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"address #1: %p #2: %p\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>fellow<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>fellow<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     him <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>fellow<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">/* 告诉编译器该指针指向何处  */</span>\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pointer #1: %p #2: %p\\n\"</span><span class=\"token punctuation\">,</span> him<span class=\"token punctuation\">,</span> him <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"him-&gt;income is $%.2f: (*him).income is $%.2f\\n\"</span><span class=\"token punctuation\">,</span>\n               him<span class=\"token operator\">-&gt;</span>income<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>him<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>income<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     him<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>                <span class=\"token comment\">/* 指向下一个结构      */</span>\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"him-&gt;favfood is %s:  him-&gt;handle.last is %s\\n\"</span><span class=\"token punctuation\">,</span>\n               him<span class=\"token operator\">-&gt;</span>favfood<span class=\"token punctuation\">,</span> him<span class=\"token operator\">-&gt;</span>handle<span class=\"token punctuation\">.</span>last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"1461-声明和初始化结构指针\"><a class=\"markdownIt-Anchor\" href=\"#1461-声明和初始化结构指针\">#</a> 14.6.1 声明和初始化结构指针</h5>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">guy</span> <span class=\"token operator\">*</span> him<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>him 是一个可以指向任意 guy 机构的指针</p>\n<p>结构变量名并不是结构变量的地址，所以要在结构变量名前面机上 <code>&amp;</code>  运算符来获取地址</p>\n<h5 id=\"1462-用指针访问成员\"><a class=\"markdownIt-Anchor\" href=\"#1462-用指针访问成员\">#</a> 14.6.2 用指针访问成员</h5>\n<ol>\n<li>\n<p>第一种方法</p>\n<p>使用  <code>-&gt;</code>  运算符</p>\n<p>如果 him == &amp;barney，那么 him-&gt;income 即是 barney.income</p>\n</li>\n<li>\n<p>第二种方法</p>\n<p>按照顺序指定结构成员的值</p>\n</li>\n</ol>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">fellow<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>income <span class=\"token operator\">==</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>him<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>income\n    <span class=\"token comment\">// 注意.运算符比*运算符的优先级高</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">barney<span class=\"token punctuation\">.</span>income <span class=\"token operator\">==</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>him<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>income <span class=\"token operator\">==</span> him<span class=\"token operator\">-&gt;</span>income <span class=\"token comment\">// 假设 him == &amp;barney</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"147-向函数传递结构信息\"><a class=\"markdownIt-Anchor\" href=\"#147-向函数传递结构信息\">#</a> 14.7 向函数传递结构信息</h4>\n<h5 id=\"1471-传递结构成员\"><a class=\"markdownIt-Anchor\" href=\"#1471-传递结构成员\">#</a> 14.7.1 传递结构成员</h5>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">/* funds1.c -- 把结构成员作为参数传递 */</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">FUNDLEN</span> <span class=\"token expression\"><span class=\"token number\">50</span></span></span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">funds</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">char</span>      bank<span class=\"token punctuation\">[</span>FUNDLEN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">double</span>    bankfund<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">char</span>      save<span class=\"token punctuation\">[</span>FUNDLEN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">double</span>    savefund<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">double</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">struct</span> <span class=\"token class-name\">funds</span> stan <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token string\">\"Garlic-Melon Bank\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token number\">4032.27</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string\">\"Lucky's Savings and Loan\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token number\">8543.94</span>\n     <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Stan has a total of $%.2f.\\n\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>stan<span class=\"token punctuation\">.</span>bankfund<span class=\"token punctuation\">,</span> stan<span class=\"token punctuation\">.</span>savefund<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* 两个double类型的数相加 */</span>\n<span class=\"token keyword\">double</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> y<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>因为结构成员是 double 类型，所以可以当做 double 类型的常量直接传入函数中</p>\n<h5 id=\"1472-传递结构的地址\"><a class=\"markdownIt-Anchor\" href=\"#1472-传递结构的地址\">#</a> 14.7.2 传递结构的地址</h5>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">/* funds2.c -- 传递指向结构的指针 */</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">FUNDLEN</span> <span class=\"token expression\"><span class=\"token number\">50</span></span></span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">funds</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">char</span>      bank<span class=\"token punctuation\">[</span>FUNDLEN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">double</span>    bankfund<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">char</span>      save<span class=\"token punctuation\">[</span>FUNDLEN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">double</span>    savefund<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">double</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">funds</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">/* 参数是一个指针 */</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">struct</span> <span class=\"token class-name\">funds</span> stan <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token string\">\"Garlic-Melon Bank\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token number\">4032.27</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string\">\"Lucky's Savings and Loan\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token number\">8543.94</span>\n     <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Stan has a total of $%.2f.\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>stan<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">double</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">funds</span> <span class=\"token operator\">*</span> money<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>money<span class=\"token operator\">-&gt;</span>bankfund <span class=\"token operator\">+</span> money<span class=\"token operator\">-&gt;</span>savefund<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"1473-传递结构\"><a class=\"markdownIt-Anchor\" href=\"#1473-传递结构\">#</a> 14.7.3 传递结构</h5>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">/* funds3.c -- 传递一个结构 */</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">FUNDLEN</span> <span class=\"token expression\"><span class=\"token number\">50</span></span></span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">funds</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">char</span>   bank<span class=\"token punctuation\">[</span>FUNDLEN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">double</span> bankfund<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">char</span>   save<span class=\"token punctuation\">[</span>FUNDLEN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">double</span> savefund<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">double</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">funds</span> moolah<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">/* 参数是一个结构 */</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">struct</span> <span class=\"token class-name\">funds</span> stan <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token string\">\"Garlic-Melon Bank\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token number\">4032.27</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string\">\"Lucky's Savings and Loan\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token number\">8543.94</span>\n     <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Stan has a total of $%.2f.\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>stan<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">double</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">funds</span> moolah<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>moolah<span class=\"token punctuation\">.</span>bankfund <span class=\"token operator\">+</span> moolah<span class=\"token punctuation\">.</span>savefund<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"1474-其他结构特性\"><a class=\"markdownIt-Anchor\" href=\"#1474-其他结构特性\">#</a> 14.7.4 其他结构特性</h5>\n<p>C 允许同类型的结构相互赋值</p>\n<p>C 也允许把一个结构初始化为相同类型的另一个结构</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">names</span> right_field <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"Ruthie\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"George\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">names</span> captain <span class=\"token operator\">=</span> right_field<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 把一个结构初始化为另一个结构</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>C 结构不仅可以作为参数传递，还能把结构作为返回值返回</p>\n<ol>\n<li>第一种用法</li>\n</ol>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">/* names1.c -- 使用指向结构的指针 */</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h&gt;</span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">NLEN</span> <span class=\"token expression\"><span class=\"token number\">30</span></span></span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">namect</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">char</span> fname<span class=\"token punctuation\">[</span>NLEN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">char</span> lname<span class=\"token punctuation\">[</span>NLEN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">int</span> letters<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">getinfo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">namect</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">makeinfo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">namect</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">showinfo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">namect</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> <span class=\"token function\">s_gets</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> st<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">struct</span> <span class=\"token class-name\">namect</span> person<span class=\"token punctuation\">;</span>\n\n     <span class=\"token function\">getinfo</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">makeinfo</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">showinfo</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">getinfo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">namect</span> <span class=\"token operator\">*</span> pst<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Please enter your first name.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">s_gets</span><span class=\"token punctuation\">(</span>pst<span class=\"token operator\">-&gt;</span>fname<span class=\"token punctuation\">,</span> NLEN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Please enter your last name.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">s_gets</span><span class=\"token punctuation\">(</span>pst<span class=\"token operator\">-&gt;</span>lname<span class=\"token punctuation\">,</span> NLEN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">makeinfo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">namect</span> <span class=\"token operator\">*</span> pst<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     pst<span class=\"token operator\">-&gt;</span>letters <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>pst<span class=\"token operator\">-&gt;</span>fname<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>pst<span class=\"token operator\">-&gt;</span>lname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">showinfo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">namect</span> <span class=\"token operator\">*</span> pst<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s %s, your name contains %d letters.\\n\"</span><span class=\"token punctuation\">,</span>\n               pst<span class=\"token operator\">-&gt;</span>fname<span class=\"token punctuation\">,</span> pst<span class=\"token operator\">-&gt;</span>lname<span class=\"token punctuation\">,</span> pst<span class=\"token operator\">-&gt;</span>letters<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> <span class=\"token function\">s_gets</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> st<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> ret_val<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> find<span class=\"token punctuation\">;</span>\n\n     ret_val <span class=\"token operator\">=</span> <span class=\"token function\">fgets</span><span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> <span class=\"token constant\">stdin</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ret_val<span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n          find <span class=\"token operator\">=</span> <span class=\"token function\">strchr</span><span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">,</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 查找换行符</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>find<span class=\"token punctuation\">)</span>                   <span class=\"token comment\">// 如果地址不是 NULL,</span>\n               <span class=\"token operator\">*</span>find <span class=\"token operator\">=</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// 在此处放置一个空字符</span>\n          <span class=\"token keyword\">else</span>\n               <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// 处理输入行的剩余字符</span>\n     <span class=\"token punctuation\">}</span>\n     <span class=\"token keyword\">return</span> ret_val<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol start=\"2\">\n<li>第二种用法</li>\n</ol>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">/* names2.c -- 传递并返回结构 */</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h&gt;</span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">NLEN</span> <span class=\"token expression\"><span class=\"token number\">30</span></span></span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">namect</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">char</span> fname<span class=\"token punctuation\">[</span>NLEN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">char</span> lname<span class=\"token punctuation\">[</span>NLEN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">int</span> letters<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">namect</span> <span class=\"token function\">getinfo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">namect</span> <span class=\"token function\">makeinfo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">namect</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">showinfo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">namect</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> <span class=\"token function\">s_gets</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> st<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">struct</span> <span class=\"token class-name\">namect</span> person<span class=\"token punctuation\">;</span>\n\n     person <span class=\"token operator\">=</span> <span class=\"token function\">getinfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     person <span class=\"token operator\">=</span> <span class=\"token function\">makeinfo</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">showinfo</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">namect</span> <span class=\"token function\">getinfo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">struct</span> <span class=\"token class-name\">namect</span> temp<span class=\"token punctuation\">;</span>\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Please enter your first name.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">s_gets</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">.</span>fname<span class=\"token punctuation\">,</span> NLEN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Please enter your last name.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">s_gets</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">.</span>lname<span class=\"token punctuation\">,</span> NLEN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token keyword\">return</span> temp<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">namect</span> <span class=\"token function\">makeinfo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">namect</span> info<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     info<span class=\"token punctuation\">.</span>letters <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">.</span>fname<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">.</span>lname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token keyword\">return</span> info<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">showinfo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">namect</span> info<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s %s, your name contains %d letters.\\n\"</span><span class=\"token punctuation\">,</span>\n               info<span class=\"token punctuation\">.</span>fname<span class=\"token punctuation\">,</span> info<span class=\"token punctuation\">.</span>lname<span class=\"token punctuation\">,</span> info<span class=\"token punctuation\">.</span>letters<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> <span class=\"token function\">s_gets</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> st<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> ret_val<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> find<span class=\"token punctuation\">;</span>\n\n     ret_val <span class=\"token operator\">=</span> <span class=\"token function\">fgets</span><span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> <span class=\"token constant\">stdin</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ret_val<span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n          find <span class=\"token operator\">=</span> <span class=\"token function\">strchr</span><span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">,</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 查找换行符</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>find<span class=\"token punctuation\">)</span>                   <span class=\"token comment\">// 如果地址不是 NULL，</span>\n               <span class=\"token operator\">*</span>find <span class=\"token operator\">=</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// 在此处放置一个空字符</span>\n          <span class=\"token keyword\">else</span>\n               <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// 处理输入行的剩余部分</span>\n     <span class=\"token punctuation\">}</span>\n     <span class=\"token keyword\">return</span> ret_val<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"1475-结构和结构指针的选择\"><a class=\"markdownIt-Anchor\" href=\"#1475-结构和结构指针的选择\">#</a> 14.7.5 结构和结构指针的选择</h5>\n<p>传递结构的两个缺点</p>\n<ul>\n<li>老版本无法处理这样的代码</li>\n<li>传递结构浪费时间和空间</li>\n</ul>\n<p>程序员追求效率会使用结构指针作为函数参数，如需返回原始数据被意外修改，使用 <code>const</code>  修改符</p>\n<p>按值传递结构是处理小型结构最常用的方法</p>\n<h5 id=\"1476-结构中的字符数组和字符指针\"><a class=\"markdownIt-Anchor\" href=\"#1476-结构中的字符数组和字符指针\">#</a> 14.7.6 结构中的字符数组和字符指针</h5>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">LEN</span> <span class=\"token expression\"><span class=\"token number\">20</span></span></span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">names</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">char</span> first<span class=\"token punctuation\">[</span>LEN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">char</span> last<span class=\"token punctuation\">[</span>LEN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//会为数组分配内存</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">pnames</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> first<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> last<span class=\"token punctuation\">;</span>   <span class=\"token comment\">//指针只是存储地址不会分配内存,这样字符串会存储在别的地方,结构里面的指针只是用来管理别的地方的字符串的地址而已</span>\n    <span class=\"token comment\">//由于初始化的指针没有给任何地址,所以传进来的字符串可能放在任何地方，运气好程序可以正常运行 运气不好可能会导致程序崩溃</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">names</span> veep <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"Talia\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Summers\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">pnames</span> treas <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"Brad\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Fallingjaw\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s and %s\\n\"</span><span class=\"token punctuation\">,</span> veep<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">,</span> treas<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//可以正常于运行</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>结构存储字符串，用字符数组作为成员比较简单</li>\n<li>用指向 <code>char</code>  的指针，误用就会导致严重的问题</li>\n</ul>\n<h5 id=\"1477-结构指针和malloc\"><a class=\"markdownIt-Anchor\" href=\"#1477-结构指针和malloc\">#</a> 14.7.7 结构，指针和 <code>malloc()</code></h5>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">namect</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> fname<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 用指针代替数组</span>\n     <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> lname<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">int</span> letters<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">getinfo</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">namect</span> <span class=\"token operator\">*</span> pst<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">char</span> temp<span class=\"token punctuation\">[</span>SLEN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Please enter your first name.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">s_gets</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">,</span> SLEN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token comment\">// 分配内存存储名</span>\n     pst<span class=\"token operator\">-&gt;</span>fname <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token comment\">// 把名拷贝到已分配的内存</span>\n     <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>pst<span class=\"token operator\">-&gt;</span>fname<span class=\"token punctuation\">,</span> temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Please enter your last name.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">s_gets</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">,</span> SLEN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     pst<span class=\"token operator\">-&gt;</span>lname <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>pst<span class=\"token operator\">-&gt;</span>lname<span class=\"token punctuation\">,</span> temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//这两个字符串都没存储在结构中,他们都存储在malloc()份额皮的内存块中 结构中存储着这两个字符串的地址</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// names3.c -- 使用指针和 malloc()</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h&gt;</span>   <span class=\"token comment\">// 提供 strcpy()、strlen() 的原型</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h&gt;</span>   <span class=\"token comment\">// 提供 malloc()、free() 的原型</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SLEN</span> <span class=\"token expression\"><span class=\"token number\">81</span></span></span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">namect</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> fname<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 使用指针</span>\n     <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> lname<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">int</span> letters<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">getinfo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">namect</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 分配内存</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">makeinfo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">namect</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">showinfo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">namect</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">cleanup</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">namect</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 调用该函数时释放内存</span>\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> <span class=\"token function\">s_gets</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> st<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">struct</span> <span class=\"token class-name\">namect</span> person<span class=\"token punctuation\">;</span>\n\n     <span class=\"token function\">getinfo</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">makeinfo</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">showinfo</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">cleanup</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">getinfo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">namect</span> <span class=\"token operator\">*</span> pst<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">char</span> temp<span class=\"token punctuation\">[</span>SLEN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Please enter your first name.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">s_gets</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">,</span> SLEN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token comment\">// 分配内存以存储名</span>\n     pst<span class=\"token operator\">-&gt;</span>fname <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token comment\">// 把名拷贝到动态分配的内存中</span>\n     <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>pst<span class=\"token operator\">-&gt;</span>fname<span class=\"token punctuation\">,</span> temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Please enter your last name.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">s_gets</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">,</span> SLEN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     pst<span class=\"token operator\">-&gt;</span>lname <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>pst<span class=\"token operator\">-&gt;</span>lname<span class=\"token punctuation\">,</span> temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">makeinfo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">namect</span> <span class=\"token operator\">*</span> pst<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     pst<span class=\"token operator\">-&gt;</span>letters <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>pst<span class=\"token operator\">-&gt;</span>fname<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>\n          <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>pst<span class=\"token operator\">-&gt;</span>lname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">showinfo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">namect</span> <span class=\"token operator\">*</span> pst<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s %s, your name contains %d letters.\\n\"</span><span class=\"token punctuation\">,</span>\n          pst<span class=\"token operator\">-&gt;</span>fname<span class=\"token punctuation\">,</span> pst<span class=\"token operator\">-&gt;</span>lname<span class=\"token punctuation\">,</span> pst<span class=\"token operator\">-&gt;</span>letters<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">cleanup</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">namect</span> <span class=\"token operator\">*</span> pst<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>pst<span class=\"token operator\">-&gt;</span>fname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>pst<span class=\"token operator\">-&gt;</span>lname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> <span class=\"token function\">s_gets</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> st<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> ret_val<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> find<span class=\"token punctuation\">;</span>\n\n     ret_val <span class=\"token operator\">=</span> <span class=\"token function\">fgets</span><span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> <span class=\"token constant\">stdin</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ret_val<span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n          find <span class=\"token operator\">=</span> <span class=\"token function\">strchr</span><span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">,</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 查找换行符</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>find<span class=\"token punctuation\">)</span>                   <span class=\"token comment\">// 如果地址不是 NULL，</span>\n               <span class=\"token operator\">*</span>find <span class=\"token operator\">=</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// 在此处放置一个空字符</span>\n          <span class=\"token keyword\">else</span>\n               <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// 处理输入行的剩余部分</span>\n     <span class=\"token punctuation\">}</span>\n     <span class=\"token keyword\">return</span> ret_val<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>将 <code>malloc()</code>  与 <code>free()</code>  一起使用</p>\n<h5 id=\"1478-复合字面量和结构\"><a class=\"markdownIt-Anchor\" href=\"#1478-复合字面量和结构\">#</a> 14.7.8 复合字面量和结构</h5>\n<p>如果只需要一个临时结构值，可以使用复合字面量</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">book</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"The Idiot\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Fyodor Dostoyevsky\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6.99</span><span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">/* complit.c -- 复合字面量 */</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MAXTITL</span>  <span class=\"token expression\"><span class=\"token number\">41</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MAXAUTL</span>  <span class=\"token expression\"><span class=\"token number\">31</span></span></span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">book</span> <span class=\"token punctuation\">{</span>          <span class=\"token comment\">// 结构模版：标记是 book</span>\n     <span class=\"token keyword\">char</span> title<span class=\"token punctuation\">[</span>MAXTITL<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">char</span> author<span class=\"token punctuation\">[</span>MAXAUTL<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">float</span> value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">struct</span> <span class=\"token class-name\">book</span> readfirst<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">int</span> score<span class=\"token punctuation\">;</span>\n\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter test score: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>score<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>score <span class=\"token operator\">&gt;=</span> <span class=\"token number\">84</span><span class=\"token punctuation\">)</span>\n          readfirst <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">book</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"Crime and Punishment\"</span><span class=\"token punctuation\">,</span>\n                                     <span class=\"token string\">\"Fyodor Dostoyevsky\"</span><span class=\"token punctuation\">,</span>\n                                     <span class=\"token number\">11.25</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">else</span>\n          readfirst <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">book</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"Mr. Bouncy's Nice Hat\"</span><span class=\"token punctuation\">,</span>\n                                     <span class=\"token string\">\"Fred Winsome\"</span><span class=\"token punctuation\">,</span>\n                                     <span class=\"token number\">5.99</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Your assigned reading:\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s by %s: $%.2f\\n\"</span><span class=\"token punctuation\">,</span> readfirst<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">,</span>\n          readfirst<span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">,</span> readfirst<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>\n<p>如果函数接受一个结构，可以把复合字面量作为实际参数传递</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">rect</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">double</span> x<span class=\"token punctuation\">;</span> <span class=\"token keyword\">double</span> y<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">double</span> <span class=\"token function\">rect_area</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">rect</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> r<span class=\"token punctuation\">.</span>x <span class=\"token operator\">*</span> r<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">double</span> area<span class=\"token punctuation\">;</span>\narea <span class=\"token operator\">=</span> <span class=\"token function\">rect_area</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">rect</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token number\">10.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20.0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>如果函数接受一个地址，可以传递复合字面量的地址</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">rect</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">double</span> x<span class=\"token punctuation\">;</span> <span class=\"token keyword\">double</span> y<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">double</span> <span class=\"token function\">rect_areap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">rect</span> <span class=\"token operator\">*</span> rp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> rp<span class=\"token operator\">-&gt;</span>x <span class=\"token operator\">*</span> rp<span class=\"token operator\">-&gt;</span>y<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">double</span> area<span class=\"token punctuation\">;</span>\narea <span class=\"token operator\">=</span> <span class=\"token function\">rect_areap</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">rect</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token number\">10.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20.0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ul>\n<h5 id=\"1479-伸缩型数组成员c99\"><a class=\"markdownIt-Anchor\" href=\"#1479-伸缩型数组成员c99\">#</a> 14.7.9 伸缩型数组成员 (C99)</h5>\n<p>C99 新增特性:<strong> 伸缩性数组成员</strong>，利用这项特性声明的结构，其最后一个数组成员具有一些特性</p>\n<ul>\n<li>该数组不会立即存在</li>\n<li>使用这个伸缩性数组成员可以编写合适的代码，就好像它确实存在并具有所需数目的元素一样</li>\n</ul>\n<p>声明一个伸缩性数组成员有如下规则</p>\n<ul>\n<li>伸缩性数组成员必须是结构的最后一个成员</li>\n<li>结构中必须至少有一个成员</li>\n<li>伸缩数组的声明类似于普通数组，只是它的方括号中是空的</li>\n</ul>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">flex</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">double</span> average<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">double</span> scores<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 伸缩型数组成员</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>不能使用 <code>scores</code>  做任何事，因为没有给这个数组预留空间</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">flex</span> <span class=\"token operator\">*</span> pf<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 声明一个指针</span>\n<span class=\"token comment\">// 请求为一个结构和一个数组分配存储空间</span>\npf <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">flex</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">5</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>此时 就有足够的空间存储 <code>count</code> , <code>average</code>  和一个内含 5 个 <code>double</code>  类型值的数组。可以用指针 <code>pf</code>  访问这些成员</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">pf<span class=\"token operator\">-&gt;</span>count <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// 设置 count 成员</span>\npf<span class=\"token operator\">-&gt;</span>scores<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">18.5</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 访问数组成员的一个元素</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token operator\">/</span> flexmemb<span class=\"token punctuation\">.</span>c <span class=\"token operator\">--</span> 伸缩型数组成员（C99新增特性）\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h&gt;</span></span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">flex</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token class-name\">size_t</span> count<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">double</span> average<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">double</span> scores <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 伸缩型数组成员</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">showFlex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">flex</span> <span class=\"token operator\">*</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">struct</span> <span class=\"token class-name\">flex</span> <span class=\"token operator\">*</span> pf1<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>pf2<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">int</span> tot <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token comment\">// 为结构和数组分配存储空间</span>\n     pf1 <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">flex</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> n <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     pf1<span class=\"token operator\">-&gt;</span>count <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n          pf1<span class=\"token operator\">-&gt;</span>scores<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">20.0</span> <span class=\"token operator\">-</span> i<span class=\"token punctuation\">;</span>\n          tot <span class=\"token operator\">+=</span> pf1<span class=\"token operator\">-&gt;</span>scores<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n     pf1<span class=\"token operator\">-&gt;</span>average <span class=\"token operator\">=</span> tot <span class=\"token operator\">/</span> n<span class=\"token punctuation\">;</span>\n     <span class=\"token function\">showFlex</span><span class=\"token punctuation\">(</span>pf1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n     n <span class=\"token operator\">=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span>\n     tot <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n     pf2 <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">flex</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> n <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     pf2<span class=\"token operator\">-&gt;</span>count <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n          pf2<span class=\"token operator\">-&gt;</span>scores<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">20.0</span> <span class=\"token operator\">-</span> i <span class=\"token operator\">/</span> <span class=\"token number\">2.0</span><span class=\"token punctuation\">;</span>\n          tot <span class=\"token operator\">+=</span> pf2<span class=\"token operator\">-&gt;</span>scores<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n     pf2<span class=\"token operator\">-&gt;</span>average <span class=\"token operator\">=</span> tot <span class=\"token operator\">/</span> n<span class=\"token punctuation\">;</span>\n     <span class=\"token function\">showFlex</span><span class=\"token punctuation\">(</span>pf2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>pf1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>pf2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">showFlex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">flex</span> <span class=\"token operator\">*</span> p<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Scores : \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> p<span class=\"token operator\">-&gt;</span>count<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n          <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%g \"</span><span class=\"token punctuation\">,</span> p<span class=\"token operator\">-&gt;</span>scores<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nAverage: %g\\n\"</span><span class=\"token punctuation\">,</span> p<span class=\"token operator\">-&gt;</span>average<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>伸缩性数组成员的结构有一些特殊的要求</p>\n<ol>\n<li>\n<p>不能用结构进行赋值和拷贝</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">flex</span> <span class=\"token operator\">*</span> pf1<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>pf2<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// *pf1 和*pf2 都是结构</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token operator\">*</span>pf2 <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>pf1<span class=\"token punctuation\">;</span>                <span class=\"token comment\">// 不要这样做</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>不要以按值防止把这种结构传递给结构</p>\n</li>\n<li>\n<p>不要使用待伸缩性数组成员的结构作为数组成员或另一个结构的成员</p>\n</li>\n</ol>\n<h5 id=\"14710-匿名结构\"><a class=\"markdownIt-Anchor\" href=\"#14710-匿名结构\">#</a> 14.7.10 匿名结构</h5>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">names</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">char</span> first<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">char</span> last<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">person</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">struct</span> <span class=\"token class-name\">names</span> name<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 嵌套结构成员</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">person</span> ted <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">8483</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"Ted\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Grass\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这里 <code>name</code>  成员是一个嵌套结构，此时通过 <code>ted.name.first</code>  可以进行访问</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">person</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">char</span> first<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">char</span> last<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 匿名结构</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>初始化结构两者都相同，但是访问时<strong>匿名结构</strong>可以更加简便一点</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">puts</span><span class=\"token punctuation\">(</span>ted<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h5 id=\"14711-使用结构数组的函数\"><a class=\"markdownIt-Anchor\" href=\"#14711-使用结构数组的函数\">#</a> 14.7.11 使用结构数组的函数</h5>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">/* funds4.c -- 把结构数组传递给函数 */</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">FUNDLEN</span> <span class=\"token expression\"><span class=\"token number\">50</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">N</span> <span class=\"token expression\"><span class=\"token number\">2</span></span></span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">funds</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">char</span>      bank<span class=\"token punctuation\">[</span>FUNDLEN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">double</span>    bankfund<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">char</span>      save<span class=\"token punctuation\">[</span>FUNDLEN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">double</span>    savefund<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">double</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">funds</span> money <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">struct</span> <span class=\"token class-name\">funds</span> jones<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n               <span class=\"token punctuation\">{</span>\n                    <span class=\"token string\">\"Garlic-Melon Bank\"</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token number\">4032.27</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token string\">\"Lucky's Savings and Loan\"</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token number\">8543.94</span>\n\n               <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n               <span class=\"token punctuation\">{</span>\n                    <span class=\"token string\">\"Honest Jack's Bank\"</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token number\">3620.88</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token string\">\"Party Time Savings\"</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token number\">3802.91</span>\n               <span class=\"token punctuation\">}</span>\n     <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The Joneses have a total of $%.2f.\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>jones<span class=\"token punctuation\">,</span> N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//sum(&amp;jones[0], N) 效果相同</span>\n\n     <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">double</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">funds</span> money <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">double</span> total<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n\n     <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> total <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n          total <span class=\"token operator\">+=</span> money<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>bankfund <span class=\"token operator\">+</span> money<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>savefund<span class=\"token punctuation\">;</span>\n\n     <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>total<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"148-把结构内容保存到文件中\"><a class=\"markdownIt-Anchor\" href=\"#148-把结构内容保存到文件中\">#</a> 14.8 把结构内容保存到文件中</h4>\n<p>存储在一个结构中的整套信息称为<strong>记录</strong>，单独的项被称为<strong>字段</strong></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MAXAUTL</span> <span class=\"token expression\"><span class=\"token number\">40</span></span></span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">book</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">char</span> title<span class=\"token punctuation\">[</span>MAXTITL<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">char</span> author<span class=\"token punctuation\">[</span>MAXAUTL<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">float</span> value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span>pbooks<span class=\"token punctuation\">,</span> <span class=\"token string\">\"%s %s %.2f\\n\"</span><span class=\"token punctuation\">,</span> primer<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">,</span>primer<span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">,</span> primer<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">fwrite</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>primer<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">book</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> pbooks<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"1481-保存结构的程序示例\"><a class=\"markdownIt-Anchor\" href=\"#1481-保存结构的程序示例\">#</a> 14.8.1  保存结构的程序示例</h5>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">/* booksave.c -- 在文件中保存结构中的内容 */</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MAXTITL</span>  <span class=\"token expression\"><span class=\"token number\">40</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MAXAUTL</span>  <span class=\"token expression\"><span class=\"token number\">40</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MAXBKS</span>   <span class=\"token expression\"><span class=\"token number\">10</span>             </span><span class=\"token comment\">/* 最大书籍数量 */</span></span>\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> <span class=\"token function\">s_gets</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> st<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">book</span> <span class=\"token punctuation\">{</span>                   <span class=\"token comment\">/* 建立 book 模板 */</span>\n     <span class=\"token keyword\">char</span> title<span class=\"token punctuation\">[</span>MAXTITL<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">char</span> author<span class=\"token punctuation\">[</span>MAXAUTL<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">float</span> value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">struct</span> <span class=\"token class-name\">book</span> library<span class=\"token punctuation\">[</span>MAXBKS<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 结构数组  */</span>\n     <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">,</span> filecount<span class=\"token punctuation\">;</span>\n     FILE <span class=\"token operator\">*</span> pbooks<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">int</span> size <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">book</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>pbooks <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"book.dat\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"a+b\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">fputs</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Can't open book.dat file\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">stderr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n\n     <span class=\"token function\">rewind</span><span class=\"token punctuation\">(</span>pbooks<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\">/* 定位到文件开始 */</span>\n     <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">&lt;</span> MAXBKS <span class=\"token operator\">&amp;&amp;</span>  <span class=\"token function\">fread</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>library<span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">,</span>\n          <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> pbooks<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n               <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Current contents of book.dat:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s by %s: $%.2f\\n\"</span><span class=\"token punctuation\">,</span> library<span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">,</span>\n               library<span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">,</span> library<span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n     filecount <span class=\"token operator\">=</span> count<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">==</span> MAXBKS<span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">fputs</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The book.dat file is full.\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">stderr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n\n     <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Please add new book titles.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Press [enter] at the start of a line to stop.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">&lt;</span> MAXBKS <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">s_gets</span><span class=\"token punctuation\">(</span>library<span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">,</span> MAXTITL<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span>\n          <span class=\"token operator\">&amp;&amp;</span> library<span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Now enter the author.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">s_gets</span><span class=\"token punctuation\">(</span>library<span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">,</span> MAXAUTL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Now enter the value.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%f\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>library<span class=\"token punctuation\">[</span>count<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n               <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\">/* 清理输入行  */</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">&lt;</span> MAXBKS<span class=\"token punctuation\">)</span>\n               <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter the next title.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Here is the list of your books:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> index <span class=\"token operator\">&lt;</span> count<span class=\"token punctuation\">;</span> index<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n               <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s by %s: $%.2f\\n\"</span><span class=\"token punctuation\">,</span> library<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">,</span>\n               library<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">,</span> library<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">fwrite</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>library<span class=\"token punctuation\">[</span>filecount<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">,</span> count <span class=\"token operator\">-</span> filecount<span class=\"token punctuation\">,</span>\n               pbooks<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n     <span class=\"token keyword\">else</span>\n          <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"No books? Too bad.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bye.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span>pbooks<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> <span class=\"token function\">s_gets</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> st<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> ret_val<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> find<span class=\"token punctuation\">;</span>\n\n     ret_val <span class=\"token operator\">=</span> <span class=\"token function\">fgets</span><span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> <span class=\"token constant\">stdin</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ret_val<span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n          find <span class=\"token operator\">=</span> <span class=\"token function\">strchr</span><span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">,</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 查找换行符</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>find<span class=\"token punctuation\">)</span>                <span class=\"token comment\">// 如果地址不是 NULL，</span>\n               <span class=\"token operator\">*</span>find <span class=\"token operator\">=</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\">// 在此处放置一个空字符</span>\n          <span class=\"token keyword\">else</span>\n               <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 清理输入行</span>\n     <span class=\"token punctuation\">}</span>\n     <span class=\"token keyword\">return</span> ret_val<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"149-链式结构\"><a class=\"markdownIt-Anchor\" href=\"#149-链式结构\">#</a> 14.9 链式结构</h4>\n<p>结构可以创建新的数据形式，包括队列，二叉树，堆，哈希表，图标。许多这样的结构都由<strong>链式结构</strong>组成</p>\n<h4 id=\"1410-联合简介\"><a class=\"markdownIt-Anchor\" href=\"#1410-联合简介\">#</a> 14.10 联合简介</h4>\n<p><strong>联合</strong>是一种数据类型，能在同一个内存空间中存储不同的数据类型 (<strong>不是同时存储</strong>)</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">union</span> hold <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">int</span> digit<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">double</span> bigfl<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">char</span> letter<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//带标记的联合模板</span>\n<span class=\"token keyword\">union</span> hold fit<span class=\"token punctuation\">;</span>         <span class=\"token comment\">// hold类型的联合变量</span>\n<span class=\"token keyword\">union</span> hold save<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 内含10个联合变量的数组</span>\n<span class=\"token keyword\">union</span> hold <span class=\"token operator\">*</span> pu<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 指向hold类型联合变量的指针</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>联合只能存储一个 <code>int</code>  类型，一个 <code>double</code>  类型和 <code>char</code>  类型的值</p>\n<p>创建联合变量，编译器会分配足够的空间以便他们能存储联合声明中占用最大字节的类型</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">union hold valA;\nvalA.letter = 'R';\nunion hold valB = valA;             // 用另一个联合来初始化\nunion hold valC = {88};             // 初始化联合的digit 成员\nunion hold valD = {.bigfl = 118.2}; // 指定初始化器<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"14101-使用联合\"><a class=\"markdownIt-Anchor\" href=\"#14101-使用联合\">#</a> 14.10.1 使用联合</h5>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">fit<span class=\"token punctuation\">.</span>digit <span class=\"token operator\">=</span> <span class=\"token number\">23</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//把 23 存储在 fit，占2字节</span>\nfit<span class=\"token punctuation\">.</span>bigfl <span class=\"token operator\">=</span> <span class=\"token number\">2.0</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 清除23，存储 2.0，占8字节</span>\nfit<span class=\"token punctuation\">.</span>letter <span class=\"token operator\">=</span> <span class=\"token string\">'h'</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 清除2.0，存储h，占1字节</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>在联合当中一次只能存储一个类型的值</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">pu <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>fit<span class=\"token punctuation\">;</span>\nx <span class=\"token operator\">=</span> pu<span class=\"token operator\">-&gt;</span>digit<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 相当于 x = fit.digit </span>\n<span class=\"token comment\">// 用指针访问联合也需要用 - &gt; 符号</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>联合的另一种用法</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">owner</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">char</span> socsecurity<span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">leasecompany</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">40</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">char</span> headquarters<span class=\"token punctuation\">[</span><span class=\"token number\">40</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">union</span> data <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">struct</span> <span class=\"token class-name\">owner</span> owncar<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">struct</span> <span class=\"token class-name\">leasecompany</span> leasecar<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">car_data</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">char</span> make<span class=\"token punctuation\">[</span><span class=\"token number\">15</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">int</span> status<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 私有为0，租赁为1 */</span>\n     <span class=\"token keyword\">union</span> data ownerinfo<span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"14102-匿名联合c11\"><a class=\"markdownIt-Anchor\" href=\"#14102-匿名联合c11\">#</a> 14.10.2 匿名联合 (C11)</h5>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">owner</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">char</span> socsecurity<span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">leasecompany</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">40</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">char</span> headquarters<span class=\"token punctuation\">[</span><span class=\"token number\">40</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">car_data</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">char</span> make<span class=\"token punctuation\">[</span><span class=\"token number\">15</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">int</span> status<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 私有为0，租赁为1 */</span>\n     <span class=\"token keyword\">union</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">struct</span> <span class=\"token class-name\">owner</span> owncar<span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">struct</span> <span class=\"token class-name\">leasecompany</span> leasecar<span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"1411-枚举类型\"><a class=\"markdownIt-Anchor\" href=\"#1411-枚举类型\">#</a> 14.11 枚举类型</h4>\n<p><strong>枚举类型</strong>声明名称来表示整型常量，使用 <code>enum</code>  关键字可以创建一个新 \"类型\" 并指定他可具有的值</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">enum</span> <span class=\"token class-name\">spectrum</span> <span class=\"token punctuation\">{</span>red<span class=\"token punctuation\">,</span> orange<span class=\"token punctuation\">,</span> yellow<span class=\"token punctuation\">,</span> green<span class=\"token punctuation\">,</span> blue<span class=\"token punctuation\">,</span> violet<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//创建了spetrum作为标记名 可以把enum spectrum作为一个类型名使用</span>\n<span class=\"token keyword\">enum</span> <span class=\"token class-name\">spectrum</span> color<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 使color作为该类型的变量，color可能是上面的任意值</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>符号常量被称为<strong>枚举符</strong></p>\n<h5 id=\"14111-enum常量\"><a class=\"markdownIt-Anchor\" href=\"#14111-enum常量\">#</a> 14.11.1  <code>enum</code>  常量</h5>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"red = %d, orange = %d\\n\"</span><span class=\"token punctuation\">,</span> red<span class=\"token punctuation\">,</span> orange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nred <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> orange <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token comment\">//输出</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>只要能使用整型常量的地方都可以使用枚举常量</p>\n<p>正声明数组时可以用枚举常量表示数组的大小</p>\n<p>在 <code>switch</code>  语句好难过，可以把枚举常量作为标签</p>\n<h5 id=\"14112-默认值\"><a class=\"markdownIt-Anchor\" href=\"#14112-默认值\">#</a> 14.11.2 默认值</h5>\n<p>默认情况下，枚举列表中的常量按照顺序被赋值 <code>0</code> , <code>1</code> , <code>2</code>  等等</p>\n<h5 id=\"14113-赋值\"><a class=\"markdownIt-Anchor\" href=\"#14113-赋值\">#</a> 14.11.3 赋值</h5>\n<p>在枚举声明中可以为枚举常量指定整数值</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">enum</span> <span class=\"token class-name\">levels</span> <span class=\"token punctuation\">{</span>low <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> medium <span class=\"token operator\">=</span> <span class=\"token number\">500</span><span class=\"token punctuation\">,</span> high <span class=\"token operator\">=</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>如果没有全部赋值，后面的常量会被赋予后续的值</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">enum</span> <span class=\"token class-name\">feline</span> <span class=\"token punctuation\">{</span>cat<span class=\"token punctuation\">,</span> lynx <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> puma<span class=\"token punctuation\">,</span> tiger<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//cat为0  puma为11 tiger为12</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h5 id=\"14114-enum的用法\"><a class=\"markdownIt-Anchor\" href=\"#14114-enum的用法\">#</a> 14.11.4  <code>enum</code>  的用法</h5>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">/* enum.c -- 使用枚举类型的值 */</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h&gt;</span>     <span class=\"token comment\">// 提供 strcmp()、strchr()函数的原型</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdbool.h&gt;</span>    <span class=\"token comment\">// C99 特性</span></span>\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> <span class=\"token function\">s_gets</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> st<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">enum</span> <span class=\"token class-name\">spectrum</span> <span class=\"token punctuation\">{</span> red<span class=\"token punctuation\">,</span> orange<span class=\"token punctuation\">,</span> yellow<span class=\"token punctuation\">,</span> green<span class=\"token punctuation\">,</span> blue<span class=\"token punctuation\">,</span> violet <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> colors <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"red\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"orange\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"yellow\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token string\">\"green\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"blue\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"violet\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">LEN</span> <span class=\"token expression\"><span class=\"token number\">30</span></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">char</span> choice<span class=\"token punctuation\">[</span>LEN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">enum</span> <span class=\"token class-name\">spectrum</span> color<span class=\"token punctuation\">;</span>\n     bool color_is_found <span class=\"token operator\">=</span> false<span class=\"token punctuation\">;</span>\n\n     <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter a color (empty line to quit):\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">s_gets</span><span class=\"token punctuation\">(</span>choice<span class=\"token punctuation\">,</span> LEN<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">&amp;&amp;</span> choice<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>color <span class=\"token operator\">=</span> red<span class=\"token punctuation\">;</span> color <span class=\"token operator\">&lt;=</span> violet<span class=\"token punctuation\">;</span> color<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">{</span>\n               <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>choice<span class=\"token punctuation\">,</span> colors<span class=\"token punctuation\">[</span>color<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n               <span class=\"token punctuation\">{</span>\n                    color_is_found <span class=\"token operator\">=</span> true<span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n               <span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">}</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>color_is_found<span class=\"token punctuation\">)</span>\n               <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">{</span>\n               <span class=\"token keyword\">case</span> red<span class=\"token operator\">:</span> <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Roses are red.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n               <span class=\"token keyword\">case</span> orange<span class=\"token operator\">:</span> <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Poppies are orange.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n               <span class=\"token keyword\">case</span> yellow<span class=\"token operator\">:</span> <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Sunflowers are yellow.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n               <span class=\"token keyword\">case</span> green<span class=\"token operator\">:</span> <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Grass is green.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n               <span class=\"token keyword\">case</span> blue<span class=\"token operator\">:</span> <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bluebells are blue.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n               <span class=\"token keyword\">case</span> violet<span class=\"token operator\">:</span> <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Violets are violet.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n          <span class=\"token keyword\">else</span>\n               <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I don't know about the color %s.\\n\"</span><span class=\"token punctuation\">,</span> choice<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          color_is_found <span class=\"token operator\">=</span> false<span class=\"token punctuation\">;</span>\n          <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Next color, please (empty line to quit):\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n     <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Goodbye!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> <span class=\"token function\">s_gets</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> st<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> ret_val<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> find<span class=\"token punctuation\">;</span>\n\n     ret_val <span class=\"token operator\">=</span> <span class=\"token function\">fgets</span><span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> <span class=\"token constant\">stdin</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ret_val<span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n          find <span class=\"token operator\">=</span> <span class=\"token function\">strchr</span><span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">,</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 查找换行符</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>find<span class=\"token punctuation\">)</span>                   <span class=\"token comment\">// 如果地址不是 NULL，</span>\n               <span class=\"token operator\">*</span>find <span class=\"token operator\">=</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// 在此处放置一个空字符</span>\n          <span class=\"token keyword\">else</span>\n               <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// 清理输入行</span>\n     <span class=\"token punctuation\">}</span>\n     <span class=\"token keyword\">return</span> ret_val<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"14115-共享名称空间\"><a class=\"markdownIt-Anchor\" href=\"#14115-共享名称空间\">#</a> 14.11.5 共享名称空间</h5>\n<p>两个不同作用域的同名变量不冲突，两个作用域的同名变量冲突</p>\n<h4 id=\"1412-typedef简介\"><a class=\"markdownIt-Anchor\" href=\"#1412-typedef简介\">#</a> 14.12  <code>typedef</code>  简介</h4>\n<p>使用 <code>typedef</code>  可以为某一类型自定义名称，这一方面与 <code>#define</code>  相似，但是有三点不同</p>\n<ul>\n<li>与 <code>#define</code>  不同， <code>typedef</code>  创建的符号名只受限于<strong>类型</strong>，不能用于值</li>\n<li><code>typedef</code>  由编译器解释，不是预处理器</li>\n<li><code>typedef</code>  比 <code>#define</code>  更灵活</li>\n</ul>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> BYTE<span class=\"token punctuation\">;</span>\nBYTE x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span> z<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>该定义的作用域取决于 <code>typedef</code>  定义所在的位置</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">//注意以下typedef和#define的区别</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> STRING<span class=\"token punctuation\">;</span>\nSTRING name<span class=\"token punctuation\">,</span> sign<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> name<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span> sign<span class=\"token punctuation\">;</span> <span class=\"token comment\">//将两者都翻译成指针</span>\n<span class=\"token comment\">//</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">STRING</span> <span class=\"token expression\"><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span></span></span>\nSTRING name<span class=\"token punctuation\">,</span> sign<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> name<span class=\"token punctuation\">,</span> sign<span class=\"token punctuation\">;</span> <span class=\"token comment\">//#define相当于只是将STRING进行了替换</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"1413-其他复杂的声明\"><a class=\"markdownIt-Anchor\" href=\"#1413-其他复杂的声明\">#</a> 14.13 其他复杂的声明</h4>\n<p><a href=\"https://imgtu.com/i/Tuzck9\"><img src=\"https://s4.ax1x.com/2021/12/21/Tuzck9.png\" alt=\"Tuzck9.png\"></a></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span> risks<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//数组内含指针</span>\n<span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span> rusks<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//指向数组的指针</span>\n<span class=\"token keyword\">int</span> goods<span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">50</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span> oof<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//内含指针的数组</span>\n<span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span> uuf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//指向3*4二维数组的指针</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> <span class=\"token function\">fump</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// 返回字符指针的函数</span>\n<span class=\"token keyword\">char</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span> frump<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// 指向函数的指针，该函数的返回类型为char</span>\n<span class=\"token keyword\">char</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span> flump<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 内含3个指针的数组，每个指针都指向返回类型为char的函数</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> arr5<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> arr5 <span class=\"token operator\">*</span> p_arr5<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> p_arr5 arrp10<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\narr5 togs<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// togs 是一个内含5个int类型值的数组</span>\np_arr5 p2<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// p2 是一个指向数组的指针，该数组内含5个int类型的值</span>\narrp10 ap<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// ap 是一个内含10个指针的数组，每个指针都指向一个内含5个int类型值的数组</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"1414-函数与指针\"><a class=\"markdownIt-Anchor\" href=\"#1414-函数与指针\">#</a> 14.14 函数与指针</h4>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// pf 是一个指向函数的指针</span>\n<span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token function\">pf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// pf 是一个返回字符指针的函数</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">ToUpper</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ToLower</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">round</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npf <span class=\"token operator\">=</span> ToUpper<span class=\"token punctuation\">;</span>      <span class=\"token comment\">// 有效，ToUpper是该类型函数的地址</span>\npf <span class=\"token operator\">=</span> ToLower<span class=\"token punctuation\">;</span>      <span class=\"token comment\">//有效，ToLower是该类型函数的地址</span>\npf <span class=\"token operator\">=</span> round<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 无效，round与指针类型不匹配</span>\npf <span class=\"token operator\">=</span> <span class=\"token function\">ToLower</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 无效，ToLower()不是地址</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">ToUpper</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ToLower</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> mis<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Nina Metier\"</span><span class=\"token punctuation\">;</span>\npf <span class=\"token operator\">=</span> ToUpper<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>mis<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 把ToUpper 作用于mis（语法1）</span>\npf <span class=\"token operator\">=</span> ToLower<span class=\"token punctuation\">;</span>\n<span class=\"token function\">pf</span><span class=\"token punctuation\">(</span>mis<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// 把ToLower 作用于mis（语法2）</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">// func_ptr.c -- 使用函数指针\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n#include &lt;ctype.h&gt;\n#define LEN 81\nchar * s_gets(char * st, int n);\nchar showmenu(void);\nvoid eatline(void);        // 读取至行末尾\nvoid show(void(*fp)(char *), char * str);\nvoid ToUpper(char *);      // 把字符串转换为大写\nvoid ToLower(char *);      // 把字符串转换为小写\nvoid Transpose(char *);    // 大小写转置\nvoid Dummy(char *);        // 不更改字符串\n\nint main(void)\n{\n     char line[LEN];\n     char copy[LEN];\n     char choice;\n     void(*pfun)(char *); // 声明一个函数指针，被指向的函数接受char *类型的参数，无返回值\n\n     puts(\"Enter a string (empty line to quit):\");\n     while (s_gets(line, LEN) != NULL &amp;&amp; line[0] != '\\0')\n     {\n          while ((choice = showmenu()) != 'n')\n          {\n               switch (choice)  // switch语句设置指针\n               {\n               case 'u': pfun = ToUpper;   break;\n               case 'l': pfun = ToLower;   break;\n               case 't': pfun = Transpose; break;\n               case 'o': pfun = Dummy;     break;\n               }\n               strcpy(copy, line);    // 为show()函数拷贝一份\n               show(pfun, copy);      // 根据用户的选择，使用选定的函数\n          }\n          puts(\"Enter a string (empty line to quit):\");\n     }\n     puts(\"Bye!\");\n\n     return 0;\n}\n\nchar showmenu(void)\n{\n     char ans;\n     puts(\"Enter menu choice:\");\n     puts(\"u) uppercase       l) lowercase\");\n     puts(\"t) transposed case o) original case\");\n     puts(\"n) next string\");\n     ans = getchar();      // 获取用户的输入\n     ans = tolower(ans);   // 转换为小写\n     eatline();            // 清理输入行\n     while (strchr(\"ulton\", ans) == NULL)\n     {\n          puts(\"Please enter a u, l, t, o, or n:\");\n          ans = tolower(getchar());\n          eatline();\n     }\n\n     return ans;\n}\n\nvoid eatline(void)\n{\n     while (getchar() != '\\n')\n          continue;\n}\n\nvoid ToUpper(char * str)\n{\n     while (*str)\n     {\n          *str = toupper(*str);\n          str++;\n     }\n}\n\nvoid ToLower(char * str)\n{\n     while (*str)\n     {\n          *str = tolower(*str);\n          str++;\n     }\n}\nvoid Transpose(char * str)\n{\n     while (*str)\n     {\n          if (islower(*str))\n               *str = toupper(*str);\n          else if (isupper(*str))\n               *str = tolower(*str);\n          str++;\n     }\n}\n\nvoid Dummy(char * str)\n{\n     // 不改变字符串\n}\n\nvoid show(void(*fp)(char *), char * str)\n{\n     (*fp)(str);   // 把用户选定的函数作用于str\n     puts(str);    // 显示结果\n}\n\nchar * s_gets(char * st, int n)\n{\n     char * ret_val;\n     char * find;\n\n     ret_val = fgets(st, n, stdin);\n     if (ret_val)\n     {\n          find = strchr(st, '\\n');    // 查找换行符\n          if (find)                   // 如果地址不是NULL，\n               *find = '\\0';          // 在此处放置一个空字符\n          else\n               while (getchar() != '\\n')\n                    continue;         // 清理输入行中剩余的字符\n     }\n     return ret_val;\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"15-第十五章位操作\"><a class=\"markdownIt-Anchor\" href=\"#15-第十五章位操作\">#</a> 15 第十五章位操作</h3>\n<h4 id=\"151-二进制数位和字节\"><a class=\"markdownIt-Anchor\" href=\"#151-二进制数位和字节\">#</a> 15.1 二进制数，位和字节</h4>\n<h5 id=\"1511-二进制整数\"><a class=\"markdownIt-Anchor\" href=\"#1511-二进制整数\">#</a> 15.1.1 二进制整数</h5>\n<p><a href=\"https://imgtu.com/i/TDB091\"><img src=\"https://s4.ax1x.com/2021/12/27/TDB091.png\" alt=\"TDB091.png\"></a></p>\n<p>1 字节为 8 位，从右到左编号 <code>0~7</code> , 编号为 7 的称为<strong>高阶位</strong>，编号为 0 的被称为<strong>低阶位</strong></p>\n<p>显然计算机进行二进制存储，一个字节可以存储 <code>0~255</code>  的范围的值</p>\n<ul>\n<li><code>unsigned char</code>  存储 <code>0~255</code></li>\n<li><code>signed char</code>  存储 <code>-128~127</code></li>\n</ul>\n<h5 id=\"1512-有符号整数\"><a class=\"markdownIt-Anchor\" href=\"#1512-有符号整数\">#</a> 15.1.2 有符号整数</h5>\n<ol>\n<li>\n<p><strong>符号量表示法</strong>：将符号存储在高阶位上用 <code>1</code>  和 <code>0</code>  区分 <code>+</code>  和 <code>-</code></p>\n</li>\n<li>\n<p><strong>二进制补码方法</strong>：1 字节的后七位表示 <code>0~127</code> , 高阶位设置为 0, 高阶位为 1 表示负数</p>\n<p>与<strong>符号表示法</strong>的区别在于如何确定负值：从 256 的二进制形式减去一个负数的位组合，结果就是该负值的量</p>\n<p>如此得到二进制补码数的相反数，就简单的方法就是反转每一位然后加上 1</p>\n</li>\n</ol>\n<h5 id=\"1513-二进制浮点数\"><a class=\"markdownIt-Anchor\" href=\"#1513-二进制浮点数\">#</a> 15.1.3 二进制浮点数</h5>\n<ol>\n<li>\n<p>二进制小数</p>\n<p>二进制表示法可以精确地表示多个<strong> 1\\2</strong> 的和</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">0</span><span class=\"token operator\">/</span><span class=\"token number\">4</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">8</span>\n<span class=\"token number\">0.50</span> <span class=\"token operator\">+</span> <span class=\"token number\">0.00</span> <span class=\"token operator\">+</span> <span class=\"token number\">0.125</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>浮点数表示法</p>\n<p>计算机中表示一个浮点数，留出若干位存储二进制分数，其他位存储指数</p>\n</li>\n</ol>\n<h4 id=\"152-其他进制数\"><a class=\"markdownIt-Anchor\" href=\"#152-其他进制数\">#</a> 15.2 其他进制数</h4>\n<h5 id=\"1521-八进制数\"><a class=\"markdownIt-Anchor\" href=\"#1521-八进制数\">#</a> 15.2.1 八进制数</h5>\n<p>一个八进制位等价于三个二进制位 8=2 的三次方</p>\n<p><a href=\"https://imgtu.com/i/TDsEX6\"><img src=\"https://s4.ax1x.com/2021/12/27/TDsEX6.png\" alt=\"TDsEX6.png\"></a></p>\n<h5 id=\"1522-十六进制\"><a class=\"markdownIt-Anchor\" href=\"#1522-十六进制\">#</a> 15.2.2 十六进制</h5>\n<p>十六进制中 <code>A~F</code>  表示 <code>10~15</code> , 每个十六进制位对应一个 4 位的二进制数</p>\n<h4 id=\"153-c按位运算符\"><a class=\"markdownIt-Anchor\" href=\"#153-c按位运算符\">#</a> 15.3 C 按位运算符</h4>\n<h5 id=\"1531-按位逻辑算符\"><a class=\"markdownIt-Anchor\" href=\"#1531-按位逻辑算符\">#</a> 15.3.1 按位逻辑算符</h5>\n<ol>\n<li>\n<p>二进制反码或按位取反: <code>~</code></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">～<span class=\"token punctuation\">(</span><span class=\"token number\">10011010</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 表达式</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">01100101</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">// 结果值</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>按位与: <code>&amp;</code></p>\n<p>逐位比较两个运算对象，对于每一个位只有都为 1 时为真</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token punctuation\">(</span><span class=\"token number\">10010011</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token number\">00111101</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">// 表达式</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">00010001</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">// 结果值</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>按位与赋值运算符: <code>&amp;=</code></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">val <span class=\"token operator\">&amp;=</span> <span class=\"token number\">0377</span><span class=\"token punctuation\">;</span>\nval <span class=\"token operator\">=</span> val <span class=\"token operator\">&amp;</span> <span class=\"token number\">0377</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//效用相同</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>按位或:  <code>|</code></p>\n<p>对应位中一个为真就为真</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token punctuation\">(</span><span class=\"token number\">10010011</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token number\">00111101</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 表达式</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">10111111</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 结果值</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>按位或与赋值运算符： <code>|=</code></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">val <span class=\"token operator\">|=</span> <span class=\"token number\">0377</span><span class=\"token punctuation\">;</span>\nval <span class=\"token operator\">=</span> val <span class=\"token operator\">|</span> <span class=\"token number\">0377</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>按位异或: <code>^</code></p>\n<p>其中一个为 1, 不能两个都为 1, 就为真</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token punctuation\">(</span><span class=\"token number\">10010011</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token punctuation\">(</span><span class=\"token number\">00111101</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 表达式</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">10101110</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">// 结果值</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>按位异或和赋值结合的运算符： <code>^=</code></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">val <span class=\"token operator\">^=</span> <span class=\"token number\">0377</span><span class=\"token punctuation\">;</span>\nval <span class=\"token operator\">=</span> val <span class=\"token operator\">^</span> <span class=\"token number\">0377</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<h5 id=\"1532-用法掩码\"><a class=\"markdownIt-Anchor\" href=\"#1532-用法掩码\">#</a> 15.3.2 用法：掩码</h5>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">flags <span class=\"token operator\">=</span> flags <span class=\"token operator\">&amp;</span> MASK<span class=\"token punctuation\">;</span> <span class=\"token comment\">//MASK为00000010</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>因为任何数和 0 最后都会为 0, 而 1 不发生改变，保留 <code>flags</code>  中的原值，这相当于把掩码中的 0 看做不透明，1 看做透明， <code>flags &amp; MASK</code>  相当于把掩码覆盖在 <code>flags</code>  的位组合上，只有 <code>MASK</code>  为 1 的位才可见</p>\n<h5 id=\"1533-用法打开位设置位\"><a class=\"markdownIt-Anchor\" href=\"#1533-用法打开位设置位\">#</a> 15.3.3 用法：打开位 (设置位)</h5>\n<p>打开一个值中的特定位而保持其他位不变</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">flags <span class=\"token operator\">=</span> flags <span class=\"token operator\">|</span> MASK<span class=\"token punctuation\">;</span> <span class=\"token comment\">//MASK只有1号位为1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>这样 flags 中的一号位会变成 1, 而其他值会保持不变</p>\n<h5 id=\"1534-用法关闭位清空位\"><a class=\"markdownIt-Anchor\" href=\"#1534-用法关闭位清空位\">#</a> 15.3.4 用法：关闭位 (清空位)</h5>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">flags <span class=\"token operator\">=</span> flags <span class=\"token operator\">&amp;</span> ～MASK<span class=\"token punctuation\">;</span> <span class=\"token comment\">//MASK只有1号位为1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>所有和 1 <code>和</code> 的都会保持原位，而 1 号位变成了 0, 这样 <code>flags</code>  的一号位就会变成 0</p>\n<h5 id=\"1535-用法切换位\"><a class=\"markdownIt-Anchor\" href=\"#1535-用法切换位\">#</a> 15.3.5 用法：切换位</h5>\n<p><strong>切换位</strong>：打开已关闭的位或关闭已经打开的位</p>\n<p>可以使用 <code>^</code> (如果 b 是 1, <code>1^b</code>  为 0, 如果 b 是 0, <code>1^b</code>  为 1)</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">flags <span class=\"token operator\">=</span> flags <span class=\"token operator\">^</span> MASK<span class=\"token punctuation\">;</span>\nflags <span class=\"token operator\">^=</span> MASK<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">00001111</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token punctuation\">(</span><span class=\"token number\">10110110</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">// 表达式</span>\n <span class=\"token punctuation\">(</span><span class=\"token number\">10111001</span><span class=\"token punctuation\">)</span>                <span class=\"token comment\">// 结果值</span>\n    <span class=\"token comment\">//将MASK中要切换的位设置为1,其他位设置成0</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"1536-用法检查某位的值\"><a class=\"markdownIt-Anchor\" href=\"#1536-用法检查某位的值\">#</a> 15.3.6 用法：检查某位的值</h5>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>flags <span class=\"token operator\">&amp;</span> MASK<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> MASK<span class=\"token punctuation\">)</span>\n     <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Wow!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h5 id=\"1537-移位运算符\"><a class=\"markdownIt-Anchor\" href=\"#1537-移位运算符\">#</a> 15.3.7 移位运算符</h5>\n<ol>\n<li>\n<p>左移: <code>&lt;&lt;</code></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token punctuation\">(</span><span class=\"token number\">10001010</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">2</span>   <span class=\"token comment\">// 表达式</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">00101000</span><span class=\"token punctuation\">)</span>        <span class=\"token comment\">// 结果值</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>移出左端的值丢失，空余部分用 0 填充</p>\n</li>\n<li>\n<p>右移: <code>&gt;&gt;</code></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token punctuation\">(</span><span class=\"token number\">10001010</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">2</span>       <span class=\"token comment\">// 表达式，有符号值</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">00100010</span><span class=\"token punctuation\">)</span>            <span class=\"token comment\">// 在某些系统中的结果值</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">10001010</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">2</span>       <span class=\"token comment\">// 表达式，有符号值</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">11100010</span><span class=\"token punctuation\">)</span>            <span class=\"token comment\">// 在另一些系统上的结果值</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">10001010</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">2</span>       <span class=\"token comment\">// 表达式，无符号值</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">00100010</span><span class=\"token punctuation\">)</span>            <span class=\"token comment\">// 所有系统都得到该结果值</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>与左移类似</p>\n</li>\n<li>\n<p>用法：移位运算符</p>\n<p>针对 2 的幂提供快速有效的乘法和除法</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">number <span class=\"token operator\">&lt;&lt;</span> n        <span class=\"token comment\">//number乘以2的n次幂</span>\nnumber <span class=\"token operator\">&gt;&gt;</span> n        <span class=\"token comment\">//如果number为非负，则用number除以2的n次幂</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>​\t类似于在十进制中移动小数点</p>\n</li>\n</ol>\n<h5 id=\"1538-编程实例\"><a class=\"markdownIt-Anchor\" href=\"#1538-编程实例\">#</a> 15.3.8 编程实例</h5>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">/* binbit.c -- 使用位操作显示二进制 */</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;limits.h&gt;</span>  <span class=\"token comment\">// 提供 CHAR_BIT 的定义，CHAR_BIT 表示每字节的位数</span></span>\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> <span class=\"token function\">itobs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">show_bstr</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">char</span> bin_str<span class=\"token punctuation\">[</span>CHAR_BIT <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">int</span> number<span class=\"token punctuation\">;</span>\n\n     <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter integers and see them in binary.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Non-numeric input terminates program.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>number<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">itobs</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">,</span> bin_str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d is \"</span><span class=\"token punctuation\">,</span> number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">show_bstr</span><span class=\"token punctuation\">(</span>bin_str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">putchar</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n     <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bye!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> <span class=\"token function\">itobs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> ps<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">const</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> size <span class=\"token operator\">=</span> CHAR_BIT <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> size <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">,</span> n <span class=\"token operator\">&gt;&gt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n          ps<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">01</span> <span class=\"token operator\">&amp;</span> n<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">;</span>\n     ps<span class=\"token punctuation\">[</span>size<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token keyword\">return</span> ps<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/*4位一组显示二进制字符串 */</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">show_bstr</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> str<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">/* 不是一个空字符 */</span>\n     <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">putchar</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>i <span class=\"token operator\">%</span> <span class=\"token number\">4</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n               <span class=\"token function\">putchar</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"154-位字段\"><a class=\"markdownIt-Anchor\" href=\"#154-位字段\">#</a> 15.4 位字段</h4>\n<p>位字段是操作位的第二种方法</p>\n<p>位字段是一个 <code>signed int</code>  或 <code>unsigned int</code>  类型变量中的一组相邻的位</p>\n<p>位字段通过一个结构声明来建立，该结构声明为每个字段提供了标签</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">struct {\n     unsigned int autfd : 1;\n     unsigned int bldfc : 1;\n     unsigned int undln : 1;\n     unsigned int itals : 1;\n} prnt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"16-第十六章-c预处理器和c库\"><a class=\"markdownIt-Anchor\" href=\"#16-第十六章-c预处理器和c库\">#</a> 16 第十六章 C 预处理器和 C 库</h3>\n<h4 id=\"161-翻译程序的第一步\"><a class=\"markdownIt-Anchor\" href=\"#161-翻译程序的第一步\">#</a> 16.1 翻译程序的第一步</h4>\n<ol>\n<li>\n<p>编译器把源代码中出现的字符映射到源字符集</p>\n</li>\n<li>\n<p>编译器定位每个反斜杠后面跟着换行符的实例，并删除他们</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span>\"That's wond\\ \n　　　　 erful<span class=\"token operator\">!</span>\\n\"<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//物理行</span>\n　　　　 <span class=\"token comment\">//经过转化</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"That's wonderful\\n!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//逻辑行</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>也就是把源代码中分成分成多行的物理行 转化成一行的逻辑行</p>\n<p>代码中 <code>wond</code>  后面的 <code>\\</code>  的意思是按下 <code>enter</code>  在源代码文件中换行生成的字符</p>\n</li>\n<li>\n<p>编译器把文本划分成<strong>预处理记号序列</strong> (记号是由空格，制表符，换行符分隔的项),<strong> 空白序列</strong>和<strong>注释序列</strong></p>\n<p><strong>编译器将用空格字符替换每一条注释</strong></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span><span class=\"token comment\">/* 这看起来并不像一个空格*/</span>fox<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//将变成</span>\n<span class=\"token keyword\">int</span> fox<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<p>然后程序开始循环一行中以 <code>#</code> 开始的预处理指令</p>\n<h4 id=\"162-明示常量-define\"><a class=\"markdownIt-Anchor\" href=\"#162-明示常量-define\">#</a> 16.2 明示常量:  <code>#define</code></h4>\n<p>指令可以出现在源文件的任何地方，定义从指令出现的地方到该<strong>文件末尾</strong>有效</p>\n<p>大量使用 <code>#difine</code>  指令来定义<strong>明示常量</strong></p>\n<p>预处理器指令从 <code>#</code> 开始运行，到后面的第一个换行符为止，指令的长度<strong>仅限于一行</strong></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">OW</span> <span class=\"token string\">\"Consistency is the last refuge of the unimagina\\\n　　 tive. - Oscar Wilde\"</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>可以通过添加 <code>\\</code>  来拓展行，注意 <code>tive</code>  前面的空格也会计算在内</p>\n<p><code>#define</code>  (逻辑行) 由三部分组成</p>\n<ul>\n<li>\n<p><code>#define</code>  指令本身</p>\n</li>\n<li>\n<p>选定的缩写，成为<strong>宏</strong>，分为<strong>类对象宏</strong>和<strong>类函数宏</strong></p>\n<p>宏的名称不允许有空格，<u>只能使用字符，数字和下划线字符 ( <code>-</code> ), 并且首字符不能是数字</u></p>\n</li>\n<li>\n<p><strong>替换体或者替换列表</strong>，预处理器程序在程序中找到宏的示例后，就会用替换体代替该宏</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">LIMIT</span> <span class=\"token expression\"><span class=\"token number\">20</span></span></span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> LIM <span class=\"token operator\">=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> data1<span class=\"token punctuation\">[</span>LIMIT<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>　 　<span class=\"token comment\">// 有效</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> data2<span class=\"token punctuation\">[</span>LIM<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>　　 　<span class=\"token comment\">// 无效</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> LIM2 <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> LIMIT 　<span class=\"token comment\">// 有效</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> LIM3 <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> LIM<span class=\"token punctuation\">;</span>　　<span class=\"token comment\">// 无效</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"1621-记号\"><a class=\"markdownIt-Anchor\" href=\"#1621-记号\">#</a> 16.2.1 记号</h5>\n<p>可以把宏的替换体看做是<strong>记号型</strong>字符串，而不是字符型字符串</p>\n<ul>\n<li>字符型字符串：把替换体中的空格看做为替换体的一部分</li>\n<li>记号型字符串：把替换体中的空格看做替换体中各记号的分隔符</li>\n</ul>\n<h5 id=\"1622-重定义常量\"><a class=\"markdownIt-Anchor\" href=\"#1622-重定义常量\">#</a> 16.2.2 重定义常量</h5>\n<p>对同一个宏进行二次定义这个过程称为<strong>重定义常量</strong></p>\n<p>除非新定义和旧定义相同，否则有些实现会将其视为错误</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SIX</span> <span class=\"token expression\"><span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token number\">3</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SIX</span> <span class=\"token expression\"><span class=\"token number\">2</span><span class=\"token operator\">*</span><span class=\"token number\">3</span></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>以上两者是不同的定义，第一行中有三个记号通过空格分开，第二行中只有一个记号</p>\n<h4 id=\"163-在define中使用参数\"><a class=\"markdownIt-Anchor\" href=\"#163-在define中使用参数\">#</a> 16.3 在 <code>#define</code>  中使用参数</h4>\n<p>在 <code>#define</code>  中使用参数可以创建外形和作用与函数类似的<strong>类函数宏</strong></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">SQUARE</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span> X<span class=\"token operator\">*</span>X   </span><span class=\"token comment\">//SQUARE是宏标识符 x是红参数 x*x是替换列表</span></span>\nz <span class=\"token operator\">=</span> <span class=\"token function\">SQUARE</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>预处理器不做计算不求值，只替换字符序列，所以会在一些地方导致错误</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">SQUARE</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span> X<span class=\"token operator\">*</span>X</span></span>\n<span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\nz <span class=\"token operator\">=</span> <span class=\"token function\">SQUARE</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>z 的结果不会是你想象中的 49, 按照一一对应替换 最后得到的表达式是 x+2 * x + 2 先乘法再加减 最后得到的结果会是 17</p>\n<p>一般而言不要在宏中使用递增或者递减运算符，因为 C 标准对这种表达式求值没有定义，所以不同的编译器计算出来的答案可能是不一样的</p>\n<h5 id=\"1631-用宏参数创建字符串-运算符\"><a class=\"markdownIt-Anchor\" href=\"#1631-用宏参数创建字符串-运算符\">#</a> 16.3.1 用宏参数创建字符串: #运算符</h5>\n<p>在类函数宏的替换体中， <code>#</code> 作为一个预处理运算符，可以把记号转换成字符串</p>\n<p>比如 如果 <code>x</code>  是一个宏形参，那么 <code>#x</code>  就是形参的名字，这个过程叫做<strong>字符串化</strong></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">/* subst.c -- 在字符串中替换 */</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">PSQR</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span></span><span class=\"token string\">\"The square of \"</span> <span class=\"token expression\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">x</span> </span></span><span class=\"token string\">\" is %d.\\n\"</span><span class=\"token expression\"><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span>\n　\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n　　 <span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n　\n　　 <span class=\"token function\">PSQR</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token function\">PSQR</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　\n　　 <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//输出结果</span>\nThe square of y is <span class=\"token number\">25.</span>\nThe square of <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">4</span> is <span class=\"token number\">36.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"1632-预处理器黏合剂-运算符\"><a class=\"markdownIt-Anchor\" href=\"#1632-预处理器黏合剂-运算符\">#</a> 16.3.2 预处理器黏合剂:  <code>##</code> 运算符</h5>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// glue.c -- 使用##运算符</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">XNAME</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> x </span><span class=\"token punctuation\">##</span> <span class=\"token expression\">n</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">PRINT_XN</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span></span><span class=\"token string\">\"x\"</span> <span class=\"token expression\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">n</span> </span></span><span class=\"token string\">\" = %d\\n\"</span><span class=\"token expression\"><span class=\"token punctuation\">,</span> x </span><span class=\"token punctuation\">##</span> <span class=\"token expression\">n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></span>\n　\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n　　 <span class=\"token keyword\">int</span> <span class=\"token function\">XNAME</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">14</span><span class=\"token punctuation\">;</span>　　<span class=\"token comment\">// 变成 int x1 = 14;</span>\n　　 <span class=\"token keyword\">int</span> <span class=\"token function\">XNAME</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>　  <span class=\"token comment\">// 变成 int x2 = 20;</span>\n　　 <span class=\"token keyword\">int</span> x3 <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token function\">PRINT_XN</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>　　　<span class=\"token comment\">// 变成 printf(\"x1 = %d\\n\", x1);</span>\n　　 <span class=\"token function\">PRINT_XN</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>　　　<span class=\"token comment\">// 变成 printf(\"x2 = %d\\n\", x2);</span>\n　　 <span class=\"token function\">PRINT_XN</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>　　　<span class=\"token comment\">// 变成 printf(\"x3 = %d\\n\", x3);</span>\n　　　 <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//输出结果</span>\nx1 <span class=\"token operator\">=</span> <span class=\"token number\">14</span>\nx2 <span class=\"token operator\">=</span> <span class=\"token number\">20</span>\nx3 <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"1633-变参宏-和__va_args__\"><a class=\"markdownIt-Anchor\" href=\"#1633-变参宏-和__va_args__\">#</a> 16.3.3 变参宏:  <code>...</code>  和 <code>__VA_ARGS__</code></h5>\n<p><code>stdvar.h</code>  头文件提供了工具，让用户自定义带可变参数的函数</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">PR</span><span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span>_ _VA_ARGS_ _<span class=\"token punctuation\">)</span> </span><span class=\"token comment\">//   ...中的部分会替换__VA_ARGS__</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// variadic.c -- 变参宏</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;math.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">PR</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span></span><span class=\"token string\">\"Message \"</span> <span class=\"token expression\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token expression\">X </span></span></span><span class=\"token string\">\": \"</span> <span class=\"token expression\">_ _VA_ARGS_ _<span class=\"token punctuation\">)</span></span></span>\n　\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n　　 <span class=\"token keyword\">double</span> x <span class=\"token operator\">=</span> <span class=\"token number\">48</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token keyword\">double</span> y<span class=\"token punctuation\">;</span>\n　\n　　 y <span class=\"token operator\">=</span> <span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token function\">PR</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"x = %g\\n\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token function\">PR</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"x = %.2f, y = %.4f\\n\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　\n　　 <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>注意，省略号只能代替<strong>最后的宏参数</strong></p>\n<h4 id=\"164-宏和函数的选择\"><a class=\"markdownIt-Anchor\" href=\"#164-宏和函数的选择\">#</a> 16.4 宏和函数的选择</h4>\n<p>宏要更加不咋一些 稍有不慎就会产生奇怪的副作用</p>\n<ul>\n<li>宏相当于是生成内联代码，即在程序中生成语句 插入代码，</li>\n<li>由于宏处理的是字符串 而不是实际的值 所以不同担心变量类型</li>\n</ul>\n<p>对于简单的函数关系式可以使用宏</p>\n<p>需要注意以下几点：</p>\n<ul>\n<li>宏名中不能用空格，但是在替换字符串中可以有空格</li>\n<li>用圆括号把宏的参数和整个替换体括起来，这能才能确保被括起来的部分能够正常展开</li>\n<li>用大写字母表示宏函数的名称</li>\n</ul>\n<h4 id=\"165-文件包含-include\"><a class=\"markdownIt-Anchor\" href=\"#165-文件包含-include\">#</a> 16.5 文件包含: ： <code>#include</code></h4>\n<p>预处理器发现 <code>#include</code> , 会产后面的文件名，并把文件的内容包含到当前文件中，替换源文件中 <code>#include</code>  指令</p>\n<p><code>#include</code>  指令有两种形式</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span>　　　<span class=\"token expression\">←文件名在尖括号中</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"mystuff.h\"</span>　　<span class=\"token expression\">←文件名在双引号中</span></span>\n<span class=\"token comment\">//</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span>　　  　<span class=\"token expression\">←查找系统目录</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"hot.h\"</span>　      　<span class=\"token expression\">←查找当前工作目录</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"/usr/biff/p.h\"</span>　<span class=\"token expression\">←查找<span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>biff目录</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"1651-头文件示例\"><a class=\"markdownIt-Anchor\" href=\"#1651-头文件示例\">#</a> 16.5.1 头文件示例</h5>\n<p>声明和指令放在 <code>.h</code>  头文件中，函数定义放在 <code>.c</code>  源代码文件中</p>\n<h5 id=\"1652-使用头文件\"><a class=\"markdownIt-Anchor\" href=\"#1652-使用头文件\">#</a> 16.5.2 使用头文件</h5>\n<p>可以通过头文件声明外部变量供其他文件共享</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> status <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>　　<span class=\"token comment\">// 该变量具有文件作用域，在源代码文件</span>\n<span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> status<span class=\"token punctuation\">;</span>　　<span class=\"token comment\">// 在头文件中</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h4 id=\"166-其他指令\"><a class=\"markdownIt-Anchor\" href=\"#166-其他指令\">#</a> 16.6 其他指令</h4>\n<h5 id=\"1661-undef指令\"><a class=\"markdownIt-Anchor\" href=\"#1661-undef指令\">#</a> 16.6.1  <code>#undef</code>  指令</h5>\n<p><code>#undef</code>  指令用于<strong>取消</strong>已经定义的 <code>#define</code>  指令</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">LIMIT</span> <span class=\"token expression\"><span class=\"token number\">400</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">undef</span> <span class=\"token expression\">LIMIT </span><span class=\"token comment\">//取消LIMIT</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h5 id=\"1662-从c预处理器角度看已定义\"><a class=\"markdownIt-Anchor\" href=\"#1662-从c预处理器角度看已定义\">#</a> 16.6.2  从 C 预处理器角度看已定义</h5>\n<p>通过 <code>#define</code>  指令创建的红名，而且没有使用 <code>#undef</code>  关闭就是已定义</p>\n<h5 id=\"1663-条件编译\"><a class=\"markdownIt-Anchor\" href=\"#1663-条件编译\">#</a> 16.6.3 条件编译</h5>\n<h6 id=\"1-ifdefelseendif指令\"><a class=\"markdownIt-Anchor\" href=\"#1-ifdefelseendif指令\">#</a> 1.  <code>#ifdef</code> , <code>#else</code> , <code>#endif</code>  指令</h6>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">MAVIS</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"horse.h\"</span>　 <span class=\"token comment\">// 如果已经用#define定义了 MAVIS，则执行下面的指令</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">STABLES</span> <span class=\"token expression\"><span class=\"token number\">5</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"cow.h\"</span>　　　<span class=\"token comment\">//如果没有用#define定义 MAVIS，则执行下面的指令</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">STABLES</span> <span class=\"token expression\"><span class=\"token number\">15</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">/* ifdef.c -- 使用条件编译 */</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">JUST_CHECKING</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">LIMIT</span> <span class=\"token expression\"><span class=\"token number\">4</span></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n　　 <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n　　 <span class=\"token keyword\">int</span> total <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n　　 <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> LIMIT<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n　　 <span class=\"token punctuation\">{</span>\n　　　　　total <span class=\"token operator\">+=</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> i<span class=\"token operator\">*</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">JUST_CHECKING</span></span>\n　　　　　<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i=%d, running total = %d\\n\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> total<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n　　 <span class=\"token punctuation\">}</span>\n　　 <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Grand total = %d\\n\"</span><span class=\"token punctuation\">,</span> total<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n　　 <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h6 id=\"2-ifndef指令\"><a class=\"markdownIt-Anchor\" href=\"#2-ifndef指令\">#</a> 2.  <code>#ifndef</code>  指令</h6>\n<p>与 <code>#ifdef</code>  指令相似，但是 <code>#ifndef</code>  是判断后面是否为未定义</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">/* things.h */</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">THINGS_H_</span></span>\n　　 #define THINGS_H_\n　　 <span class=\"token comment\">/* 省略了头文件中的其他内容*/</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// names.h --修订后的 names_st 头文件，避免重复包含</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">NAMES_H_</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">NAMES_H_</span></span>\n\n<span class=\"token comment\">// 明示常量</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SLEN</span> <span class=\"token expression\"><span class=\"token number\">32</span></span></span>\n\n<span class=\"token comment\">// 结构声明</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">names_st</span>\n<span class=\"token punctuation\">{</span>\n　　 <span class=\"token keyword\">char</span> first<span class=\"token punctuation\">[</span>SLEN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token keyword\">char</span> last<span class=\"token punctuation\">[</span>SLEN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 类型定义</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">names_st</span> names<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 函数原型</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">get_names</span><span class=\"token punctuation\">(</span>names <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">show_names</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> names <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> <span class=\"token function\">s_gets</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> st<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n<span class=\"token comment\">//可以放置二次重复包含导致的错误</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h6 id=\"3-if和elif指令\"><a class=\"markdownIt-Anchor\" href=\"#3-if和elif指令\">#</a> 3.  <code>#if</code>  和 <code>#elif</code>  指令</h6>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\">SYS <span class=\"token operator\">==</span> <span class=\"token number\">1</span></span></span>\n　　 #include <span class=\"token string\">\"ibmpc.h\"</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">elif</span> <span class=\"token expression\">SYS <span class=\"token operator\">==</span> <span class=\"token number\">2</span></span></span>\n　　 #include <span class=\"token string\">\"vax.h\"</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">elif</span> <span class=\"token expression\">SYS <span class=\"token operator\">==</span> <span class=\"token number\">3</span></span></span>\n　　 #include <span class=\"token string\">\"mac.h\"</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span></span>\n　　 #include <span class=\"token string\">\"general.h\"</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"1664-预定义宏\"><a class=\"markdownIt-Anchor\" href=\"#1664-预定义宏\">#</a> 16.6.4 预定义宏</h5>\n<p><a href=\"https://imgtu.com/i/TQS9tH\"><img src=\"https://s4.ax1x.com/2021/12/21/TQS9tH.png\" alt=\"TQS9tH.png\"></a></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// predef.c -- 预定义宏和预定义标识符</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">why_me</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n　　 <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The file is %s.\\n\"</span><span class=\"token punctuation\">,</span> _ _FILE_ _<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The date is %s.\\n\"</span><span class=\"token punctuation\">,</span> _ _DATE_ _<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The time is %s.\\n\"</span><span class=\"token punctuation\">,</span> _ _TIME_ _<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The version is %ld.\\n\"</span><span class=\"token punctuation\">,</span> _ _STDC_VERSION_ _<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"This is line %d.\\n\"</span><span class=\"token punctuation\">,</span> _ _LINE_ _<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"This function is %s\\n\"</span><span class=\"token punctuation\">,</span> _ _func_ _<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token function\">why_me</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n　　 <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">why_me</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n　　 <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"This function is %s\\n\"</span><span class=\"token punctuation\">,</span> _ _func_ _<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"This is line %d.\\n\"</span><span class=\"token punctuation\">,</span> _ _LINE_ _<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//输出结果</span>\nThe file is predef<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">.</span>\nThe date is Sep <span class=\"token number\">23</span> <span class=\"token number\">2013.</span>\nThe time is <span class=\"token number\">22</span><span class=\"token operator\">:</span><span class=\"token number\">01</span><span class=\"token operator\">:</span><span class=\"token number\">09.</span>\nThe version is <span class=\"token number\">201112.</span>\nThis is line <span class=\"token number\">11.</span>\nThis function is main\nThis function is why_me\nThis is line <span class=\"token number\">21.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"1665-line和error\"><a class=\"markdownIt-Anchor\" href=\"#1665-line和error\">#</a> 16.6.5  <code>#line</code>  和 <code>#error</code></h5>\n<p><code>#line</code>  重置 <code>_ _LINE_ _</code> 和 <code>_ _FILE_ _</code> 宏报告的行号和文件名</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">line</span> <span class=\"token expression\"><span class=\"token number\">1000</span> 　　　    </span><span class=\"token comment\">// 把当前行号重置为1000</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">line</span> <span class=\"token expression\"><span class=\"token number\">10</span> </span><span class=\"token string\">\"cool.c\"</span> 　<span class=\"token comment\">// 把行号重置为10，把文件名重置为cool.c</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><code>#error</code>  指令让预处理器发出一条错误信息</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\">_ _STDC_VERSION_ _ <span class=\"token operator\">!=</span> <span class=\"token number\">201112L</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">error</span> <span class=\"token expression\">Not C11</span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"1666-pragma\"><a class=\"markdownIt-Anchor\" href=\"#1666-pragma\">#</a> 16.6.6  <code>#pragma</code></h5>\n<p><code>#pragma</code>  把编译器指令放入源代码中</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">c9x on </span><span class=\"token comment\">//让编译器支持C9X</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>C99 提供了 <code>_Pragma</code>  预处理器运算符，该运算符把字符串转化成普通的编译指示</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">_Pragma</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"nonstandardtreatmenttypeB on\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">nonstandardtreatmenttypeB on</span></span>\n    <span class=\"token comment\">//两者等价</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"1667-泛型选择c11\"><a class=\"markdownIt-Anchor\" href=\"#1667-泛型选择c11\">#</a> 16.6.7 泛型选择 (C11)</h5>\n<p><strong>泛型编程</strong>：没有特定类型，但是一旦指定一种类型，就可以转换成指定类型的代码</p>\n<p><strong>泛型表达式</strong>：可以根据表达式的类型选择一个值</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">_Generic</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//_Generic是关键字</span>\n    <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">MYTYPE</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span> <span class=\"token keyword\">_Generic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span><span class=\"token punctuation\">\\</span>\n　　 <span class=\"token expression\"><span class=\"token keyword\">int</span><span class=\"token operator\">:</span> </span><span class=\"token string\">\"int\"</span><span class=\"token expression\"><span class=\"token punctuation\">,</span></span><span class=\"token punctuation\">\\</span>\n　　 <span class=\"token expression\"><span class=\"token keyword\">float</span> <span class=\"token operator\">:</span> </span><span class=\"token string\">\"float\"</span><span class=\"token expression\"><span class=\"token punctuation\">,</span></span><span class=\"token punctuation\">\\</span>\n　　 <span class=\"token expression\"><span class=\"token keyword\">double</span><span class=\"token operator\">:</span> </span><span class=\"token string\">\"double\"</span><span class=\"token expression\"><span class=\"token punctuation\">,</span></span><span class=\"token punctuation\">\\</span>\n　　 <span class=\"token expression\"><span class=\"token keyword\">default</span><span class=\"token operator\">:</span> </span><span class=\"token string\">\"other\"</span><span class=\"token punctuation\">\\</span>\n<span class=\"token expression\"><span class=\"token punctuation\">)</span></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// mytype.c</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">MYTYPE</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span> <span class=\"token keyword\">_Generic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span><span class=\"token punctuation\">\\</span>\n　　 <span class=\"token expression\"><span class=\"token keyword\">int</span><span class=\"token operator\">:</span> </span><span class=\"token string\">\"int\"</span><span class=\"token expression\"><span class=\"token punctuation\">,</span></span><span class=\"token punctuation\">\\</span>\n　　 <span class=\"token expression\"><span class=\"token keyword\">float</span> <span class=\"token operator\">:</span> </span><span class=\"token string\">\"float\"</span><span class=\"token expression\"><span class=\"token punctuation\">,</span></span><span class=\"token punctuation\">\\</span>\n　　 <span class=\"token expression\"><span class=\"token keyword\">double</span><span class=\"token operator\">:</span> </span><span class=\"token string\">\"double\"</span><span class=\"token expression\"><span class=\"token punctuation\">,</span></span><span class=\"token punctuation\">\\</span>\n　　 <span class=\"token expression\"><span class=\"token keyword\">default</span><span class=\"token operator\">:</span> </span><span class=\"token string\">\"other\"</span><span class=\"token punctuation\">\\</span>\n<span class=\"token expression\"><span class=\"token punctuation\">)</span></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n　　 <span class=\"token keyword\">int</span> d <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n\n　　 <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">MYTYPE</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>　  　<span class=\"token comment\">// d 是int类型</span>\n　　 <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">MYTYPE</span><span class=\"token punctuation\">(</span><span class=\"token number\">2.0</span><span class=\"token operator\">*</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>　<span class=\"token comment\">// 2.0 * d 是double类型</span>\n　　 <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">MYTYPE</span><span class=\"token punctuation\">(</span><span class=\"token number\">3L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>　 　<span class=\"token comment\">// 3L 是long类型</span>\n　　 <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">MYTYPE</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>　 　<span class=\"token comment\">// &amp;d 的类型是 int *</span>\n　　 <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//输出结果</span>\n<span class=\"token keyword\">int</span>\n<span class=\"token keyword\">double</span>\nother\nother<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"167-内联函数c99\"><a class=\"markdownIt-Anchor\" href=\"#167-内联函数c99\">#</a> 16.7 内联函数 (C99)</h4>\n<p>把函数变成内联函数，编译器可能会用内联代码替换函数调用</p>\n<p>具有内部链接的函数可以称为内联函数，内联函数的定义和调用该函数的代码必须在同一个文件中</p>\n<p>最简单的定义方法是使用函数说明符 <code>inline</code>  和存储类别说明符 <code>static</code></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">eatline</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>　<span class=\"token comment\">// 内联函数定义/原型</span>\n<span class=\"token punctuation\">{</span>\n　　 <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n　　　　　<span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n　　 <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n　　 <span class=\"token function\">eatline</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>　　　<span class=\"token comment\">// 函数调用</span>\n　　 <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>编译器会用函数体中的代码替换函数调用</p>\n<p>由于没有给内联函数预留单独的代码块所以无法获得内联函数的地址</p>\n<h4 id=\"168-_noreturn函数c11\"><a class=\"markdownIt-Anchor\" href=\"#168-_noreturn函数c11\">#</a> 16.8  <code>_Noreturn</code>  函数 (C11)</h4>\n<p><code>_Noreturn</code>  表示调用完函数后不返回主调函数</p>\n<h4 id=\"169-c库\"><a class=\"markdownIt-Anchor\" href=\"#169-c库\">#</a> 16.9 C 库</h4>\n<h5 id=\"1691-访问c库\"><a class=\"markdownIt-Anchor\" href=\"#1691-访问c库\">#</a> 16.9.1 访问 C 库</h5>\n<ol>\n<li>\n<p>自动访问</p>\n<p>在一些系统中只需要编译程序，就可以使用一些常用的库函数</p>\n</li>\n<li>\n<p>文件包含</p>\n<p>可以通过 <code>#include</code>  指令包含定义宏函数的文件</p>\n</li>\n<li>\n<p>库包含</p>\n<p>在编译或链接程序的某些阶段，可能需要指定库选项，需要通过编译时选项像是指定这些库</p>\n</li>\n</ol>\n<h5 id=\"1692-使用库描述\"><a class=\"markdownIt-Anchor\" href=\"#1692-使用库描述\">#</a> 16.9.2 使用库描述</h5>\n<h4 id=\"1610-数学库\"><a class=\"markdownIt-Anchor\" href=\"#1610-数学库\">#</a> 16.10 数学库</h4>\n<p><code>math.h</code>  头文件提供这些函数的原型</p>\n<p><a href=\"https://imgtu.com/i/TQiHhD\"><img src=\"https://s4.ax1x.com/2021/12/21/TQiHhD.png\" alt=\"TQiHhD.png\"></a></p>\n<h5 id=\"16101-三角问题\"><a class=\"markdownIt-Anchor\" href=\"#16101-三角问题\">#</a> 16.10.1 三角问题</h5>\n<p>数学库提供平方根函数和一堆反正切函数</p>\n<ul>\n<li>平方根函数是 <code>sqrt()</code> , 接受一个 <code>double</code>  类型的值，并返回参数的平方根也是 <code>double</code>  类型</li>\n<li><code>atan()</code>  接受一个 <code>double</code>  类型的参数，并返回一个角度</li>\n<li><code>atan2()</code>  函数，接受两个参数 <code>X</code>  和 <code>Y</code> ,</li>\n</ul>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">/* rect_pol.c -- 把直角坐标转换为极坐标 */</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;math.h&gt;</span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">RAD_TO_DEG</span> <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token number\">180</span><span class=\"token operator\">/</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span> <span class=\"token operator\">*</span> <span class=\"token function\">atan</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">polar_v</span> <span class=\"token punctuation\">{</span>\n　　 <span class=\"token keyword\">double</span> magnitude<span class=\"token punctuation\">;</span>\n　　 <span class=\"token keyword\">double</span> angle<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> Polar_V<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">rect_v</span> <span class=\"token punctuation\">{</span>\n　　 <span class=\"token keyword\">double</span> x<span class=\"token punctuation\">;</span>\n　　 <span class=\"token keyword\">double</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> Rect_V<span class=\"token punctuation\">;</span>\n\nPolar_V <span class=\"token function\">rect_to_polar</span><span class=\"token punctuation\">(</span>Rect_V<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n　　 Rect_V input<span class=\"token punctuation\">;</span>\n　　 Polar_V result<span class=\"token punctuation\">;</span>\n\n　　 <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter x and y coordinates; enter q to quit:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lf %lf\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>input<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>input<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n　　 <span class=\"token punctuation\">{</span>\n　　　　　result <span class=\"token operator\">=</span> <span class=\"token function\">rect_to_polar</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　　　　<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"magnitude = %0.2f, angle = %0.2f\\n\"</span><span class=\"token punctuation\">,</span>\n　　　　　　　 result<span class=\"token punctuation\">.</span>magnitude<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">.</span>angle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token punctuation\">}</span>\n　　 <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bye.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n　　 <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nPolar_V <span class=\"token function\">rect_to_polar</span><span class=\"token punctuation\">(</span>Rect_V rv<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n　　 Polar_V pv<span class=\"token punctuation\">;</span>\n\n　　 pv<span class=\"token punctuation\">.</span>magnitude <span class=\"token operator\">=</span> <span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span>rv<span class=\"token punctuation\">.</span>x <span class=\"token operator\">*</span> rv<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> rv<span class=\"token punctuation\">.</span>y <span class=\"token operator\">*</span> rv<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pv<span class=\"token punctuation\">.</span>magnitude <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n　　　　　pv<span class=\"token punctuation\">.</span>angle <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token keyword\">else</span>\n　　　　　pv<span class=\"token punctuation\">.</span>angle <span class=\"token operator\">=</span> RAD_TO_DEG <span class=\"token operator\">*</span> <span class=\"token function\">atan2</span><span class=\"token punctuation\">(</span>rv<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span> rv<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n　　 <span class=\"token keyword\">return</span> pv<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 输出示例</span>\nEnter x and y coordinates<span class=\"token punctuation\">;</span> enter q to quit<span class=\"token operator\">:</span>\n<span class=\"token number\">10</span> <span class=\"token number\">10</span>\nmagnitude <span class=\"token operator\">=</span> <span class=\"token number\">14.14</span><span class=\"token punctuation\">,</span> angle <span class=\"token operator\">=</span> <span class=\"token number\">45.00</span>\n<span class=\"token operator\">-</span><span class=\"token number\">12</span> <span class=\"token operator\">-</span><span class=\"token number\">5</span>\nmagnitude <span class=\"token operator\">=</span> <span class=\"token number\">13.00</span><span class=\"token punctuation\">,</span> angle <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">157.38</span>\nq\nBye<span class=\"token punctuation\">.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"16102-类型变体\"><a class=\"markdownIt-Anchor\" href=\"#16102-类型变体\">#</a> 16.10.2 类型变体</h5>\n<p>C 标准专门为 <code>float</code>  类型和 <code>long double</code>  类型提供了标准函数</p>\n<ul>\n<li><code>sqrtf()</code> : <code>sqrt</code>  的 float 版本</li>\n<li><code>sqrtl()</code> : <code>sqrt</code>  的 long double 版本</li>\n</ul>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;math.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">RAD_TO_DEG</span> <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token number\">180</span><span class=\"token operator\">/</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span> <span class=\"token operator\">*</span> <span class=\"token function\">atanl</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span>\n\n<span class=\"token comment\">// 泛型平方根函数</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">SQRT</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span> <span class=\"token keyword\">_Generic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span><span class=\"token punctuation\">\\</span>\n　　<span class=\"token expression\"><span class=\"token keyword\">long</span> <span class=\"token keyword\">double</span><span class=\"token operator\">:</span> sqrtl<span class=\"token punctuation\">,</span> </span><span class=\"token punctuation\">\\</span>\n　　<span class=\"token expression\"><span class=\"token keyword\">default</span><span class=\"token operator\">:</span> sqrt<span class=\"token punctuation\">,</span> </span><span class=\"token punctuation\">\\</span>\n　　<span class=\"token expression\"><span class=\"token keyword\">float</span><span class=\"token operator\">:</span> sqrtf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span></span></span>\n\n<span class=\"token comment\">// 泛型正弦函数，角度的单位为度</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">SIN</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span> <span class=\"token keyword\">_Generic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span><span class=\"token punctuation\">\\</span>\n　　 <span class=\"token expression\"><span class=\"token keyword\">long</span> <span class=\"token keyword\">double</span><span class=\"token operator\">:</span> <span class=\"token function\">sinl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>RAD_TO_DEG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span><span class=\"token punctuation\">\\</span>\n　　 <span class=\"token expression\"><span class=\"token keyword\">default</span><span class=\"token operator\">:</span>　　 <span class=\"token function\">sin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>RAD_TO_DEG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span><span class=\"token punctuation\">\\</span>\n　　 <span class=\"token expression\"><span class=\"token keyword\">float</span><span class=\"token operator\">:</span>　　　<span class=\"token function\">sinf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>RAD_TO_DEG<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">\\</span>\n<span class=\"token expression\"><span class=\"token punctuation\">)</span></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n　　 <span class=\"token keyword\">float</span> x <span class=\"token operator\">=</span> <span class=\"token number\">45.0f</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token keyword\">double</span> xx <span class=\"token operator\">=</span> <span class=\"token number\">45.0</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token keyword\">long</span> <span class=\"token keyword\">double</span> xxx <span class=\"token operator\">=</span> <span class=\"token number\">45.0L</span><span class=\"token punctuation\">;</span>\n\n　　 <span class=\"token keyword\">long</span> <span class=\"token keyword\">double</span> y <span class=\"token operator\">=</span> <span class=\"token function\">SQRT</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token keyword\">long</span> <span class=\"token keyword\">double</span> yy <span class=\"token operator\">=</span> <span class=\"token function\">SQRT</span><span class=\"token punctuation\">(</span>xx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token keyword\">long</span> <span class=\"token keyword\">double</span> yyy <span class=\"token operator\">=</span> <span class=\"token function\">SQRT</span><span class=\"token punctuation\">(</span>xxx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%.17Lf\\n\"</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>　　<span class=\"token comment\">// 匹配 float</span>\n　　 <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%.17Lf\\n\"</span><span class=\"token punctuation\">,</span> yy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>　 <span class=\"token comment\">// 匹配 default</span>\n　　 <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%.17Lf\\n\"</span><span class=\"token punctuation\">,</span> yyy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>　<span class=\"token comment\">// 匹配 long double</span>\n　　 <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">45</span><span class=\"token punctuation\">;</span>\n　　 yy <span class=\"token operator\">=</span> <span class=\"token function\">SQRT</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>　　　　      <span class=\"token comment\">// 匹配 default</span>\n　　 <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%.17Lf\\n\"</span><span class=\"token punctuation\">,</span> yy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　 yyy <span class=\"token operator\">=</span> <span class=\"token function\">SIN</span><span class=\"token punctuation\">(</span>xxx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>　　      　<span class=\"token comment\">// 匹配 long double</span>\n　　 <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%.17Lf\\n\"</span><span class=\"token punctuation\">,</span> yyy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n　　 <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"16103-tgmathh库\"><a class=\"markdownIt-Anchor\" href=\"#16103-tgmathh库\">#</a> 16.10.3  <code>tgmath.h</code>  库</h5>\n<p><code>tgmath.h</code>  文件创建了一个泛型类型宏，与原来 <code>double</code>  版本的函数名同名</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;tgmath.h&gt;</span></span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n　　 <span class=\"token keyword\">float</span> x <span class=\"token operator\">=</span> <span class=\"token number\">44.0</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token keyword\">double</span> y<span class=\"token punctuation\">;</span>\n　　 y <span class=\"token operator\">=</span> <span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>　　<span class=\"token comment\">// 调用宏，所以是 sqrtf(x)</span>\n　　 y <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>sqrt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>　<span class=\"token comment\">// 调用函数 sqrt()</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"1611-通用工具库\"><a class=\"markdownIt-Anchor\" href=\"#1611-通用工具库\">#</a> 16.11 通用工具库</h4>\n<h5 id=\"16111-exit和atexit函数\"><a class=\"markdownIt-Anchor\" href=\"#16111-exit和atexit函数\">#</a> 16.11.1  <code>exit()</code>  和 <code>atexit()</code>  函数</h5>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">/* byebye.c -- atexit()示例 */</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h&gt;</span></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">sign_off</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">too_bad</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n　　 <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span>\n\n　　 <span class=\"token function\">atexit</span><span class=\"token punctuation\">(</span>sign_off<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>　　<span class=\"token comment\">/* 注册 sign_off()函数 */</span>\n　　 <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter an integer:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n　　 <span class=\"token punctuation\">{</span>\n　　　　　<span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"That's no integer!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　　　　<span class=\"token function\">atexit</span><span class=\"token punctuation\">(</span>too_bad<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>　<span class=\"token comment\">/* 注册 too_bad()函数 */</span>\n　　　　　<span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>EXIT_FAILURE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token punctuation\">}</span>\n　　 <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d is %s.\\n\"</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"even\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"odd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n　　 <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">sign_off</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n　　 <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Thus terminates another magnificent program from\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SeeSaw Software!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">too_bad</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n　　 <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SeeSaw Software extends its heartfelt condolences\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"to you upon the failure of your program.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//运行示例</span>\n<span class=\"token comment\">//Enter an integer:</span>\n<span class=\"token comment\">//212</span>\n<span class=\"token comment\">//212 is even.</span>\n<span class=\"token comment\">//Thus terminates another magnificent program from</span>\n<span class=\"token comment\">//SeeSaw Software!</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li>\n<p><code>atexit()</code>  函数的用法</p>\n<p>这个函数使用<strong>函数指针</strong></p>\n<p>使用 <code>atexit()</code>  函数，只需把退出时要调用的函数地址传递给 <code>atexit()</code>  即可，函数名作为函数参数时相当于该函数的地址</p>\n<p><code>atexit()</code>  注册了这些函数 当最后调用 <code>exit()</code>  函数时 这些函数就会被执行</p>\n<p>程序结束时会自动隐式调用 <code>exit()</code></p>\n</li>\n<li>\n<p><code>exit()</code>  函数的用法</p>\n<p>会完成一些清理工作:</p>\n<p>刷新所有的输出流，关闭所有打开的流和关闭由标准 I/O 函数 <code>tmpfile()</code>  创建的临时文件</p>\n</li>\n</ol>\n<h5 id=\"16112-qsort函数\"><a class=\"markdownIt-Anchor\" href=\"#16112-qsort函数\">#</a> 16.11.2  <code>qsort()</code>  函数</h5>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">qsort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>base<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> nmemb<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> size<span class=\"token punctuation\">,</span>\n　　　　　　　<span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>compar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//函数原型</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<ul>\n<li>第一个参数是指针，指向待排序数组的首元素地址</li>\n<li>第二个参数是待排序项的数量</li>\n<li>第三个参数是待排序数组中每个元素的大小 可以使用 <code>sizeof()</code></li>\n<li>第四个参数是一个指向函数的指针，这个被指针指向的比较函数用于确定排序的顺序，该函数接受两个参数：分别指向待比较两项的指针，如果第一项大于第二项，比较函数返回正数，相同返回 <code>0</code> , 小于则返回负数</li>\n</ul>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">/* qsorter.c -- 用 qsort()排序一组数字 */</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h&gt;</span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">NUM</span> <span class=\"token expression\"><span class=\"token number\">40</span></span></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fillarray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> ar <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">showarray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">double</span> ar <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">mycomp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span> p1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span> p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n　　 <span class=\"token keyword\">double</span> vals<span class=\"token punctuation\">[</span>NUM<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token function\">fillarray</span><span class=\"token punctuation\">(</span>vals<span class=\"token punctuation\">,</span> NUM<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Random list:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token function\">showarray</span><span class=\"token punctuation\">(</span>vals<span class=\"token punctuation\">,</span> NUM<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token function\">qsort</span><span class=\"token punctuation\">(</span>vals<span class=\"token punctuation\">,</span> NUM<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> mycomp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nSorted list:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token function\">showarray</span><span class=\"token punctuation\">(</span>vals<span class=\"token punctuation\">,</span> NUM<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">fillarray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> ar <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n　　 <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">;</span>\n\n　　 <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> index <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> index<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n　　　　　ar<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span> <span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span> <span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">showarray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">double</span> ar <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n　　 <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">;</span>\n\n　　 <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> index <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> index<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n　　 <span class=\"token punctuation\">{</span>\n　　　　　<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%9.4f \"</span><span class=\"token punctuation\">,</span> ar<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　　　　<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">%</span> <span class=\"token number\">6</span> <span class=\"token operator\">==</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n　　　　　　　 <span class=\"token function\">putchar</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token punctuation\">}</span>\n　　 <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">%</span> <span class=\"token number\">6</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n　　　　　<span class=\"token function\">putchar</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* 按从小到大的顺序排序 */</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">mycomp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span> p1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span> p2<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n　　 <span class=\"token comment\">/* 要使用指向double的指针来访问这两个值 */</span>\n　　 <span class=\"token keyword\">const</span> <span class=\"token keyword\">double</span> <span class=\"token operator\">*</span> a1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">double</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> p1<span class=\"token punctuation\">;</span>\n　　 <span class=\"token keyword\">const</span> <span class=\"token keyword\">double</span> <span class=\"token operator\">*</span> a2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">double</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> p2<span class=\"token punctuation\">;</span>\n\n　　 <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>a1 <span class=\"token operator\">&lt;</span> <span class=\"token operator\">*</span>a2<span class=\"token punctuation\">)</span>\n　　　　　<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>a1 <span class=\"token operator\">==</span> <span class=\"token operator\">*</span>a2<span class=\"token punctuation\">)</span>\n　　　　　<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token keyword\">else</span>\n　　　　　<span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//输出结果</span>\n<span class=\"token comment\">//Random list:</span>\n<span class=\"token comment\">//0.0001 　 1.6475 　2.4332 　0.0693 　0.7268 　0.7383</span>\n<span class=\"token comment\">//24.0357 　0.1009 　87.1828　5.7361 　0.6079 　0.6330</span>\n<span class=\"token comment\">//1.6058  　0.1406 　0.5933 　1.1943 　5.5295 　2.2426</span>\n<span class=\"token comment\">//0.8364  　2.7127 　0.2514 　0.9593 　8.9635 　0.7139</span>\n<span class=\"token comment\">//0.6249  　1.6044 　0.8649 　2.1577 　0.5420 　15.0123</span>\n<span class=\"token comment\">//1.7931  　1.6183 　1.9973 　2.9333 　12.8512  1.3034</span>\n<span class=\"token comment\">//0.3032  　1.1406 　18.7880 　0.9887</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//Sorted list:</span>\n<span class=\"token comment\">//0.0001  　0.0693 　0.1009 　0.1406 　0.2514 　0.3032</span>\n<span class=\"token comment\">//0.5420  　0.5933 　0.6079 　0.6249 　0.6330 　0.7139</span>\n<span class=\"token comment\">//0.7268 　 0.7383 　0.8364 　0.8649 　0.9593　 0.9887</span>\n<span class=\"token comment\">//1.1406  　1.1943 　1.3034 　1.6044 　1.6058 　1.6183</span>\n<span class=\"token comment\">//1.6475  　1.7931 　1.9973 　2.1577 　2.2426 　2.4332</span>\n<span class=\"token comment\">//2.7127  　2.9333 　5.5295 　5.7361 　8.9635 　12.8512</span>\n<span class=\"token comment\">//15.0123 　18.7880　24.0357　87.1828</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li><code>mycomp()</code>  的定义</li>\n</ul>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">mycomp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span> p1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span> p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"1612-断言库\"><a class=\"markdownIt-Anchor\" href=\"#1612-断言库\">#</a> 16.12 断言库</h4>\n<p><code>assert()</code>  宏在 <code>assert.h</code>  头文件中，接受一个整型表达式作为参数，如果表达式求值为假， <code>assert()</code>  宏就在标准错误流中写入一条错误信息，并调用 <code>abort()</code>  函数终止程序</p>\n<p>并且会提示出错的地点 行数</p>\n<h5 id=\"16121-assert的用法\"><a class=\"markdownIt-Anchor\" href=\"#16121-assert的用法\">#</a> 16.12.1  <code>assert</code>  的用法</h5>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">/* assert.c -- 使用 assert() */</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;math.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;assert.h&gt;</span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n　　 <span class=\"token keyword\">double</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">;</span>\n\n　　 <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter a pair of numbers (0 0 to quit): \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lf%lf\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>y<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">2</span>\n　　　　　<span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> y <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n　　 <span class=\"token punctuation\">{</span>\n　　　　　z <span class=\"token operator\">=</span> x <span class=\"token operator\">*</span> x <span class=\"token operator\">-</span> y <span class=\"token operator\">*</span> y<span class=\"token punctuation\">;</span>　<span class=\"token comment\">/* 应该用 + */</span>\n　　　　　<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>z <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　　　　<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"answer is %f\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　　　　<span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Next pair of numbers: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token punctuation\">}</span>\n　　 <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Done\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n　　 <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//输出实例</span>\nEnter a pair of <span class=\"token function\">numbers</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token number\">0</span> to quit<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n<span class=\"token number\">4</span> <span class=\"token number\">3</span>\nanswer is <span class=\"token number\">2.645751</span>\nNext pair of numbers<span class=\"token operator\">:</span>\n<span class=\"token number\">5</span> <span class=\"token number\">3</span>\nanswer is <span class=\"token number\">4.000000</span>\nNext pair of numbers<span class=\"token operator\">:</span>\n<span class=\"token number\">3</span> <span class=\"token number\">5</span>\nAssertion failed<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>z <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> function main<span class=\"token punctuation\">,</span> file <span class=\"token operator\">/</span>Users<span class=\"token operator\">/</span>assert<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">,</span> line <span class=\"token number\">14.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"16122-_static_assertc11\"><a class=\"markdownIt-Anchor\" href=\"#16122-_static_assertc11\">#</a> 16.12.2  <code>_Static_assert</code> (C11)</h5>\n<p><code>_Static_assert()</code>  会导致程序无法通过编译，其接受两个参数</p>\n<ul>\n<li>第一个参数是整型常量表达式</li>\n<li>第二个参数是一个字符串，如果第一个表达式是假，编译器就不会编译该程序并且提示这串字符串</li>\n</ul>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">//　statasrt.c</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;limits.h&gt;</span></span>\n<span class=\"token keyword\">_Static_assert</span><span class=\"token punctuation\">(</span>CHAR_BIT <span class=\"token operator\">==</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"16-bit char falsely assumed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n　　 <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"char is 16 bits.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 输出实例 </span>\n<span class=\"token comment\">//$ clang statasrt.c</span>\n<span class=\"token comment\">//statasrt.c:4:1: error: static_assert failed \"16-bit char falsely assumed\"</span>\n<span class=\"token comment\">//_Static_assert(CHAR_BIT == 16, \"16-bit char falsely assumed\");</span>\n<span class=\"token comment\">//^　　　　　　　　 ～～～～～～～～～～～～～～</span>\n<span class=\"token comment\">//1 error generated.</span>\n<span class=\"token comment\">//$</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"1613-stringh库宏的memcpy和memove\"><a class=\"markdownIt-Anchor\" href=\"#1613-stringh库宏的memcpy和memove\">#</a> 16.13  <code>string.h</code>  库宏的 <code>memcpy()</code>  和 <code>memove()</code></h4>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">\n<span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span> restrict s1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span> restrict s2<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token function\">memmove</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>s1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>s2<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// mems.c -- 使用 memcpy() 和 memmove()</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SIZE</span> <span class=\"token expression\"><span class=\"token number\">10</span></span></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">show_array</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> ar <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 如果编译器不支持C11的_Static_assert，可以注释掉下面这行</span>\n<span class=\"token keyword\">_Static_assert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"double not twice int size\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n　　 <span class=\"token keyword\">int</span> values<span class=\"token punctuation\">[</span>SIZE<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token keyword\">int</span> target<span class=\"token punctuation\">[</span>SIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token keyword\">double</span> curious<span class=\"token punctuation\">[</span>SIZE <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token number\">2.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.0e5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.0e10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.0e20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5.0e30</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n　　 <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"memcpy() used:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"values (original data): \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token function\">show_array</span><span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">,</span> SIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> values<span class=\"token punctuation\">,</span> SIZE <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"target (copy of values):\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token function\">show_array</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> SIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n　　 <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nUsing memmove() with overlapping ranges:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token function\">memmove</span><span class=\"token punctuation\">(</span>values <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> values<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"values -- elements 0-4 copied to 2-6:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token function\">show_array</span><span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">,</span> SIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n　　 <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nUsing memcpy() to copy double to int:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> curious<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>SIZE <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"target -- 5 doubles into 10 int positions:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token function\">show_array</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> SIZE <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token function\">show_array</span><span class=\"token punctuation\">(</span>target <span class=\"token operator\">+</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> SIZE <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n　　 <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">show_array</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> ar <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n　　 <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n\n　　 <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n　　　　　<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span> ar<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　 <span class=\"token function\">putchar</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>拷贝任意类型的数组</p>\n<h4 id=\"1614-可变参数-stdargh\"><a class=\"markdownIt-Anchor\" href=\"#1614-可变参数-stdargh\">#</a> 16.14 可变参数:  <code>stdarg.h</code></h4>\n<pre class=\"line-numbers language-C\" data-language=\"C\"><code class=\"language-C\">#include &lt;stdio.h&gt;\n#include &lt;stdarg.h&gt;\ndouble sum(int, ...);\n\nint main(void)\n{\n　　 double s, t;\n\n　　 s = sum(3, 1.1, 2.5, 13.3);\n　　 t = sum(6, 1.1, 2.1, 13.1, 4.1, 5.1, 6.1);\n　　 printf(\"return value for \"\n　　　　　\"sum(3, 1.1, 2.5, 13.3):　　　　　　　　%g\\n\", s);\n　　 printf(\"return value for \"\n　　　　　\"sum(6, 1.1, 2.1, 13.1, 4.1, 5.1, 6.1): %g\\n\", t);\n\n　　 return 0;\n}\n\ndouble sum(int lim, ...)\n{\n　　 va_list ap;　　　  　 　// 声明一个对象存储参数\n　　 double tot = 0;\n　　 int i;\n\n　　 va_start(ap, lim);　　　// 把ap初始化为参数列表\n　　 for (i = 0; i &lt; lim; i++)\n　　　　　tot += va_arg(ap, double);　// 访问参数列表中的每一项\n　　 va_end(ap);　　　            　　// 清理工作\n\n　　 return tot;\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"第十七章-高级数据表示\"><a class=\"markdownIt-Anchor\" href=\"#第十七章-高级数据表示\">#</a> 第十七章 高级数据表示</h3>\n<h4 id=\"171-研究数据表示\"><a class=\"markdownIt-Anchor\" href=\"#171-研究数据表示\">#</a> 17.1 研究数据表示</h4>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">/* films1.c -- 使用一个结构数组 */</span>\n<span class=\"token comment\">// 存储片名和评级</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">TSIZE</span>       <span class=\"token expression\"><span class=\"token number\">45</span>   </span><span class=\"token comment\">/* 存储片名的数组大小 */</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">FMAX</span>        <span class=\"token expression\"><span class=\"token number\">5</span>    </span><span class=\"token comment\">/* 影片的最大数量 */</span></span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">film</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">char</span> title<span class=\"token punctuation\">[</span>TSIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">int</span> rating<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> <span class=\"token function\">s_gets</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>st<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">struct</span> <span class=\"token class-name\">film</span> movies<span class=\"token punctuation\">[</span>FMAX<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">;</span>\n\n     <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter first movie title:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> FMAX <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">s_gets</span><span class=\"token punctuation\">(</span>movies<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">,</span> TSIZE<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">&amp;&amp;</span>\n          movies<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter your rating &lt;0-10&gt;:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>movies<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>rating<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n               <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter next movie title (empty line to stop):\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n          <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"No data entered. \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">else</span>\n          <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Here is the movie list:\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n          <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Movie: %s  Rating: %d\\n\"</span><span class=\"token punctuation\">,</span> movies<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">,</span>movies<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>rating<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bye!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> <span class=\"token function\">s_gets</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> st<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> ret_val<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> find<span class=\"token punctuation\">;</span>\n\n     ret_val <span class=\"token operator\">=</span> <span class=\"token function\">fgets</span><span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> <span class=\"token constant\">stdin</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ret_val<span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n          find <span class=\"token operator\">=</span> <span class=\"token function\">strchr</span><span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">,</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 查找换行符</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>find<span class=\"token punctuation\">)</span>                   <span class=\"token comment\">// 如果地址不是 NULL,</span>\n               <span class=\"token operator\">*</span>find <span class=\"token operator\">=</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// 在此处放置一个空字符</span>\n          <span class=\"token keyword\">else</span>\n               <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// 处理剩余输入行</span>\n     <span class=\"token punctuation\">}</span>\n     <span class=\"token keyword\">return</span> ret_val<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">//因为我们事先不能确定看的电影的数量 所以我们使用了这个优化算法</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">TSIZE</span> <span class=\"token expression\"><span class=\"token number\">45</span>    </span><span class=\"token comment\">/*存储片名的数组大小*/</span></span>\n     <span class=\"token keyword\">struct</span> <span class=\"token class-name\">film</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">char</span> title<span class=\"token punctuation\">[</span>TSIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">int</span> rating<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">film</span> <span class=\"token operator\">*</span> movies<span class=\"token punctuation\">;</span>    <span class=\"token comment\">/* 指向结构的指针 */</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter the maximum number of movies you'll enter:\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmovies <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">film</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">film</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"172-从数组到链表\"><a class=\"markdownIt-Anchor\" href=\"#172-从数组到链表\">#</a> 17.2 从数组到链表</h4>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">TSIZE</span> <span class=\"token expression\"><span class=\"token number\">45</span>    </span><span class=\"token comment\">/* 存储片名的数组大小*/</span></span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">film</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">char</span> title<span class=\"token punctuation\">[</span>TSIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">int</span> rating<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">struct</span> <span class=\"token class-name\">film</span> <span class=\"token operator\">*</span> next<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>每个结构中都包含指向下一个结构的指针，当创建新的结构的时候可以把该结构的地址存储在上一个结构中，并将最后一个结构中的指针设置为 <code>NULL</code> , 表示该指针是最后一个指针</p>\n<p>还需要一个<strong>头指针</strong>存储第一项的地址</p>\n<h5 id=\"1721-使用链表\"><a class=\"markdownIt-Anchor\" href=\"#1721-使用链表\">#</a> 17.2.1 使用链表</h5>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">/* films2.c -- 使用结构链表 */</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h&gt;</span>        <span class=\"token comment\">/* 提供malloc()原型 */</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h&gt;</span>        <span class=\"token comment\">/* 提供strcpy()原型 */</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">TSIZE</span>    <span class=\"token expression\"><span class=\"token number\">45</span>        </span><span class=\"token comment\">/* 存储片名的数组大小 */</span></span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">film</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">char</span> title<span class=\"token punctuation\">[</span>TSIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">int</span> rating<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">struct</span> <span class=\"token class-name\">film</span> <span class=\"token operator\">*</span> next<span class=\"token punctuation\">;</span>    <span class=\"token comment\">/* 指向链表中的下一个结构 */</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> <span class=\"token function\">s_gets</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> st<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">struct</span> <span class=\"token class-name\">film</span> <span class=\"token operator\">*</span> head <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">struct</span> <span class=\"token class-name\">film</span> <span class=\"token operator\">*</span> prev<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>current<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">char</span> input<span class=\"token punctuation\">[</span>TSIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* 收集并存储信息 */</span>\n     <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter first movie title:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">s_gets</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">,</span> TSIZE<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">&amp;&amp;</span> input<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n          current <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">film</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">film</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>head <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>       <span class=\"token comment\">/* 第1个结构 */</span>\n               head <span class=\"token operator\">=</span> current<span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">else</span>                    <span class=\"token comment\">/* 后续的结构 */</span>\n               prev<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> current<span class=\"token punctuation\">;</span>\n          current<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>current<span class=\"token operator\">-&gt;</span>title<span class=\"token punctuation\">,</span> input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter your rating &lt;0-10&gt;:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>current<span class=\"token operator\">-&gt;</span>rating<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n               <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter next movie title (empty line to stop):\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          prev <span class=\"token operator\">=</span> current<span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n\n     <span class=\"token comment\">/* 显示电影列表 */</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>head <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n          <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"No data entered. \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">else</span>\n          <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Here is the movie list:\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     current <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>current <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Movie: %s  Rating: %d\\n\"</span><span class=\"token punctuation\">,</span>\n               current<span class=\"token operator\">-&gt;</span>title<span class=\"token punctuation\">,</span> current<span class=\"token operator\">-&gt;</span>rating<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          current <span class=\"token operator\">=</span> current<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n\n     <span class=\"token comment\">/* 完成任务，释放已分配的内存 */</span>\n     current <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>current <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n          head <span class=\"token operator\">=</span> current<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n          <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        \n          current <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bye!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> <span class=\"token function\">s_gets</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> st<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> ret_val<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> find<span class=\"token punctuation\">;</span>\n\n     ret_val <span class=\"token operator\">=</span> <span class=\"token function\">fgets</span><span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> <span class=\"token constant\">stdin</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ret_val<span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n          find <span class=\"token operator\">=</span> <span class=\"token function\">strchr</span><span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">,</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 查找换行符</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>find<span class=\"token punctuation\">)</span>                   <span class=\"token comment\">// 如果地址不是 NULL，</span>\n               <span class=\"token operator\">*</span>find <span class=\"token operator\">=</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// 在此处放置一个空字符</span>\n          <span class=\"token keyword\">else</span>\n               <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// 处理剩余输入行</span>\n     <span class=\"token punctuation\">}</span>\n     <span class=\"token keyword\">return</span> ret_val<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li>显示链表</li>\n<li>创建链表\n<ul>\n<li>使用 <code>malloc()</code>  分配足够的空间</li>\n<li>存储结构的地址</li>\n<li>把当前信息拷贝到结构中</li>\n</ul>\n</li>\n<li>释放链表</li>\n</ol>\n<h4 id=\"173-抽象数据类型\"><a class=\"markdownIt-Anchor\" href=\"#173-抽象数据类型\">#</a> 17.3 抽象数据类型</h4>\n<p><strong>类型</strong>：属性和操作</p>\n<p>定义抽象数据类型，通过 3 个步骤从抽象到具体:</p>\n<ul>\n<li>提供属性类型和相关操作的抽象描述</li>\n<li>开发一个实现 ADT 的编程接口</li>\n<li>编写代码实现接口</li>\n</ul>\n<h5 id=\"1731-建立抽象\"><a class=\"markdownIt-Anchor\" href=\"#1731-建立抽象\">#</a> 17.3.1 建立抽象</h5>\n<p>链表是一个能存储一系列项且可以对其进行所需操作的数据对象</p>\n<p><a href=\"https://imgtu.com/i/TsF4Og\"><img src=\"https://s4.ax1x.com/2021/12/28/TsF4Og.png\" alt=\"TsF4Og.png\"></a></p>\n<h5 id=\"1732-建立接口\"><a class=\"markdownIt-Anchor\" href=\"#1732-建立接口\">#</a> 17.3.2 建立接口</h5>\n<p>使用 <code>typedef</code>  来定义新的类型</p>\n<p>在链表的实现中 每一个链节叫做<strong>节点</strong>，每个节点包含形成链表内容的信息和指向下一个节点的指针</p>\n<p>使用 <code>InitializeList()</code>  函数来初始化列表</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">/* 操作：初始化一个链表            */</span>\n<span class=\"token comment\">/* 前提条件：plist指向一个链表    */</span>\n<span class=\"token comment\">/* 后置条件：该链表初始化为空        */</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">InitializeList</span><span class=\"token punctuation\">(</span>List <span class=\"token operator\">*</span> plist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\">//该函数的参数是一个指向链表的指针,需要将指针的地址放进去</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">/* list.h -- 简单链表类型的头文件 */</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">LIST_H_</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">LIST_H_</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdbool.h&gt;</span>    <span class=\"token comment\">/* C99特性            */</span></span>\n\n<span class=\"token comment\">/* 特定程序的声明 */</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">TSIZE</span>     <span class=\"token expression\"><span class=\"token number\">45</span>    </span><span class=\"token comment\">/* 存储电影名的数组大小    */</span></span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">film</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">char</span> title<span class=\"token punctuation\">[</span>TSIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">int</span> rating<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* 一般类型定义 */</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">film</span> Item<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">node</span>\n<span class=\"token punctuation\">{</span>\n     Item item<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">struct</span> <span class=\"token class-name\">node</span> <span class=\"token operator\">*</span> next<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> Node<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">typedef</span> Node <span class=\"token operator\">*</span> List<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* 函数原型 */</span>\n\n<span class=\"token comment\">/* 操作：        初始化一个链表                                                */</span>\n<span class=\"token comment\">/* 前提条件：    plist指向一个链表                                             */</span>\n<span class=\"token comment\">/* 后置条件：    链表初始化为空                                                */</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">InitializeList</span><span class=\"token punctuation\">(</span>List <span class=\"token operator\">*</span> plist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* 操作：        确定链表是否为空，plist指向一个已初始化的链表                   */</span>\n<span class=\"token comment\">/* 后置条件：    如果链表为空，该函数返回true；否则返回false                     */</span>\nbool <span class=\"token function\">ListIsEmpty</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> List <span class=\"token operator\">*</span>plist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* 操作：        确定链表是否已满，plist指向一个已初始化的链表                   */</span>\n<span class=\"token comment\">/* 后置条件：    如果链表已满，该函数返回真；否则返回假                          */</span>\nbool <span class=\"token function\">ListIsFull</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> List <span class=\"token operator\">*</span>plist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* 操作：        确定链表中的项数, plist指向一个已初始化的链表                   */</span>\n<span class=\"token comment\">/* 后置条件：    该函数返回链表中的项数                                         */</span>\n<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> <span class=\"token function\">ListItemCount</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> List <span class=\"token operator\">*</span>plist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* 操作：        在链表的末尾添加项                                            */</span>\n<span class=\"token comment\">/* 前提条件：    item是一个待添加至链表的项, plist指向一个已初始化的链表         */</span>\n<span class=\"token comment\">/* 后置条件：    如果可以，该函数在链表末尾添加一个项，且返回true；否则返回false  */</span>\nbool <span class=\"token function\">AddItem</span><span class=\"token punctuation\">(</span>Item item<span class=\"token punctuation\">,</span> List <span class=\"token operator\">*</span> plist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* 操作：        把函数作用于链表中的每一项                                     */</span>\n<span class=\"token comment\">/*              plist指向一个已初始化的链表                                    */</span>\n<span class=\"token comment\">/*              pfun指向一个函数，该函数接受一个Item类型的参数，且无返回值       */</span>\n<span class=\"token comment\">/* 后置条件：    pfun指向的函数作用于链表中的每一项一次                          */</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">Traverse</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> List <span class=\"token operator\">*</span>plist<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pfun<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>Item item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* 操作：        释放已分配的内存（如果有的话）                                 */</span>\n<span class=\"token comment\">/*              plist指向一个已初始化的链表                                    */</span>\n<span class=\"token comment\">/* 后置条件：    释放了为链表分配的所有内存，链表设置为空                         */</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">EmptyTheList</span><span class=\"token punctuation\">(</span>List <span class=\"token operator\">*</span> plist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"1733-使用接口\"><a class=\"markdownIt-Anchor\" href=\"#1733-使用接口\">#</a> 17.3.3 使用接口</h5>\n<p><a href=\"https://imgtu.com/i/TsZ35j\"><img src=\"https://s4.ax1x.com/2021/12/28/TsZ35j.png\" alt=\"TsZ35j.png\"></a></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">/* films3.c -- 使用抽象数据类型（ADT）风格的链表 */</span>\n<span class=\"token comment\">/* 与list.c一起编译                        */</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h&gt;</span>    <span class=\"token comment\">/* 提供exit()的原型 */</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"list.h\"</span>      <span class=\"token comment\">/* 定义List、Item   */</span></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">showmovies</span><span class=\"token punctuation\">(</span>Item item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> <span class=\"token function\">s_gets</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> st<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     List movies<span class=\"token punctuation\">;</span>\n     Item temp<span class=\"token punctuation\">;</span>\n\n     <span class=\"token comment\">/* 初始化       */</span>\n     <span class=\"token function\">InitializeList</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>movies<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">ListIsFull</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>movies<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"No memory available! Bye!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n\n     <span class=\"token comment\">/* 获取用户输入并存储 */</span>\n     <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter first movie title:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">s_gets</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">,</span> TSIZE<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">&amp;&amp;</span> temp<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter your rating &lt;0-10&gt;:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>temp<span class=\"token punctuation\">.</span>rating<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n               <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">AddItem</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>movies<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> false<span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">{</span>\n               <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Problem allocating memory\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n               <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">ListIsFull</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>movies<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">{</span>\n               <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The list is now full.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n               <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n          <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter next movie title (empty line to stop):\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n\n     <span class=\"token comment\">/* 显示          */</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">ListIsEmpty</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>movies<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n          <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"No data entered. \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">else</span>\n     <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Here is the movie list:\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">Traverse</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>movies<span class=\"token punctuation\">,</span> showmovies<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"You entered %d movies.\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ListItemCount</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>movies<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token comment\">/* 清理         */</span>\n     <span class=\"token function\">EmptyTheList</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>movies<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bye!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">showmovies</span><span class=\"token punctuation\">(</span>Item item<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Movie: %s  Rating: %d\\n\"</span><span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">,</span>\n          item<span class=\"token punctuation\">.</span>rating<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> <span class=\"token function\">s_gets</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> st<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> ret_val<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> find<span class=\"token punctuation\">;</span>\n\n     ret_val <span class=\"token operator\">=</span> <span class=\"token function\">fgets</span><span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> <span class=\"token constant\">stdin</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ret_val<span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n          find <span class=\"token operator\">=</span> <span class=\"token function\">strchr</span><span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">,</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 查找换行符</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>find<span class=\"token punctuation\">)</span>                   <span class=\"token comment\">// 如果地址不是NULL，</span>\n               <span class=\"token operator\">*</span>find <span class=\"token operator\">=</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// 在此处放置一个空字符</span>\n          <span class=\"token keyword\">else</span>\n               <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// 处理输入行的剩余内容</span>\n     <span class=\"token punctuation\">}</span>\n     <span class=\"token keyword\">return</span> ret_val<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"1734-实现接口\"><a class=\"markdownIt-Anchor\" href=\"#1734-实现接口\">#</a> 17.3.4 实现接口</h5>\n<h4 id=\"174-队列adt\"><a class=\"markdownIt-Anchor\" href=\"#174-队列adt\">#</a> 17.4 队列 ADT</h4>\n<ol>\n<li>以抽象的方式描述一个类型，包含该类型的操作</li>\n<li>设计一个函数接口实现这个新类型</li>\n<li>编写具体代码实现这个接口</li>\n</ol>\n<h5 id=\"1741-定义队列抽象数据类型\"><a class=\"markdownIt-Anchor\" href=\"#1741-定义队列抽象数据类型\">#</a> 17.4.1 定义队列抽象数据类型</h5>\n<ul>\n<li>新项只能添加到链表的末尾</li>\n<li>只能从链表的开头移除项</li>\n</ul>\n<h5 id=\"1742-定义一个接口\"><a class=\"markdownIt-Anchor\" href=\"#1742-定义一个接口\">#</a> 17.4.2 定义一个接口</h5>\n<h5 id=\"1743-实现接口数据表示\"><a class=\"markdownIt-Anchor\" href=\"#1743-实现接口数据表示\">#</a> 17.4.3 实现接口数据表示</h5>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">/* queue.c -- Queue类型的实现 */</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"queue.h\"</span></span>\n\n<span class=\"token comment\">/* 局部函数 */</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">CopyToNode</span><span class=\"token punctuation\">(</span>Item item<span class=\"token punctuation\">,</span> Node <span class=\"token operator\">*</span> pn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">CopyToItem</span><span class=\"token punctuation\">(</span>Node <span class=\"token operator\">*</span> pn<span class=\"token punctuation\">,</span> Item <span class=\"token operator\">*</span> pi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">InitializeQueue</span><span class=\"token punctuation\">(</span>Queue <span class=\"token operator\">*</span> pq<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     pq<span class=\"token operator\">-&gt;</span>front <span class=\"token operator\">=</span> pq<span class=\"token operator\">-&gt;</span>rear <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n     pq<span class=\"token operator\">-&gt;</span>items <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nbool <span class=\"token function\">QueueIsFull</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Queue <span class=\"token operator\">*</span> pq<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">return</span> pq<span class=\"token operator\">-&gt;</span>items <span class=\"token operator\">==</span> MAXQUEUE<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nbool <span class=\"token function\">QueueIsEmpty</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Queue <span class=\"token operator\">*</span> pq<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">return</span> pq<span class=\"token operator\">-&gt;</span>items <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">QueueItemCount</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Queue <span class=\"token operator\">*</span> pq<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">return</span> pq<span class=\"token operator\">-&gt;</span>items<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nbool <span class=\"token function\">EnQueue</span><span class=\"token punctuation\">(</span>Item item<span class=\"token punctuation\">,</span> Queue <span class=\"token operator\">*</span> pq<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     Node <span class=\"token operator\">*</span> pnew<span class=\"token punctuation\">;</span>\n\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">QueueIsFull</span><span class=\"token punctuation\">(</span>pq<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n          <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span>\n     pnew <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Node <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>Node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pnew <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Unable to allocate memory!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n     <span class=\"token function\">CopyToNode</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">,</span> pnew<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     pnew<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">QueueIsEmpty</span><span class=\"token punctuation\">(</span>pq<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n          pq<span class=\"token operator\">-&gt;</span>front <span class=\"token operator\">=</span> pnew<span class=\"token punctuation\">;</span>          <span class=\"token comment\">/* 项位于队列的首端        */</span>\n     <span class=\"token keyword\">else</span>\n          pq<span class=\"token operator\">-&gt;</span>rear<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> pnew<span class=\"token punctuation\">;</span>     <span class=\"token comment\">/* 链接到队列的尾端        */</span>\n     pq<span class=\"token operator\">-&gt;</span>rear <span class=\"token operator\">=</span> pnew<span class=\"token punctuation\">;</span>                <span class=\"token comment\">/* 记录队列尾端的位置    */</span>\n     pq<span class=\"token operator\">-&gt;</span>items<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>                    <span class=\"token comment\">/* 队列项数加1            */</span>\n\n     <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nbool <span class=\"token function\">DeQueue</span><span class=\"token punctuation\">(</span>Item <span class=\"token operator\">*</span> pitem<span class=\"token punctuation\">,</span> Queue <span class=\"token operator\">*</span> pq<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     Node <span class=\"token operator\">*</span> pt<span class=\"token punctuation\">;</span>\n\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">QueueIsEmpty</span><span class=\"token punctuation\">(</span>pq<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n          <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span>\n     <span class=\"token function\">CopyToItem</span><span class=\"token punctuation\">(</span>pq<span class=\"token operator\">-&gt;</span>front<span class=\"token punctuation\">,</span> pitem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     pt <span class=\"token operator\">=</span> pq<span class=\"token operator\">-&gt;</span>front<span class=\"token punctuation\">;</span>\n     pq<span class=\"token operator\">-&gt;</span>front <span class=\"token operator\">=</span> pq<span class=\"token operator\">-&gt;</span>front<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n     <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>pt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     pq<span class=\"token operator\">-&gt;</span>items<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pq<span class=\"token operator\">-&gt;</span>items <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n          pq<span class=\"token operator\">-&gt;</span>rear <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* 清空队列 */</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">EmptyTheQueue</span><span class=\"token punctuation\">(</span>Queue <span class=\"token operator\">*</span> pq<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     Item dummy<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">QueueIsEmpty</span><span class=\"token punctuation\">(</span>pq<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n          <span class=\"token function\">DeQueue</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>dummy<span class=\"token punctuation\">,</span> pq<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* 局部函数 */</span>\n\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">CopyToNode</span><span class=\"token punctuation\">(</span>Item item<span class=\"token punctuation\">,</span> Node <span class=\"token operator\">*</span> pn<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     pn<span class=\"token operator\">-&gt;</span>item <span class=\"token operator\">=</span> item<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">CopyToItem</span><span class=\"token punctuation\">(</span>Node <span class=\"token operator\">*</span> pn<span class=\"token punctuation\">,</span> Item <span class=\"token operator\">*</span> pi<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token operator\">*</span>pi <span class=\"token operator\">=</span> pn<span class=\"token operator\">-&gt;</span>item<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"1744-测试队列\"><a class=\"markdownIt-Anchor\" href=\"#1744-测试队列\">#</a> 17.4.4 测试队列</h5>\n<h4 id=\"175-用队列进行模拟\"><a class=\"markdownIt-Anchor\" href=\"#175-用队列进行模拟\">#</a> 17.5 用队列进行模拟</h4>\n<h4 id=\"176-链表和数组\"><a class=\"markdownIt-Anchor\" href=\"#176-链表和数组\">#</a> 17.6 链表和数组</h4>\n<p><a href=\"https://imgtu.com/i/Tysdzj\"><img src=\"https://s4.ax1x.com/2021/12/28/Tysdzj.png\" alt=\"Tysdzj.png\"></a></p>\n",
            "tags": [
                "C语言"
            ]
        },
        {
            "id": "https://github.com/YogMas/YogMas.github.io/2021/11/06/html-xia/",
            "url": "https://github.com/YogMas/YogMas.github.io/2021/11/06/html-xia/",
            "title": "Html-second",
            "date_published": "2021-11-05T16:00:00.000Z",
            "content_html": "<p>。</p>\n<h1 id=\"html下\"><a class=\"markdownIt-Anchor\" href=\"#html下\">#</a> Html (下)</h1>\n<h3 id=\"the-article-from-yogmas-also-sam\"><a class=\"markdownIt-Anchor\" href=\"#the-article-from-yogmas-also-sam\">#</a> the article from yogmas also sam</h3>\n<h4 id=\"1表格\"><a class=\"markdownIt-Anchor\" href=\"#1表格\">#</a> 1. 表格</h4>\n<h6 id=\"表格基本语法\"><a class=\"markdownIt-Anchor\" href=\"#表格基本语法\">#</a> 表格基本语法</h6>\n<blockquote>\n<pre><code>&lt;table&gt;\n  &lt;tr&gt;&lt;th&gt;&lt;/th&gt;&lt;/tr&gt;\n  &lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;\n&lt;/table&gt;\n</code></pre>\n</blockquote>\n<h6 id=\"表头单元格标签\"><a class=\"markdownIt-Anchor\" href=\"#表头单元格标签\">#</a> 表头单元格标签</h6>\n<blockquote>\n<p>align=\"\"<br>\nborder=\"\"<br>\ncellpadding=\"\"<br>\ncellspacing=\"\"<br>\nwidth=\"\"<br>\nheight=\"\"<br>\n<strong> 这些标签要写到 table 里面去</strong></p>\n</blockquote>\n<p>align: 表格中的文字所处的文字 eg.center 就是未于中间类似的还有 left,right<br>\nborder：表示表格边框的大小 0 表示没有 <strong>此属性的参数值是数字</strong><br>\n cellpadding：代表单元格边框到内容之间的距离（留白）<br>\ncellspacing：用来指定表格各单元格之间的空隙。<strong>此属性的参数值是数字</strong>，表示单元格间隙所占的像素点数。<br>\n同样 width,height 已经介绍过了 ，大多数时候都会用<strong> CSS</strong> 来写</p>\n<h6 id=\"合并单元格\"><a class=\"markdownIt-Anchor\" href=\"#合并单元格\">#</a> 合并单元格</h6>\n<blockquote>\n<p>rowspan=“合并单元格数目”<br>\ncolspan=“合并单元格数目”</p>\n</blockquote>\n<p>rowspan: 合并行 (也就是将一列上的各行合并)<br>\n colspan: 合并列 (也就是将一行上的各列合并)<br>\n 合并准则：如果 rowspan 就在最上面的表格的标签里面加上 rowspan=\"合并数目\" 并且删除已经被合并的表格<br>\n colspan 同理，注意 colspan 加在最左边的表格标签<br>\n eg.</p>\n<blockquote>\n<pre><code>  &lt;tr&gt;\n     &lt;td&gt;&lt;/td&gt;\n      &lt;td colspan=\"2\"&gt;&lt;/td&gt;\n\n  &lt;/tr&gt;\n</code></pre>\n</blockquote>\n<p>表示合并一行上的 2 列 第三列删除 colspan 写在第二列的 td 表格标签内</p>\n<h4 id=\"2列表\"><a class=\"markdownIt-Anchor\" href=\"#2列表\">#</a> 2. 列表</h4>\n<h6 id=\"无序列表\"><a class=\"markdownIt-Anchor\" href=\"#无序列表\">#</a> 无序列表</h6>\n<blockquote>\n<pre><code>&lt;ul&gt;\n  &lt;li&gt;&lt;/li&gt;\n    …………\n  &lt;li&gt;&lt;/li&gt;\n  &lt;li&gt;&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n</blockquote>\n<p>其中的 li 标签各位根据需要而定<br>\n ul:unorderlist<br>\nli:list</p>\n<h6 id=\"有序列表\"><a class=\"markdownIt-Anchor\" href=\"#有序列表\">#</a> 有序列表</h6>\n<blockquote>\n<pre><code>&lt;ol&gt;\n  &lt;li&gt;&lt;/li&gt;\n    …………\n  &lt;li&gt;&lt;/li&gt;\n&lt;/ol&gt;\n</code></pre>\n</blockquote>\n<p>ol:orderlist<br>\nli:list</p>\n<h6 id=\"自定义列表\"><a class=\"markdownIt-Anchor\" href=\"#自定义列表\">#</a> 自定义列表</h6>\n<blockquote>\n<pre><code> &lt;dl&gt;\n   &lt;dt&gt;&lt;/dt&gt;顶部总标签\n   &lt;dd&gt;&lt;/dd&gt;\n   &lt;dt&gt;&lt;/dt&gt;\n   &lt;dd&gt;&lt;/dd\n &lt;/dl&gt;\n 一个&lt;dt&gt;和&lt;/dt&gt;标签出现代表一列\n 直到下一个&lt;dt&gt;和&lt;/dt&gt;出现才换列\n</code></pre>\n</blockquote>\n<h4 id=\"3表单\"><a class=\"markdownIt-Anchor\" href=\"#3表单\">#</a> 3. 表单</h4>\n<h6 id=\"表单域\"><a class=\"markdownIt-Anchor\" href=\"#表单域\">#</a> 表单域</h6>\n<blockquote>\n<pre><code>&lt;form action=\"\" method=\"\" name=\"\"&gt;\n&lt;/form&gt;\n</code></pre>\n</blockquote>\n<p>表单域需要与后端结合使用只是接下来的一系列需要传输数据到后端的都需要写到表单域内<br>\n附：此时作者还不知道表单域的 action 等标签充当的角色和用处</p>\n<h6 id=\"input表单元素\"><a class=\"markdownIt-Anchor\" href=\"#input表单元素\">#</a> input 表单元素</h6>\n<blockquote>\n<pre><code>&lt;input type=\"\" value=\"\" name=\"\" &gt;\n</code></pre>\n</blockquote>\n<p><a href=\"https://imgtu.com/i/IJqbX8\"><img src=\"https://z3.ax1x.com/2021/11/09/IJqbX8.png\" alt=\"IJqbX8.png\"></a><br>\ntype 里面可以填写的元素<br>\n text: 文本框，用户可以输入任何文字，但可以用 maxlength 等来加以限定<br>\n password：密码框，可以对你输入的数字进行保密 此时显示 *******<br>\nradio: 单选按钮</p>\n<blockquote>\n<p>将两个 input+radio 元素的标签 name 设置成相同 才可以进行单选 具体下面看图</p>\n</blockquote>\n<p>checkbox: 复选框，可以进行多个选择<br>\n submit: 提交按钮，点击可以将数据提交给后端<br>\n reset: 重新填写<br>\n button: 点击  例如：获取短信验证码需要使用</p>\n<p>与 type 同等级的元素作用<br>\n value：提前显示在文本框内的文字<br>\n name：传送给后端时的数据名称，radio 只有 name 相同才能单选<br>\n<a href=\"https://imgtu.com/i/IQmXRg\"><img src=\"https://z3.ax1x.com/2021/11/06/IQmXRg.png\" alt=\"IQmXRg.png\"></a></p>\n<h6 id=\"label标签\"><a class=\"markdownIt-Anchor\" href=\"#label标签\">#</a> label 标签</h6>\n<p>点击添加了 label 标签的元素等于点击 label 标签的输出端</p>\n<blockquote>\n<pre><code>&lt;label for=\"XXX\"&gt; &lt;/label&gt;\n&lt;input type=\"\" id=\"XXX\"&gt;\n</code></pre>\n</blockquote>\n<p>并不一定要是 input 只是在 input 等填写数据中较为广泛地使用，xxx 可以换成任何自己命名的单词字母等<br>\n for 和 id 中填写的必须相同</p>\n<h6 id=\"select下拉表单\"><a class=\"markdownIt-Anchor\" href=\"#select下拉表单\">#</a> select 下拉表单</h6>\n<blockquote>\n<pre><code>&lt;select&gt;\n&lt;option&gt;&lt;/option&gt;\n&lt;option selected=\"selected\"&gt; &lt;/potion&gt;\n&lt;/select&gt;\n</code></pre>\n</blockquote>\n<p>option 标签中间填写下拉菜单中的文字等<br>\n添加了 selected 元素的表示 未下拉时显示在表面的选项</p>\n<h6 id=\"textarea文本域\"><a class=\"markdownIt-Anchor\" href=\"#textarea文本域\">#</a> textarea 文本域</h6>\n<blockquote>\n<pre><code>&lt;textarea cols=\"\" rows=\"\"&gt;\n&lt;/textarea&gt;\n</code></pre>\n</blockquote>\n<p>文本域通常很大所以用 cols 和 rows 来进行限定<br>\n cols 限定一行的字数 rows 限定行数<br>\n在后期的学习中可以用<strong> css</strong> 将文本域的右下角拉伸和上下滑动进行去除，增加美观性</p>\n<h4 id=\"4html5新增\"><a class=\"markdownIt-Anchor\" href=\"#4html5新增\">#</a> 4.html5 新增</h4>\n<h6 id=\"语义化标签\"><a class=\"markdownIt-Anchor\" href=\"#语义化标签\">#</a> 语义化标签</h6>\n<blockquote>\n<pre><code>&lt;header&gt;头部标签&lt;/header&gt;\n\n&lt;nav&gt;导航栏标签&lt;/nav&gt;   \n&lt;section&gt;某个区域&lt;/section&gt;\n</code></pre>\n</blockquote>\n<h6 id=\"视频标签\"><a class=\"markdownIt-Anchor\" href=\"#视频标签\">#</a> 视频标签</h6>\n<blockquote>\n<pre><code>&lt;video src=\"\" autoplay=\"\"muted=\"muted\"  loop=\"loop\" poster=\"media/mi9.jpg\"&gt;\n</code></pre>\n</blockquote>\n<p>src: 路径<br>\n autoplay: 写入 autoplay 代表自动播放<br>\n mute: 播放时静音<br>\n loop: 预先加载<br>\n poster: 播放还没有加载出来的时候显示的图片<br>\n controls: 是否显示控制按钮</p>\n<h6 id=\"音频标签\"><a class=\"markdownIt-Anchor\" href=\"#音频标签\">#</a> 音频标签</h6>\n<blockquote>\n<pre><code>&lt;audio src=\"media/music.mp3\" autoplay=\"autoplay\" controls=\"controls\"&gt;&lt;/audio&gt;\n</code></pre>\n</blockquote>\n<p>与视频标签相差无几</p>\n<h6 id=\"input表单\"><a class=\"markdownIt-Anchor\" href=\"#input表单\">#</a> input 表单</h6>\n<p><a href=\"https://imgtu.com/i/IJqLnS\"><img src=\"https://z3.ax1x.com/2021/11/09/IJqLnS.png\" alt=\"IJqLnS.png\"></a></p>\n<h6 id=\"表单属性\"><a class=\"markdownIt-Anchor\" href=\"#表单属性\">#</a> 表单属性</h6>\n<blockquote>\n<pre><code>&lt;input type=\"search\" name=\"sear\" id=\"\" required=\"required\" placeholder=\"pink老师\" autofocus=\"autofocus\" autocomplete=\"off\"&gt;\n</code></pre>\n</blockquote>\n<pre><code> &lt;input type=\"file\" name=\"\" id=\"\" multiple=\"multiple\"&gt;\n</code></pre>\n<p>required: 需要填写才能点确定<br>\n placeholder: 还没有填写时候显示的文字<br>\n autofocus: 打开网页时，指标会自动点一下这里<br>\n autocomplete: 自动储存你输入过的信息 (容易暴露信息，所以一般都会关闭)<br>\n multiple: 可以选取多个文件</p>\n",
            "tags": [
                "Html"
            ]
        },
        {
            "id": "https://github.com/YogMas/YogMas.github.io/2021/11/06/javascript-ji-chu-ban/",
            "url": "https://github.com/YogMas/YogMas.github.io/2021/11/06/javascript-ji-chu-ban/",
            "title": "Javascript基础(未完待续)",
            "date_published": "2021-11-05T16:00:00.000Z",
            "content_html": "<h1 id=\"javascript\"><a class=\"markdownIt-Anchor\" href=\"#javascript\">#</a> javascript</h1>\n<h2 id=\"article-by-yogmas\"><a class=\"markdownIt-Anchor\" href=\"#article-by-yogmas\">#</a> Article By Yogmas</h2>\n<h3 id=\"js的组成\"><a class=\"markdownIt-Anchor\" href=\"#js的组成\">#</a> js 的组成</h3>\n<p>1.ECNscript:JS 语法<br>\n 2.DOM: 页面文档模型<br>\n 3.BOM: 浏览器对象模型</p>\n<h4 id=\"js初体验\"><a class=\"markdownIt-Anchor\" href=\"#js初体验\">#</a> js 初体验</h4>\n<p>1. 行内式 js: 直接写到元素的内部<br>\n<a href=\"https://imgtu.com/i/IGFyQJ\"><img src=\"https://z3.ax1x.com/2021/11/08/IGFyQJ.png\" alt=\"IGFyQJ.png\"></a><br>\n2. 内嵌式的 js:</p>\n<blockquote>\n<pre><code>&lt;head&gt;&lt;script&gt; &lt;/script&gt;&lt;/head&gt;\n</code></pre>\n</blockquote>\n<p>3. 外部式 js: 创建 XXX.js 文件在通过标签引出到 html 文件中<br>\n<a href=\"https://imgtu.com/i/IGF2e1\"><img src=\"https://z3.ax1x.com/2021/11/08/IGF2e1.png\" alt=\"IGF2e1.png\"></a></p>\n<h4 id=\"js注释\"><a class=\"markdownIt-Anchor\" href=\"#js注释\">#</a> js 注释</h4>\n<blockquote>\n<pre><code>1.单行注释    //    ctrl + /\n2.多行注释     /*    */    shift + alt + a\n</code></pre>\n</blockquote>\n<h4 id=\"js输入输出语句\"><a class=\"markdownIt-Anchor\" href=\"#js输入输出语句\">#</a> js 输入输出语句</h4>\n<p><a href=\"https://imgtu.com/i/IGFWo6\"><img src=\"https://z3.ax1x.com/2021/11/08/IGFWo6.png\" alt=\"IGFWo6.png\"></a></p>\n<blockquote>\n<pre><code>prompt('') 输入框 \nalert('')警示框  展示给用户的\nconsole 控制台打印的信息 给程序员看的\n</code></pre>\n</blockquote>\n<h3 id=\"变量概述\"><a class=\"markdownIt-Anchor\" href=\"#变量概述\">#</a> 变量概述</h3>\n<h4 id=\"什么是变量\"><a class=\"markdownIt-Anchor\" href=\"#什么是变量\">#</a> 什么是变量</h4>\n<p>变量是用来存放数据的容器，简而言之就是一个装东西的盒子<br>\n变量是内存中申请的一部分用来存放数据的空间</p>\n<h3 id=\"变量的使用\"><a class=\"markdownIt-Anchor\" href=\"#变量的使用\">#</a> 变量的使用</h3>\n<h4 id=\"声明变量\"><a class=\"markdownIt-Anchor\" href=\"#声明变量\">#</a> 声明变量</h4>\n<blockquote>\n<p>var age;</p>\n</blockquote>\n<p>var 是一个 js 关键字用来声明变量<br>\n age 是程序员取的名字</p>\n<h4 id=\"赋值\"><a class=\"markdownIt-Anchor\" href=\"#赋值\">#</a> 赋值</h4>\n<p>赋值就是把值存入变量中</p>\n<blockquote>\n<p>age=10</p>\n</blockquote>\n<p>这里的 = 是赋值的意思 在变量中存储一个数据</p>\n<h4 id=\"变量的初始化\"><a class=\"markdownIt-Anchor\" href=\"#变量的初始化\">#</a> 变量的初始化</h4>\n<blockquote>\n<p>var age=18;</p>\n</blockquote>\n<p>在声明变量的同时赋值给 18  使程序变得更加简便</p>\n<blockquote>\n<pre><code>var myname = prompt('请输入你的名字')\n</code></pre>\n</blockquote>\n<p>这样在弹出的对话框里面输入的名字 可以储存到变量 myname 中去</p>\n<h4 id=\"变量语法扩展\"><a class=\"markdownIt-Anchor\" href=\"#变量语法扩展\">#</a> 变量语法扩展</h4>\n<h5 id=\"更新变量\"><a class=\"markdownIt-Anchor\" href=\"#更新变量\">#</a> 更新变量</h5>\n<blockquote>\n<pre><code> var myname = 'pink';\n console.log(myname);\n  myname = '迪丽热巴';\n  console.log(myname);\n</code></pre>\n</blockquote>\n<p>这样从上到下 第一次输出的 pink 第二次输出的是迪丽热巴  变量在不断更新</p>\n<h5 id=\"声明多个变量\"><a class=\"markdownIt-Anchor\" href=\"#声明多个变量\">#</a> 声明多个变量</h5>\n<blockquote>\n<pre><code>eg:var age=18,address='火影村'\n</code></pre>\n</blockquote>\n<p>这里声明了 age 和 address 多个变量，变量与变量之间通过英文的逗号隔开</p>\n<h5 id=\"声明变量的特殊情况\"><a class=\"markdownIt-Anchor\" href=\"#声明变量的特殊情况\">#</a> 声明变量的特殊情况</h5>\n<p>1. 只声明不赋值 这时候输出的结果是 undefined (未定义的)<br>\n 2. 不声明不赋值 直接使用 浏览器会进行报错<br>\n 3. 不声明直接赋值使用 在 js 之中只可以使用的</p>\n<p>注意:js 是从上到下处理的，如果中间有错误的代码，那么错误代码下面的代码将不再被 js 处理<br>\n<a href=\"https://imgtu.com/i/IG0QRf\"><img src=\"https://z3.ax1x.com/2021/11/08/IG0QRf.png\" alt=\"IG0QRf.png\"></a></p>\n<h5 id=\"变量命名规范\"><a class=\"markdownIt-Anchor\" href=\"#变量命名规范\">#</a> 变量命名规范</h5>\n<p><a href=\"https://imgtu.com/i/IGieEV\"><img src=\"https://z3.ax1x.com/2021/11/08/IGieEV.png\" alt=\"IGieEV.png\"></a><br>\n 尽量不要直接使用 name 作为变量名，name 在大部分浏览器中有变量含义</p>\n<h4 id=\"小结\"><a class=\"markdownIt-Anchor\" href=\"#小结\">#</a> 小结</h4>\n<p>自我问答环节<br>\n<a href=\"https://imgtu.com/i/IGin4U\"><img src=\"https://z3.ax1x.com/2021/11/08/IGin4U.png\" alt=\"IGin4U.png\"></a><br>\n<a href=\"https://imgtu.com/i/IGiM34\"><img src=\"https://z3.ax1x.com/2021/11/08/IGiM34.png\" alt=\"IGiM34.png\"></a></p>\n<h3 id=\"数据类型\"><a class=\"markdownIt-Anchor\" href=\"#数据类型\">#</a> 数据类型</h3>\n<h4 id=\"简介\"><a class=\"markdownIt-Anchor\" href=\"#简介\">#</a> 简介</h4>\n<p>不同的数据占用的存储空间不同，为了充分利用存储空间，于是定义了不同的数据类型.</p>\n<h4 id=\"变量的数据类型\"><a class=\"markdownIt-Anchor\" href=\"#变量的数据类型\">#</a> 变量的数据类型</h4>\n<p>js 是一种弱类型或者说动态语言，这意味着不用提前声明变量的类型，在程序运行的过程中，类型会自动确定.</p>\n<p>js 的变量数据类型是只有程序在运行过程中，根据等号右边的值来确定的.</p>\n<p>js 是动态语言，变量的数据类型是可以变化的</p>\n<blockquote>\n<p>var x = 10;x 是数字型<br>\n var x = ‘yogmas’; x 是字符串型</p>\n</blockquote>\n<h5 id=\"简单数据类型\"><a class=\"markdownIt-Anchor\" href=\"#简单数据类型\">#</a> 简单数据类型</h5>\n<p><a href=\"https://imgtu.com/i/IGFTQH\"><img src=\"https://z3.ax1x.com/2021/11/08/IGFTQH.png\" alt=\"IGFTQH.png\"></a></p>\n<h6 id=\"数字型\"><a class=\"markdownIt-Anchor\" href=\"#数字型\">#</a> 数字型</h6>\n<p>1. 在我们程序里面数字前面加 0 表示 8 进制</p>\n<blockquote>\n<pre><code>eg:var num = 010 转化为10进制就是8\n</code></pre>\n</blockquote>\n<p>2. 十六进制 0~9 a~f<br>\n 在数字前面加 0x 表示 16 进制</p>\n<blockquote>\n<pre><code>eg:var num = 0xa 转外为10进制就是10\n</code></pre>\n</blockquote>\n<p>3. 数字型的最大值</p>\n<blockquote>\n<pre><code>console.log(Number.MAX_VALUE)  1.7976e+308\n</code></pre>\n</blockquote>\n<p>4. 数字型的最小值</p>\n<blockquote>\n<pre><code>console.log(Number.MIN_VALUE)  5e-324\n</code></pre>\n</blockquote>\n<p>数字型的三个特殊数值<br>\n alert (infinity) 无穷大<br>\n alert (-infinity) 无穷小<br>\n这两个数都可以通过将前面的最大数或者最小数通过加减乘除扩大或缩小得到<br>\n alert (NAN) 非数值</p>\n<p>可以通过 isNAN 用来判断非数字 并且返回一个值， 如果是数值返回的是 false 如果不是数字 返回的是 true<br>\nconsole.log(isNaN(XX));<br>\n<a href=\"https://imgtu.com/i/IGFOTP\"><img src=\"https://z3.ax1x.com/2021/11/08/IGFOTP.png\" alt=\"IGFOTP.png\"></a></p>\n<h5 id=\"字符串型\"><a class=\"markdownIt-Anchor\" href=\"#字符串型\">#</a> 字符串型</h5>\n<p>字符串数据类型用单引号圈出 (字符串必须加引号，不然会提示错误)</p>\n<p>注意引号内不能内嵌引号，如果要引号内嵌，使用不同的引号 (<strong>引号判定是就近一致原则</strong>)</p>\n<blockquote>\n<pre><code>例如:var str = \"我是一个'高富帅'程序员\";\n</code></pre>\n</blockquote>\n<h6 id=\"字符串长度\"><a class=\"markdownIt-Anchor\" href=\"#字符串长度\">#</a> 字符串长度</h6>\n<p>检测获取字符串的长度 用 length</p>\n<blockquote>\n<pre><code>        var str = 'my name is andy ';\n        console.log(str.length)\n</code></pre>\n</blockquote>\n<h6 id=\"字符转义符\"><a class=\"markdownIt-Anchor\" href=\"#字符转义符\">#</a> 字符转义符</h6>\n<p><a href=\"https://imgtu.com/i/IGkmpF\"><img src=\"https://z3.ax1x.com/2021/11/08/IGkmpF.png\" alt=\"IGkmpF.png\"></a><br>\n 都是以 \\ 开头 ，但是这些转义字符要写到引号里面</p>\n<h6 id=\"字符串的拼接\"><a class=\"markdownIt-Anchor\" href=\"#字符串的拼接\">#</a> 字符串的拼接</h6>\n<blockquote>\n<pre><code>console.log ('' + '' + '')字符串之间通过加号连接\neg:console.log ('沙漠'+'骆驼 ') = '沙漠骆驼'\nconsole.log ('12' + 12) 最后为1212  这是字符串的相加   \nconsole.log (12 + 12) 最后为24   这是数字型的相加\n</code></pre>\n</blockquote>\n<p>只要有一个是字符串 其他全部都会以字符串相连<br>\n<strong>数字相加，字符相连</strong></p>\n<h6 id=\"字符串拼接加强\"><a class=\"markdownIt-Anchor\" href=\"#字符串拼接加强\">#</a> 字符串拼接加强</h6>\n<p>通过改变变量中的值 来改变显示中的值</p>\n<blockquote>\n<pre><code>eg:var age = 18;\n   console.log('pink老师'+age+'岁')\n</code></pre>\n</blockquote>\n<p>需要注意的时，<strong>变量不要写到字符串里面，是通过和字符串相连的方式实现的</strong></p>\n<blockquote>\n<pre><code>  console.log ('pink老师age岁')\n  console.log ('pink老师'+'age'+'岁')\n  console.log ('pink老师'+'age岁')\n</code></pre>\n</blockquote>\n<p>如上这些等等做法，都是不能实现的.<br>\n<a href=\"https://imgtu.com/i/IGku6J\"><img src=\"https://z3.ax1x.com/2021/11/08/IGku6J.png\" alt=\"IGku6J.png\"></a><br>\n 交互编程：</p>\n<p>用户输入 → 处理 → 输出</p>\n<blockquote>\n<pre><code>eg         var age = prompt('请输入您的年龄');\n           var str = '你今年已经' + age + '岁了';\n           alert(str);\n</code></pre>\n</blockquote>\n<h5 id=\"布尔型boolean\"><a class=\"markdownIt-Anchor\" href=\"#布尔型boolean\">#</a> 布尔型 Boolean</h5>\n<p>布尔型中有两个值 true 和 false</p>\n<blockquote>\n<pre><code>eg         var flag = true; 布尔型\n           var flag1 = false; 布尔型\n</code></pre>\n</blockquote>\n<p>需要注意的是参与加法运算时布尔型 true 就是 1，false 就是 0.</p>\n<h5 id=\"undefined-和null\"><a class=\"markdownIt-Anchor\" href=\"#undefined-和null\">#</a> Undefined 和 Null</h5>\n<p>如果一个变量声明未赋值 就是 undefined 未定义数据类型</p>\n<blockquote>\n<pre><code>   eg: var str;\n       console.log(var);\n</code></pre>\n</blockquote>\n<p>未定义和字符串相加，最终的结果是 undefined+ 字符串的内容</p>\n<p>undefined 和数字相加 最后得到的结果是 NaN: not a number</p>\n<p>null : 空值</p>\n<blockquote>\n<pre><code>var space = null\nconsole.log(space + 'yogmas')  输出的结果是 spaceyogmas\nconsole.log(space + 1) 输出的结果是1  (和undefined区别)\n</code></pre>\n</blockquote>\n<h4 id=\"获取变量数据类型\"><a class=\"markdownIt-Anchor\" href=\"#获取变量数据类型\">#</a> 获取变量数据类型</h4>\n<h5 id=\"使用typeof来检测\"><a class=\"markdownIt-Anchor\" href=\"#使用typeof来检测\">#</a> 使用 typeof 来检测</h5>\n<blockquote>\n<pre><code>   eg:   var num = 10;\n         console.log(typeof num);\n</code></pre>\n</blockquote>\n<p>比较特殊的是 在这里对 null 进行数据类型检测 输出来的是 object (对象)</p>\n<p>经过检测发现 我们 prompt 取过来的值是字符型的</p>\n<h5 id=\"观察控制台中的数据颜色\"><a class=\"markdownIt-Anchor\" href=\"#观察控制台中的数据颜色\">#</a> 观察控制台中的数据颜色</h5>\n<p>数字型 浅蓝色<br>\n字符型 黑色<br>\n布尔型 深蓝色<br>\n undefined 和 null 灰色</p>\n<h4 id=\"字面量\"><a class=\"markdownIt-Anchor\" href=\"#字面量\">#</a> 字面量</h4>\n<p>字面量是在源代码中一个固定值得表示法，通俗来说，就是字面量表示如何表达这个值<br>\n<a href=\"https://imgtu.com/i/IGkQmR\"><img src=\"https://z3.ax1x.com/2021/11/08/IGkQmR.png\" alt=\"IGkQmR.png\"></a></p>\n<h4 id=\"数据类型转换\"><a class=\"markdownIt-Anchor\" href=\"#数据类型转换\">#</a> 数据类型转换</h4>\n<p>通常会实现 3 中方式的转换<br>\n 1. 转换为字符串类型<br>\n 2. 转换为数字型<br>\n 3. 转换为布尔型</p>\n<h5 id=\"转换成字符串型\"><a class=\"markdownIt-Anchor\" href=\"#转换成字符串型\">#</a> 转换成字符串型</h5>\n<p><a href=\"https://imgtu.com/i/IGkGtK\"><img src=\"https://z3.ax1x.com/2021/11/08/IGkGtK.png\" alt=\"IGkGtK.png\"></a></p>\n<blockquote>\n<pre><code>var num = 18;\nconsole.log(num.toString())\nconsole.log(String(num))\nconsole.log(num + '')\n</code></pre>\n</blockquote>\n<p>注意:toString () 和 String () 的使用方法不同<br>\n三种方法中 其中拼接转换字符串最为实用</p>\n<h5 id=\"转换为数字型重点\"><a class=\"markdownIt-Anchor\" href=\"#转换为数字型重点\">#</a> 转换为数字型 (重点)</h5>\n<p><a href=\"https://imgtu.com/i/IGkN1e\"><img src=\"https://z3.ax1x.com/2021/11/08/IGkN1e.png\" alt=\"IGkN1e.png\"></a><br>\n 其中前两个较为实用<br>\n 1.parseInt (变量) 可以把字符型的转换为数字型 但是得到的是整数 并且约分不会四舍五入，会直接去掉小数点后面的数字 如果数字后面有单位，也会去掉单位，如果以字母开头那么输出的为 NaN<br>\n2.paseFloat (变量) 可以把字符型的转化为数字型，得到的是浮点数也就是小数，但同样也会把后面的单位去掉<br>\n 3.Number (变量)<br>\n 4. 利用了算数运算 - * / 隐式转换<br>\n<a href=\"https://imgtu.com/i/IGk2cQ\"><img src=\"https://z3.ax1x.com/2021/11/08/IGk2cQ.png\" alt=\"IGk2cQ.png\"></a></p>\n<blockquote>\n<pre><code>   console.log(parseInt('123'));\n   console.log(parseFloat('123'));\n   console.log(Number('123'));\n   console.log('12' - 0);\n   console.log('123' - '123');\n   console.log('123' * 1);\n</code></pre>\n</blockquote>\n<h5 id=\"转化为布尔型\"><a class=\"markdownIt-Anchor\" href=\"#转化为布尔型\">#</a> 转化为布尔型</h5>\n<p>代表<strong>空，否定</strong>的值会被转化为 false，如’’,0,NaN,null,undefined. 其他的值都会被转化成 true<br>\n<a href=\"https://imgtu.com/i/IGkjBR\"><img src=\"https://z3.ax1x.com/2021/11/08/IGkjBR.png\" alt=\"IGkjBR.png\"></a></p>\n<blockquote>\n<pre><code>eg: console.log(Boolean(''));      这是false\n</code></pre>\n</blockquote>\n<h4 id=\"解释型语言和编译型语言\"><a class=\"markdownIt-Anchor\" href=\"#解释型语言和编译型语言\">#</a> 解释型语言和编译型语言</h4>\n<p>编译型语言：全部编译成功后再执行代码.(做好菜 再吃饭)<br>\n 解释型语言：解释一行代码后就执行一行代码.(吃火锅：边吃边涮)</p>\n<h4 id=\"标识符关键字保留字\"><a class=\"markdownIt-Anchor\" href=\"#标识符关键字保留字\">#</a> 标识符，关键字，保留字</h4>\n<p>标识符：开发人员为变量，属性，函数，参数取的名字<br>\n<strong>标识符不能是关键字和保留字</strong><br>\n关键字：是指 js 本身已经使用了子，不能充当变量名和方法名<br>\n<a href=\"https://imgtu.com/i/IGBhAs\"><img src=\"https://z3.ax1x.com/2021/11/08/IGBhAs.png\" alt=\"IGBhAs.png\"></a><br>\n 保留字：预留的关键字，未来可能会成为关键字<br>\n<a href=\"https://imgtu.com/i/IGBHjU\"><img src=\"https://z3.ax1x.com/2021/11/08/IGBHjU.png\" alt=\"IGBHjU.png\"></a></p>\n<h3 id=\"运算符\"><a class=\"markdownIt-Anchor\" href=\"#运算符\">#</a> 运算符</h3>\n<h4 id=\"算数运算符\"><a class=\"markdownIt-Anchor\" href=\"#算数运算符\">#</a> 算数运算符</h4>\n<p><a href=\"https://imgtu.com/i/IGAQgg\"><img src=\"https://z3.ax1x.com/2021/11/08/IGAQgg.png\" alt=\"IGAQgg.png\"></a><br>\n 需要注意的是浮点数在算数运算里面会有问题 (会有一定的误差)</p>\n<blockquote>\n<pre><code>eg:console.log(0.07*100); 最终的结果是7.000000000000001\n</code></pre>\n</blockquote>\n<p><a href=\"https://imgtu.com/i/IGAaCT\"><img src=\"https://z3.ax1x.com/2021/11/08/IGAaCT.png\" alt=\"IGAaCT.png\"></a><br>\n 我们不能拿着浮点数来进行相比较是否相等</p>\n<h5 id=\"表达式返回值\"><a class=\"markdownIt-Anchor\" href=\"#表达式返回值\">#</a> 表达式，返回值</h5>\n<p>由数字，运算符，变量等组成的式子</p>\n<p>在程序中的计算是把右边表达式计算完毕把返回值给左边</p>\n<p>式子通过计算得到的结果 称为返回值</p>\n<h4 id=\"自增和自减运算符\"><a class=\"markdownIt-Anchor\" href=\"#自增和自减运算符\">#</a> 自增和自减运算符</h4>\n<p>反复用给数字变量添加或者减去 1，可以用 ++ 或者–来实现<br>\n在 js 中，自增自减运算符既可以放在变量前面又可以放在变量后面，称为前置或者后置.<br>\n 需要注意的是 这个运算符必须和变量配合才能使用<br>\n前置和后置有区别的是，前置表示先自增或自减再返回，后置表示先返回再自增或自减<br>\n<a href=\"https://imgtu.com/i/IGYJ4U\"><img src=\"https://z3.ax1x.com/2021/11/08/IGYJ4U.png\" alt=\"IGYJ4U.png\"></a></p>\n<h4 id=\"比较运算符关系运算符\"><a class=\"markdownIt-Anchor\" href=\"#比较运算符关系运算符\">#</a> 比较运算符 &amp; 关系运算符</h4>\n<p><a href=\"https://imgtu.com/i/IGYwuR\"><img src=\"https://z3.ax1x.com/2021/11/08/IGYwuR.png\" alt=\"IGYwuR.png\"></a><br>\n<a href=\"https://imgtu.com/i/IGYy4O\"><img src=\"https://z3.ax1x.com/2021/11/08/IGYy4O.png\" alt=\"IGYy4O.png\"></a></p>\n<h4 id=\"逻辑运算符\"><a class=\"markdownIt-Anchor\" href=\"#逻辑运算符\">#</a> 逻辑运算符</h4>\n<p><a href=\"https://imgtu.com/i/IGYhDI\"><img src=\"https://z3.ax1x.com/2021/11/08/IGYhDI.png\" alt=\"IGYhDI.png\"></a></p>\n<h5 id=\"短路运算逻辑中断\"><a class=\"markdownIt-Anchor\" href=\"#短路运算逻辑中断\">#</a> 短路运算 (逻辑中断)</h5>\n<p>原理：左边表达式的值可以确定结果时，就不再继续运算右边的值</p>\n<p>逻辑与：如果表达式 1 结果为真，则返回表达式 2. 如果表达式 1 结果为假，则返回表达式 1<br>\n<a href=\"https://imgtu.com/i/IGYIVP\"><img src=\"https://z3.ax1x.com/2021/11/08/IGYIVP.png\" alt=\"IGYIVP.png\"></a><br>\n<a href=\"https://imgtu.com/i/IGYoUf\"><img src=\"https://z3.ax1x.com/2021/11/08/IGYoUf.png\" alt=\"IGYoUf.png\"></a><br>\n 逻辑或：如果表达式 1 结果为真，则返回表达式 1. 如果表达式 1 结果为假，则返回表达式 2.<br>\n<a href=\"https://imgtu.com/i/IGYT58\"><img src=\"https://z3.ax1x.com/2021/11/08/IGYT58.png\" alt=\"IGYT58.png\"></a></p>\n<h5 id=\"赋值运算符\"><a class=\"markdownIt-Anchor\" href=\"#赋值运算符\">#</a> 赋值运算符</h5>\n<p>把右边的数据赋给左边的变量<br>\n<a href=\"https://imgtu.com/i/IGYLvj\"><img src=\"https://z3.ax1x.com/2021/11/08/IGYLvj.png\" alt=\"IGYLvj.png\"></a></p>\n<h5 id=\"运算符优先级\"><a class=\"markdownIt-Anchor\" href=\"#运算符优先级\">#</a> 运算符优先级</h5>\n<p><a href=\"https://imgtu.com/i/IGtSaV\"><img src=\"https://z3.ax1x.com/2021/11/08/IGtSaV.png\" alt=\"IGtSaV.png\"></a><br>\n 注意逻辑与的权重大于逻辑或的权重</p>\n<h3 id=\"流程控制-分支\"><a class=\"markdownIt-Anchor\" href=\"#流程控制-分支\">#</a> 流程控制 - 分支</h3>\n<h4 id=\"流程控制\"><a class=\"markdownIt-Anchor\" href=\"#流程控制\">#</a> 流程控制</h4>\n<p>控制代码按照什么结构顺序来执行</p>\n<p>流程控制有三种结构，分别是顺序结构，分支结构和循环结构<br>\n<a href=\"https://imgtu.com/i/IGti24\"><img src=\"https://z3.ax1x.com/2021/11/08/IGti24.png\" alt=\"IGti24.png\"></a></p>\n<h5 id=\"顺序流程控制\"><a class=\"markdownIt-Anchor\" href=\"#顺序流程控制\">#</a> 顺序流程控制</h5>\n<p>按照写的代码的顺序从上到下执行，我们现在的代码大多数都是按照顺序流程控制来写的</p>\n<h5 id=\"分支流程控制\"><a class=\"markdownIt-Anchor\" href=\"#分支流程控制\">#</a> 分支流程控制</h5>\n<p>从上到下执行代码的过程中，根据不同的条件，执行不同的路径代码，从而得到不同的结果</p>\n<h4 id=\"if分支语句\"><a class=\"markdownIt-Anchor\" href=\"#if分支语句\">#</a> if 分支语句</h4>\n<blockquote>\n<pre><code>if (条件表达式) {执行语句}\n</code></pre>\n</blockquote>\n<p>如果条件表达式结果为真就执行大括号里面的执行语句<br>\n如果条件表达式结果为假就执行 if 语句后面的代码<br>\n<a href=\"https://imgtu.com/i/IGBOHJ\"><img src=\"https://z3.ax1x.com/2021/11/08/IGBOHJ.png\" alt=\"IGBOHJ.png\"></a><br>\n<a href=\"https://imgtu.com/i/IGBx41\"><img src=\"https://z3.ax1x.com/2021/11/08/IGBx41.png\" alt=\"IGBx41.png\"></a></p>\n<h5 id=\"if-else-双分支语句\"><a class=\"markdownIt-Anchor\" href=\"#if-else-双分支语句\">#</a> if else 双分支语句</h5>\n<p><a href=\"https://imgtu.com/i/IGDp36\"><img src=\"https://z3.ax1x.com/2021/11/08/IGDp36.png\" alt=\"IGDp36.png\"></a><br>\n 如果表达式结果为真，那么执行语句 1 否则执行语句 2<br>\n 语句 1 和语句 2 只能二选一执行<br>\n else 后面直接加大括号而不是小括号<br>\n<a href=\"https://imgtu.com/i/IGDVUA\"><img src=\"https://z3.ax1x.com/2021/11/08/IGDVUA.png\" alt=\"IGDVUA.png\"></a></p>\n<h5 id=\"if-else-多分支语句\"><a class=\"markdownIt-Anchor\" href=\"#if-else-多分支语句\">#</a> if else 多分支语句</h5>\n<p>利用多个条件来选择不同的语句执行，得到不同的结果，是多选 1 的过程</p>\n<p>语法规范:<br>\nif (条件表达式 1) {</p>\n<p>} else if (条件表达式 2) {</p>\n<p>} else if …{</p>\n<p>} else {<br>\n最后的语句<br>\n}<br>\n 如果条件表达式 1 满足就执行语句 1，执行完毕后退出整个 if 分支语句<br>\n如果条件 1 不满足就判断表达式 2 以此类推<br>\n如果全都不成立，则执行最后的 else 里面的语句<br>\n注意<br>\n 1. 多分支语句还是多选 1 最后只有 1 个语句能执行<br>\n 2.else if 里面的条件理论上是可以任意多个的<br>\n 3.else if 中间有个空格<br>\n<a href=\"https://imgtu.com/i/IGD9gK\"><img src=\"https://z3.ax1x.com/2021/11/08/IGD9gK.png\" alt=\"IGD9gK.png\"></a></p>\n<h4 id=\"三元表达式\"><a class=\"markdownIt-Anchor\" href=\"#三元表达式\">#</a> 三元表达式</h4>\n<p>有三元运算符组成的式子我们称为三元表达式</p>\n<p>条件表达式 1? 表达式 1: 表达式 2</p>\n<p>如果条件表达式结果为真，则返回表达式 1 的值，如果条件表达式的结果为假，则返回表达式 2 的值</p>\n<h4 id=\"switch语句\"><a class=\"markdownIt-Anchor\" href=\"#switch语句\">#</a> switch 语句</h4>\n<p>也是多分支语句可以实现多选 1 的效果<br>\n<a href=\"https://imgtu.com/i/IGDn8P\"><img src=\"https://z3.ax1x.com/2021/11/08/IGDn8P.png\" alt=\"IGDn8P.png\"></a><br>\n 语法结构:<br>\nswitch (表达式) {<br>\ncase value1:<br>\n 执行语句 1;<br>\nbreak;<br>\ncase value2:<br>\n 执行语句 2;<br>\nbreak;<br>\n…………<br>\ndefault :<br>\n 执行最后的语句；<br>\n}<br>\n 利用表达式的值和 case 里面的选项匹配如果匹配上就执行相应的 case 里面的值，如果都没有匹配上就执行 default 里面的语句<br>\n<a href=\"https://imgtu.com/i/IGDKv8\"><img src=\"https://z3.ax1x.com/2021/11/08/IGDKv8.png\" alt=\"IGDKv8.png\"></a></p>\n<h4 id=\"switch语句和-if-else-if语句的区别\"><a class=\"markdownIt-Anchor\" href=\"#switch语句和-if-else-if语句的区别\">#</a> switch 语句和 if else if 语句的区别</h4>\n<p>一般情况下，他们两个语句可以相互替换<br>\n switch…case 语句 一般在 case 为比较固定值得情况下而 if…else 语句一般来判断范围<br>\n switch 判断时直接跳到判断语句上而 if 语句从上往下一次判断，这样 switch 语句的效率更高一点，但是如果分支少的话 if else if 的效率会更高一点，分支多的时候 switch 语句的效率更高<br>\n<a href=\"https://imgtu.com/i/IGDQKS\"><img src=\"https://z3.ax1x.com/2021/11/08/IGDQKS.png\" alt=\"IGDQKS.png\"></a></p>\n<h3 id=\"流程控制-循环\"><a class=\"markdownIt-Anchor\" href=\"#流程控制-循环\">#</a> 流程控制 - 循环</h3>\n<p>可以反复不断地循环执行某些代码</p>\n<h4 id=\"for循环\"><a class=\"markdownIt-Anchor\" href=\"#for循环\">#</a> for 循环</h4>\n<p>for 循环重复执行某些代码，通常和计数有关<br>\n被重复的语句称为循环体，是否重复执行取决于循环的终止条件，由循环体及循环的终止条件<br>\n初始化变量 就是用 var 声明的一个普通变量，通常用于作为计数器使用<br>\n条件表达式 就是用来决定每一次循环是否继续执行 就是终止的条件<br>\n操作表达式 是每次循环最后执行的代码，经常用来对我们的计数器进行更新 (递增或者递减)</p>\n<h5 id=\"断点调试\"><a class=\"markdownIt-Anchor\" href=\"#断点调试\">#</a> 断点调试</h5>\n<p>自己在程序的某一行设置一个断点，调试时，程序运行到这一行就会停住，然后你可以一步一步往下调试，调试过程中可以看着各个变量当前的值，出错的话，调试到出错的代码行及硻错误，停下.</p>\n<p>在浏览器调试中的 source 中可以进行断点调试<br>\n<a href=\"https://imgtu.com/i/IGtai8\"><img src=\"https://z3.ax1x.com/2021/11/08/IGtai8.png\" alt=\"IGtai8.png\"></a></p>\n<h5 id=\"for循环重复相同的代码\"><a class=\"markdownIt-Anchor\" href=\"#for循环重复相同的代码\">#</a> for 循环重复相同的代码</h5>\n<blockquote>\n<pre><code>   var num = prompt('请输入重复的次数');\n   for (i = 1; i &lt;= num; i++) {\n   console.log('你是大傻逼');\n   }\n</code></pre>\n</blockquote>\n<h5 id=\"for循环重复不同的代码\"><a class=\"markdownIt-Anchor\" href=\"#for循环重复不同的代码\">#</a> for 循环重复不同的代码</h5>\n<p>循环可以重复执行不同的代码，因为计数器变量 i 的存在 i 每次循环值都会变化</p>\n<blockquote>\n<pre><code>   for (var i = 1; i &lt;= 100; i++) {\n   console.log('这个人今年' + i + '岁了');\n   }\n</code></pre>\n</blockquote>\n<h5 id=\"for循环重复相同的操作\"><a class=\"markdownIt-Anchor\" href=\"#for循环重复相同的操作\">#</a> for 循环重复相同的操作</h5>\n<p>例如:</p>\n<blockquote>\n<pre><code>   var sum = 0, aver = 0;\n   for (var i = 1; i &lt;= 100; i++) {\n   sum += i\n   }\n   aver = sum / i\n   console.log(aver);\n</code></pre>\n</blockquote>\n<h5 id=\"双重for循环\"><a class=\"markdownIt-Anchor\" href=\"#双重for循环\">#</a> 双重 for 循环</h5>\n<p>也就是 for 循环嵌套，在一个循环语句中 再定义一个循环语句.</p>\n<blockquote>\n<pre><code>for (外层的初始化变量;外层的条件表达式;外层的操作表达式) {\n     for (初始化变量;条件表达式;操作表达式){\n     }\n     }\n</code></pre>\n</blockquote>\n<p>里层的循环可以看成是外层循环的语句</p>\n<h5 id=\"for循环小结\"><a class=\"markdownIt-Anchor\" href=\"#for循环小结\">#</a> for 循环小结</h5>\n<p><a href=\"https://imgtu.com/i/IGD1bQ\"><img src=\"https://z3.ax1x.com/2021/11/08/IGD1bQ.png\" alt=\"IGD1bQ.png\"></a></p>\n<h4 id=\"while循环\"><a class=\"markdownIt-Anchor\" href=\"#while循环\">#</a> while 循环</h4>\n<p><a href=\"https://imgtu.com/i/IGD8Ej\"><img src=\"https://z3.ax1x.com/2021/11/08/IGD8Ej.png\" alt=\"IGD8Ej.png\"></a></p>\n<p>条件表达式结果为 true 则执行循环体 否则 退出循环</p>\n<p>while 循环中应该也有计数器初始化变量，也该有操作表达式完成计数器的更新防止死循环</p>\n<h4 id=\"do-while-循环\"><a class=\"markdownIt-Anchor\" href=\"#do-while-循环\">#</a> do while 循环</h4>\n<p>语法结构</p>\n<blockquote>\n<p>do {循环体} while (条件表达式)</p>\n</blockquote>\n<p>执行思路不同的地方跟 while 在于 do whild 先执行一遍循环体再判断条件<br>\n do while 语句至少执行一次循环体</p>\n<p><a href=\"https://imgtu.com/i/IGDwKU\"><img src=\"https://z3.ax1x.com/2021/11/08/IGDwKU.png\" alt=\"IGDwKU.png\"></a></p>\n<h4 id=\"循环小结\"><a class=\"markdownIt-Anchor\" href=\"#循环小结\">#</a> 循环小结</h4>\n<p><a href=\"https://imgtu.com/i/IGtwRg\"><img src=\"https://z3.ax1x.com/2021/11/08/IGtwRg.png\" alt=\"IGtwRg.png\"></a></p>\n<h3 id=\"continue关键字\"><a class=\"markdownIt-Anchor\" href=\"#continue关键字\">#</a> continue 关键字</h3>\n<p>用于立即跳出本次循环，继续下一次循环.</p>\n<h3 id=\"break关键字\"><a class=\"markdownIt-Anchor\" href=\"#break关键字\">#</a> break 关键字</h3>\n<p>break 退出整个循环，使循环立马结束</p>\n<h3 id=\"命名规范\"><a class=\"markdownIt-Anchor\" href=\"#命名规范\">#</a> 命名规范</h3>\n<h4 id=\"标志符命名规范\"><a class=\"markdownIt-Anchor\" href=\"#标志符命名规范\">#</a> 标志符命名规范</h4>\n<p><a href=\"https://imgtu.com/i/IGtrss\"><img src=\"https://z3.ax1x.com/2021/11/08/IGtrss.png\" alt=\"IGtrss.png\"></a></p>\n<h4 id=\"操作符规范\"><a class=\"markdownIt-Anchor\" href=\"#操作符规范\">#</a> 操作符规范</h4>\n<p>操作符左右两侧各保留一个空格<br>\n单行注释在 // 后面敲个空格</p>\n<h4 id=\"循环作业\"><a class=\"markdownIt-Anchor\" href=\"#循环作业\">#</a> 循环作业</h4>\n<p><a href=\"https://imgtu.com/i/IGtgoV\"><img src=\"https://z3.ax1x.com/2021/11/08/IGtgoV.png\" alt=\"IGtgoV.png\"></a></p>\n<h3 id=\"javascript数组\"><a class=\"markdownIt-Anchor\" href=\"#javascript数组\">#</a> javascript 数组</h3>\n<h4 id=\"数组的概念\"><a class=\"markdownIt-Anchor\" href=\"#数组的概念\">#</a> 数组的概念</h4>\n<p>数组是一组数据的集合，其中每个数据都被称为元素，在数组中可以存放任何类型的元素，数组是可以将数据存储在单个变量下的优雅方式</p>\n<h4 id=\"创建数组\"><a class=\"markdownIt-Anchor\" href=\"#创建数组\">#</a> 创建数组</h4>\n<p>1.new 创建数组<br>\n 2. 利用数组关键字创造数组</p>\n<h5 id=\"利用new创建数组\"><a class=\"markdownIt-Anchor\" href=\"#利用new创建数组\">#</a> 利用 new 创建数组</h5>\n<p><a href=\"https://imgtu.com/i/IGrSaj\"><img src=\"https://z3.ax1x.com/2021/11/08/IGrSaj.png\" alt=\"IGrSaj.png\"></a><br>\n 注意 Array 的 A 要大写</p>\n<h5 id=\"利用数组字面量创建数组\"><a class=\"markdownIt-Anchor\" href=\"#利用数组字面量创建数组\">#</a> 利用数组字面量创建数组</h5>\n<p>[] 是数组的的字面量</p>\n<blockquote>\n<p>var arr = [];<br>\n 这样便创建了一个空的数组<br>\n var arr = [1,1,2,3,‘pink’,true]</p>\n</blockquote>\n<p>在数组内可以放任何的数据类型，但是每一个数据之间必须用逗号分隔.</p>\n<h4 id=\"获取数组元素\"><a class=\"markdownIt-Anchor\" href=\"#获取数组元素\">#</a> 获取数组元素</h4>\n<h5 id=\"数组的索引\"><a class=\"markdownIt-Anchor\" href=\"#数组的索引\">#</a> 数组的索引</h5>\n<p>索引又被称为下标：用来访问数组元素的序号 (数组下标从 0 开始)<br>\n<a href=\"https://imgtu.com/i/IGNAfS\"><img src=\"https://z3.ax1x.com/2021/11/08/IGNAfS.png\" alt=\"IGNAfS.png\"></a></p>\n<blockquote>\n<pre><code> 数组名[索引号]\n console.log(arr[1])\n</code></pre>\n</blockquote>\n<p><strong>索引号从 0 开始</strong><br>\n如果没有该数组元素 就会输出 undefined</p>\n<h4 id=\"遍历数组\"><a class=\"markdownIt-Anchor\" href=\"#遍历数组\">#</a> 遍历数组</h4>\n<p>遍历：就是把数组中的每个元素从头到尾访问一次</p>\n<blockquote>\n<pre><code>eg:var arr = [1, 2, 3, 4, 5, 'pink'];\n   for (i = 0; i &lt; 6; i++) {\n   console.log(arr[i]);\n   }\n</code></pre>\n</blockquote>\n<p>输出的时候计数器当索引号来用</p>\n<h5 id=\"数组长度\"><a class=\"markdownIt-Anchor\" href=\"#数组长度\">#</a> 数组长度</h5>\n<p>数组名.length  可以访问数组中的数组元素的数量</p>\n<blockquote>\n<pre><code>console.log(arr.length);\n</code></pre>\n</blockquote>\n<p>同时 数组名.length 可以动态检测数组元素的个数</p>\n<h4 id=\"数组中新增元素\"><a class=\"markdownIt-Anchor\" href=\"#数组中新增元素\">#</a> 数组中新增元素</h4>\n<h5 id=\"通过修改length长度新增数组长度\"><a class=\"markdownIt-Anchor\" href=\"#通过修改length长度新增数组长度\">#</a> 通过修改 length 长度新增数组长度</h5>\n<blockquote>\n<pre><code>   var arr = ['pink', 'red', 'blue'];\n   arr.length = 5\n</code></pre>\n</blockquote>\n<p>如果扩容的数组元素中没有给值，其中的元素是 undefined</p>\n<h5 id=\"修改索引号-增加数组元素\"><a class=\"markdownIt-Anchor\" href=\"#修改索引号-增加数组元素\">#</a> 修改索引号 增加数组元素</h5>\n<blockquote>\n<pre><code>var arr = ['pink', 'red', 'blue'];\narr[3] = 'pink'\n</code></pre>\n</blockquote>\n<p>如果这个索引号原先已经被占用，就会替换原来的数组元素<br>\n<strong>不要直接给数组名赋值，否则会覆盖掉以前的数据，导致数据一个都没有了</strong></p>\n<h4 id=\"筛选数组的方法\"><a class=\"markdownIt-Anchor\" href=\"#筛选数组的方法\">#</a> 筛选数组的方法</h4>\n<h5 id=\"方法1\"><a class=\"markdownIt-Anchor\" href=\"#方法1\">#</a> 方法 1</h5>\n<blockquote>\n<pre><code>   var arr = [1, 2, 3, 4, 5, 6, 8, 11, 45, 13, 48, 46, 13];\n   var newArr = [];\n   var j = 0;\n   for (var i = 0; i &lt; arr.length; i++) {\n       if (arr[i] &gt; 10) {\n           newArr[j] = arr[i]\n           j++\n       }\n   }\n   console.log(newArr);\n</code></pre>\n</blockquote>\n<p>这里通过声明一个变量 j 来使新数组从 0 开始</p>\n<h5 id=\"方法2\"><a class=\"markdownIt-Anchor\" href=\"#方法2\">#</a> 方法 2</h5>\n<blockquote>\n<pre><code>   var arr = [1, 2, 3, 4, 5, 6, 8, 11, 45, 13, 48, 46, 13];\n   var newArr = [];\n   for (var i = 0; i &lt; arr.length; i++) {\n       if (arr[i] &gt; 10) {\n           newArr[newArr.length] = arr[i]\n       }\n   }\n   console.log(newArr);\n</code></pre>\n</blockquote>\n<p>将 j 替换成 newArr, 最开始当新数组里面没有元素时是 0，当有元素时 newArr.length 开始不断增多</p>\n<h4 id=\"翻转数组\"><a class=\"markdownIt-Anchor\" href=\"#翻转数组\">#</a> 翻转数组</h4>\n<blockquote>\n<pre><code>   var arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n   var newArr = [];\n   for (i = arr.length - 1; i &gt;= 0; i--) {\n       newArr[newArr.length] = arr[i]\n   }\n   console.log(newArr);\n</code></pre>\n</blockquote>\n<p>这里需要注意的是：元素的索引号的最大值等于数组长度 - 1</p>\n<h4 id=\"冒泡排序\"><a class=\"markdownIt-Anchor\" href=\"#冒泡排序\">#</a> 冒泡排序</h4>\n<p>是一种算法，把一系列数组按照一定的顺序进行排列显示 (从小到大或者从大到小)<br>\n 算法：观察执行过程，从而找到其中的规律，并且找到代码</p>\n<blockquote>\n<pre><code>   var arr = [1, 5, 4, 3, 2];\n   for (var i = 0; i &lt; arr.length - 1; i++) { // 外层循环次数\n       for (var j = 0; j &lt; arr.length - i - 1; j++) { // 内层循环次数\n           if (arr[j] &gt; arr[j + 1]) {\n               var temp = arr[j]\n               arr[j] = arr[j + 1]\n               arr[j + 1] = temp\n           }\n       }\n   }\n</code></pre>\n</blockquote>\n<h3 id=\"javascript函数\"><a class=\"markdownIt-Anchor\" href=\"#javascript函数\">#</a> javascript 函数</h3>\n<h4 id=\"函数的概念\"><a class=\"markdownIt-Anchor\" href=\"#函数的概念\">#</a> 函数的概念</h4>\n<p>js 中经常会定义相同的代码，这些代码可能会大量使用<br>\n函数：就是封装了一段可被重复调用执行的代码块，通过调用代码块可以实现大量代码的重复使用.</p>\n<h4 id=\"函数的使用\"><a class=\"markdownIt-Anchor\" href=\"#函数的使用\">#</a> 函数的使用</h4>\n<p>步骤：1. 声明函数 2. 调用函数</p>\n<h5 id=\"声明函数\"><a class=\"markdownIt-Anchor\" href=\"#声明函数\">#</a> 声明函数</h5>\n<blockquote>\n<pre><code>function 函数名() {函数体}\n</code></pre>\n</blockquote>\n<p>注意事项：1.function 声明函数的关键字 全部小写 2. 函数是做某件事情，函数名一般是动词 3. 函数不调用自己不会执行</p>\n<h5 id=\"调用函数\"><a class=\"markdownIt-Anchor\" href=\"#调用函数\">#</a> 调用函数</h5>\n<blockquote>\n<pre><code>函数名();\n</code></pre>\n</blockquote>\n<p>调用函数时，千万不要忘了加小括号.</p>\n<h5 id=\"函数的参数\"><a class=\"markdownIt-Anchor\" href=\"#函数的参数\">#</a> 函数的参数</h5>\n<p>我们可以利用函数的参数实现函数重复不同的代码<br>\n参数: 1. 形参 2. 实参<br>\n<a href=\"https://imgtu.com/i/IGrNod\"><img src=\"https://z3.ax1x.com/2021/11/08/IGrNod.png\" alt=\"IGrNod.png\"></a></p>\n<blockquote>\n<pre><code>function (形参1,形参2,....) {  在声明函数的小括号里面是形参\n }\n函数名(实参1,实参2...)     在函数调用的小括号里面是实参\n</code></pre>\n</blockquote>\n<p>形参类似于一个变量来接受实参的<br>\n函数的参数可以有也可以没有，个数不限<br>\n多个参数之间用逗号隔开</p>\n<h6 id=\"函数形参实参个数匹配\"><a class=\"markdownIt-Anchor\" href=\"#函数形参实参个数匹配\">#</a> 函数形参实参个数匹配</h6>\n<p>1. 如果实参的个数和形参的个数一直，则正常输出结果<br>\n 2. 如果实参的个数多于形参的个数，会取到形参的个数，实参中多的自动忽略<br>\n 3. 如果实参的个数小于形参的个数，num2 可以看做一个变量但是没有接收值，所以最终的结果就是 undefined<br>\n<a href=\"https://imgtu.com/i/IGN3fU\"><img src=\"https://z3.ax1x.com/2021/11/08/IGN3fU.png\" alt=\"IGN3fU.png\"></a></p>\n<h6 id=\"函数参数小结\"><a class=\"markdownIt-Anchor\" href=\"#函数参数小结\">#</a> 函数参数小结</h6>\n<p><a href=\"https://imgtu.com/i/IGrBSP\"><img src=\"https://z3.ax1x.com/2021/11/08/IGrBSP.png\" alt=\"IGrBSP.png\"></a></p>\n<h5 id=\"函数的返回值\"><a class=\"markdownIt-Anchor\" href=\"#函数的返回值\">#</a> 函数的返回值</h5>\n<h6 id=\"return语句\"><a class=\"markdownIt-Anchor\" href=\"#return语句\">#</a> return 语句</h6>\n<p>函数只是实现某种功能，最终的结果需要返回给函数的调用者函数名 () 通过 return 实现<br>\n只要函数遇到 return 就把后面的结果返回给函数的调用者 函数名 ()=return 后面的结果</p>\n<blockquote>\n<pre><code> function 函数名() {\n       return 需要返回的结果;\n }\n 函数名();\n</code></pre>\n</blockquote>\n<p>代码验证</p>\n<blockquote>\n<pre><code>   function getSum(num1, num2) {\n       return num1 + num2;\n   }\n   console.log(getSum(1, 3));\n</code></pre>\n</blockquote>\n<p>这样输出的结果就是 4 (来自于 1+3)</p>\n<p>return 终止函数：函数遇到 return 就终止函数<br>\n return 的返回值:return 只能返回一个值，如果有多个值，return 只返回最后一个值<br>\n如果想要返回多个数值时，我们可以将数值放在一个数组里面，一个数组代表一个结果<br>\n函数如果 return 则返回的是 return 后面的值，如果函数没有 return 就返回 undefined<br>\nbreak,continue,return 的区别:<br>\n<a href=\"https://imgtu.com/i/IGrDQf\"><img src=\"https://z3.ax1x.com/2021/11/08/IGrDQf.png\" alt=\"IGrDQf.png\"></a></p>\n<h4 id=\"函数的理解\"><a class=\"markdownIt-Anchor\" href=\"#函数的理解\">#</a> 函数的理解</h4>\n<p><a href=\"https://imgtu.com/i/IGNJl4\"><img src=\"https://z3.ax1x.com/2021/11/08/IGNJl4.png\" alt=\"IGNJl4.png\"></a></p>\n<h4 id=\"函数的作业\"><a class=\"markdownIt-Anchor\" href=\"#函数的作业\">#</a> 函数的作业</h4>\n<p><a href=\"https://imgtu.com/i/IGrWYn\"><img src=\"https://z3.ax1x.com/2021/11/08/IGrWYn.png\" alt=\"IGrWYn.png\"></a></p>\n<h4 id=\"arguments的作用\"><a class=\"markdownIt-Anchor\" href=\"#arguments的作用\">#</a> arguments 的作用</h4>\n<p>当我们不确定有多少个参数传递时，可以用 argument 在获取，他实际上是当前函数的一个内置对象，arguements 存储了传递过来的所有实参</p>\n<p>arguments 实际上是伪数组.<br>\n 伪数组:<br>\n1. 具有数组的 length 属性.<br>\n2. 按照索引的方式进行存储.<br>\n3. 没有真正数组的一些方法:pop () 等</p>\n<h4 id=\"函数可以调用另外一个函数\"><a class=\"markdownIt-Anchor\" href=\"#函数可以调用另外一个函数\">#</a> 函数可以调用另外一个函数</h4>\n<h4 id=\"函数的两种声明方式\"><a class=\"markdownIt-Anchor\" href=\"#函数的两种声明方式\">#</a> 函数的两种声明方式</h4>\n<p>1. 利用函数关键字自定义函数</p>\n<blockquote>\n<pre><code>function fn() {\n}\nfn()\n</code></pre>\n</blockquote>\n<p>也被称为命名函数</p>\n<p>2. 函数表达式</p>\n<blockquote>\n<pre><code>var 变量名 = function() {}\n</code></pre>\n</blockquote>\n<p>又被叫做匿名函数<br>\n这是变量名不是函数名<br>\n函数表达式声明方式跟声明变量差不多，只不过变量里面存的是值，而函数表达式里面存的是函数。</p>\n<h3 id=\"作用域\"><a class=\"markdownIt-Anchor\" href=\"#作用域\">#</a> 作用域</h3>\n<h4 id=\"作用域概述\"><a class=\"markdownIt-Anchor\" href=\"#作用域概述\">#</a> 作用域概述</h4>\n<p>1.js 的作用域就是代码名字在某个范围内起作用和效果 目的是为了提高程序的可靠性，重要的是减少命名冲突<br>\n 2.js 的作用域 (es6) 之前：全局作用域 和 局部作用域<br>\n 3. 全局作用域：整个 script 标签 或者是一个单独的 js 文件<br>\n 4. 局部作用域：在函数内部就是局部作用域，这个代码的名字只在函数内部起作用和效果 又叫做函数作用域</p>\n<h4 id=\"变量的作用域\"><a class=\"markdownIt-Anchor\" href=\"#变量的作用域\">#</a> 变量的作用域</h4>\n<p>根据作用域的不同我们变量分为全局变量和局部变量<br>\n 1. 全局变量：在全局作用域下的变量 在全局下都可以使用 (当然包括函数内部)<br>\n 2. 局部变量：在局部作用域下的变量 在函数内部的变量就是局部变量 只能在函数内部使用<br>\n 3. 特殊情况：如果在函数内部没有声明直接赋值的变量也称为全局变量，函数的形参也可以看成局部变量</p>\n<p>从执行效率来看全局变量和局部变量<br>\n 1. 全局变量只有浏览器关闭的时候才会销毁，比较占内存资源<br>\n 2. 局部变量 当我们程序执行完毕就会销毁，比较节约内存支援<br>\n<strong>现阶段 js 没有块级作用域</strong></p>\n<h4 id=\"作用域链\"><a class=\"markdownIt-Anchor\" href=\"#作用域链\">#</a> 作用域链</h4>\n<p>内部函数访问外部函数的电量，采取的是链式查找的方式来决定取哪种值，这种结构我们称为作用域链<br>\n内部函数是可以访问外部函数的变量的</p>\n<h3 id=\"javascript预解析\"><a class=\"markdownIt-Anchor\" href=\"#javascript预解析\">#</a> javascript 预解析</h3>\n<p>1.js 解析器在运行 js 代码的时候分为两部分：先进行预解析，再进行代码执行<br>\n (2). 预解析:js 引擎会把 js 里面所有的 var 还有 function 提升到当前作用域的最前面<br>\n (3). 代码执行：按照代码书写的顺序从上往下执行.<br>\n2. 预解析分为变量预解析 (变量提升) 和函数预解析 (函数执行)<br>\n(1). 变量提升：就是把所有的变量声明提升到当前的作用域最前面 不提升赋值</p>\n<blockquote>\n<pre><code>console.log(num);\nvar num= 10;\n在预解析的时候执行顺序是这样的\nvar num;\nconsole.log(num);\nnum=10\n</code></pre>\n</blockquote>\n<p>(2). 函数声明：就是先把函数声明提升到当前作用域的最前面，不执行函数.</p>\n<h3 id=\"js对象\"><a class=\"markdownIt-Anchor\" href=\"#js对象\">#</a> js 对象</h3>\n<h4 id=\"对象概念\"><a class=\"markdownIt-Anchor\" href=\"#对象概念\">#</a> 对象概念</h4>\n<p>对象是一个具体的事物 (不是泛指)<br>\n 比如 明星不是对象 但刘德华是对象<br>\n<a href=\"https://imgtu.com/i/IGNspD\"><img src=\"https://z3.ax1x.com/2021/11/08/IGNspD.png\" alt=\"IGNspD.png\"></a></p>\n<h4 id=\"对象的使用方向\"><a class=\"markdownIt-Anchor\" href=\"#对象的使用方向\">#</a> 对象的使用方向</h4>\n<p>保存一个值可以使用变量，保存多个值可以使用数组，但如果保存一个人的完整信就需要用到对象了</p>\n<h4 id=\"创建对象的三种方式\"><a class=\"markdownIt-Anchor\" href=\"#创建对象的三种方式\">#</a> 创建对象的三种方式</h4>\n<p>1. 利用字面量创建对象<br>\n 2. 利用 new Object 创建对象<br>\n 3. 利用构造函数创建对象</p>\n<h4 id=\"对象字面量\"><a class=\"markdownIt-Anchor\" href=\"#对象字面量\">#</a> 对象字面量</h4>\n<p>{} 是对象的字面量<br>\n 1. 里面的属性或者方法我们采取键值对的形式 键 属性名：值 属性值<br>\n 2. 多个属性或者方法中间用逗号隔开，函数后面加；而不加逗号<br>\n 3. 方法冒号后面跟的是一个匿名函数</p>\n<h4 id=\"使用对象\"><a class=\"markdownIt-Anchor\" href=\"#使用对象\">#</a> 使用对象</h4>\n<p>调用对象的属性 我们采取 对象名。属性名</p>\n<blockquote>\n<p>console.log(obj.uname)</p>\n</blockquote>\n<p>其中这个。我们可以理解为的 比如说对象的属性<br>\n调用属性还有一种方法 对象名 [‘属性名’]</p>\n<blockquote>\n<p>console.log(abj[‘age’])</p>\n</blockquote>\n<p>需要注意的是 后面这种方法需要’' 而前面一种方法不需要<br>\n调用对象中的函数时，千万不要忘记添加小括号<br>\n<a href=\"https://imgtu.com/i/IGN66H\"><img src=\"https://z3.ax1x.com/2021/11/08/IGN66H.png\" alt=\"IGN66H.png\"></a></p>\n<h4 id=\"变量-属性-函数-方法的区别\"><a class=\"markdownIt-Anchor\" href=\"#变量-属性-函数-方法的区别\">#</a> 变量 属性 函数 方法的区别</h4>\n<p>相同点：都是用来存储数据的<br>\n不同点：1. 变量 单独声明并赋值 使用的时候直接写变量名 单独存在<br>\n 2. 属性 在对象里面的不需要声明的 使用的时候必须是 对象。属性</p>\n<p>函数和方法<br>\n相同点：都是实现某种功能 做某件事<br>\n不同点：函数时单独声明 并且调用的 是单独存在的<br>\n方法 在对象里面</p>\n<h4 id=\"利用new-object来创建对象\"><a class=\"markdownIt-Anchor\" href=\"#利用new-object来创建对象\">#</a> 利用 new Object 来创建对象</h4>\n<blockquote>\n<pre><code>var obj = new Object();   创建了一个空的对象\nobj.uname = '张三丰';\n</code></pre>\n</blockquote>\n<p>利用 等号 = 赋值的方法 添加对象的属性和方法<br>\n每个属性和方法之间用分号结束</p>\n<h4 id=\"利用构造函数创建对象\"><a class=\"markdownIt-Anchor\" href=\"#利用构造函数创建对象\">#</a> 利用构造函数创建对象</h4>\n<p>构造函数 就是把我们对象里面一些相同的属性和方法抽象出来封装到函数里面<br>\n语法格式:</p>\n<blockquote>\n<pre><code>function 构造函数名() {\n    this.属性 = 值;\n    this.方法 = function() {}\n }\n使用: new 构造函数名();\n</code></pre>\n</blockquote>\n<p>1. 构造函数名的首字母要大写<br>\n 2. 构造函数 不需要 return 就可以返回结果<br>\n 3. 我们调用构造函数必须使用 new<br>\n4. 属性和方法前面必须添加 this<br>\n<a href=\"https://imgtu.com/i/IGroOU\"><img src=\"https://z3.ax1x.com/2021/11/08/IGroOU.png\" alt=\"IGroOU.png\"></a></p>\n<h4 id=\"for-in遍历我们的对象\"><a class=\"markdownIt-Anchor\" href=\"#for-in遍历我们的对象\">#</a> for in 遍历我们的对象</h4>\n<blockquote>\n<pre><code>for (变量 in 对象) {\n  }\n</code></pre>\n</blockquote>\n<h3 id=\"javascript内置对象\"><a class=\"markdownIt-Anchor\" href=\"#javascript内置对象\">#</a> javascript 内置对象</h3>\n<p>1. 自定义对象<br>\n 2. 内置对象<br>\n 3. 浏览器对象 (js 特有)</p>\n<p>内置对象是 js 语言自带的一些对象，这些对象供开发者使用，并提供了一些常用的或者是最基本的属性和方法<br>\n Math Date Array String</p>\n<h4 id=\"查阅文档\"><a class=\"markdownIt-Anchor\" href=\"#查阅文档\">#</a> 查阅文档</h4>\n<blockquote>\n<pre><code>https://developer.mozilla.org/zh-CN\n</code></pre>\n</blockquote>\n<p><a href=\"https://imgtu.com/i/IGNW7t\"><img src=\"https://z3.ax1x.com/2021/11/08/IGNW7t.png\" alt=\"IGNW7t.png\"></a></p>\n<h4 id=\"math对象\"><a class=\"markdownIt-Anchor\" href=\"#math对象\">#</a> Math 对象</h4>\n<p>不是一个构造函数，不用 new 来调用，直接使用即可<br>\n<a href=\"https://imgtu.com/i/IGr7mF\"><img src=\"https://z3.ax1x.com/2021/11/08/IGr7mF.png\" alt=\"IGr7mF.png\"></a></p>\n<p>Math.round 四舍五入中.5 是特殊数字 他往大了去  比如 - 1.5 的结果是 - 1</p>\n<h5 id=\"math随机数法\"><a class=\"markdownIt-Anchor\" href=\"#math随机数法\">#</a> Math 随机数法</h5>\n<blockquote>\n<pre><code>console.log(Math.random());\n</code></pre>\n</blockquote>\n<h4 id=\"date日期数法\"><a class=\"markdownIt-Anchor\" href=\"#date日期数法\">#</a> Date 日期数法</h4>\n<p>是一个构造函数 必须使用 new 来调用创建我们的日期对象</p>\n<blockquote>\n<pre><code>   var day = new Date();\n   console.log(day);\n</code></pre>\n</blockquote>\n<p>使用 date 如果没有参数 返回当前系统的当前时间<br>\n参数常用的写法 数字型 2019,10,01 或者是字符串型’2019-10-01’<br>\n<a href=\"https://imgtu.com/i/IGrbTJ\"><img src=\"https://z3.ax1x.com/2021/11/08/IGrbTJ.png\" alt=\"IGrbTJ.png\"></a></p>\n<h5 id=\"日期格式化date\"><a class=\"markdownIt-Anchor\" href=\"#日期格式化date\">#</a> 日期格式化 Date</h5>\n<p><a href=\"https://imgtu.com/i/IGNo9S\"><img src=\"https://z3.ax1x.com/2021/11/08/IGNo9S.png\" alt=\"IGNo9S.png\"></a><br>\n 返回的月份小一个月 记得月份 +1</p>\n<h5 id=\"获取日期的总的毫秒形式\"><a class=\"markdownIt-Anchor\" href=\"#获取日期的总的毫秒形式\">#</a> 获取日期的总的毫秒形式</h5>\n<p>Date 对象是基于 1970 年 1 月 1 日 (世界标准时间) 起的毫秒数</p>\n<blockquote>\n<pre><code>1.valueOf()    getTime()\n2.var date1= +new Date();\n3.H5新增 console(Date.now());\n</code></pre>\n</blockquote>\n<h4 id=\"数组对象array\"><a class=\"markdownIt-Anchor\" href=\"#数组对象array\">#</a> 数组对象 Array</h4>\n<p>1. 数组字面量创建<br>\n 2. 利用 new Array () 创建</p>\n<p>检测是非为数组<br>\n 1.instanceof Array<br>\n2.Array.isArray (参数)</p>\n<h5 id=\"添加删除数组元素的方法\"><a class=\"markdownIt-Anchor\" href=\"#添加删除数组元素的方法\">#</a> 添加删除数组元素的方法</h5>\n<p><a href=\"https://imgtu.com/i/IGN7cQ\"><img src=\"https://z3.ax1x.com/2021/11/08/IGN7cQ.png\" alt=\"IGN7cQ.png\"></a><br>\n 添加:arr.push ();arr.unshift ();<br>\n 删除:arr.pop ();arr.shift;</p>\n<h5 id=\"数组排序\"><a class=\"markdownIt-Anchor\" href=\"#数组排序\">#</a> 数组排序</h5>\n<p><a href=\"https://imgtu.com/i/IGNqns\"><img src=\"https://z3.ax1x.com/2021/11/08/IGNqns.png\" alt=\"IGNqns.png\"></a></p>\n<blockquote>\n<pre><code>       arr1.sort(function (a, b) {\n       return a - b //升序的顺序排列\n       //return b - a 是降序的顺序排列\n        });\n</code></pre>\n</blockquote>\n<h5 id=\"数组索引方法\"><a class=\"markdownIt-Anchor\" href=\"#数组索引方法\">#</a> 数组索引方法</h5>\n<p><a href=\"https://imgtu.com/i/IGNO7q\"><img src=\"https://z3.ax1x.com/2021/11/08/IGNO7q.png\" alt=\"IGNO7q.png\"></a><br>\n 注意，如果有两个重复 只范湖第一个满足条件的索引号。如果里面没有相对元素返回的结果是 - 1;</p>\n<h5 id=\"数组转化成字符串\"><a class=\"markdownIt-Anchor\" href=\"#数组转化成字符串\">#</a> 数组转化成字符串</h5>\n<p><a href=\"https://imgtu.com/i/IGUiu9\"><img src=\"https://z3.ax1x.com/2021/11/08/IGUiu9.png\" alt=\"IGUiu9.png\"></a></p>\n<h4 id=\"字符串对象\"><a class=\"markdownIt-Anchor\" href=\"#字符串对象\">#</a> 字符串对象</h4>\n<p>基本包装类型：就是把简单数据类型 包装称为了 复杂数据类型<br>\n (1) 把简单数据类型包装称为复杂数据类型<br>\n var temp = new String (‘Andy’)<br>\n(2) 把临时变量的值给 str<br>\nstr=temp<br>\n (3) 销毁这个临时变量<br>\n temp = null<br>\n<a href=\"https://imgtu.com/i/IGrOYR\"><img src=\"https://z3.ax1x.com/2021/11/08/IGrOYR.png\" alt=\"IGrOYR.png\"></a></p>\n<h5 id=\"字符串的不可变型\"><a class=\"markdownIt-Anchor\" href=\"#字符串的不可变型\">#</a> 字符串的不可变型</h5>\n<p><a href=\"https://imgtu.com/i/IGU1HI\"><img src=\"https://z3.ax1x.com/2021/11/08/IGU1HI.png\" alt=\"IGU1HI.png\"></a></p>\n<blockquote>\n<pre><code>   var str = '改革吹风吹满地'\n   console.log(str.indexOf('吹',3));\n</code></pre>\n</blockquote>\n<h5 id=\"根据位置返回字符\"><a class=\"markdownIt-Anchor\" href=\"#根据位置返回字符\">#</a> 根据位置返回字符</h5>\n<p><a href=\"https://imgtu.com/i/IGUUgg\"><img src=\"https://z3.ax1x.com/2021/11/08/IGUUgg.png\" alt=\"IGUUgg.png\"></a></p>\n<h5 id=\"字符串操作方法\"><a class=\"markdownIt-Anchor\" href=\"#字符串操作方法\">#</a> 字符串操作方法</h5>\n<p><a href=\"https://imgtu.com/i/IGUavQ\"><img src=\"https://z3.ax1x.com/2021/11/08/IGUavQ.png\" alt=\"IGUavQ.png\"></a></p>\n<blockquote>\n<pre><code>   var str = '改革春风吹满地'\n   console.log(str.substr(2, 2));  //第一个2是索引号的2  第二个2是取几个字符\n</code></pre>\n</blockquote>\n<h5 id=\"替换字符串\"><a class=\"markdownIt-Anchor\" href=\"#替换字符串\">#</a> 替换字符串</h5>\n<blockquote>\n<pre><code>replace('被替换的字符','替换为的字符')\n</code></pre>\n</blockquote>\n<p>如果有相同的两个字符 只会替换前面一个字符</p>\n<h5 id=\"把字符串转化成数组\"><a class=\"markdownIt-Anchor\" href=\"#把字符串转化成数组\">#</a> 把字符串转化成数组</h5>\n<p>split (‘分隔符’) 把字符转换成数组<br>\n join (‘分隔符’) 把数组转换成字符串</p>\n<p>split 中的分隔符取决于原字符串中的分隔符是什么</p>\n<h3 id=\"web-apis\"><a class=\"markdownIt-Anchor\" href=\"#web-apis\">#</a> Web APIs</h3>\n<p>浏览器提供的一套操作浏览器功能和页面元素的 API</p>\n<h4 id=\"dom\"><a class=\"markdownIt-Anchor\" href=\"#dom\">#</a> DOM</h4>\n<p><a href=\"https://imgtu.com/i/IGrvSx\"><img src=\"https://z3.ax1x.com/2021/11/08/IGrvSx.png\" alt=\"IGrvSx.png\"></a></p>\n<h4 id=\"获取页面元素\"><a class=\"markdownIt-Anchor\" href=\"#获取页面元素\">#</a> 获取页面元素</h4>\n<h5 id=\"id获取\"><a class=\"markdownIt-Anchor\" href=\"#id获取\">#</a> ID 获取</h5>\n<p>getElementByld()<br>\n console.dir (); 打印我们返回的元素对象 更好地查看里面的属性和方法</p>\n<h5 id=\"根据标签名来获取\"><a class=\"markdownIt-Anchor\" href=\"#根据标签名来获取\">#</a> 根据标签名来获取</h5>\n<p>element.getElementsByTagName (‘标签名’)<br>\n 1. 获取过来元素对象的集合 以伪数组的形式储存<br>\n 2. 如果页面中只有一个元素 返回的还是伪数组的形式<br>\n 3. 如果页面中没有这个元素 返回的是空的伪数组</p>\n<blockquote>\n<pre><code>   var lis = document.getElementsByTagName('ul')\n   var li = lis[0].getElementsByTagName('li')\n</code></pre>\n</blockquote>\n<h5 id=\"根据类型来获取新增html5属性\"><a class=\"markdownIt-Anchor\" href=\"#根据类型来获取新增html5属性\">#</a> 根据类型来获取 (新增 Html5 属性)</h5>\n<p>document.getElementsByClassName (‘类名’)<br>\n document.querySelector (‘选择器’) 根据选择器返回第一个元素对象<br>\n document.querySelectorAll (‘选择器’) 根据选择器返回所有的集合</p>\n<h5 id=\"获取特殊元素\"><a class=\"markdownIt-Anchor\" href=\"#获取特殊元素\">#</a> 获取特殊元素</h5>\n<p>1. 获取 body 元素<br>\n document.body<br>\n2. 获取 html 元素<br>\n document.documentElement</p>\n<h4 id=\"事件基础\"><a class=\"markdownIt-Anchor\" href=\"#事件基础\">#</a> 事件基础</h4>\n<p>js 让我们有能力创建动态页面，而时间是可以被 js 侦测到的行为<br>\n在网页中每个元素都可以产生某些触发 js 的事件</p>\n<p>事件的组成部分<br>\n 1. 事件源：事件被触发的对象<br>\n 2. 事件类型：如何触发 什么事件 比如 鼠标点击 (onclick) 触发  还是鼠标经过触发<br>\n 3. 事件处理程序：通过函数赋值的方式完成</p>\n<h5 id=\"执行事件的步骤\"><a class=\"markdownIt-Anchor\" href=\"#执行事件的步骤\">#</a> 执行事件的步骤</h5>\n<p>1. 获取事件源<br>\n 2. 绑定事件<br>\n 3. 添加事件处理程序 (采取函数赋值的形式)</p>\n<h4 id=\"操作元素\"><a class=\"markdownIt-Anchor\" href=\"#操作元素\">#</a> 操作元素</h4>\n<h5 id=\"改变元素内容\"><a class=\"markdownIt-Anchor\" href=\"#改变元素内容\">#</a> 改变元素内容</h5>\n<p>element.innerText<br>\nelement.innerHTML<br>\n 这两个属性是可读写的 可以获取元素里面的内容<br>\n<a href=\"https://imgtu.com/i/IGUy5V\"><img src=\"https://z3.ax1x.com/2021/11/08/IGUy5V.png\" alt=\"IGUy5V.png\"></a></p>\n<h5 id=\"改变元素属性\"><a class=\"markdownIt-Anchor\" href=\"#改变元素属性\">#</a> 改变元素属性</h5>\n<h5 id=\"表单元素属性设置\"><a class=\"markdownIt-Anchor\" href=\"#表单元素属性设置\">#</a> 表单元素属性设置</h5>\n<p><a href=\"https://imgtu.com/i/IGURv4\"><img src=\"https://z3.ax1x.com/2021/11/08/IGURv4.png\" alt=\"IGURv4.png\"></a></p>\n<h5 id=\"修改样式属性\"><a class=\"markdownIt-Anchor\" href=\"#修改样式属性\">#</a> 修改样式属性</h5>\n<p>element.style 行内样式操作<br>\n element.className 类名样式操作<br>\n<a href=\"https://imgtu.com/i/IGaMGT\"><img src=\"https://z3.ax1x.com/2021/11/08/IGaMGT.png\" alt=\"IGaMGT.png\"></a></p>\n<p>onfocus 获得焦点事件<br>\n onblur 失去焦点事件</p>\n<h5 id=\"操作元素总结\"><a class=\"markdownIt-Anchor\" href=\"#操作元素总结\">#</a> 操作元素总结</h5>\n<p><a href=\"https://imgtu.com/i/IGaNIx\"><img src=\"https://z3.ax1x.com/2021/11/08/IGaNIx.png\" alt=\"IGaNIx.png\"></a></p>\n<h5 id=\"排他思想\"><a class=\"markdownIt-Anchor\" href=\"#排他思想\">#</a> 排他思想</h5>\n<p>先清除样式，再给当前元素设置样式</p>\n<blockquote>\n<pre><code>   var btn = document.getElementsByTagName('button')\n   for (i = 0; i &lt; btn.length; i++) {\n       btn[i].onclick = function () {\n           for (i = 0; i &lt; btn.length; i++) {\n               btn[i].style.backgroundColor = 'white'\n           }\n           this.style.backgroundColor = 'pink'\n       }\n   }\n</code></pre>\n</blockquote>\n<p>鼠标经过 onmouseover<br>\n 鼠标离开 onmouseout</p>\n<h5 id=\"自定义属性值的操作\"><a class=\"markdownIt-Anchor\" href=\"#自定义属性值的操作\">#</a> 自定义属性值的操作</h5>\n<h6 id=\"获取属性值\"><a class=\"markdownIt-Anchor\" href=\"#获取属性值\">#</a> 获取属性值</h6>\n<p><a href=\"https://imgtu.com/i/IGa0zD\"><img src=\"https://z3.ax1x.com/2021/11/08/IGa0zD.png\" alt=\"IGa0zD.png\"></a></p>\n<h6 id=\"设置属性值\"><a class=\"markdownIt-Anchor\" href=\"#设置属性值\">#</a> 设置属性值</h6>\n<p>element. 属性 = ‘值’<br>\nelement.setAttribute (‘属性’,‘值’)</p>\n<p>setAttribute 主要用于设置自定义属性</p>\n<p>removeAttribute 移除属性</p>\n<h6 id=\"h5自定义属性值\"><a class=\"markdownIt-Anchor\" href=\"#h5自定义属性值\">#</a> H5 自定义属性值</h6>\n<p>H5 新规范：自定义属性都用 data- 开头<br>\n H5 新增的获取自定义属性的方法 <a href=\"http://element.dataset.XXX\">element.dataset.XXX</a><br>\ndataset 是一个集合 里面存放了所有以 data 开头的自定义属性<br>\n如果自定义属性里面有多个 - 链接的单词，我们获取的时候采取驼峰命名法</p>\n<p><a href=\"https://imgtu.com/i/IGrz6K\"><img src=\"https://z3.ax1x.com/2021/11/08/IGrz6K.png\" alt=\"IGrz6K.png\"></a></p>\n<h4 id=\"节点操作\"><a class=\"markdownIt-Anchor\" href=\"#节点操作\">#</a> 节点操作</h4>\n<p>为什么要学节点操作<br>\n<a href=\"https://imgtu.com/i/IGaRFP\"><img src=\"https://z3.ax1x.com/2021/11/08/IGaRFP.png\" alt=\"IGaRFP.png\"></a></p>\n<h5 id=\"节点概述\"><a class=\"markdownIt-Anchor\" href=\"#节点概述\">#</a> 节点概述</h5>\n<p><a href=\"https://imgtu.com/i/IGa4SS\"><img src=\"https://z3.ax1x.com/2021/11/08/IGa4SS.png\" alt=\"IGa4SS.png\"></a></p>\n<h5 id=\"节点层级\"><a class=\"markdownIt-Anchor\" href=\"#节点层级\">#</a> 节点层级</h5>\n<p><a href=\"https://imgtu.com/i/IGaIyQ\"><img src=\"https://z3.ax1x.com/2021/11/08/IGaIyQ.png\" alt=\"IGaIyQ.png\"></a></p>\n<h5 id=\"父节点\"><a class=\"markdownIt-Anchor\" href=\"#父节点\">#</a> 父节点</h5>\n<p><a href=\"https://imgtu.com/i/IGaHwn\"><img src=\"https://z3.ax1x.com/2021/11/08/IGaHwn.png\" alt=\"IGaHwn.png\"></a></p>\n<h5 id=\"子节点\"><a class=\"markdownIt-Anchor\" href=\"#子节点\">#</a> 子节点</h5>\n<p><a href=\"https://imgtu.com/i/IGaLF0\"><img src=\"https://z3.ax1x.com/2021/11/08/IGaLF0.png\" alt=\"IGaLF0.png\"></a><br>\n<a href=\"https://imgtu.com/i/IGaboq\"><img src=\"https://z3.ax1x.com/2021/11/08/IGaboq.png\" alt=\"IGaboq.png\"></a><br>\n<a href=\"https://imgtu.com/i/IGdSOJ\"><img src=\"https://z3.ax1x.com/2021/11/08/IGdSOJ.png\" alt=\"IGdSOJ.png\"></a></p>\n<h5 id=\"兄弟节点\"><a class=\"markdownIt-Anchor\" href=\"#兄弟节点\">#</a> 兄弟节点</h5>\n<p><a href=\"https://imgtu.com/i/IGdCwR\"><img src=\"https://z3.ax1x.com/2021/11/08/IGdCwR.png\" alt=\"IGdCwR.png\"></a><br>\n 解决兄弟节点的兼容性问题:<br>\n<a href=\"https://imgtu.com/i/IGdumd\"><img src=\"https://z3.ax1x.com/2021/11/08/IGdumd.png\" alt=\"IGdumd.png\"></a></p>\n<h5 id=\"创建和删除节点\"><a class=\"markdownIt-Anchor\" href=\"#创建和删除节点\">#</a> 创建和删除节点</h5>\n<h6 id=\"创建节点\"><a class=\"markdownIt-Anchor\" href=\"#创建节点\">#</a> 创建节点</h6>\n<p><a href=\"https://imgtu.com/i/IGsC0e\"><img src=\"https://z3.ax1x.com/2021/11/08/IGsC0e.png\" alt=\"IGsC0e.png\"></a></p>\n<h6 id=\"添加节点\"><a class=\"markdownIt-Anchor\" href=\"#添加节点\">#</a> 添加节点</h6>\n<p><a href=\"https://imgtu.com/i/IGdGp8\"><img src=\"https://z3.ax1x.com/2021/11/08/IGdGp8.png\" alt=\"IGdGp8.png\"></a><br>\nnode.appendChild(child)<br>\n node.insertbefore (child, 指定元素);</p>\n<h6 id=\"删除节点\"><a class=\"markdownIt-Anchor\" href=\"#删除节点\">#</a> 删除节点</h6>\n<p>code.removeChild (节点)<br>\neg:ul.removeChild(ul.children[0])</p>\n<h6 id=\"复制节点克隆节点\"><a class=\"markdownIt-Anchor\" href=\"#复制节点克隆节点\">#</a> 复制节点 (克隆节点)</h6>\n<p>node.cloneNode()<br>\n 如果括号为空，则只复制标签 不复制里面的内容<br>\n括号里面为 true 则里面的内容也跟着赋值</p>\n<h6 id=\"三种动态创建元素区别\"><a class=\"markdownIt-Anchor\" href=\"#三种动态创建元素区别\">#</a> 三种动态创建元素区别</h6>\n<p>document.write () 如果页面加载完毕 再执行这个指令 会导致页面全部重绘<br>\n innerHTML<br>\ndocument.createElement(’’)<br>\n 最后两个大致上没有区别 但是如果需要创造很多个元素 最后一个的效率会大大提高，因为最后一个不是拼接字符串 而是在电脑中重新开辟一个新的空间</p>\n<p><a href=\"https://imgtu.com/i/IGdDhV\"><img src=\"https://z3.ax1x.com/2021/11/08/IGdDhV.png\" alt=\"IGdDhV.png\"></a><br>\n 改进方法:innerHTML 不采用拼接字符串的方式，而是采用数组形式拼接，现在数组中拼接字符串，然后将数组引入到 innerHTML 中</p>\n<h4 id=\"dom重点核心\"><a class=\"markdownIt-Anchor\" href=\"#dom重点核心\">#</a> DOM 重点核心</h4>\n<p>(一) 创建<br>\n 1.document.write<br>\n2.innerHTML<br>\n3.createElement<br>\n (二) 增<br>\n 1.appendChild<br>\n2.innerBefore<br>\n (三) 删<br>\n 1.removeChild<br>\n (四) 改<br>\n 1. 修改元素属性:src,href,title<br>\n2. 修改普通元素内容:innerHTML,innerText<br>\n3. 修改表单元素:value,type,disabled<br>\n4. 修改元素样式:style,className<br>\n (五) 查<br>\n 1.DOM 提供的 API 方法:getElementById,getElementsByTagName  (<strong>古老用法不推荐</strong>)<br>\n 2.H5 提供的新方法:querySelector,querySelectorAll 提倡<br>\n 3. 利用节点获取元素：父 (parentNode), 子 (children), 兄 (previousElementSibing,nextElementSibing) 提倡<br>\n (六) 属性操作<br>\n 1.setAttribute: 设置 dom 的属性值<br>\n 2.getAttribute: 得到 dom 的属性值<br>\n 3.removeAttribute: 移除属性<br>\n (七) 事件操作<br>\n onclick: 鼠标点击左键触发<br>\n onmouseover: 鼠标经过触发<br>\n onmouseout: 鼠标离开触发<br>\n onfocus: 获得鼠标焦点触发<br>\n onblur: 失去鼠标焦点触发<br>\n onmousemove: 鼠标移动触发<br>\n onmouseup: 鼠标弹起触发<br>\n onmousedown: 鼠标按下触发</p>\n<h4 id=\"事件高级导读\"><a class=\"markdownIt-Anchor\" href=\"#事件高级导读\">#</a> 事件高级导读</h4>\n<h5 id=\"注册事件\"><a class=\"markdownIt-Anchor\" href=\"#注册事件\">#</a> 注册事件</h5>\n<p>传统方式和方法监听注册方式<br>\n<a href=\"https://imgtu.com/i/IGd6cF\"><img src=\"https://z3.ax1x.com/2021/11/08/IGd6cF.png\" alt=\"IGd6cF.png\"></a></p>\n<blockquote>\n<pre><code>eventTarget.addEventListener(type,listener[,useCapture])\n</code></pre>\n</blockquote>\n<p><a href=\"https://imgtu.com/i/IGsktA\"><img src=\"https://z3.ax1x.com/2021/11/08/IGsktA.png\" alt=\"IGsktA.png\"></a><br>\n 里面的事件类型是字符串 必定加引号 不带 on<br>\n 同一个元素 同一个事件可以添加多个侦听器 (事件处理程序)</p>\n<p>AttachEvent 事件监听方式 (<strong>不提倡仅供了解</strong>)<br>\n<a href=\"https://imgtu.com/i/IGsVpt\"><img src=\"https://z3.ax1x.com/2021/11/08/IGsVpt.png\" alt=\"IGsVpt.png\"></a></p>\n<p>注册事件兼容性解决方法<br>\n<a href=\"https://imgtu.com/i/IGdW7R\"><img src=\"https://z3.ax1x.com/2021/11/08/IGdW7R.png\" alt=\"IGdW7R.png\"></a></p>\n<h5 id=\"删除事件解绑事件\"><a class=\"markdownIt-Anchor\" href=\"#删除事件解绑事件\">#</a> 删除事件 (解绑事件)</h5>\n<p>1. 传统法式:element.onclick = null<br>\n2. 方法监听事件: eventTarget.removeEventListener (type,listener [,useCapture])<br>\n 删除事件兼容性解决方案:<br>\n<a href=\"https://imgtu.com/i/IGd4tx\"><img src=\"https://z3.ax1x.com/2021/11/08/IGd4tx.png\" alt=\"IGd4tx.png\"></a></p>\n<h5 id=\"dom事件流\"><a class=\"markdownIt-Anchor\" href=\"#dom事件流\">#</a> DOM 事件流</h5>\n<p><a href=\"https://imgtu.com/i/IGsunS\"><img src=\"https://z3.ax1x.com/2021/11/08/IGsunS.png\" alt=\"IGsunS.png\"></a></p>\n<p>注意事项<br>\n<a href=\"https://imgtu.com/i/IGsGpq\"><img src=\"https://z3.ax1x.com/2021/11/08/IGsGpq.png\" alt=\"IGsGpq.png\"></a><br>\n 捕获阶段<br>\n<a href=\"https://imgtu.com/i/IGs3hn\"><img src=\"https://z3.ax1x.com/2021/11/08/IGs3hn.png\" alt=\"IGs3hn.png\"></a><br>\n 冒泡阶段<br>\n<a href=\"https://imgtu.com/i/IGs1ts\"><img src=\"https://z3.ax1x.com/2021/11/08/IGs1ts.png\" alt=\"IGs1ts.png\"></a></p>\n<h4 id=\"事件对象\"><a class=\"markdownIt-Anchor\" href=\"#事件对象\">#</a> 事件对象</h4>\n<p><a href=\"https://imgtu.com/i/IGdqnH\"><img src=\"https://z3.ax1x.com/2021/11/08/IGdqnH.png\" alt=\"IGdqnH.png\"></a></p>\n<h5 id=\"事件对象的常见属性和方法\"><a class=\"markdownIt-Anchor\" href=\"#事件对象的常见属性和方法\">#</a> 事件对象的常见属性和方法</h5>\n<p><a href=\"https://imgtu.com/i/IGdLBd\"><img src=\"https://z3.ax1x.com/2021/11/08/IGdLBd.png\" alt=\"IGdLBd.png\"></a><br>\ne.target 返回的是触发事件的对象 而 this 返回的是绑定事件的对象，currentTarget 和 this 一样返回的是绑定事件的对象 ie678 不认识 currentTarget<br>\ne.type: 返回事件类型 例如 click,mouseover</p>\n<p>组织默认事件 让链接不跳转 或者让提交按钮不提交 e.preventDefault ();<br>\n<a href=\"https://imgtu.com/i/IGdx4P\"><img src=\"https://z3.ax1x.com/2021/11/08/IGdx4P.png\" alt=\"IGdx4P.png\"></a></p>\n<p>组织事件冒泡 e.stopPropagation ()<br>\n 兼容性解决方法<br>\n<a href=\"https://imgtu.com/i/IGdvNt\"><img src=\"https://z3.ax1x.com/2021/11/08/IGdvNt.png\" alt=\"IGdvNt.png\"></a></p>\n<h5 id=\"事件委托\"><a class=\"markdownIt-Anchor\" href=\"#事件委托\">#</a> 事件委托</h5>\n<p>原理：给父节点添加侦听器，利用事件冒泡影响每一个子节点</p>\n<h5 id=\"常用的鼠标事件\"><a class=\"markdownIt-Anchor\" href=\"#常用的鼠标事件\">#</a> 常用的鼠标事件</h5>\n<p><a href=\"https://imgtu.com/i/IGw9gS\"><img src=\"https://z3.ax1x.com/2021/11/08/IGw9gS.png\" alt=\"IGw9gS.png\"></a><br>\n 禁止鼠标右键菜单:contextmenu 主要控制应该在何时显示上下文菜单，主要用于程序员取消默认的上下文菜单<br>\n禁止鼠标选中:selectstart</p>\n<blockquote>\n<pre><code>   document.addEventListener('contextmenu', function (e) {\n       e.preventDefault();\n   })\n   document.addEventListener('selectstart', function (e) {\n       e.preventDefault();\n   })\n</code></pre>\n</blockquote>\n<h5 id=\"鼠标事件对象\"><a class=\"markdownIt-Anchor\" href=\"#鼠标事件对象\">#</a> 鼠标事件对象</h5>\n<p>Mouseevent 鼠标事件对象<br>\n keyboard 键盘事件对象<br>\n<a href=\"https://imgtu.com/i/IGwCjg\"><img src=\"https://z3.ax1x.com/2021/11/08/IGwCjg.png\" alt=\"IGwCjg.png\"></a><br>\nclient 以可视区为主 跟屏幕滚动没有关系<br>\n page 相对于文档页面的 X 和 Y 坐标<br>\n screen 鼠标相当于电脑屏幕的 X 和 Y 坐标 (当浏览器缩小或者放大时会变化)<br>\n mousemove 鼠标移动事件</p>\n<h5 id=\"键盘事件对象\"><a class=\"markdownIt-Anchor\" href=\"#键盘事件对象\">#</a> 键盘事件对象</h5>\n<p><a href=\"https://imgtu.com/i/IGwkHs\"><img src=\"https://z3.ax1x.com/2021/11/08/IGwkHs.png\" alt=\"IGwkHs.png\"></a><br>\n 三个事件的执行顺序是 keydown keypress keyup</p>\n<p>KeyCode 返回键盘按键的 ASCII 的值<br>\n keyup 和 keydown 事件不区分字母大小写 a 和 A 得到的就是 65<br>\nkeypress 区分字母大小写</p>\n<h3 id=\"bom浏览器对象模型\"><a class=\"markdownIt-Anchor\" href=\"#bom浏览器对象模型\">#</a> BOM 浏览器对象模型</h3>\n<h4 id=\"bom概述\"><a class=\"markdownIt-Anchor\" href=\"#bom概述\">#</a> BOM 概述</h4>\n<p>BOM: 浏览器对象模型<br>\n<a href=\"https://imgtu.com/i/IJFREt\"><img src=\"https://z3.ax1x.com/2021/11/08/IJFREt.png\" alt=\"IJFREt.png\"></a><br>\nBOM 的构成<br>\n<a href=\"https://imgtu.com/i/IJFf4f\"><img src=\"https://z3.ax1x.com/2021/11/08/IJFf4f.png\" alt=\"IJFf4f.png\"></a></p>\n<h4 id=\"浏览器顶级对象window\"><a class=\"markdownIt-Anchor\" href=\"#浏览器顶级对象window\">#</a> 浏览器顶级对象 window</h4>\n<p><a href=\"https://imgtu.com/i/IJF4C8\"><img src=\"https://z3.ax1x.com/2021/11/08/IJF4C8.png\" alt=\"IJF4C8.png\"></a></p>\n<h5 id=\"窗口加载事件\"><a class=\"markdownIt-Anchor\" href=\"#窗口加载事件\">#</a> 窗口加载事件</h5>\n<p>window.onload 窗口加载事件，当文档内容完全加载完成后会触发该事件 (包括图像 css 脚本等等)<br>\n 注意:<br>\n1. 有了 window.onload 我们就可以将 js 写在任何位置 onload 是等页面文档加载完成后 最后加载的东西<br>\n 2.window,onload 传统注册事件只能写一次，如果有多个，会以最后一个 window.onload 为准<br>\n 3. 如果使用 AddEventListener 则没有限制<br>\n document.addEventListener (‘DOMContentLoaded’,function (){})<br>\n 仅当 DOM 加载完成就开始触发，不包括样式表，图片，flash 等等<br>\n后一个加载更快，如果是图片较多的网站等 会因为图片刷新过快 如果使用第一个方式 有可能无法加载出 js 文件 而使用后一个方式 则在 DOM 加载完成后 就加载 js</p>\n<h5 id=\"调整窗口大小事件\"><a class=\"markdownIt-Anchor\" href=\"#调整窗口大小事件\">#</a> 调整窗口大小事件</h5>\n<p><a href=\"https://imgtu.com/i/IGwEEn\"><img src=\"https://z3.ax1x.com/2021/11/08/IGwEEn.png\" alt=\"IGwEEn.png\"></a></p>\n<h4 id=\"定时器\"><a class=\"markdownIt-Anchor\" href=\"#定时器\">#</a> 定时器</h4>\n<h5 id=\"settimeout定时器\"><a class=\"markdownIt-Anchor\" href=\"#settimeout定时器\">#</a> setTimeout () 定时器</h5>\n<p>window.setTimeout (调用函数，[延迟的毫秒数]);<br>\n 在定时器到期后执行函数<br>\n 1.window 在调用的时候可以省略<br>\n 2. 时间单位是毫秒，可以省略 如果省略默认为 0<br>\n3. 页面中可能有很多的定时器 我们经常给定时器起一个标识符</p>\n<p>callback 回调函数<br>\n<a href=\"https://imgtu.com/i/IJFovQ\"><img src=\"https://z3.ax1x.com/2021/11/08/IJFovQ.png\" alt=\"IJFovQ.png\"></a></p>\n<h6 id=\"停止settimeout定时器\"><a class=\"markdownIt-Anchor\" href=\"#停止settimeout定时器\">#</a> 停止 setTimeout () 定时器</h6>\n<p>window.clearaTimeout (定时器名字)</p>\n<h5 id=\"setinterval定时器\"><a class=\"markdownIt-Anchor\" href=\"#setinterval定时器\">#</a> setInterval () 定时器</h5>\n<p><a href=\"https://imgtu.com/i/IJFLEq\"><img src=\"https://z3.ax1x.com/2021/11/08/IJFLEq.png\" alt=\"IJFLEq.png\"></a></p>\n<p>区别:setTimeout 只调用一次回调函数<br>\n setInterval 会一直调用函数</p>\n<h4 id=\"this指向问题\"><a class=\"markdownIt-Anchor\" href=\"#this指向问题\">#</a> this 指向问题</h4>\n<p>1. 全局作用域或者普通函数中 this 指向全局对象 window (定时器里面的 this 指向 window)<br>\n 2. 方法调用中谁调用 this 指向谁<br>\n 3. 构造函数中 this 可以指向构造函数<br>\n<a href=\"https://imgtu.com/i/oSEMu9\"><img src=\"https://z3.ax1x.com/2021/11/22/oSEMu9.png\" alt=\"oSEMu9.png\"></a><br>\n<a href=\"https://imgtu.com/i/oSEQBR\"><img src=\"https://z3.ax1x.com/2021/11/22/oSEQBR.png\" alt=\"oSEQBR.png\"></a></p>\n<h4 id=\"js的执行队列\"><a class=\"markdownIt-Anchor\" href=\"#js的执行队列\">#</a> js 的执行队列</h4>\n<p>js 是单线程的 同一个时间只能做一件事<br>\n为了解决这个问题，利用多核 CPU 的计算能力，HTML5 允许 js 脚本创建多个线程，于是 js 中出现了同步和异步<br>\n<a href=\"https://imgtu.com/i/IGwugU\"><img src=\"https://z3.ax1x.com/2021/11/08/IGwugU.png\" alt=\"IGwugU.png\"></a></p>\n<h5 id=\"js执行机制\"><a class=\"markdownIt-Anchor\" href=\"#js执行机制\">#</a> js 执行机制</h5>\n<p><a href=\"https://imgtu.com/i/IGw1b9\"><img src=\"https://z3.ax1x.com/2021/11/08/IGw1b9.png\" alt=\"IGw1b9.png\"></a><br>\n<a href=\"https://imgtu.com/i/IGwQu4\"><img src=\"https://z3.ax1x.com/2021/11/08/IGwQu4.png\" alt=\"IGwQu4.png\"></a><br>\n<a href=\"https://imgtu.com/i/IJkczF\"><img src=\"https://z3.ax1x.com/2021/11/08/IJkczF.png\" alt=\"IJkczF.png\"></a><br>\n<a href=\"https://imgtu.com/i/IJFz2F\"><img src=\"https://z3.ax1x.com/2021/11/08/IJFz2F.png\" alt=\"IJFz2F.png\"></a><br>\n 事件循环：主线程不断的城府获得任务 执行任务 再获取任务 执行任务</p>\n<h4 id=\"location对象\"><a class=\"markdownIt-Anchor\" href=\"#location对象\">#</a> location 对象</h4>\n<p><a href=\"https://imgtu.com/i/IJAmF0\"><img src=\"https://z3.ax1x.com/2021/11/08/IJAmF0.png\" alt=\"IJAmF0.png\"></a><br>\n<a href=\"https://imgtu.com/i/IJAnYV\"><img src=\"https://z3.ax1x.com/2021/11/08/IJAnYV.png\" alt=\"IJAnYV.png\"></a></p>\n<h5 id=\"location对象方法\"><a class=\"markdownIt-Anchor\" href=\"#location对象方法\">#</a> location 对象方法</h5>\n<p><a href=\"https://imgtu.com/i/IGwJ4x\"><img src=\"https://z3.ax1x.com/2021/11/08/IGwJ4x.png\" alt=\"IGwJ4x.png\"></a><br>\nassign 能够记录历史 可以实现后退功能</p>\n<h4 id=\"navigator对象\"><a class=\"markdownIt-Anchor\" href=\"#navigator对象\">#</a> navigator 对象</h4>\n<p>包含浏览器的信息 有很多属性 我们最常用的属性是 userAgent 该属性可以返回由客户机发送服务器的 user-agent 头部的值</p>\n<p><a href=\"https://imgtu.com/i/IJAuWT\"><img src=\"https://z3.ax1x.com/2021/11/08/IJAuWT.png\" alt=\"IJAuWT.png\"></a></p>\n<h4 id=\"history对象\"><a class=\"markdownIt-Anchor\" href=\"#history对象\">#</a> history 对象</h4>\n<p><a href=\"https://imgtu.com/i/IJAQlF\"><img src=\"https://z3.ax1x.com/2021/11/08/IJAQlF.png\" alt=\"IJAQlF.png\"></a></p>\n<blockquote>\n<pre><code>btn.addEventListener('click',function(){\nhistory.forward();  \n})\nback() 和 go() 同理\n其中go(-1) 表示后退一页 go(-1)表示后退两页\n</code></pre>\n</blockquote>\n<h3 id=\"pc端网页特效\"><a class=\"markdownIt-Anchor\" href=\"#pc端网页特效\">#</a> PC 端网页特效</h3>\n<h4 id=\"元素偏移量offset系列\"><a class=\"markdownIt-Anchor\" href=\"#元素偏移量offset系列\">#</a> 元素偏移量 offset 系列</h4>\n<p>动态获取元素位置和大小</p>\n<ul>\n<li>获取元素距离带有定位父元素的位置</li>\n<li>获得元素自身的大小 (包含 padding 和 border)</li>\n<li>返回的数值不带单位</li>\n</ul>\n<p><a href=\"https://imgtu.com/i/oih8C6\"><img src=\"https://z3.ax1x.com/2021/11/24/oih8C6.png\" alt=\"oih8C6.png\"></a><br>\noffsetParent  返回的是带有定位的父元素 (没有则返回 body)<br>\n parentNode 返回的是最近一级的父元素 不管父元素有没有定位</p>\n<h5 id=\"offset和style的区别\"><a class=\"markdownIt-Anchor\" href=\"#offset和style的区别\">#</a> offset 和 style 的区别</h5>\n<ul>\n<li>offsetWidth 与 style.width<br>\n<a href=\"https://imgtu.com/i/oiTCtA\"><img src=\"https://z3.ax1x.com/2021/11/24/oiTCtA.png\" alt=\"oiTCtA.png\"></a></li>\n</ul>\n<h4 id=\"元素可视区client系列\"><a class=\"markdownIt-Anchor\" href=\"#元素可视区client系列\">#</a> 元素可视区 client 系列</h4>\n<p>使用 client 系列的相关属性获取元素可视区的相关信息<br>\n通过 client 系列的相关属性可以动态得到该元素的边框大小，元素大小等<br>\n<a href=\"https://imgtu.com/i/oib09s\"><img src=\"https://z3.ax1x.com/2021/11/24/oib09s.png\" alt=\"oib09s.png\"></a></p>\n<h4 id=\"淘宝源码分析\"><a class=\"markdownIt-Anchor\" href=\"#淘宝源码分析\">#</a> 淘宝源码分析</h4>\n<h5 id=\"立即执行函数\"><a class=\"markdownIt-Anchor\" href=\"#立即执行函数\">#</a> 立即执行函数</h5>\n<p>不需要调用 立即执行</p>\n<blockquote>\n<pre><code>(function XXX() { })()  第二个小括号可以看成调用函数 也可以传递参数\n(function XXX(){}()) 第二个小括号可以看成调用函数 也可以传递参数\n</code></pre>\n</blockquote>\n<ul>\n<li>XXX 为函数名 可以省略</li>\n<li><strong>多个立即执行函数之间必须使用分号隔开</strong></li>\n<li>好处：独立创建了一个作用域 里面所有的变量都是局部变量 避免了命名冲突的问题</li>\n</ul>\n<h4 id=\"元素滚动scroll系列\"><a class=\"markdownIt-Anchor\" href=\"#元素滚动scroll系列\">#</a> 元素滚动 scroll 系列</h4>\n<p>得到元素的大小 滚动距离 与页面中的滚动条有关<br>\n<a href=\"https://imgtu.com/i/oAwKnP\"><img src=\"https://z3.ax1x.com/2021/11/25/oAwKnP.png\" alt=\"oAwKnP.png\"></a><br>\n<strong> 不包含边框 包含 padding 值</strong><br>\n对于超出父元素的汉字 会按照所有汉字叠加的高度计算 (真正的内容实际大小)<br>\n 与 client 不同的是 client 并不会计算超出的大小 而只是原有父元素的大小<br>\n<a href=\"https://imgtu.com/i/oA0u8J\"><img src=\"https://z3.ax1x.com/2021/11/25/oA0u8J.png\" alt=\"oA0u8J.png\"></a></p>\n<h5 id=\"scroll事件\"><a class=\"markdownIt-Anchor\" href=\"#scroll事件\">#</a> scroll 事件</h5>\n<p>当滚动条发生变化时会触发的事件</p>\n<blockquote>\n<pre><code>XXX.document.addEventListener('scroll',function(){})\n</code></pre>\n</blockquote>\n<h4 id=\"动画函数封装\"><a class=\"markdownIt-Anchor\" href=\"#动画函数封装\">#</a> 动画函数封装</h4>\n<p>通过定时器 setInterval () 不断移动盒子的位置<br>\n 1. 获取当前位置<br>\n 2. 给当前位置加一个移动距离<br>\n 3. 利用定时器不断重复这个操作<br>\n 4. 结束定时器<br>\n<strong> 5. 元素需要添加定位才能使用 element.style.left</strong></p>\n<h5 id=\"动画函数简单封装\"><a class=\"markdownIt-Anchor\" href=\"#动画函数简单封装\">#</a> 动画函数简单封装</h5>\n<blockquote>\n<pre><code>function animate(obj, target) {\n    clearInterval(obj.timer)\n    obj.timer = setInterval(function () {\n        if (obj.offsetLeft &gt;= target) {\n            clearInterval(obj.timer)\n        } else\n            obj.style.left = obj.offsetLeft + 2 + 'px';\n    }, 30)\n}\n</code></pre>\n</blockquote>\n<h5 id=\"缓动动画\"><a class=\"markdownIt-Anchor\" href=\"#缓动动画\">#</a> 缓动动画</h5>\n<ol>\n<li>让盒子每次移动的距离慢慢变小 速度就会慢慢慢下来</li>\n<li>核心算法：(目标值 - 现在的位置)/10</li>\n<li>盒子等于目标位置就停止计时器</li>\n</ol>\n",
            "tags": [
                "Javascript"
            ]
        },
        {
            "id": "https://github.com/YogMas/YogMas.github.io/2021/11/06/ji-suan-ji-zu-cheng-yuan-li/",
            "url": "https://github.com/YogMas/YogMas.github.io/2021/11/06/ji-suan-ji-zu-cheng-yuan-li/",
            "title": "计算机组成原理",
            "date_published": "2021-11-05T16:00:00.000Z",
            "content_html": "<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E4%B8%8E%E7%BB%93%E6%9E%84-01.jpg\" alt=\"计算机系统与结构-01\"></p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E4%B8%8E%E7%BB%93%E6%9E%84-02.jpg\" alt=\"计算机系统与结构-02\"></p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E4%B8%8E%E7%BB%93%E6%9E%84-03.jpg\" alt=\"计算机系统与结构-03\"></p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E4%B8%8E%E7%BB%93%E6%9E%84-04.jpg\" alt=\"计算机系统与结构-04\"></p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E4%B8%8E%E7%BB%93%E6%9E%84-05.jpg\" alt=\"计算机系统与结构-05\"></p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E4%B8%8E%E7%BB%93%E6%9E%84-06.jpg\" alt=\"计算机系统与结构-06\"></p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E4%B8%8E%E7%BB%93%E6%9E%84-07.jpg\" alt=\"计算机系统与结构-07\"></p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E4%B8%8E%E7%BB%93%E6%9E%84-08.jpg\" alt=\"计算机系统与结构-08\"></p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E4%B8%8E%E7%BB%93%E6%9E%84-09.jpg\" alt=\"计算机系统与结构-09\"></p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E4%B8%8E%E7%BB%93%E6%9E%84-10.jpg\" alt=\"计算机系统与结构-10\"></p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E4%B8%8E%E7%BB%93%E6%9E%84-11.jpg\" alt=\"计算机系统与结构-11\"></p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E4%B8%8E%E7%BB%93%E6%9E%84-12.jpg\" alt=\"计算机系统与结构-12\"></p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E4%B8%8E%E7%BB%93%E6%9E%84-13.jpg\" alt=\"计算机系统与结构-13\"></p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E4%B8%8E%E7%BB%93%E6%9E%84-14.jpg\" alt=\"计算机系统与结构-14\"></p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E4%B8%8E%E7%BB%93%E6%9E%84-15.jpg\" alt=\"计算机系统与结构-15\"></p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E4%B8%8E%E7%BB%93%E6%9E%84-16.jpg\" alt=\"计算机系统与结构-16\"></p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E4%B8%8E%E7%BB%93%E6%9E%84-17.jpg\" alt=\"计算机系统与结构-17\"></p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E4%B8%8E%E7%BB%93%E6%9E%84-18.jpg\" alt=\"计算机系统与结构-18\"></p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E4%B8%8E%E7%BB%93%E6%9E%84-19.jpg\" alt=\"计算机系统与结构-19\"></p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E4%B8%8E%E7%BB%93%E6%9E%84-20.jpg\" alt=\"计算机系统与结构-20\"></p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E4%B8%8E%E7%BB%93%E6%9E%84-21.jpg\" alt=\"计算机系统与结构-21\"></p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E4%B8%8E%E7%BB%93%E6%9E%84-22.jpg\" alt=\"计算机系统与结构-22\"></p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E4%B8%8E%E7%BB%93%E6%9E%84-23.jpg\" alt=\"计算机系统与结构-23\"></p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E4%B8%8E%E7%BB%93%E6%9E%84-24.jpg\" alt=\"计算机系统与结构-24\"></p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E4%B8%8E%E7%BB%93%E6%9E%84-25.jpg\" alt=\"计算机系统与结构-25\"></p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E4%B8%8E%E7%BB%93%E6%9E%84-26.jpg\" alt=\"计算机系统与结构-26\"></p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E4%B8%8E%E7%BB%93%E6%9E%84-27.jpg\" alt=\"计算机系统与结构-27\"></p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E4%B8%8E%E7%BB%93%E6%9E%84-28.jpg\" alt=\"计算机系统与结构-28\"></p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E4%B8%8E%E7%BB%93%E6%9E%84-29.jpg\" alt=\"计算机系统与结构-29\"></p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E4%B8%8E%E7%BB%93%E6%9E%84-30.jpg\" alt=\"计算机系统与结构-30\"></p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E4%B8%8E%E7%BB%93%E6%9E%84-31.jpg\" alt=\"计算机系统与结构-31\"></p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E4%B8%8E%E7%BB%93%E6%9E%84-32.jpg\" alt=\"计算机系统与结构-32\"></p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E4%B8%8E%E7%BB%93%E6%9E%84-33.jpg\" alt=\"计算机系统与结构-33\"></p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E4%B8%8E%E7%BB%93%E6%9E%84-34.jpg\" alt=\"计算机系统与结构-34\"></p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E4%B8%8E%E7%BB%93%E6%9E%84-35.jpg\" alt=\"计算机系统与结构-35\"></p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E4%B8%8E%E7%BB%93%E6%9E%84-36.jpg\" alt=\"计算机系统与结构-36\"></p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E4%B8%8E%E7%BB%93%E6%9E%84-37.jpg\" alt=\"计算机系统与结构-37\"></p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E4%B8%8E%E7%BB%93%E6%9E%84-38.jpg\" alt=\"计算机系统与结构-38\"></p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E4%B8%8E%E7%BB%93%E6%9E%84-39.jpg\" alt=\"计算机系统与结构-39\"></p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E4%B8%8E%E7%BB%93%E6%9E%84-40.jpg\" alt=\"计算机系统与结构-40\"></p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E4%B8%8E%E7%BB%93%E6%9E%84-41.jpg\" alt=\"计算机系统与结构-41\"></p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E4%B8%8E%E7%BB%93%E6%9E%84-42.jpg\" alt=\"计算机系统与结构-42\"></p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E4%B8%8E%E7%BB%93%E6%9E%84-43.jpg\" alt=\"计算机系统与结构-43\"></p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E4%B8%8E%E7%BB%93%E6%9E%84-44.jpg\" alt=\"计算机系统与结构-44\"></p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E4%B8%8E%E7%BB%93%E6%9E%84-45.jpg\" alt=\"计算机系统与结构-45\"></p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E4%B8%8E%E7%BB%93%E6%9E%84-46.jpg\" alt=\"计算机系统与结构-46\"></p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E4%B8%8E%E7%BB%93%E6%9E%84-47.jpg\" alt=\"计算机系统与结构-47\"></p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E4%B8%8E%E7%BB%93%E6%9E%84-48.jpg\" alt=\"计算机系统与结构-48\"></p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E4%B8%8E%E7%BB%93%E6%9E%84-49.jpg\" alt=\"计算机系统与结构-49\"></p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E4%B8%8E%E7%BB%93%E6%9E%84-50.jpg\" alt=\"计算机系统与结构-50\"></p>\n",
            "tags": [
                "计算机组成原理"
            ]
        },
        {
            "id": "https://github.com/YogMas/YogMas.github.io/2021/11/06/html-shang/",
            "url": "https://github.com/YogMas/YogMas.github.io/2021/11/06/html-shang/",
            "title": "Html-first",
            "date_published": "2021-11-05T16:00:00.000Z",
            "content_html": "<h1 id=\"html上\"><a class=\"markdownIt-Anchor\" href=\"#html上\">#</a> Html (上)</h1>\n<h3 id=\"the-article-from-yogmas-also-sam\"><a class=\"markdownIt-Anchor\" href=\"#the-article-from-yogmas-also-sam\">#</a> the article from yogmas also sam</h3>\n<h4 id=\"1基本架构\"><a class=\"markdownIt-Anchor\" href=\"#1基本架构\">#</a> 1. 基本架构</h4>\n<blockquote>\n<pre><code>&lt;html&gt; \n&lt;head&gt;&lt;/head&gt;\n&lt;body&gt;&lt;/body&gt;\n&lt;/html&gt; \n</code></pre>\n</blockquote>\n<h4 id=\"2html标签\"><a class=\"markdownIt-Anchor\" href=\"#2html标签\">#</a> 2.html 标签</h4>\n<h6 id=\"标题标签\"><a class=\"markdownIt-Anchor\" href=\"#标题标签\">#</a> 标题标签</h6>\n<blockquote>\n<pre><code>&lt;h1&gt;&lt;/h1&gt;   ……  &lt;h6&gt;&lt;/h6&gt;\n</code></pre>\n</blockquote>\n<p>一共六级标题，文字加粗，由大到小依次减小。<br>\n<strong>大多数标签都是成对存在的，只有少数例如 br 的单标签</strong></p>\n<h6 id=\"段落和换行标签\"><a class=\"markdownIt-Anchor\" href=\"#段落和换行标签\">#</a> 段落和换行标签</h6>\n<blockquote>\n<pre><code>&lt;p&gt;&lt;/p&gt;\n&lt;/br&gt;\n</code></pre>\n</blockquote>\n<p>p 标签会自动换行，不用添加 br</p>\n<h6 id=\"文本格式化标签\"><a class=\"markdownIt-Anchor\" href=\"#文本格式化标签\">#</a> 文本格式化标签</h6>\n<blockquote>\n<pre><code>&lt;strong&gt;加粗&lt;/strong&gt; 或者 &lt;b&gt;加粗&lt;/b&gt;\n&lt;em&gt;倾斜&lt;/em&gt; 或者 &lt;i&gt;倾斜&lt;/i&gt;\n&lt;del&gt;删除线&lt;/del&gt; 或者 &lt;s&gt;删除线&lt;/s&gt;\n&lt;ins&gt;下划线&lt;/ins&gt; 或者 &lt;u&gt;下划线&lt;/u&gt;\n</code></pre>\n</blockquote>\n<h6 id=\"div和span标签\"><a class=\"markdownIt-Anchor\" href=\"#div和span标签\">#</a> div 和 span 标签</h6>\n<blockquote>\n<pre><code>&lt;span&gt;&lt;/span&gt;\n</code></pre>\n</blockquote>\n<p>形象来说 div 是一个大盒子，span 通常是用来放在大盒子里面的小盒子（后期 div 在页面构造中非常常用)</p>\n<h6 id=\"图像标签\"><a class=\"markdownIt-Anchor\" href=\"#图像标签\">#</a> 图像标签</h6>\n<blockquote>\n<pre><code>&lt;img src=\"路径\" alt=\"图片不显示时显示出来的\" \ntitle=\"鼠标放在图片上面显示出来的文字\" \nwidth=\"\" height=\"\" border=\"\"&gt;\n</code></pre>\n</blockquote>\n<p>在后期使用的 width,height,border, 都会放入<strong> css</strong> 中来运行使用不会单独列入 img 中<br>\n图像标签的路径<br>\n 1. 同一级路径<br>\n eg:(img.jpg)<br>\n 2. 下一级路径<br>\n eg:(images/img.jpg)<br>\n 3. 绝对路径<br>\n eg:(C:\\Users\\apple\\Desktop\\ 前端基础第一天 - HTML\\ 案例 \\img.jpg)<br>\neg：(<a href=\"http://www.itcast.cn/2018czgw/images/logo.png\">http://www.itcast.cn/2018czgw/images/logo.png</a>)<br>\n<a href=\"https://imgtu.com/i/IQmLi8\"><img src=\"https://z3.ax1x.com/2021/11/06/IQmLi8.png\" alt=\"IQmLi8.png\"></a></p>\n<h6 id=\"超链接标签\"><a class=\"markdownIt-Anchor\" href=\"#超链接标签\">#</a> 超链接标签</h6>\n<blockquote>\n<pre><code>&lt;a href=\"链接\"&gt;LOL&lt;/a&gt;\n</code></pre>\n<p>LOL 可以以图片文字等等代替，点击就可以跳转到 href 所在的链接</p>\n</blockquote>\n<p>可以添加的元素：target=“X”<br>\nX 包括_self (覆盖当前页面)<br>\n 和_blank 重新启动新的页面<br>\n链接分类<br>\n 1. 内部链接：存放在你网站前端的链接也就是你写前端时电脑里面的链接<br>\n 2. 外部链接：例如 http 这类的其他网站的链接<br>\n 3. 空链接：当你还没有链接可以填时，留出空位用 #代替<br>\n 4. 下载链接：通常是以.zip 结尾的压缩包<br>\n<a href=\"https://imgtu.com/i/IQC8kd\"><img src=\"https://z3.ax1x.com/2021/11/06/IQC8kd.png\" alt=\"IQC8kd.png\"></a></p>\n<h6 id=\"锚点定位\"><a class=\"markdownIt-Anchor\" href=\"#锚点定位\">#</a> 锚点定位</h6>\n<p>由两个相互呼应的标签组成<br>\n可以从页面的一个地方跳转到当前页面的另外一个地方</p>\n<blockquote>\n<pre><code>&lt;a href=\"#ID\"&gt;&lt;/a&gt;\n&lt;h3 id=\"ID\"&gt;\n</code></pre>\n</blockquote>\n<p>ID 可以写成任何你定义的名称<br>\n h3 并不是固定的，可以换成任意标签<br>\n当你点击 a 中携带的元素或标签时你将会跳转到拥有 id=“” 且和 a 相同 id 的标签这</p>\n<h6 id=\"注释标签和特殊字符\"><a class=\"markdownIt-Anchor\" href=\"#注释标签和特殊字符\">#</a> 注释标签和特殊字符</h6>\n<blockquote>\n<pre><code>&lt;!-- 注释内容 --&gt; \n&lt;用&amp;lt  &gt;用&amp;gt；(由于&lt;&gt;符号在html中的特殊性)\n</code></pre>\n</blockquote>\n<p>特殊内容可以用 ctrl+l 快速注释</p>\n",
            "tags": [
                "Html"
            ]
        },
        {
            "id": "https://github.com/YogMas/YogMas.github.io/2021/02/10/linux/",
            "url": "https://github.com/YogMas/YogMas.github.io/2021/02/10/linux/",
            "title": "操作系统",
            "date_published": "2021-02-09T16:00:00.000Z",
            "content_html": "<h1 id=\"操作系统\"><a class=\"markdownIt-Anchor\" href=\"#操作系统\">#</a> 操作系统</h1>\n<p>The article made by  <code>Yogmas</code> ,beginning from 2022.1.18</p>\n<h2 id=\"简介\"><a class=\"markdownIt-Anchor\" href=\"#简介\">#</a> 简介</h2>\n<p><strong>裸机</strong>：没有安装操作系统的电脑</p>\n<p><strong>操作系统</strong>: 1. 对硬件进行操作 2. 将对硬件的一系列操作封装成为系统调用，方便程序员调用</p>\n<h3 id=\"不同领域的主流操作系统\"><a class=\"markdownIt-Anchor\" href=\"#不同领域的主流操作系统\">#</a> 不同领域的主流操作系统</h3>\n<ol>\n<li>桌面操作系统\n<ul>\n<li>Windows</li>\n<li>macOS</li>\n<li>Linux</li>\n</ul>\n</li>\n<li>服务器操作系统\n<ul>\n<li>Linux 免费 安全</li>\n<li>Windows Server  付费</li>\n</ul>\n</li>\n<li>嵌入式操作系统\n<ul>\n<li>Linux</li>\n</ul>\n</li>\n<li>移动设备操作系统\n<ul>\n<li>iOS</li>\n<li>Android (基于 <code>Linux</code> )</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"虚拟机\"><a class=\"markdownIt-Anchor\" href=\"#虚拟机\">#</a> 虚拟机</h3>\n<p>相当于安装在电脑上的一台虚拟电脑</p>\n<h2 id=\"操作系统的发展史略\"><a class=\"markdownIt-Anchor\" href=\"#操作系统的发展史略\">#</a> 操作系统的发展史 (略)</h2>\n<h3 id=\"unix\"><a class=\"markdownIt-Anchor\" href=\"#unix\">#</a> Unix</h3>\n<p>伴随着 B 语言和 C 语言的由来，同时由于其创作者可以直接访问使用该系统的电脑，电气公司将其私有化后随之产生了 <code>Minix</code></p>\n<h3 id=\"minix\"><a class=\"markdownIt-Anchor\" href=\"#minix\">#</a> Minix</h3>\n<p><code>Unix</code>  私有化之后，大学无法使用 <code>Unix</code>  系统进行教学，就出现了 <code>Minix</code></p>\n<h3 id=\"linux\"><a class=\"markdownIt-Anchor\" href=\"#linux\">#</a> Linux</h3>\n<p><code>Minix</code>  上可以实现的功能非常少，为了达到相应的功能需要，就出现了 <code>Linux</code></p>\n<h2 id=\"linux操作系统\"><a class=\"markdownIt-Anchor\" href=\"#linux操作系统\">#</a> Linux 操作系统</h2>\n<h3 id=\"linux内核及发行版\"><a class=\"markdownIt-Anchor\" href=\"#linux内核及发行版\">#</a> Linux 内核及发行版</h3>\n<h4 id=\"linux内核\"><a class=\"markdownIt-Anchor\" href=\"#linux内核\">#</a> Linux 内核</h4>\n<p><code>Linux</code>  内核对各种硬件进行操作并且将各种操作封装成为系统调用</p>\n<h4 id=\"linux发行版\"><a class=\"markdownIt-Anchor\" href=\"#linux发行版\">#</a> Linux 发行版</h4>\n<p>在 <code>Linux</code>  内核的基础上包括了桌面环境，办公套件，数据库等应用软件</p>\n<h3 id=\"linux文件和目录\"><a class=\"markdownIt-Anchor\" href=\"#linux文件和目录\">#</a> Linux 文件和目录</h3>\n<h4 id=\"单用户与多用户\"><a class=\"markdownIt-Anchor\" href=\"#单用户与多用户\">#</a> 单用户与多用户</h4>\n<ul>\n<li>单用户操作系统：一台电脑同一时间只能由一个用户使用  <code>Windows</code></li>\n<li>多用户操作系统：一台电脑同一时间可以由多个用户使用  <code>Linux</code> , <code>Unix</code></li>\n</ul>\n<h4 id=\"windows与linux\"><a class=\"markdownIt-Anchor\" href=\"#windows与linux\">#</a> Windows 与 Linux</h4>\n<ul>\n<li><code>Windows</code>  下，看到的基本都是驱动器盘符</li>\n<li>多用户操作系统下，看到的都是根目录结构</li>\n</ul>\n<h2 id=\"linux基本操作\"><a class=\"markdownIt-Anchor\" href=\"#linux基本操作\">#</a> Linux 基本操作</h2>\n<h3 id=\"linux命令\"><a class=\"markdownIt-Anchor\" href=\"#linux命令\">#</a> Linux 命令</h3>\n<ul>\n<li><code>ls</code>  显示当前目录下的所有文件</li>\n<li><code>pwd</code>  显示当前目录</li>\n<li><code>cd 地址</code> 更改地址</li>\n<li><code>touch 文件名</code> 创建文件</li>\n<li><code>mkdir 文件名</code> 创建目录</li>\n<li>clear 清屏</li>\n<li><code>command --help</code>  帮助信息</li>\n<li><code>man command</code>  知识手册</li>\n<li><a href=\"https://imgtu.com/i/HvXbkT\"><img src=\"https://s4.ax1x.com/2022/02/21/HvXbkT.png\" alt=\"man操作键\"></a></li>\n</ul>\n<h4 id=\"文件和目录命令\"><a class=\"markdownIt-Anchor\" href=\"#文件和目录命令\">#</a> 文件和目录命令</h4>\n<p><a href=\"https://imgtu.com/i/HvjUH0\"><img src=\"https://s4.ax1x.com/2022/02/21/HvjUH0.png\" alt=\"文件和目录相关命令\"></a></p>\n<h5 id=\"ls命令选项\"><a class=\"markdownIt-Anchor\" href=\"#ls命令选项\">#</a> ls 命令选项</h5>\n<p><a href=\"https://imgtu.com/i/HvvTiT\"><img src=\"https://s4.ax1x.com/2022/02/21/HvvTiT.png\" alt=\"ls命令选项\"></a></p>\n<h5 id=\"ls通配符\"><a class=\"markdownIt-Anchor\" href=\"#ls通配符\">#</a> ls 通配符</h5>\n<p><a href=\"https://imgtu.com/i/Hxqm4g\"><img src=\"https://s4.ax1x.com/2022/02/22/Hxqm4g.png\" alt=\"ls通配符\"></a></p>\n<h4 id=\"切换目录\"><a class=\"markdownIt-Anchor\" href=\"#切换目录\">#</a> 切换目录</h4>\n<h5 id=\"cd命令选项\"><a class=\"markdownIt-Anchor\" href=\"#cd命令选项\">#</a> cd 命令选项</h5>\n<p><a href=\"https://imgtu.com/i/HxLZs1\"><img src=\"https://s4.ax1x.com/2022/02/22/HxLZs1.png\" alt=\"cd\"></a></p>\n<h4 id=\"创建和删除操作\"><a class=\"markdownIt-Anchor\" href=\"#创建和删除操作\">#</a> 创建和删除操作</h4>\n<ol>\n<li>\n<p><code>touch</code></p>\n<ul>\n<li>没有该名的文件存在，则创建一个新的文件</li>\n<li>有改名字的文件存在，则更改文件的末次修改日期</li>\n</ul>\n</li>\n<li>\n<p><code>mkdir</code></p>\n<p><code>-p</code>  连续创建多个目录</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">mkdir -p a/b/c/d<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>\n<p><code>rm</code></p>\n<p><code>-r</code>  连续删除多个同一文件夹下的文件</p>\n<p><code>-f</code>  强制删除无提示信息</p>\n<p><strong> <code>ls</code>  的通配符对 <code>rm</code>  一样适用</strong></p>\n</li>\n</ol>\n<h4 id=\"拷贝和移动命令\"><a class=\"markdownIt-Anchor\" href=\"#拷贝和移动命令\">#</a> 拷贝和移动命令</h4>\n<ol>\n<li>\n<p><code>tree</code></p>\n<p>以<strong>树状图</strong>列出文件目录结构</p>\n<p><code>-d</code>  只显示目录</p>\n</li>\n<li>\n<p><code>cp 源文件 目标文件</code></p>\n<p><code>-i</code>  覆盖文件前提示</p>\n<p><code>-r</code>  复制整个目录</p>\n</li>\n<li>\n<p><code>mv 源文件 目标文件</code></p>\n<p><code>-i</code>  覆盖前提示</p>\n</li>\n</ol>\n<h4 id=\"文件内容命令\"><a class=\"markdownIt-Anchor\" href=\"#文件内容命令\">#</a> 文件内容命令</h4>\n<p><a href=\"https://imgtu.com/i/bSr1JO\"><img src=\"https://s4.ax1x.com/2022/02/22/bSr1JO.png\" alt=\"查看文件内容\"></a></p>\n<ol>\n<li>\n<p><code>cat</code></p>\n<p><code>-b</code>  显示非空行编号</p>\n<p><code>-n</code>  显示所有行编号</p>\n</li>\n<li>\n<p><code>more</code></p>\n<p><a href=\"https://imgtu.com/i/bC3bsf\"><img src=\"https://s4.ax1x.com/2022/02/23/bC3bsf.png\" alt=\"more\"></a></p>\n</li>\n<li>\n<p><code>grep</code></p>\n<p><code>grep -n （） （文件）</code></p>\n<p><a href=\"https://imgtu.com/i/bC8SWn\"><img src=\"https://s4.ax1x.com/2022/02/23/bC8SWn.png\" alt=\"grep\"></a></p>\n</li>\n</ol>\n<h4 id=\"其他命令\"><a class=\"markdownIt-Anchor\" href=\"#其他命令\">#</a> 其他命令</h4>\n<h5 id=\"echo和重定向\"><a class=\"markdownIt-Anchor\" href=\"#echo和重定向\">#</a> echo 和重定向</h5>\n<ol>\n<li>\n<p><code>echo</code></p>\n<p>在终端中显示参数指定的文字</p>\n</li>\n<li>\n<p>重定向</p>\n<p>原本应该输出到终端中的内容重定向到其他文件中</p>\n<p><a href=\"https://imgtu.com/i/bCYd61\"><img src=\"https://s4.ax1x.com/2022/02/23/bCYd61.png\" alt=\"bCYd61.png\"></a></p>\n</li>\n</ol>\n<h5 id=\"管道\"><a class=\"markdownIt-Anchor\" href=\"#管道\">#</a> 管道 <code>|</code></h5>\n<p><a href=\"https://imgtu.com/i/bCN0IO\"><img src=\"https://s4.ax1x.com/2022/02/23/bCN0IO.png\" alt=\"管道\"></a></p>\n<h4 id=\"远程管理常用命令\"><a class=\"markdownIt-Anchor\" href=\"#远程管理常用命令\">#</a> 远程管理常用命令</h4>\n<ol>\n<li>\n<p>关机重启 <code>shutdown</code></p>\n<p><a href=\"https://imgtu.com/i/bCUtfg\"><img src=\"https://s4.ax1x.com/2022/02/23/bCUtfg.png\" alt=\"shutdown\"></a></p>\n</li>\n<li>\n<p>查看和配置网卡信息</p>\n<p><a href=\"https://imgtu.com/i/bCawCD\"><img src=\"https://s4.ax1x.com/2022/02/23/bCawCD.png\" alt=\"bCawCD.png\"></a></p>\n</li>\n<li>\n<p><code>ifconfig</code></p>\n<p><a href=\"https://imgtu.com/i/bCduqI\"><img src=\"https://s4.ax1x.com/2022/02/23/bCduqI.png\" alt=\"ifconfig\"></a></p>\n</li>\n<li>\n<p><code>ping</code>  测试网络连接</p>\n<p><a href=\"https://imgtu.com/i/bCwOc4\"><img src=\"https://s4.ax1x.com/2022/02/23/bCwOc4.png\" alt=\"ping\"></a></p>\n</li>\n</ol>\n<h5 id=\"ssh工作及简介\"><a class=\"markdownIt-Anchor\" href=\"#ssh工作及简介\">#</a> SSH 工作及简介</h5>\n<p><a href=\"https://imgtu.com/i/bC0R56\"><img src=\"https://s4.ax1x.com/2022/02/23/bC0R56.png\" alt=\"SSH\"></a></p>\n<ol>\n<li>\n<p>域名和端口号</p>\n<p><a href=\"https://imgtu.com/i/bCBuL9\"><img src=\"https://s4.ax1x.com/2022/02/23/bCBuL9.png\" alt=\"域名和端口号\"></a></p>\n</li>\n<li>\n<p>SSH 客户端的简单实用</p>\n<p><code>ssh [-p port] user@remote</code></p>\n<ul>\n<li><code>user</code> : 远程机器上的用户名</li>\n<li><code>remote</code> : 远程机器的地址</li>\n<li><code>port</code> :<strong>SSH server</strong> 监听的端口</li>\n</ul>\n<p>可以对装有 SSH 客户端的电脑或者服务器进行<strong>远程控制</strong></p>\n</li>\n</ol>\n<h5 id=\"scp\"><a class=\"markdownIt-Anchor\" href=\"#scp\">#</a> SCP</h5>\n<p>远程状态下进行文件拷贝</p>\n<p><a href=\"https://imgtu.com/i/bFnyod\"><img src=\"https://s4.ax1x.com/2022/02/24/bFnyod.png\" alt=\"scp\"></a></p>\n<h5 id=\"ftp\"><a class=\"markdownIt-Anchor\" href=\"#ftp\">#</a> FTP</h5>\n<p>在 <code>WINDOWS</code>  下可以利用 FTP 进行文件拷贝 端口号默认为 21</p>\n<h5 id=\"ssh免密码登录设置\"><a class=\"markdownIt-Anchor\" href=\"#ssh免密码登录设置\">#</a> SSH 免密码登录设置</h5>\n<p><a href=\"https://imgtu.com/i/bFMOSI\"><img src=\"https://s4.ax1x.com/2022/02/24/bFMOSI.png\" alt=\"SSH免密码登录设置\"></a></p>\n<p>配置别名</p>\n<p><a href=\"https://imgtu.com/i/bFlUK0\"><img src=\"https://s4.ax1x.com/2022/02/24/bFlUK0.png\" alt=\"配置别名\"></a></p>\n<h4 id=\"用户权限\"><a class=\"markdownIt-Anchor\" href=\"#用户权限\">#</a> 用户权限</h4>\n<p><a href=\"https://imgtu.com/i/bMMkvT\"><img src=\"https://s4.ax1x.com/2022/02/28/bMMkvT.png\" alt=\"用户权限\"></a></p>\n<h5 id=\"ls-l-指令介绍\"><a class=\"markdownIt-Anchor\" href=\"#ls-l-指令介绍\">#</a>  <code>ls -l</code>  指令介绍</h5>\n<p><a href=\"https://imgtu.com/i/bMMTLF\"><img src=\"https://s4.ax1x.com/2022/02/28/bMMTLF.png\" alt=\"ls-l指令介绍\"></a></p>\n<h5 id=\"chmod指令\"><a class=\"markdownIt-Anchor\" href=\"#chmod指令\">#</a>  <code>chmod</code>  指令</h5>\n<p><code>chmod</code>  change mod 用于修改用户对文件和目录的权限</p>\n<p><code>chmod +/- rwx 文件/目录</code></p>\n<h5 id=\"超级用户\"><a class=\"markdownIt-Anchor\" href=\"#超级用户\">#</a> 超级用户</h5>\n<p><a href=\"https://imgtu.com/i/bMl759\"><img src=\"https://s4.ax1x.com/2022/02/28/bMl759.png\" alt=\"超级用户\"></a></p>\n<h4 id=\"组管理\"><a class=\"markdownIt-Anchor\" href=\"#组管理\">#</a> 组管理</h4>\n<p><a href=\"https://imgtu.com/i/bM1rM6\"><img src=\"https://s4.ax1x.com/2022/02/28/bM1rM6.png\" alt=\"组管理终端命令\"></a></p>\n<h4 id=\"用户管理\"><a class=\"markdownIt-Anchor\" href=\"#用户管理\">#</a> 用户管理</h4>\n<p><a href=\"https://imgtu.com/i/bMYL2d\"><img src=\"https://s4.ax1x.com/2022/02/28/bMYL2d.png\" alt=\"用户管理\"></a></p>\n<h5 id=\"查看用户信息\"><a class=\"markdownIt-Anchor\" href=\"#查看用户信息\">#</a> 查看用户信息</h5>\n<p><a href=\"https://imgtu.com/i/bMtIQs\"><img src=\"https://s4.ax1x.com/2022/02/28/bMtIQs.png\" alt=\"查看用户信息\"></a></p>\n<h5 id=\"设置主组和附加组\"><a class=\"markdownIt-Anchor\" href=\"#设置主组和附加组\">#</a> 设置主组和附加组</h5>\n<p><code>usermod</code></p>\n<p><a href=\"https://imgtu.com/i/bl8pcR\"><img src=\"https://s4.ax1x.com/2022/03/01/bl8pcR.png\" alt=\"usermod\"></a></p>\n<p>改变用户登录的 <code>shell</code></p>\n<p>ubantu 默认的是 dash,dash 在 xshell 软件中存在 bug, 可以利用 <code>usermod</code>  指令更改成为 bash</p>\n<h5 id=\"which\"><a class=\"markdownIt-Anchor\" href=\"#which\">#</a>  <code>which</code></h5>\n<p>查看命令执行所在文件夹</p>\n<p><a href=\"https://imgtu.com/i/bl6v11\"><img src=\"https://s4.ax1x.com/2022/03/01/bl6v11.png\" alt=\"which\"></a></p>\n<h5 id=\"bin和sbin文件的差别\"><a class=\"markdownIt-Anchor\" href=\"#bin和sbin文件的差别\">#</a>  <code>bin</code>  和 sbin 文件的差别</h5>\n<p><a href=\"https://imgtu.com/i/blcbKP\"><img src=\"https://s4.ax1x.com/2022/03/01/blcbKP.png\" alt=\"bin和sbin文件\"></a></p>\n<h5 id=\"su切换用户\"><a class=\"markdownIt-Anchor\" href=\"#su切换用户\">#</a> su 切换用户</h5>\n<p><a href=\"https://imgtu.com/i/bNWmee\"><img src=\"https://s4.ax1x.com/2022/03/04/bNWmee.png\" alt=\"su切换用户\"></a></p>\n<h5 id=\"修改文件权限\"><a class=\"markdownIt-Anchor\" href=\"#修改文件权限\">#</a> 修改文件权限</h5>\n<p><a href=\"https://imgtu.com/i/bNWNwQ\"><img src=\"https://s4.ax1x.com/2022/03/04/bNWNwQ.png\" alt=\"修改文件权限\"></a></p>\n<p><code>chmod</code>  的数字表示法</p>\n<p><a href=\"https://imgtu.com/i/bNhVVe\"><img src=\"https://s4.ax1x.com/2022/03/04/bNhVVe.png\" alt=\"chmod数字表示法\"></a></p>\n<h4 id=\"查询系统信息\"><a class=\"markdownIt-Anchor\" href=\"#查询系统信息\">#</a> 查询系统信息</h4>\n<ol>\n<li>\n<p>时间和磁盘占用</p>\n<p><a href=\"https://imgtu.com/i/bNIK2R\"><img src=\"https://s4.ax1x.com/2022/03/04/bNIK2R.png\" alt=\"时间日期额磁盘大小\"></a></p>\n</li>\n<li>\n<p>进程信息</p>\n<p><a href=\"https://imgtu.com/i/bNIsZ8\"><img src=\"https://s4.ax1x.com/2022/03/04/bNIsZ8.png\" alt=\"进程信息\"></a></p>\n</li>\n</ol>\n<h4 id=\"其他命令-2\"><a class=\"markdownIt-Anchor\" href=\"#其他命令-2\">#</a> 其他命令</h4>\n<ol>\n<li>\n<p>查找文件</p>\n<p><a href=\"https://imgtu.com/i/bNTtgA\"><img src=\"https://s4.ax1x.com/2022/03/04/bNTtgA.png\" alt=\"查找文件\"></a></p>\n</li>\n<li>\n<p>文件软链接</p>\n<p><a href=\"https://imgtu.com/i/bN7VVf\"><img src=\"https://s4.ax1x.com/2022/03/04/bN7VVf.png\" alt=\"文件软链接\"></a></p>\n</li>\n<li>\n<p>文件硬链接</p>\n<p><a href=\"https://imgtu.com/i/bNq3qI\"><img src=\"https://s4.ax1x.com/2022/03/04/bNq3qI.png\" alt=\"硬链接简介\"></a></p>\n</li>\n</ol>\n<h4 id=\"打包和压缩\"><a class=\"markdownIt-Anchor\" href=\"#打包和压缩\">#</a> 打包和压缩</h4>\n<ol>\n<li>\n<p>打包</p>\n<p><a href=\"https://imgtu.com/i/b0plef\"><img src=\"https://s4.ax1x.com/2022/03/05/b0plef.png\" alt=\"tar打包和解包指令\"></a></p>\n</li>\n<li>\n<p>压缩和解压缩</p>\n<ul>\n<li>\n<p>gzip</p>\n<p><a href=\"https://imgtu.com/i/b0C1Pg\"><img src=\"https://s4.ax1x.com/2022/03/05/b0C1Pg.png\" alt=\"gzip\"></a></p>\n</li>\n<li>\n<p>bzip2</p>\n<p><a href=\"https://imgtu.com/i/b0CDG4\"><img src=\"https://s4.ax1x.com/2022/03/05/b0CDG4.png\" alt=\"bzip2 \"></a></p>\n</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"adp安装与卸载\"><a class=\"markdownIt-Anchor\" href=\"#adp安装与卸载\">#</a> adp 安装与卸载</h4>\n<p><a href=\"https://imgtu.com/i/b0PKyR\"><img src=\"https://s4.ax1x.com/2022/03/05/b0PKyR.png\" alt=\"adp安装与卸载\"></a></p>\n<h5 id=\"adp设计软件源\"><a class=\"markdownIt-Anchor\" href=\"#adp设计软件源\">#</a> adp 设计软件源</h5>\n<p><a href=\"https://imgtu.com/i/b0iptO\"><img src=\"https://s4.ax1x.com/2022/03/05/b0iptO.png\" alt=\"设置软件源\"></a></p>\n",
            "tags": [
                "操作系统"
            ]
        },
        {
            "id": "https://github.com/YogMas/YogMas.github.io/2021/02/10/ji-qi-xue-xi-ru-men-wu-en-da/",
            "url": "https://github.com/YogMas/YogMas.github.io/2021/02/10/ji-qi-xue-xi-ru-men-wu-en-da/",
            "title": "机器学习基础",
            "date_published": "2021-02-09T16:00:00.000Z",
            "content_html": "<h1 id=\"机器学习-入门ml\"><a class=\"markdownIt-Anchor\" href=\"#机器学习-入门ml\">#</a> 机器学习 - 入门 ML</h1>\n<p>The article made by yogmas,beginning from 2022.1.17 With JoTong studio</p>\n<p>基于<strong>吴恩达</strong>机器学习的学习笔记</p>\n<h2 id=\"初步介绍机器学习\"><a class=\"markdownIt-Anchor\" href=\"#初步介绍机器学习\">#</a> 初步介绍机器学习</h2>\n<p>机器学习可以分为两类</p>\n<ul>\n<li>监督学习  supervised learning    人为教机器</li>\n<li>不监督学习 unsupervised learning       机器自己学习</li>\n</ul>\n<h3 id=\"监督学习-supervised-learning\"><a class=\"markdownIt-Anchor\" href=\"#监督学习-supervised-learning\">#</a> 监督学习 Supervised learning</h3>\n<p>给出一定的输入值和输出值 (正确答案), 让机器通过另一些输入值来预测输出值</p>\n<ul>\n<li>\n<p><strong>回归问题</strong> (regression problem):. 预测一个<u>连续值输出</u>(real-valued)</p>\n<p>Eg: 就像 f (x) 中通过给定一个值 <code>s</code>  可以得到一个值 <code>f(s)</code></p>\n</li>\n<li>\n<p><strong>分类问题</strong> (classification problem): 预测一个<u>离散值输出</u>(Discrete-valued)</p>\n<p>Eg: 输出 <code>0</code>  和 <code>1</code> ,   <code>1</code>  代表 <code>True</code>     <code>0</code>  代表 <code>False</code></p>\n</li>\n</ul>\n<p>根据数据集中的一系列输入数据，通过<strong>算法预测</strong>，得出一系列的输出数据 (正确答案).</p>\n<h3 id=\"无监督学习-unsupervised-learning\"><a class=\"markdownIt-Anchor\" href=\"#无监督学习-unsupervised-learning\">#</a> 无监督学习 Unsupervised learning</h3>\n<p>没有给定正确答案，通过算法让机器自己将输入的数据分成不同的类型</p>\n<ul>\n<li>\n<p><strong>聚类算法</strong> (cluster): 将相同类型的数据化作一个族里面</p>\n</li>\n<li>\n<p><strong>鸡尾酒会问题</strong>：给定混合信号，如何分离出鸡尾酒会中同时说话的每个人的独立信号</p>\n</li>\n</ul>\n<h2 id=\"模型描述\"><a class=\"markdownIt-Anchor\" href=\"#模型描述\">#</a> 模型描述</h2>\n<p><a href=\"https://imgtu.com/i/7revBd\"><img src=\"https://s4.ax1x.com/2022/01/19/7revBd.png\" alt=\"假设函数\"></a></p>\n<p>机器通过一堆数据集的学习得出 h<strong> 假设函数</strong> (hypothesis), 假设函数的作用就是通过 <code>X</code>  预测 <code>Y</code></p>\n<p><a href=\"https://imgtu.com/i/7rmNU1\"><img src=\"https://s4.ax1x.com/2022/01/19/7rmNU1.png\" alt=\"7rmNU1.png\"></a> 单一变量<strong>线性回归</strong></p>\n<h3 id=\"代价函数cost-function\"><a class=\"markdownIt-Anchor\" href=\"#代价函数cost-function\">#</a> 代价函数 (cost function)</h3>\n<p>得到拟合度更高的一元函数就是要尽量减少假设的输出和房子真实价格之间的差值的绝对值 (也就是高中数学统计问题的公式求 <code>b</code>  和 <code>k</code> )</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>J</mi><mrow><mo fence=\"true\">(</mo><msub><mi>θ</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><msub><mi>θ</mi><mn>1</mn></msub><mo fence=\"true\">)</mo></mrow><mo>=</mo><mfrac><mn>1</mn><mrow><mn>2</mn><mi>m</mi></mrow></mfrac><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></munderover><msup><mrow><mo fence=\"true\">(</mo><msub><mi>h</mi><mi>θ</mi></msub><mrow><mo fence=\"true\">(</mo><msup><mi>x</mi><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow></msup><mo fence=\"true\">)</mo></mrow><mo>−</mo><msup><mi>y</mi><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow></msup><mo fence=\"true\">)</mo></mrow><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">J\\left(\\theta_{0}, \\theta_{1}\\right)=\\frac{1}{2 m} \\sum_{i=1}^{m}\\left(h_{\\theta}\\left(x^{(i)}\\right)-y^{(i)}\\right)^{2}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.09618em;\">J</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\">)</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.929066em;vertical-align:-1.277669em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"mord mathnormal\">m</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6513970000000002em;\"><span style=\"top:-1.872331em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.050005em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.3000050000000005em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.277669em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">(</span></span><span class=\"mord\"><span class=\"mord mathnormal\">h</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">θ</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">(</span></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.938em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">i</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">)</span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.938em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">i</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">)</span></span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3540079999999999em;\"><span style=\"top:-3.6029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>代价函数，平方误差函数，平方误差代价函数 (解决回归问题最常用的手段)</p>\n<p>关于 <code>θ0</code>  和 <code>θ1</code>  对函数求最小值</p>\n<ul>\n<li>\n<p>Hypothesis (假设函数):</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><msub><mi>h</mi><mi>θ</mi></msub><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msub><mi>θ</mi><mn>0</mn></msub><mo>+</mo><msub><mi>θ</mi><mn>1</mn></msub><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">h_{\\theta}(x)=\\theta_{0}+\\theta_{1} x\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">h</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">θ</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\">x</span></span></span></span></span></p>\n</li>\n<li>\n<p>Parameters (参数):</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><msub><mi>θ</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><msub><mi>θ</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">\\theta_{0}, \\theta_{1}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span></p>\n</li>\n<li>\n<p>Cost Function (代价函数):</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>J</mi><mrow><mo fence=\"true\">(</mo><msub><mi>θ</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><msub><mi>θ</mi><mn>1</mn></msub><mo fence=\"true\">)</mo></mrow><mo>=</mo><mfrac><mn>1</mn><mrow><mn>2</mn><mi>m</mi></mrow></mfrac><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></munderover><msup><mrow><mo fence=\"true\">(</mo><msub><mi>h</mi><mi>θ</mi></msub><mrow><mo fence=\"true\">(</mo><msup><mi>x</mi><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow></msup><mo fence=\"true\">)</mo></mrow><mo>−</mo><msup><mi>y</mi><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow></msup><mo fence=\"true\">)</mo></mrow><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">J\\left(\\theta_{0}, \\theta_{1}\\right)=\\frac{1}{2 m} \\sum_{i=1}^{m}\\left(h_{\\theta}\\left(x^{(i)}\\right)-y^{(i)}\\right)^{2}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.09618em;\">J</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\">)</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.929066em;vertical-align:-1.277669em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"mord mathnormal\">m</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6513970000000002em;\"><span style=\"top:-1.872331em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.050005em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.3000050000000005em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.277669em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">(</span></span><span class=\"mord\"><span class=\"mord mathnormal\">h</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">θ</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">(</span></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.938em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">i</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">)</span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.938em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">i</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">)</span></span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3540079999999999em;\"><span style=\"top:-3.6029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span></span></span></p>\n</li>\n<li>\n<p>Goal (目标):</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi><munder><mo><mi mathvariant=\"normal\">minimize</mi><mo>⁡</mo></mo><mrow><msub><mi>θ</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><msub><mi>θ</mi><mn>1</mn></msub></mrow></munder></mi><mi>J</mi><mrow><mo fence=\"true\">(</mo><msub><mi>θ</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><msub><mi>θ</mi><mn>1</mn></msub><mo fence=\"true\">)</mo></mrow></mrow><annotation encoding=\"application/x-tex\">\\underset{\\theta_{0}, \\theta_{1}}{\\operatorname{minimize}} J\\left(\\theta_{0}, \\theta_{1}\\right)\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.638216em;vertical-align:-0.8882159999999999em;\"></span><span class=\"mord\"><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.66786em;\"><span style=\"top:-2.3478920000000003em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31731428571428577em;\"><span style=\"top:-2.357em;margin-left:-0.02778em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span><span class=\"mpunct mtight\">,</span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31731428571428577em;\"><span style=\"top:-2.357em;margin-left:-0.02778em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span><span class=\"mop\"><span class=\"mop\"><span class=\"mord mathrm\">m</span><span class=\"mord mathrm\">i</span><span class=\"mord mathrm\">n</span><span class=\"mord mathrm\">i</span><span class=\"mord mathrm\">m</span><span class=\"mord mathrm\">i</span><span class=\"mord mathrm\">z</span><span class=\"mord mathrm\">e</span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8882159999999999em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.09618em;\">J</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\">)</span></span></span></span></span></span></p>\n</li>\n</ul>\n<h4 id=\"代价函数一\"><a class=\"markdownIt-Anchor\" href=\"#代价函数一\">#</a> 代价函数 (一)</h4>\n<p>利用简化代价函数来研究问题，就 <code>y=kx+b</code>  中令 <code>b=0</code>  采用 <code>y=kx</code>  回归方程来研究问题</p>\n<h4 id=\"代价函数二\"><a class=\"markdownIt-Anchor\" href=\"#代价函数二\">#</a> 代价函数 (二)</h4>\n<p><a href=\"https://imgtu.com/i/7yjB11\"><img src=\"https://s4.ax1x.com/2022/01/20/7yjB11.png\" alt=\"代价函数三维图像\"></a></p>\n<p><a href=\"https://imgtu.com/i/7yj7B8\"><img src=\"https://s4.ax1x.com/2022/01/20/7yj7B8.png\" alt=\"代价函数二维图像\"></a></p>\n<h3 id=\"梯度下降\"><a class=\"markdownIt-Anchor\" href=\"#梯度下降\">#</a> 梯度下降</h3>\n<p>假设有函数 <code>F(x,y)</code> , 先给定一个 <code>x</code>  和 <code>y</code>  的值，再不断改变 <code>x</code>  和 <code>y</code>  的值，直到找到 <code>F(x,y)</code>  的<strong>最小值</strong>或者<strong>局部最小值</strong></p>\n<p><a href=\"https://imgtu.com/i/7cL06x\"><img src=\"https://s4.ax1x.com/2022/01/20/7cL06x.png\" alt=\"梯度下降三维图像\"></a></p>\n<p>形象说明：在这样的三维图像上从小山的顶端或者半山腰出发，找到一个<strong>最近的路径</strong>到达低谷，每运行一次梯度下降算法，都会下降一点高度，也就是 <code>J函数</code> 的值会小一点</p>\n<p><a href=\"https://imgtu.com/i/7cOQ4H\"><img src=\"https://s4.ax1x.com/2022/01/20/7cOQ4H.png\" alt=\"7cOQ4H.png\"></a></p>\n<ul>\n<li>α:<strong> 学习率</strong>，表示了我们每次下山时候迈出步子的大小，其值越大下降越迅速，如果学习率过大得的话，有可能越过最低点</li>\n</ul>\n<h4 id=\"线性回归下的梯度下降\"><a class=\"markdownIt-Anchor\" href=\"#线性回归下的梯度下降\">#</a> 线性回归下的梯度下降</h4>\n<p><u>线性回归</u>的函数总是一个<strong>凸函数</strong> (没有局部最优解，只有一个全局最优解)</p>\n<p><strong>Batch</strong> 梯度下降：每次梯度下降的时候，我们都使用了整个样本集 ( <code>J函数</code> 中的求和符号)</p>\n<h2 id=\"矩阵和向量\"><a class=\"markdownIt-Anchor\" href=\"#矩阵和向量\">#</a> 矩阵和向量</h2>\n<ul>\n<li>\n<p><strong>矩阵</strong>：写在方括号内由数字组成的<u>矩形阵列</u></p>\n<p>矩阵的<strong>维数</strong>等于矩阵的行数乘以矩阵的列数</p>\n</li>\n<li>\n<p><strong>向量</strong>：只有一列的矩阵</p>\n</li>\n<li>\n<p>通常使用大写字母来表示矩阵，小写字母来表示数字</p>\n</li>\n</ul>\n<p>… 省略一系列线性代数内容</p>\n<h2 id=\"多特征量预测\"><a class=\"markdownIt-Anchor\" href=\"#多特征量预测\">#</a> 多特征量预测</h2>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><msub><mi>h</mi><mi>θ</mi></msub><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msub><mi>θ</mi><mn>0</mn></msub><mo>+</mo><msub><mi>θ</mi><mn>1</mn></msub><msub><mi>x</mi><mn>1</mn></msub><mo>+</mo><msub><mi>θ</mi><mn>2</mn></msub><msub><mi>x</mi><mn>2</mn></msub><mo>+</mo><mo>⋯</mo><mo>+</mo><msub><mi>θ</mi><mi>n</mi></msub><msub><mi>x</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">h_{\\theta}(x)=\\theta_{0}+\\theta_{1} x_{1}+\\theta_{2} x_{2}+\\cdots+\\theta_{n} x_{n}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">h</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">θ</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span></p>\n<p>多个特征量下的假设方程式 (<strong>多元线性回归</strong>)</p>\n<h3 id=\"多元梯度下降法\"><a class=\"markdownIt-Anchor\" href=\"#多元梯度下降法\">#</a> 多元梯度下降法</h3>\n<ul>\n<li>\n<p>Hypothesis</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><msub><mi>h</mi><mi>θ</mi></msub><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msup><mi>θ</mi><mi>T</mi></msup><mi>x</mi><mo>=</mo><msub><mi>θ</mi><mn>0</mn></msub><msub><mi>x</mi><mn>0</mn></msub><mo>+</mo><msub><mi>θ</mi><mn>1</mn></msub><msub><mi>x</mi><mn>1</mn></msub><mo>+</mo><msub><mi>θ</mi><mn>2</mn></msub><msub><mi>x</mi><mn>2</mn></msub><mo>+</mo><mo>⋯</mo><mo>+</mo><msub><mi>θ</mi><mi>n</mi></msub><msub><mi>x</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">h_{\\theta}(x)=\\theta^{T} x=\\theta_{0} x_{0}+\\theta_{1} x_{1}+\\theta_{2} x_{2}+\\cdots+\\theta_{n} x_{n}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">h</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">θ</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8913309999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8913309999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span></p>\n</li>\n<li>\n<p>Parameters</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><msub><mi>θ</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><msub><mi>θ</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msub><mi>θ</mi><mi>π</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\theta_{0}, \\theta_{1}, \\ldots , \\theta_{\\pi}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">π</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span></p>\n</li>\n<li>\n<p>Costfunction</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>J</mi><mrow><mo fence=\"true\">(</mo><msub><mi>θ</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><msub><mi>θ</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msub><mi>θ</mi><mi>n</mi></msub><mo fence=\"true\">)</mo></mrow><mo>=</mo><mfrac><mn>1</mn><mrow><mn>2</mn><mi>m</mi></mrow></mfrac><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></munderover><msup><mrow><mo fence=\"true\">(</mo><msub><mi>h</mi><mi>θ</mi></msub><mrow><mo fence=\"true\">(</mo><msup><mi>x</mi><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow></msup><mo fence=\"true\">)</mo></mrow><mo>−</mo><msup><mi>y</mi><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow></msup><mo fence=\"true\">)</mo></mrow><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">J\\left(\\theta_{0}, \\theta_{1}, \\ldots, \\theta_{n}\\right)=\\frac{1}{2 m} \\sum_{i=1}^{m}\\left(h_{\\theta}\\left(x^{(i)}\\right)-y^{(i)}\\right)^{2}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.09618em;\">J</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\">)</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.929066em;vertical-align:-1.277669em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"mord mathnormal\">m</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6513970000000002em;\"><span style=\"top:-1.872331em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.050005em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.3000050000000005em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.277669em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">(</span></span><span class=\"mord\"><span class=\"mord mathnormal\">h</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">θ</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">(</span></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.938em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">i</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">)</span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.938em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">i</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">)</span></span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3540079999999999em;\"><span style=\"top:-3.6029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span></span></span></p>\n</li>\n<li>\n<p>Gradient Descent</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><msub><mi>θ</mi><mi>j</mi></msub><mo>:</mo><mo>=</mo><msub><mi>θ</mi><mi>j</mi></msub><mo>−</mo><mi>α</mi><mfrac><mn>1</mn><mi>m</mi></mfrac><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></munderover><mrow><mo fence=\"true\">(</mo><msub><mi>h</mi><mi>θ</mi></msub><mrow><mo fence=\"true\">(</mo><msup><mi>x</mi><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow></msup><mo fence=\"true\">)</mo></mrow><mo>−</mo><msup><mi>y</mi><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow></msup><mo fence=\"true\">)</mo></mrow><msubsup><mi>x</mi><mi>j</mi><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow></msubsup></mrow><annotation encoding=\"application/x-tex\">\\theta_{j}:=\\theta_{j}-\\alpha \\frac{1}{m} \\sum_{i=1}^{m}\\left(h_{\\theta}\\left(x^{(i)}\\right)-y^{(i)}\\right) x_{j}^{(i)}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.980548em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.980548em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.929066em;vertical-align:-1.277669em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">m</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6513970000000002em;\"><span style=\"top:-1.872331em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.050005em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.3000050000000005em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.277669em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">(</span></span><span class=\"mord\"><span class=\"mord mathnormal\">h</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">θ</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">(</span></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.938em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">i</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">)</span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.938em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">i</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">)</span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.0448em;\"><span style=\"top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span style=\"top:-3.2198em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">i</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.412972em;\"><span></span></span></span></span></span></span></span></span></span></span></p>\n</li>\n</ul>\n<h4 id=\"特征缩放\"><a class=\"markdownIt-Anchor\" href=\"#特征缩放\">#</a> 特征缩放</h4>\n<p><a href=\"https://imgtu.com/i/HEbqUK\"><img src=\"https://s4.ax1x.com/2022/02/03/HEbqUK.png\" alt=\"特征缩放\"></a></p>\n<p>一般将特征量的取值收缩到 <code>-1</code>  到 <code>1</code>  之间</p>\n<p><a href=\"https://imgtu.com/i/HEq5i8\"><img src=\"https://s4.ax1x.com/2022/02/03/HEq5i8.png\" alt=\"特征缩放2\"></a></p>\n<h4 id=\"学习率\"><a class=\"markdownIt-Anchor\" href=\"#学习率\">#</a> 学习率</h4>\n<ul>\n<li>学习率过小会导致迭代算法过慢</li>\n<li>学习率过大会导致梯度下降冲过最低点</li>\n</ul>\n<p>可以通知绘制下降图像来调整学习率的值</p>\n<h3 id=\"正规方程\"><a class=\"markdownIt-Anchor\" href=\"#正规方程\">#</a> 正规方程</h3>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>θ</mi><mo>=</mo><msup><mrow><mo fence=\"true\">(</mo><msup><mi>X</mi><mi>T</mi></msup><mi>X</mi><mo fence=\"true\">)</mo></mrow><mrow><mo>−</mo><mn>1</mn></mrow></msup><msup><mi>X</mi><mi>T</mi></msup><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">\\theta=\\left(X^{T} X\\right)^{-1} X^{T} y\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.4453489999999998em;vertical-align:-0.35001em;\"></span><span class=\"minner\"><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">(</span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8913309999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">)</span></span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.0953389999999998em;\"><span style=\"top:-3.3442309999999997em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8913309999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span></span></p>\n<h2 id=\"octave语言\"><a class=\"markdownIt-Anchor\" href=\"#octave语言\">#</a> Octave 语言</h2>\n<h3 id=\"基本操作\"><a class=\"markdownIt-Anchor\" href=\"#基本操作\">#</a> 基本操作</h3>\n<h4 id=\"基本符号\"><a class=\"markdownIt-Anchor\" href=\"#基本符号\">#</a> 基本符号</h4>\n<ul>\n<li><code>+-*/</code>  加减乘除</li>\n<li><code>^</code>  次方    2^5 =32</li>\n<li><code>%</code>  注释</li>\n<li><code>==</code>  判等  <code>~=</code>  不等</li>\n<li><code>&amp;&amp;</code> ， <code>||</code> ， <code>xor( , )</code>  异或运算</li>\n<li><code>PS1('  ');</code>  改变 octave 提示符</li>\n<li><code>disp()</code>  打印在屏幕上</li>\n<li><code>;</code>  加在末尾阻止打印输出</li>\n<li><code>format</code>  输出默认  <code>format long</code>  默认打印<strong> long 型</strong>输出</li>\n<li><code>sqrt()</code>  根号</li>\n</ul>\n<h4 id=\"矩阵和向量-2\"><a class=\"markdownIt-Anchor\" href=\"#矩阵和向量-2\">#</a> 矩阵和向量</h4>\n<p>A=[1 2 ; 3 4 ; 5 6] 采用分号进行换行</p>\n<p>A = 1:0.1:2 // A 从 1 开始增加 0.1 一直到 2  A 是一个 10*1 的行向量</p>\n<ul>\n<li><code>ones(行,列)</code>  生成都是 1 的几行几列的矩阵</li>\n<li><code>zeros(行,列)</code>  生成都是 0 的几行几列的矩阵</li>\n<li><code>rand(行,列)</code>  生成都是随机数 (介于 0 和 1 之间) 的几行几列的矩阵</li>\n<li><code>randn(行,列)</code>  生成都是随机数 (随机数符合高斯分布) 的几行几列的矩阵</li>\n<li><code>hist()</code>  将矩阵打印成直方图</li>\n<li><code>eye()</code>  生成单位矩阵</li>\n<li><code>size()</code>  返回矩阵的大小  <code>size(,1)</code>  返回矩阵的行数 size (,2) 返回矩阵的列数</li>\n<li><code>length()</code>  返回向量的维数</li>\n</ul>\n<h4 id=\"移动数据\"><a class=\"markdownIt-Anchor\" href=\"#移动数据\">#</a> 移动数据</h4>\n<p><code>load()</code>  加载文件</p>\n<p><code>who</code>  显示当前加载的变量</p>\n<p><code>whos</code>  显示当前加载的变量和矩阵的更详细的信息</p>\n<p><code>clear()</code>  删除某个变量</p>\n<p><code>save 文件名 变量</code> 保存数据</p>\n<h4 id=\"使用数据\"><a class=\"markdownIt-Anchor\" href=\"#使用数据\">#</a> 使用数据</h4>\n<p><code>A(3,2)</code>  索引到 A 矩阵 3 行 2 列的数据</p>\n<p><code>A(3,:)</code> : 表示该行或者该列的全部数据 此表示 A 矩阵的第三行的全部数据</p>\n<p><code>A([1,2],:)</code>  索引到 A 的 1,2 行的全部数据</p>\n<p><code>A(:)</code>  把 A 中的所有数据放入一个列向量</p>\n<p><code>[A B]</code>  A B 矩阵横向排布组成新矩阵</p>\n<p><code>[A;B]</code>  A B 矩阵列向排布组成新矩阵</p>\n<h4 id=\"计算数据\"><a class=\"markdownIt-Anchor\" href=\"#计算数据\">#</a> 计算数据</h4>\n<ul>\n<li><code>*</code>  矩阵相乘</li>\n<li><code>.*</code>  矩阵中对应位置的数相乘</li>\n<li><code>log()</code>  取对数</li>\n<li><code>exp()</code>  以 e 为底的数</li>\n<li><code>abs()</code>  求绝对值</li>\n<li><code>A‘</code> A 的转置矩阵</li>\n<li><code>max()</code>  取矩阵中的最大数</li>\n<li><code>[A,B]= max(D)</code>  返回 A:D 中的最大数 B:D 中最大数的索引</li>\n<li><code>find()</code>  给出矩阵中符合条件的数的索引</li>\n<li><code>sum()</code>  求和  <code>prod()</code>  乘积  <code>floor()</code>  向下取整  <code>ceil()</code>  向上取整</li>\n<li><code>max(A,[],1)</code>  矩阵 A 中每列最大的数  <code>max(A,[],2)</code>  矩阵 A 中每行最大的数 1 为第一维度列 2 位第二维度行\n<ul>\n<li><code>pinv()</code>  对矩阵求伪逆矩阵</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"数据绘制\"><a class=\"markdownIt-Anchor\" href=\"#数据绘制\">#</a> 数据绘制</h4>\n<p><a href=\"https://imgtu.com/i/HvMbjA\"><img src=\"https://s4.ax1x.com/2022/02/21/HvMbjA.png\" alt=\"数据绘制步骤\"></a></p>\n<p><a href=\"https://imgtu.com/i/Hv1iT0\"><img src=\"https://s4.ax1x.com/2022/02/21/Hv1iT0.png\" alt=\"数据绘制步骤2\"></a></p>\n<ul>\n<li><code>plot(A,B)</code> : 以 A 向量中的数据为横轴，以 B 向量中的数据为纵轴绘制图像</li>\n<li><code>hold on</code> : 将图像保存在电脑屏幕上不会关闭，这样可以观看多个图像或者在一个图像上绘制多组数据</li>\n<li><code>xlabel('')</code> ， <code>ylabel('')</code>  给横轴和纵轴进行命名</li>\n<li><code>legend()</code> : 给图像中的线条加上名称</li>\n<li><code>title()</code>  给图像命名</li>\n<li><code>figure()</code>  给绘制出的图像标上序号</li>\n<li><code>subplot(1,2,1)</code>  将一张图分成一个 <code>1*2</code>  的格子，选择第一个格子</li>\n<li><code>axis([])</code> : 更改图像的横纵轴起始和结束的坐标</li>\n<li><code>clf</code> : 关闭所有图像</li>\n<li><code>imagesc()</code>  将矩阵用图像表示</li>\n</ul>\n<h2 id=\"分类\"><a class=\"markdownIt-Anchor\" href=\"#分类\">#</a> 分类</h2>\n<h3 id=\"logistic回归\"><a class=\"markdownIt-Anchor\" href=\"#logistic回归\">#</a> logistic 回归</h3>\n<p><strong>logistic 线性回归</strong>使得预测值在 <code>0</code>  和 1 之间</p>\n<p>这是一个<strong>分类算法</strong></p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><msub><mi>h</mi><mi>θ</mi></msub><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mfrac><mn>1</mn><mrow><mn>1</mn><mo>+</mo><msup><mi>e</mi><mrow><mo>−</mo><msup><mi>θ</mi><mi>T</mi></msup><mi>x</mi></mrow></msup></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">h_{\\theta}(x)=\\frac{1}{1+e^{-\\theta^{T} x}}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">h</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">θ</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.125635em;vertical-align:-0.804195em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.279135em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.830865em;\"><span style=\"top:-2.989em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7740928571428571em;\"><span style=\"top:-2.786em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span></span><span class=\"mord mathnormal mtight\">x</span></span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.804195em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p>\n<p><a href=\"https://imgtu.com/i/HzAQFH\"><img src=\"https://s4.ax1x.com/2022/02/22/HzAQFH.png\" alt=\"logistic函数\"></a></p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><msub><mi>h</mi><mi>θ</mi></msub><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>p</mi><mo stretchy=\"false\">(</mo><mi>y</mi><mo>=</mo><mn>1</mn><mo>∣</mo><mi>x</mi><mo separator=\"true\">;</mo><mi>θ</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">h_{\\theta}(x)=p(y=1 \\mid x ; \\theta)\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">h</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">θ</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">;</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<p>预测值处于 <code>0~1</code>  为结果为真的概率</p>\n<h3 id=\"决策界限\"><a class=\"markdownIt-Anchor\" href=\"#决策界限\">#</a> 决策界限</h3>\n<p><a href=\"https://imgtu.com/i/bSuwmn\"><img src=\"https://s4.ax1x.com/2022/02/22/bSuwmn.png\" alt=\"决策界限示例\"></a></p>\n<h3 id=\"代价函数\"><a class=\"markdownIt-Anchor\" href=\"#代价函数\">#</a> 代价函数</h3>\n<p><a href=\"https://imgtu.com/i/bSlfgO\"><img src=\"https://s4.ax1x.com/2022/02/22/bSlfgO.png\" alt=\"代价函数1\"></a></p>\n<h3 id=\"简化代价函数与梯度下降\"><a class=\"markdownIt-Anchor\" href=\"#简化代价函数与梯度下降\">#</a> 简化代价函数与梯度下降</h3>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>J</mi><mo stretchy=\"false\">(</mo><mi>θ</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mfrac><mn>1</mn><mi>m</mi></mfrac><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></munderover><mi mathvariant=\"normal\">Cost</mi><mo>⁡</mo><mrow><mo fence=\"true\">(</mo><msub><mi>h</mi><mi>θ</mi></msub><mrow><mo fence=\"true\">(</mo><msup><mi>x</mi><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow></msup><mo fence=\"true\">)</mo></mrow><mo separator=\"true\">,</mo><msup><mi>y</mi><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow></msup><mo fence=\"true\">)</mo></mrow></mrow><annotation encoding=\"application/x-tex\">J(\\theta)=\\frac{1}{m} \\sum_{i=1}^{m} \\operatorname{Cost}\\left(h_{\\theta}\\left(x^{(i)}\\right), y^{(i)}\\right)\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.09618em;\">J</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.929066em;vertical-align:-1.277669em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">m</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6513970000000002em;\"><span style=\"top:-1.872331em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.050005em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.3000050000000005em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.277669em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\"><span class=\"mord mathrm\">C</span><span class=\"mord mathrm\">o</span><span class=\"mord mathrm\">s</span><span class=\"mord mathrm\">t</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">(</span></span><span class=\"mord\"><span class=\"mord mathnormal\">h</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">θ</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">(</span></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.938em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">i</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">)</span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.938em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">i</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">)</span></span></span></span></span></span></span></p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi mathvariant=\"normal\">Cost</mi><mo>⁡</mo><mrow><mo fence=\"true\">(</mo><msub><mi>h</mi><mi>θ</mi></msub><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mi>y</mi><mo fence=\"true\">)</mo></mrow><mo>=</mo><mrow><mo fence=\"true\">{</mo><mtable rowspacing=\"0.24999999999999992em\" columnalign=\"right left\" columnspacing=\"0em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mo>−</mo><mi>log</mi><mo>⁡</mo><mrow><mo fence=\"true\">(</mo><msub><mi>h</mi><mi>θ</mi></msub><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo fence=\"true\">)</mo></mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mtext>&nbsp;if&nbsp;</mtext><mi>y</mi><mo>=</mo><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mo>−</mo><mi>log</mi><mo>⁡</mo><mrow><mo fence=\"true\">(</mo><mn>1</mn><mo>−</mo><msub><mi>h</mi><mi>θ</mi></msub><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo fence=\"true\">)</mo></mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mtext>&nbsp;if&nbsp;</mtext><mi>y</mi><mo>=</mo><mn>0</mn></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding=\"application/x-tex\">\\operatorname{Cost}\\left(h_{\\theta}(x), y\\right)=\\left\\{\\begin{aligned}\n-\\log \\left(h_{\\theta}(x)\\right) &amp; \\text { if } y=1 \\\\\n-\\log \\left(1-h_{\\theta}(x)\\right) &amp; \\text { if } y=0\n\\end{aligned}\\right.\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\"><span class=\"mord mathrm\">C</span><span class=\"mord mathrm\">o</span><span class=\"mord mathrm\">s</span><span class=\"mord mathrm\">t</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">h</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">θ</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose delimcenter\" style=\"top:0em;\">)</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:3.00003em;vertical-align:-1.25003em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size4\">{</span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-r\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.7500000000000002em;\"><span style=\"top:-3.91em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">h</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">θ</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mclose delimcenter\" style=\"top:0em;\">)</span></span></span></span><span style=\"top:-2.41em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">h</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">θ</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mclose delimcenter\" style=\"top:0em;\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.2500000000000002em;\"><span></span></span></span></span></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.7500000000000002em;\"><span style=\"top:-3.91em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mord text\"><span class=\"mord\">&nbsp;if&nbsp;</span></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\">1</span></span></span><span style=\"top:-2.41em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mord text\"><span class=\"mord\">&nbsp;if&nbsp;</span></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.2500000000000002em;\"><span></span></span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mtable rowspacing=\"0.24999999999999992em\" columnalign=\"right left\" columnspacing=\"0em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mi>J</mi><mo stretchy=\"false\">(</mo><mi>θ</mi><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mfrac><mn>1</mn><mi>m</mi></mfrac><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></munderover><mi mathvariant=\"normal\">Cost</mi><mo>⁡</mo><mrow><mo fence=\"true\">(</mo><msub><mi>h</mi><mi>θ</mi></msub><mrow><mo fence=\"true\">(</mo><msup><mi>x</mi><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow></msup><mo fence=\"true\">)</mo></mrow><mo separator=\"true\">,</mo><msup><mi>y</mi><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow></msup><mo fence=\"true\">)</mo></mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mo>−</mo><mfrac><mn>1</mn><mi>m</mi></mfrac><mrow><mo fence=\"true\">[</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></munderover><msup><mi>y</mi><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow></msup><mi>log</mi><mo>⁡</mo><msub><mi>h</mi><mi>θ</mi></msub><mrow><mo fence=\"true\">(</mo><msup><mi>x</mi><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow></msup><mo fence=\"true\">)</mo></mrow><mo>+</mo><mrow><mo fence=\"true\">(</mo><mn>1</mn><mo>−</mo><msup><mi>y</mi><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow></msup><mo fence=\"true\">)</mo></mrow><mi>log</mi><mo>⁡</mo><mrow><mo fence=\"true\">(</mo><mn>1</mn><mo>−</mo><msub><mi>h</mi><mi>θ</mi></msub><mrow><mo fence=\"true\">(</mo><msup><mi>x</mi><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow></msup><mo fence=\"true\">)</mo></mrow><mo fence=\"true\">)</mo></mrow><mo fence=\"true\">]</mo></mrow></mrow></mstyle></mtd></mtr></mtable><annotation encoding=\"application/x-tex\">\\begin{aligned}\nJ(\\theta) &amp;=\\frac{1}{m} \\sum_{i=1}^{m} \\operatorname{Cost}\\left(h_{\\theta}\\left(x^{(i)}\\right), y^{(i)}\\right) \\\\\n&amp;=-\\frac{1}{m}\\left[\\sum_{i=1}^{m} y^{(i)} \\log h_{\\theta}\\left(x^{(i)}\\right)+\\left(1-y^{(i)}\\right) \\log \\left(1-h_{\\theta}\\left(x^{(i)}\\right)\\right)\\right]\n\\end{aligned}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:6.556735000000001em;vertical-align:-3.0283675em;\"></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-r\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.5283675000000008em;\"><span style=\"top:-5.6269705000000005em;\"><span class=\"pstrut\" style=\"height:3.75em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.09618em;\">J</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mclose\">)</span></span></span><span style=\"top:-2.2993015000000003em;\"><span class=\"pstrut\" style=\"height:3.75em;\"></span><span class=\"mord\"></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.0283675em;\"><span></span></span></span></span></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.5283675000000008em;\"><span style=\"top:-5.6269705000000005em;\"><span class=\"pstrut\" style=\"height:3.75em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">m</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6513970000000002em;\"><span style=\"top:-1.872331em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.050005em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.3000050000000005em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.277669em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\"><span class=\"mord mathrm\">C</span><span class=\"mord mathrm\">o</span><span class=\"mord mathrm\">s</span><span class=\"mord mathrm\">t</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">(</span></span><span class=\"mord\"><span class=\"mord mathnormal\">h</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">θ</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">(</span></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.938em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">i</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">)</span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.938em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">i</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">)</span></span></span></span></span><span style=\"top:-2.2993015000000003em;\"><span class=\"pstrut\" style=\"height:3.75em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\">−</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">m</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size4\">[</span></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6513970000000002em;\"><span style=\"top:-1.872331em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.050005em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.3000050000000005em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.277669em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.938em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">i</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">h</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">θ</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">(</span></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.938em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">i</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">)</span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">(</span></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.938em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">i</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">)</span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">(</span></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">h</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">θ</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">(</span></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.938em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">i</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">)</span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">)</span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size4\">]</span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.0283675em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<h3 id=\"高级优化\"><a class=\"markdownIt-Anchor\" href=\"#高级优化\">#</a> 高级优化</h3>\n<p><a href=\"https://imgtu.com/i/bSGZM8\"><img src=\"https://s4.ax1x.com/2022/02/22/bSGZM8.png\" alt=\"优化算法\"></a></p>\n<h3 id=\"多元分类一对多\"><a class=\"markdownIt-Anchor\" href=\"#多元分类一对多\">#</a> 多元分类：一对多</h3>\n<p><a href=\"https://imgtu.com/i/bSYhxP\"><img src=\"https://s4.ax1x.com/2022/02/22/bSYhxP.png\" alt=\"一对多多元分类\"></a></p>\n<h2 id=\"过拟合问题\"><a class=\"markdownIt-Anchor\" href=\"#过拟合问题\">#</a> 过拟合问题</h2>\n<p><a href=\"https://imgtu.com/i/b91lR0\"><img src=\"https://s4.ax1x.com/2022/02/23/b91lR0.png\" alt=\"过拟合问题解决方法\"></a></p>\n<h3 id=\"正则化解决过拟合问题\"><a class=\"markdownIt-Anchor\" href=\"#正则化解决过拟合问题\">#</a> 正则化解决过拟合问题</h3>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>J</mi><mo stretchy=\"false\">(</mo><mi>θ</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mfrac><mn>1</mn><mrow><mn>2</mn><mi>m</mi></mrow></mfrac><mrow><mo fence=\"true\">[</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></munderover><msup><mrow><mo fence=\"true\">(</mo><msub><mi>h</mi><mi>θ</mi></msub><mrow><mo fence=\"true\">(</mo><msup><mi>x</mi><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow></msup><mo fence=\"true\">)</mo></mrow><mo>−</mo><msup><mi>y</mi><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow></msup><mo fence=\"true\">)</mo></mrow><mn>2</mn></msup><mo>+</mo><mi>λ</mi><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><msubsup><mi>θ</mi><mi>j</mi><mn>2</mn></msubsup><mo fence=\"true\">]</mo></mrow></mrow><annotation encoding=\"application/x-tex\">J(\\theta)=\\frac{1}{2 m}\\left[\\sum_{i=1}^{m}\\left(h_{\\theta}\\left(x^{(i)}\\right)-y^{(i)}\\right)^{2}+\\lambda \\sum_{j=1}^{n} \\theta_{j}^{2}\\right]\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.09618em;\">J</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:3.1637769999999996em;vertical-align:-1.4137769999999998em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"mord mathnormal\">m</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size4\">[</span></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6513970000000002em;\"><span style=\"top:-1.872331em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.050005em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.3000050000000005em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.277669em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">(</span></span><span class=\"mord\"><span class=\"mord mathnormal\">h</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">θ</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">(</span></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.938em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">i</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">)</span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.938em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">i</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">)</span></span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3540079999999999em;\"><span style=\"top:-3.6029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\">λ</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6513970000000007em;\"><span style=\"top:-1.872331em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.050005em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.3000050000000005em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.4137769999999998em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.864108em;\"><span style=\"top:-2.4530000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span style=\"top:-3.1130000000000004em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.383108em;\"><span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size4\">]</span></span></span></span></span></span></span></p>\n<p>寻找到合适的 <code>λ</code>  是关键</p>\n<h4 id=\"线性回归的正则化\"><a class=\"markdownIt-Anchor\" href=\"#线性回归的正则化\">#</a> 线性回归的正则化</h4>\n<ol>\n<li>\n<p>梯度下降 (对 <code>θ0</code>  不进行正则化)</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><msub><mi>θ</mi><mi>j</mi></msub><mo>:</mo><mo>=</mo><msub><mi>θ</mi><mi>j</mi></msub><mrow><mo fence=\"true\">(</mo><mn>1</mn><mo>−</mo><mi>α</mi><mfrac><mi>λ</mi><mi>m</mi></mfrac><mo fence=\"true\">)</mo></mrow><mo>−</mo><mi>α</mi><mfrac><mn>1</mn><mi>m</mi></mfrac><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></munderover><mrow><mo fence=\"true\">(</mo><msub><mi>h</mi><mi>θ</mi></msub><mrow><mo fence=\"true\">(</mo><msup><mi>x</mi><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow></msup><mo fence=\"true\">)</mo></mrow><mo>−</mo><msup><mi>y</mi><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow></msup><mo fence=\"true\">)</mo></mrow><msubsup><mi>x</mi><mi>j</mi><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow></msubsup></mrow><annotation encoding=\"application/x-tex\">\\theta_{j}:=\\theta_{j}\\left(1-\\alpha \\frac{\\lambda}{m}\\right)-\\alpha \\frac{1}{m} \\sum_{i=1}^{m}\\left(h_{\\theta}\\left(x^{(i)}\\right)-y^{(i)}\\right) x_{j}^{(i)}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.980548em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.40003em;vertical-align:-0.95003em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">(</span></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.37144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">m</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">λ</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">)</span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.929066em;vertical-align:-1.277669em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">m</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6513970000000002em;\"><span style=\"top:-1.872331em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.050005em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.3000050000000005em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.277669em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">(</span></span><span class=\"mord\"><span class=\"mord mathnormal\">h</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">θ</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">(</span></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.938em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">i</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">)</span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.938em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">i</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">)</span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.0448em;\"><span style=\"top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span style=\"top:-3.2198em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">i</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.412972em;\"><span></span></span></span></span></span></span></span></span></span></span></p>\n</li>\n<li>\n<p>正规方程</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>θ</mi><mo>=</mo><msup><mrow><mo fence=\"true\">(</mo><msup><mi>X</mi><mi>T</mi></msup><mi>X</mi><mo>+</mo><mi>λ</mi><mrow><mo fence=\"true\">[</mo><mtable rowspacing=\"0.15999999999999992em\" columnalign=\"left left left left\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mo lspace=\"0em\" rspace=\"0em\">⋱</mo></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence=\"true\">]</mo></mrow><mo fence=\"true\">)</mo></mrow><mrow><mo>−</mo><mn>1</mn></mrow></msup><msup><mi>X</mi><mi>T</mi></msup><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">\\theta=\\left(X^{T} X+\\lambda\\left[\\begin{array}{llll}\n0 &amp; 1 &amp; &amp; \\\\\n&amp; 1 &amp; 1 &amp; &amp; \\\\\n&amp; &amp; &amp; \\ddots &amp; \\\\\n&amp; &amp; &amp; &amp; 1\n\\end{array}\\right]\\right)^{-1} X^{T} y\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:5.007038em;vertical-align:-2.15003em;\"></span><span class=\"minner\"><span class=\"minner\"><span class=\"mopen\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.6500299999999997em;\"><span style=\"top:-1.6499900000000003em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎝</span></span></span><span style=\"top:-2.8000000000000003em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎜</span></span></span><span style=\"top:-3.39501em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎜</span></span></span><span style=\"top:-3.41001em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎜</span></span></span><span style=\"top:-4.65003em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎛</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.15003em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8913309999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\">λ</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.6529999999999996em;\"><span style=\"top:-1.6499900000000003em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎣</span></span></span><span style=\"top:-2.79999em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-3.3959900000000003em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-3.4119800000000002em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-4.653em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎡</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.15003em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.6500000000000004em;\"><span style=\"top:-4.8100000000000005em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span></span></span><span style=\"top:-3.61em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"></span></span><span style=\"top:-2.4099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"></span></span><span style=\"top:-1.2099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.1500000000000004em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.6500000000000004em;\"><span style=\"top:-4.8100000000000005em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span><span style=\"top:-3.61em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span><span style=\"top:-2.4099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"></span></span><span style=\"top:-1.2099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.1500000000000004em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.6500000000000004em;\"><span style=\"top:-4.8100000000000005em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"></span></span><span style=\"top:-3.61em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span><span style=\"top:-2.4099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"></span></span><span style=\"top:-1.2099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.1500000000000004em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.6500000000000004em;\"><span style=\"top:-4.8100000000000005em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"></span></span><span style=\"top:-3.61em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"></span></span><span style=\"top:-2.4099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"minner\">⋱</span></span></span><span style=\"top:-1.2099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.1500000000000004em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.4500000000000004em;\"><span style=\"top:-3.6100000000000003em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"></span></span><span style=\"top:-2.4099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"></span></span><span style=\"top:-1.2099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.1500000000000004em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span></span></span><span class=\"mclose\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.6529999999999996em;\"><span style=\"top:-1.6499900000000003em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎦</span></span></span><span style=\"top:-2.79999em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-3.3959900000000003em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-3.4119800000000002em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-4.653em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎤</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.15003em;\"><span></span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.6500299999999997em;\"><span style=\"top:-1.6499900000000003em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎠</span></span></span><span style=\"top:-2.8000000000000003em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎟</span></span></span><span style=\"top:-3.39501em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎟</span></span></span><span style=\"top:-3.41001em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎟</span></span></span><span style=\"top:-4.65003em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎞</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.15003em;\"><span></span></span></span></span></span></span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.8570079999999995em;\"><span style=\"top:-5.105899999999999em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8913309999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span></span></p>\n<p>当 <code>λ</code> &gt;0 时，此处这个矩阵一定是可逆的</p>\n</li>\n</ol>\n<h4 id=\"逻辑回归的正则化\"><a class=\"markdownIt-Anchor\" href=\"#逻辑回归的正则化\">#</a> 逻辑回归的正则化</h4>\n<ol>\n<li>梯度下降</li>\n</ol>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><msub><mi>θ</mi><mi>j</mi></msub><mo>:</mo><mo>=</mo><msub><mi>θ</mi><mi>j</mi></msub><mo>−</mo><mi>α</mi><mrow><mo fence=\"true\">[</mo><mfrac><mn>1</mn><mi>m</mi></mfrac><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></munderover><mrow><mo fence=\"true\">(</mo><munder accentunder=\"true\"><mrow><msub><mi>h</mi><mi>θ</mi></msub><mrow><mo fence=\"true\">(</mo><msup><mi>x</mi><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow></msup><mo fence=\"true\">)</mo></mrow></mrow><mo stretchy=\"true\">‾</mo></munder><mo>−</mo><msup><mi>y</mi><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow></msup><mo fence=\"true\">)</mo></mrow><msubsup><mi>x</mi><mi>j</mi><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow></msubsup><mo>+</mo><mfrac><mi>λ</mi><mi>m</mi></mfrac><msub><mi>θ</mi><mi>j</mi></msub><mo fence=\"true\">]</mo></mrow></mrow><annotation encoding=\"application/x-tex\">\\theta_{j}:=\\theta_{j}-\\alpha\\left[\\frac{1}{m} \\sum_{i=1}^{m}\\left(\\underline{h_{\\theta}\\left(x^{(i)}\\right)}-y^{(i)}\\right) x_{j}^{(i)}+\\frac{\\lambda}{m} \\theta_{j}\\right]\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.980548em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.980548em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:3.027669em;vertical-align:-1.277669em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size4\">[</span></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">m</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6513970000000002em;\"><span style=\"top:-1.872331em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.050005em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.3000050000000005em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.277669em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">(</span></span><span class=\"mord underline\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.15em;\"><span style=\"top:-2.3399799999999997em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"underline-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.15em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\">h</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">θ</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">(</span></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.938em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">i</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">)</span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8500200000000001em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.938em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">i</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">)</span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.0448em;\"><span style=\"top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span style=\"top:-3.2198em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">i</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.412972em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.37144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">m</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">λ</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size4\">]</span></span></span></span></span></span></span></p>\n<p>与线性回归不同的是，这里的 <code>h(x)</code>  不同</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><msub><mi>h</mi><mi>θ</mi></msub><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mfrac><mn>1</mn><mrow><mn>1</mn><mo>+</mo><msup><mi>e</mi><mrow><mo>−</mo><msup><mi>θ</mi><mi mathvariant=\"normal\">⊤</mi></msup><mi>x</mi></mrow></msup></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">h_{\\theta}(x)=\\frac{1}{1+e^{-\\theta^{\\top} x}}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">h</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">θ</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.13119em;vertical-align:-0.80975em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.27358em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8364199999999999em;\"><span style=\"top:-2.989em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7820285714285713em;\"><span style=\"top:-2.786em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">⊤</span></span></span></span></span></span></span></span></span><span class=\"mord mathnormal mtight\">x</span></span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.80975em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p>\n<ol start=\"2\">\n<li>优化算法</li>\n</ol>\n<p><a href=\"https://imgtu.com/i/b9YqGd\"><img src=\"https://s4.ax1x.com/2022/02/23/b9YqGd.png\" alt=\"优化算法\"></a></p>\n<h2 id=\"神经网络\"><a class=\"markdownIt-Anchor\" href=\"#神经网络\">#</a> 神经网络</h2>\n<p>神经网络通常三层结构组成</p>\n<ul>\n<li>输入层</li>\n<li>隐藏层</li>\n<li>输出层</li>\n</ul>\n<p>从输入层输入数据并且不断向前输出，最后从输出层输出数据</p>\n<h3 id=\"神经网络模型1\"><a class=\"markdownIt-Anchor\" href=\"#神经网络模型1\">#</a> 神经网络模型 1</h3>\n<p><a href=\"https://imgtu.com/i/bPZUiV\"><img src=\"https://s4.ax1x.com/2022/02/23/bPZUiV.png\" alt=\"神经网络模型1\"></a></p>\n<p><a href=\"https://imgtu.com/i/bPeeOJ\"><img src=\"https://s4.ax1x.com/2022/02/23/bPeeOJ.png\" alt=\"神经网络模型2\"></a></p>\n<p><a href=\"https://imgtu.com/i/bPnwz8\"><img src=\"https://s4.ax1x.com/2022/02/23/bPnwz8.png\" alt=\"神经网络运行原理\"></a></p>\n<h3 id=\"神经网络模型2\"><a class=\"markdownIt-Anchor\" href=\"#神经网络模型2\">#</a> 神经网络模型 2</h3>\n<p>对神经网络模型 1 的向前推进过程进行向量化计算</p>\n<h3 id=\"神经网络示例\"><a class=\"markdownIt-Anchor\" href=\"#神经网络示例\">#</a> 神经网络示例</h3>\n<p><a href=\"https://imgtu.com/i/bPQBhn\"><img src=\"https://s4.ax1x.com/2022/02/23/bPQBhn.png\" alt=\"神经网络示例\"></a></p>\n<h3 id=\"利用神经网络识别多元分类问题\"><a class=\"markdownIt-Anchor\" href=\"#利用神经网络识别多元分类问题\">#</a> 利用神经网络识别多元分类问题</h3>\n<p><a href=\"https://imgtu.com/i/bPl7Ps\"><img src=\"https://s4.ax1x.com/2022/02/23/bPl7Ps.png\" alt=\"神经网络识别多元分类\"></a></p>\n<h3 id=\"神经网络代价函数\"><a class=\"markdownIt-Anchor\" href=\"#神经网络代价函数\">#</a> 神经网络代价函数</h3>\n<p><a href=\"https://imgtu.com/i/bKu55t\"><img src=\"https://s4.ax1x.com/2022/02/28/bKu55t.png\" alt=\"神经网络分类问题\"></a></p>\n<p><a href=\"https://imgtu.com/i/bKMx3V\"><img src=\"https://s4.ax1x.com/2022/02/28/bKMx3V.png\" alt=\"神经网络代价函数\"></a></p>\n<h4 id=\"反向传播算法\"><a class=\"markdownIt-Anchor\" href=\"#反向传播算法\">#</a> 反向传播算法</h4>\n<p><a href=\"https://imgtu.com/i/bK8vOf\"><img src=\"https://s4.ax1x.com/2022/02/28/bK8vOf.png\" alt=\"反向传播算法\"></a></p>\n<p><a href=\"https://imgtu.com/i/bKtpTO\"><img src=\"https://s4.ax1x.com/2022/02/28/bKtpTO.png\" alt=\"反向传播算法程序设计\"></a></p>\n<p><a href=\"https://imgtu.com/i/bKakp4\"><img src=\"https://s4.ax1x.com/2022/02/28/bKakp4.png\" alt=\"反向传播\"></a></p>\n<h4 id=\"使用注意展开参数\"><a class=\"markdownIt-Anchor\" href=\"#使用注意展开参数\">#</a> 使用注意：展开参数</h4>\n<p><a href=\"https://imgtu.com/i/bKwTTx\"><img src=\"https://s4.ax1x.com/2022/02/28/bKwTTx.png\" alt=\"展开参数\"></a></p>\n<p>注意 <code>reshape</code>  指令的正确使用</p>\n<p><a href=\"https://imgtu.com/i/bKBMqA\"><img src=\"https://s4.ax1x.com/2022/02/28/bKBMqA.png\" alt=\"反向传播的算法实现\"></a></p>\n<h4 id=\"梯度检测\"><a class=\"markdownIt-Anchor\" href=\"#梯度检测\">#</a> 梯度检测</h4>\n<p><a href=\"https://imgtu.com/i/bKrcDJ\"><img src=\"https://s4.ax1x.com/2022/02/28/bKrcDJ.png\" alt=\"导数计算\"></a></p>\n<p><a href=\"https://imgtu.com/i/bKsJG6\"><img src=\"https://s4.ax1x.com/2022/02/28/bKsJG6.png\" alt=\"偏导数计算\"></a></p>\n<p><a href=\"https://imgtu.com/i/bKsOL4\"><img src=\"https://s4.ax1x.com/2022/02/28/bKsOL4.png\" alt=\"梯度检测的代码实现\"></a></p>\n<p><a href=\"https://imgtu.com/i/bKy06U\"><img src=\"https://s4.ax1x.com/2022/02/28/bKy06U.png\" alt=\"神经网格反向传播算法梯度下降的整体步骤\"></a></p>\n<h4 id=\"随机初始化\"><a class=\"markdownIt-Anchor\" href=\"#随机初始化\">#</a> 随机初始化</h4>\n<p><a href=\"https://imgtu.com/i/bKcKsS\"><img src=\"https://s4.ax1x.com/2022/02/28/bKcKsS.png\" alt=\"随机初始化\"></a></p>\n<h3 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\">#</a> 总结</h3>\n<p>选择神经网络模型，当选择多个隐藏层时，每个隐藏层中的隐藏单元的数目应该<strong>相同</strong></p>\n<p>默认情况下，选择一个隐藏单元</p>\n<p>隐藏单元的数目越多越好，但是当隐藏单元的数目过多时，计算量将会变得非常大</p>\n<p><a href=\"https://imgtu.com/i/bKWO9s\"><img src=\"https://s4.ax1x.com/2022/02/28/bKWO9s.png\" alt=\"神经网络总结1\"></a></p>\n<p><a href=\"https://imgtu.com/i/bKfOaD\"><img src=\"https://s4.ax1x.com/2022/02/28/bKfOaD.png\" alt=\"神经网络模型总结2\"></a></p>\n<h2 id=\"debugging\"><a class=\"markdownIt-Anchor\" href=\"#debugging\">#</a> Debugging</h2>\n<h3 id=\"机器学习诊断法\"><a class=\"markdownIt-Anchor\" href=\"#机器学习诊断法\">#</a> 机器学习诊断法</h3>\n<h4 id=\"评估假设\"><a class=\"markdownIt-Anchor\" href=\"#评估假设\">#</a> 评估假设</h4>\n<ol>\n<li>\n<p>选择训练集中的 70% 作为新的训练集，剩下的 30% 作为测试集</p>\n</li>\n<li>\n<p>利用新的训练集计算出 <code>θ</code>  的值</p>\n</li>\n<li>\n<p>利用测试机来进行测试</p>\n</li>\n<li>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><msub><mi>J</mi><mtext>test&nbsp;</mtext></msub><mo stretchy=\"false\">(</mo><mi>θ</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mo>−</mo><mfrac><mn>1</mn><msub><mi>m</mi><mtext>test&nbsp;</mtext></msub></mfrac><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><msub><mi>m</mi><mtext>test&nbsp;</mtext></msub></munderover><msubsup><mi>y</mi><mtext>test&nbsp;</mtext><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow></msubsup><mi>log</mi><mo>⁡</mo><msub><mi>h</mi><mi>θ</mi></msub><mrow><mo fence=\"true\">(</mo><msubsup><mi>x</mi><mtext>test&nbsp;</mtext><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow></msubsup><mo fence=\"true\">)</mo></mrow><mo>+</mo><mrow><mo fence=\"true\">(</mo><mn>1</mn><mo>−</mo><msubsup><mi>y</mi><mtext>test&nbsp;</mtext><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow></msubsup><mo fence=\"true\">)</mo></mrow><mi>log</mi><mo>⁡</mo><msub><mi>h</mi><mi>θ</mi></msub><mrow><mo fence=\"true\">(</mo><msubsup><mi>x</mi><mtext>test&nbsp;</mtext><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow></msubsup><mo fence=\"true\">)</mo></mrow></mrow><annotation encoding=\"application/x-tex\">J_{\\text {test }}(\\theta)=-\\frac{1}{m_{\\text {test }}} \\sum_{i=1}^{m_{\\text {test }}} y_{\\text {test }}^{(i)} \\log h_{\\theta}\\left(x_{\\text {test }}^{(i)}\\right)+\\left(1-y_{\\text {test }}^{(i)}\\right) \\log h_{\\theta}\\left(x_{\\text {test }}^{(i)}\\right)\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.09618em;\">J</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2805559999999999em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.09618em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord text mtight\"><span class=\"mord mtight\">test&nbsp;</span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.9401660000000005em;vertical-align:-1.277669em;\"></span><span class=\"mord\">−</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.3139999999999996em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\">m</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2805559999999999em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord text mtight\"><span class=\"mord mtight\">test&nbsp;</span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8360000000000001em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6624970000000003em;\"><span style=\"top:-1.872331em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.050005em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.311105em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">m</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29634285714285713em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord text mtight\"><span class=\"mord mtight\">test&nbsp;</span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.277669em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.0448em;\"><span style=\"top:-2.454244em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord text mtight\"><span class=\"mord mtight\">test&nbsp;</span></span></span></span></span><span style=\"top:-3.2198em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">i</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24575599999999997em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">h</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">θ</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">(</span></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.0448em;\"><span style=\"top:-2.454244em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord text mtight\"><span class=\"mord mtight\">test&nbsp;</span></span></span></span></span><span style=\"top:-3.2198em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">i</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24575599999999997em;\"><span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">)</span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.80002em;vertical-align:-0.65002em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">(</span></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.0448em;\"><span style=\"top:-2.454244em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord text mtight\"><span class=\"mord mtight\">test&nbsp;</span></span></span></span></span><span style=\"top:-3.2198em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">i</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24575599999999997em;\"><span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">)</span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">h</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">θ</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">(</span></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.0448em;\"><span style=\"top:-2.454244em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord text mtight\"><span class=\"mord mtight\">test&nbsp;</span></span></span></span></span><span style=\"top:-3.2198em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">i</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24575599999999997em;\"><span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">)</span></span></span></span></span></span></span></p>\n</li>\n<li>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><msub><mi>J</mi><mtext>test&nbsp;</mtext></msub><mo stretchy=\"false\">(</mo><mi>θ</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mfrac><mn>1</mn><mrow><mn>2</mn><msub><mi>m</mi><mtext>test&nbsp;</mtext></msub></mrow></mfrac><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mtext>Mtest&nbsp;</mtext></munderover><msup><mrow><mo fence=\"true\">(</mo><msub><mi>h</mi><mi>θ</mi></msub><mrow><mo fence=\"true\">(</mo><msubsup><mi>x</mi><mtext>test&nbsp;</mtext><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow></msubsup><mo fence=\"true\">)</mo></mrow><mo>−</mo><msubsup><mi>y</mi><mtext>test&nbsp;</mtext><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow></msubsup><mo fence=\"true\">)</mo></mrow><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">J_{\\text {test }}(\\theta)=\\frac{1}{2 m_{\\text {test }}} \\sum_{i=1}^{\\text {Mtest }}\\left(h_{\\theta}\\left(x_{\\text {test }}^{(i)}\\right)-y_{\\text {test }}^{(i)}\\right)^{2}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.09618em;\">J</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2805559999999999em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.09618em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord text mtight\"><span class=\"mord mtight\">test&nbsp;</span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:3.106005em;vertical-align:-1.277669em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.3139999999999996em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"mord\"><span class=\"mord mathnormal\">m</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2805559999999999em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord text mtight\"><span class=\"mord mtight\">test&nbsp;</span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8360000000000001em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.8283360000000002em;\"><span style=\"top:-1.872331em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.050005em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.3000050000000005em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord text mtight\"><span class=\"mord mtight\">Mtest&nbsp;</span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.277669em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">(</span></span><span class=\"mord\"><span class=\"mord mathnormal\">h</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">θ</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">(</span></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.0448em;\"><span style=\"top:-2.454244em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord text mtight\"><span class=\"mord mtight\">test&nbsp;</span></span></span></span></span><span style=\"top:-3.2198em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">i</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24575599999999997em;\"><span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">)</span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.0448em;\"><span style=\"top:-2.454244em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord text mtight\"><span class=\"mord mtight\">test&nbsp;</span></span></span></span></span><span style=\"top:-3.2198em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">i</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24575599999999997em;\"><span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">)</span></span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3540079999999999em;\"><span style=\"top:-3.6029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span></span></span></p>\n</li>\n</ol>\n<p>第 4 点中公式可能有<strong>括号问题</strong>，等待求证中</p>\n<h4 id=\"模型选择和训练验证测试集\"><a class=\"markdownIt-Anchor\" href=\"#模型选择和训练验证测试集\">#</a> 模型选择和训练验证测试集</h4>\n<ol>\n<li>\n<p>模型选择</p>\n<p>按照 6:2:2 的比例将训练集分成三部分：训练集，测试集，验证集</p>\n</li>\n<li>\n<p><a href=\"https://imgtu.com/i/bQQgr8\"><img src=\"https://s4.ax1x.com/2022/03/01/bQQgr8.png\" alt=\"模型选择\"></a></p>\n</li>\n<li>\n<p>对训练集进行拟合算出每一种假设下的 <code>θ</code>  值</p>\n</li>\n<li>\n<p>通过 <code>θ</code>  计算出交叉误差，选择交叉误差最小的作为选择的模型</p>\n<p><a href=\"https://imgtu.com/i/bQ8Zi4\"><img src=\"https://s4.ax1x.com/2022/03/01/bQ8Zi4.png\" alt=\"误差计算公式\"></a></p>\n</li>\n<li>\n<p>利用验证集计算出泛化误差</p>\n</li>\n<li>\n<p>新参数 <code>d</code> , 表示最高次方的次方数</p>\n</li>\n</ol>\n<h4 id=\"诊断-偏差和方差\"><a class=\"markdownIt-Anchor\" href=\"#诊断-偏差和方差\">#</a> 诊断 - 偏差和方差</h4>\n<p><a href=\"https://imgtu.com/i/bQ3VgI\"><img src=\"https://s4.ax1x.com/2022/03/01/bQ3VgI.png\" alt=\"诊断-误差与方差\"></a></p>\n<h4 id=\"正则化和偏差方差\"><a class=\"markdownIt-Anchor\" href=\"#正则化和偏差方差\">#</a> 正则化和偏差方差</h4>\n<p><a href=\"https://imgtu.com/i/bQGipd\"><img src=\"https://s4.ax1x.com/2022/03/01/bQGipd.png\" alt=\"λ的选择\"></a></p>\n<p><a href=\"https://imgtu.com/i/bQJ3Pe\"><img src=\"https://s4.ax1x.com/2022/03/01/bQJ3Pe.png\" alt=\"正则化参数选择图像\"></a></p>\n<p>观察图像的变化，选择两条曲线最接近的<strong>最低点</strong></p>\n<h4 id=\"学习曲线\"><a class=\"markdownIt-Anchor\" href=\"#学习曲线\">#</a> 学习曲线</h4>\n<ol>\n<li>\n<p>高方差学习曲线 (<strong>过拟合</strong>)</p>\n<p><a href=\"https://imgtu.com/i/blZ7dA\"><img src=\"https://s4.ax1x.com/2022/03/01/blZ7dA.png\" alt=\"高方差学习曲线\"></a></p>\n<p>在一定范围内，交叉误差曲线和训练误差曲线之间存在着较远的一段距离</p>\n</li>\n<li>\n<p>高偏差学习曲线</p>\n<p><a href=\"https://imgtu.com/i/bln3rD\"><img src=\"https://s4.ax1x.com/2022/03/01/bln3rD.png\" alt=\"高偏差学习曲线\"></a></p>\n</li>\n</ol>\n<h3 id=\"总结-2\"><a class=\"markdownIt-Anchor\" href=\"#总结-2\">#</a> 总结</h3>\n<ol>\n<li>\n<p>解决高方差</p>\n<ul>\n<li>取得更多的样本集 (拟合度不够</li>\n<li>减少特征量的数目 (可能过拟合)</li>\n<li>增加 <code>λ</code>  的值 (可能过拟合)</li>\n</ul>\n</li>\n<li>\n<p>解决高偏差</p>\n<ul>\n<li>增加额外的特征量</li>\n<li>增加特征量的平方数</li>\n<li>减少 <code>λ</code>  的值</li>\n</ul>\n</li>\n</ol>\n",
            "tags": [
                "机器学习"
            ]
        }
    ]
}